
robotore_v2.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash2 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000e210  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000388  08016210  08016210  00026210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08016598  08016598  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  08016598  08016598  00026598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080165a0  080165a0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080165a0  080165a0  000265a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080165a4  080165a4  000265a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  080165a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000144c4  200001e8  08016790  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200146ac  08016790  000346ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cf66  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004048  00000000  00000000  0004d17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001700  00000000  00000000  000511c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001550  00000000  00000000  000528c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024047  00000000  00000000  00053e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014da0  00000000  00000000  00077e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000ca715  00000000  00000000  0008cbff  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00157314  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e90  00000000  00000000  00157390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	080161f8 	.word	0x080161f8

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	080161f8 	.word	0x080161f8

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	733b      	strb	r3, [r7, #12]
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8008dca:	f107 020c 	add.w	r2, r7, #12
 8008dce:	2364      	movs	r3, #100	; 0x64
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	217c      	movs	r1, #124	; 0x7c
 8008dd6:	4803      	ldr	r0, [pc, #12]	; (8008de4 <lcd_cmd+0x2c>)
 8008dd8:	f007 fa54 	bl	8010284 <HAL_I2C_Master_Transmit>
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20014558 	.word	0x20014558

08008de8 <lcd_data>:

void lcd_data(uint8_t data) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8008df2:	2340      	movs	r3, #64	; 0x40
 8008df4:	733b      	strb	r3, [r7, #12]
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8008dfa:	f107 020c 	add.w	r2, r7, #12
 8008dfe:	2364      	movs	r3, #100	; 0x64
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2302      	movs	r3, #2
 8008e04:	217c      	movs	r1, #124	; 0x7c
 8008e06:	4803      	ldr	r0, [pc, #12]	; (8008e14 <lcd_data+0x2c>)
 8008e08:	f007 fa3c 	bl	8010284 <HAL_I2C_Master_Transmit>
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20014558 	.word	0x20014558

08008e18 <lcd_init>:

void lcd_init(){
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	2110      	movs	r1, #16
 8008e20:	481e      	ldr	r0, [pc, #120]	; (8008e9c <lcd_init+0x84>)
 8008e22:	f007 f8dd 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8008e26:	2028      	movs	r0, #40	; 0x28
 8008e28:	f005 fba4 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x38);
 8008e2c:	2038      	movs	r0, #56	; 0x38
 8008e2e:	f7ff ffc3 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e32:	2001      	movs	r0, #1
 8008e34:	f005 fb9e 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x39);
 8008e38:	2039      	movs	r0, #57	; 0x39
 8008e3a:	f7ff ffbd 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e3e:	2001      	movs	r0, #1
 8008e40:	f005 fb98 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x14);
 8008e44:	2014      	movs	r0, #20
 8008e46:	f7ff ffb7 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f005 fb92 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x70);
 8008e50:	2070      	movs	r0, #112	; 0x70
 8008e52:	f7ff ffb1 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e56:	2001      	movs	r0, #1
 8008e58:	f005 fb8c 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x56);
 8008e5c:	2056      	movs	r0, #86	; 0x56
 8008e5e:	f7ff ffab 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e62:	2001      	movs	r0, #1
 8008e64:	f005 fb86 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x6C);
 8008e68:	206c      	movs	r0, #108	; 0x6c
 8008e6a:	f7ff ffa5 	bl	8008db8 <lcd_cmd>
	HAL_Delay(200);
 8008e6e:	20c8      	movs	r0, #200	; 0xc8
 8008e70:	f005 fb80 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x38);
 8008e74:	2038      	movs	r0, #56	; 0x38
 8008e76:	f7ff ff9f 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f005 fb7a 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x0C);
 8008e80:	200c      	movs	r0, #12
 8008e82:	f7ff ff99 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e86:	2001      	movs	r0, #1
 8008e88:	f005 fb74 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x01);
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f7ff ff93 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e92:	2001      	movs	r0, #1
 8008e94:	f005 fb6e 	bl	800e574 <HAL_Delay>
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40020000 	.word	0x40020000

08008ea0 <lcd_clear>:

void lcd_clear(){
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f7ff ff87 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f005 fb62 	bl	800e574 <HAL_Delay>
	lcd_cmd(0x02);
 8008eb0:	2002      	movs	r0, #2
 8008eb2:	f7ff ff81 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f005 fb5c 	bl	800e574 <HAL_Delay>
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <lcd_locate>:

void lcd_locate(int x, int y) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	019b      	lsls	r3, r3, #6
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff ff6b 	bl	8008db8 <lcd_cmd>
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <lcd_print>:

void lcd_print(const char *str) {
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8008ef2:	e007      	b.n	8008f04 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff75 	bl	8008de8 <lcd_data>
			str++;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3301      	adds	r3, #1
 8008f02:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f3      	bne.n	8008ef4 <lcd_print+0xa>
	}
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8008f14:	b40f      	push	{r0, r1, r2, r3}
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 8008f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f20:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8008f22:	1d3b      	adds	r3, r7, #4
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00b f8f3 	bl	8014114 <vsiprintf>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8008f32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dd03      	ble.n	8008f42 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff ffd4 	bl	8008eea <lcd_print>
	}

	return ret;
 8008f42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f50:	b004      	add	sp, #16
 8008f52:	4770      	bx	lr

08008f54 <log_init>:
int count_num=0;
uint8_t second_soeed=0;
uint16_t correction[200]= {0};
uint8_t cross_maker=0;
extern float test;
void log_init (){
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	actual__callog_adress = start_adress_sector6;
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <log_init+0x44>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a0f      	ldr	r2, [pc, #60]	; (8008f9c <log_init+0x48>)
 8008f5e:	6013      	str	r3, [r2, #0]
	callog_adress = start_adress_sector7;
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <log_init+0x4c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0f      	ldr	r2, [pc, #60]	; (8008fa4 <log_init+0x50>)
 8008f66:	6013      	str	r3, [r2, #0]
	actual__velo_adress = start_adress_sector8;
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <log_init+0x54>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	; (8008fac <log_init+0x58>)
 8008f6e:	6013      	str	r3, [r2, #0]
	loadlog_adress = start_adress_sector9;
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <log_init+0x5c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0f      	ldr	r2, [pc, #60]	; (8008fb4 <log_init+0x60>)
 8008f76:	6013      	str	r3, [r2, #0]
	side_adress = start_adress_sector10;
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <log_init+0x64>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <log_init+0x68>)
 8008f7e:	6013      	str	r3, [r2, #0]
	plan_velo_adress=start_adress_sector11;
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <log_init+0x6c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <log_init+0x70>)
 8008f86:	6013      	str	r3, [r2, #0]
	log_count=0;
 8008f88:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <log_init+0x74>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	0801629c 	.word	0x0801629c
 8008f9c:	2000c2d8 	.word	0x2000c2d8
 8008fa0:	080162a0 	.word	0x080162a0
 8008fa4:	2000c2dc 	.word	0x2000c2dc
 8008fa8:	080162a4 	.word	0x080162a4
 8008fac:	2000c2e8 	.word	0x2000c2e8
 8008fb0:	080162a8 	.word	0x080162a8
 8008fb4:	2000c2e4 	.word	0x2000c2e4
 8008fb8:	080162ac 	.word	0x080162ac
 8008fbc:	2000c2ec 	.word	0x2000c2ec
 8008fc0:	080162b0 	.word	0x080162b0
 8008fc4:	2000c2e0 	.word	0x2000c2e0
 8008fc8:	2000c0b4 	.word	0x2000c0b4

08008fcc <speed_sloow>:
void speed_sloow(int a,int b,float speed){
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int i=a;i<=b;i++){
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	e008      	b.n	8008ff2 <speed_sloow+0x26>
		secondsp[i] = speed;
 8008fe0:	4a09      	ldr	r2, [pc, #36]	; (8009008 <speed_sloow+0x3c>)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	601a      	str	r2, [r3, #0]
	for(int i=a;i<=b;i++){
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	ddf2      	ble.n	8008fe0 <speed_sloow+0x14>
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000210 	.word	0x20000210

0800900c <log_write>:
void log_write(float u){
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	ed87 0a01 	vstr	s0, [r7, #4]
	  FLASH_Write_Word_F(callog_adress,u);
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <log_write+0x48>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	ed97 0a01 	vldr	s0, [r7, #4]
 800901e:	4618      	mov	r0, r3
 8009020:	f001 fb54 	bl	800a6cc <FLASH_Write_Word_F>
	  FLASH_Write_Word_F(loadlog_adress,load_log);
 8009024:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <log_write+0x4c>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b0c      	ldr	r3, [pc, #48]	; (800905c <log_write+0x50>)
 800902a:	edd3 7a00 	vldr	s15, [r3]
 800902e:	eeb0 0a67 	vmov.f32	s0, s15
 8009032:	4610      	mov	r0, r2
 8009034:	f001 fb4a 	bl	800a6cc <FLASH_Write_Word_F>
	  callog_adress+= 0x04;
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <log_write+0x48>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3304      	adds	r3, #4
 800903e:	4a05      	ldr	r2, [pc, #20]	; (8009054 <log_write+0x48>)
 8009040:	6013      	str	r3, [r2, #0]
	  loadlog_adress+= 0x04;
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <log_write+0x4c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3304      	adds	r3, #4
 8009048:	4a03      	ldr	r2, [pc, #12]	; (8009058 <log_write+0x4c>)
 800904a:	6013      	str	r3, [r2, #0]
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	2000c2dc 	.word	0x2000c2dc
 8009058:	2000c2e4 	.word	0x2000c2e4
 800905c:	20000204 	.word	0x20000204

08009060 <first_cale>:
inline void first_cale(){
 8009060:	b5b0      	push	{r4, r5, r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
	static float cale_val=0;
	static float cale_buff=0;
	static uint16_t num=0;
	float cale=0;
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	607b      	str	r3, [r7, #4]
	static int frp=0;
	static int frap=0;
	static int d=39;
	static uint16_t coi=0;
	num++;
 800906c:	4b88      	ldr	r3, [pc, #544]	; (8009290 <first_cale+0x230>)
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	4b86      	ldr	r3, [pc, #536]	; (8009290 <first_cale+0x230>)
 8009076:	801a      	strh	r2, [r3, #0]
	cale_val += calc_angle()*T;
 8009078:	f001 fc66 	bl	800a948 <calc_angle>
 800907c:	ee10 3a10 	vmov	r3, s0
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff f999 	bl	80083b8 <__aeabi_f2d>
 8009086:	a37c      	add	r3, pc, #496	; (adr r3, 8009278 <first_cale+0x218>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7ff f9ec 	bl	8008468 <__aeabi_dmul>
 8009090:	4603      	mov	r3, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4625      	mov	r5, r4
 8009096:	461c      	mov	r4, r3
 8009098:	4b7e      	ldr	r3, [pc, #504]	; (8009294 <first_cale+0x234>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff f98b 	bl	80083b8 <__aeabi_f2d>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7ff f827 	bl	80080fc <__adddf3>
 80090ae:	4603      	mov	r3, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	4618      	mov	r0, r3
 80090b4:	4621      	mov	r1, r4
 80090b6:	f7ff fcaf 	bl	8008a18 <__aeabi_d2f>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b75      	ldr	r3, [pc, #468]	; (8009294 <first_cale+0x234>)
 80090be:	601a      	str	r2, [r3, #0]

	if(log2_flag) {
 80090c0:	4b75      	ldr	r3, [pc, #468]	; (8009298 <first_cale+0x238>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d070      	beq.n	80091aa <first_cale+0x14a>
		coi++;
 80090c8:	4b74      	ldr	r3, [pc, #464]	; (800929c <first_cale+0x23c>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	3301      	adds	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	4b72      	ldr	r3, [pc, #456]	; (800929c <first_cale+0x23c>)
 80090d2:	801a      	strh	r2, [r3, #0]
		cale = cale_val;
 80090d4:	4b6f      	ldr	r3, [pc, #444]	; (8009294 <first_cale+0x234>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	607b      	str	r3, [r7, #4]

		log_write(cale_val);
 80090da:	4b6e      	ldr	r3, [pc, #440]	; (8009294 <first_cale+0x234>)
 80090dc:	edd3 7a00 	vldr	s15, [r3]
 80090e0:	eeb0 0a67 	vmov.f32	s0, s15
 80090e4:	f7ff ff92 	bl	800900c <log_write>
		cale_val=0;
 80090e8:	4b6a      	ldr	r3, [pc, #424]	; (8009294 <first_cale+0x234>)
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
		if((cale_buff-cale)<=0.05 && (cale_buff-cale)>=-0.05 ) frp++;
 80090f0:	4b6b      	ldr	r3, [pc, #428]	; (80092a0 <first_cale+0x240>)
 80090f2:	ed93 7a00 	vldr	s14, [r3]
 80090f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80090fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090fe:	ee17 0a90 	vmov	r0, s15
 8009102:	f7ff f959 	bl	80083b8 <__aeabi_f2d>
 8009106:	a35e      	add	r3, pc, #376	; (adr r3, 8009280 <first_cale+0x220>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7ff fc28 	bl	8008960 <__aeabi_dcmple>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d017      	beq.n	8009146 <first_cale+0xe6>
 8009116:	4b62      	ldr	r3, [pc, #392]	; (80092a0 <first_cale+0x240>)
 8009118:	ed93 7a00 	vldr	s14, [r3]
 800911c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009124:	ee17 0a90 	vmov	r0, s15
 8009128:	f7ff f946 	bl	80083b8 <__aeabi_f2d>
 800912c:	a356      	add	r3, pc, #344	; (adr r3, 8009288 <first_cale+0x228>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7ff fc1f 	bl	8008974 <__aeabi_dcmpge>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <first_cale+0xe6>
 800913c:	4b59      	ldr	r3, [pc, #356]	; (80092a4 <first_cale+0x244>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	4a58      	ldr	r2, [pc, #352]	; (80092a4 <first_cale+0x244>)
 8009144:	6013      	str	r3, [r2, #0]
		cale_buff = cale;
 8009146:	4a56      	ldr	r2, [pc, #344]	; (80092a0 <first_cale+0x240>)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6013      	str	r3, [r2, #0]
		if(frp >= 50 || cross_line){
 800914c:	4b55      	ldr	r3, [pc, #340]	; (80092a4 <first_cale+0x244>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b31      	cmp	r3, #49	; 0x31
 8009152:	dc03      	bgt.n	800915c <first_cale+0xfc>
 8009154:	4b54      	ldr	r3, [pc, #336]	; (80092a8 <first_cale+0x248>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01a      	beq.n	8009192 <first_cale+0x132>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800915c:	2200      	movs	r2, #0
 800915e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009162:	4852      	ldr	r0, [pc, #328]	; (80092ac <first_cale+0x24c>)
 8009164:	f006 ff3c 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8009168:	2200      	movs	r2, #0
 800916a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800916e:	484f      	ldr	r0, [pc, #316]	; (80092ac <first_cale+0x24c>)
 8009170:	f006 ff36 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8009174:	2200      	movs	r2, #0
 8009176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800917a:	484c      	ldr	r0, [pc, #304]	; (80092ac <first_cale+0x24c>)
 800917c:	f006 ff30 	bl	800ffe0 <HAL_GPIO_WritePin>
			straight_flag = true;
 8009180:	4b4b      	ldr	r3, [pc, #300]	; (80092b0 <first_cale+0x250>)
 8009182:	2201      	movs	r2, #1
 8009184:	701a      	strb	r2, [r3, #0]
			frp=30;
 8009186:	4b47      	ldr	r3, [pc, #284]	; (80092a4 <first_cale+0x244>)
 8009188:	221e      	movs	r2, #30
 800918a:	601a      	str	r2, [r3, #0]
			frap =0;
 800918c:	4b49      	ldr	r3, [pc, #292]	; (80092b4 <first_cale+0x254>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
//			straight_flag = false;
//			frap = 0;
//			frp=0;
//		}

		log2_flag=0;
 8009192:	4b41      	ldr	r3, [pc, #260]	; (8009298 <first_cale+0x238>)
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
		//cale_val=0;
		num=0;
 8009198:	4b3d      	ldr	r3, [pc, #244]	; (8009290 <first_cale+0x230>)
 800919a:	2200      	movs	r2, #0
 800919c:	801a      	strh	r2, [r3, #0]
		co++;
 800919e:	4b46      	ldr	r3, [pc, #280]	; (80092b8 <first_cale+0x258>)
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	3301      	adds	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	4b44      	ldr	r3, [pc, #272]	; (80092b8 <first_cale+0x258>)
 80091a8:	801a      	strh	r2, [r3, #0]
	}

//	if(straight_flag==1  && correc_maker==1){
	//if(coi>=30)HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	if(correc_maker==1 && straight_flag==1 ){
 80091aa:	4b44      	ldr	r3, [pc, #272]	; (80092bc <first_cale+0x25c>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d12e      	bne.n	8009210 <first_cale+0x1b0>
 80091b2:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <first_cale+0x250>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d12a      	bne.n	8009210 <first_cale+0x1b0>
//	if(correc_maker==1){
		FLASH_Write_Word_S(side_adress,log_count);
 80091ba:	4b41      	ldr	r3, [pc, #260]	; (80092c0 <first_cale+0x260>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b41      	ldr	r3, [pc, #260]	; (80092c4 <first_cale+0x264>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f001 fa59 	bl	800a67c <FLASH_Write_Word_S>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80091ca:	2201      	movs	r2, #1
 80091cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091d0:	4836      	ldr	r0, [pc, #216]	; (80092ac <first_cale+0x24c>)
 80091d2:	f006 ff05 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80091d6:	2201      	movs	r2, #1
 80091d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091dc:	4833      	ldr	r0, [pc, #204]	; (80092ac <first_cale+0x24c>)
 80091de:	f006 feff 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80091e2:	2201      	movs	r2, #1
 80091e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091e8:	4830      	ldr	r0, [pc, #192]	; (80092ac <first_cale+0x24c>)
 80091ea:	f006 fef9 	bl	800ffe0 <HAL_GPIO_WritePin>
		side_adress+= 0x04;
 80091ee:	4b34      	ldr	r3, [pc, #208]	; (80092c0 <first_cale+0x260>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4a32      	ldr	r2, [pc, #200]	; (80092c0 <first_cale+0x260>)
 80091f6:	6013      	str	r3, [r2, #0]
		straight_flag=false;
 80091f8:	4b2d      	ldr	r3, [pc, #180]	; (80092b0 <first_cale+0x250>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 80091fe:	4b2f      	ldr	r3, [pc, #188]	; (80092bc <first_cale+0x25c>)
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
		coi=0;
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <first_cale+0x23c>)
 8009206:	2200      	movs	r2, #0
 8009208:	801a      	strh	r2, [r3, #0]
		frp=0;
 800920a:	4b26      	ldr	r3, [pc, #152]	; (80092a4 <first_cale+0x244>)
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
	}
	if(correc_maker==1){
 8009210:	4b2a      	ldr	r3, [pc, #168]	; (80092bc <first_cale+0x25c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d105      	bne.n	8009224 <first_cale+0x1c4>
		straight_flag = false;
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <first_cale+0x250>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
		frp= 0;
 800921e:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <first_cale+0x244>)
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
		//coi=0;
	}
	if(cross_maker){
 8009224:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <first_cale+0x268>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d021      	beq.n	8009270 <first_cale+0x210>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800922c:	2201      	movs	r2, #1
 800922e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009232:	481e      	ldr	r0, [pc, #120]	; (80092ac <first_cale+0x24c>)
 8009234:	f006 fed4 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8009238:	2201      	movs	r2, #1
 800923a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800923e:	481b      	ldr	r0, [pc, #108]	; (80092ac <first_cale+0x24c>)
 8009240:	f006 fece 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8009244:	2201      	movs	r2, #1
 8009246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800924a:	4818      	ldr	r0, [pc, #96]	; (80092ac <first_cale+0x24c>)
 800924c:	f006 fec8 	bl	800ffe0 <HAL_GPIO_WritePin>
		work_ram[d] = log_count;
 8009250:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <first_cale+0x264>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <first_cale+0x26c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	b291      	uxth	r1, r2
 800925a:	4a1d      	ldr	r2, [pc, #116]	; (80092d0 <first_cale+0x270>)
 800925c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		cross_maker = false;
 8009260:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <first_cale+0x268>)
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
		d++;
 8009266:	4b19      	ldr	r3, [pc, #100]	; (80092cc <first_cale+0x26c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3301      	adds	r3, #1
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <first_cale+0x26c>)
 800926e:	6013      	str	r3, [r2, #0]
	}


}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bdb0      	pop	{r4, r5, r7, pc}
 8009278:	d2f1a9fc 	.word	0xd2f1a9fc
 800927c:	3f50624d 	.word	0x3f50624d
 8009280:	9999999a 	.word	0x9999999a
 8009284:	3fa99999 	.word	0x3fa99999
 8009288:	9999999a 	.word	0x9999999a
 800928c:	bfa99999 	.word	0xbfa99999
 8009290:	2000c252 	.word	0x2000c252
 8009294:	2000c254 	.word	0x2000c254
 8009298:	2000020b 	.word	0x2000020b
 800929c:	2000c258 	.word	0x2000c258
 80092a0:	2000c25c 	.word	0x2000c25c
 80092a4:	2000c260 	.word	0x2000c260
 80092a8:	2000c2c8 	.word	0x2000c2c8
 80092ac:	40020000 	.word	0x40020000
 80092b0:	2000020c 	.word	0x2000020c
 80092b4:	2000c264 	.word	0x2000c264
 80092b8:	20000208 	.word	0x20000208
 80092bc:	2000c0b0 	.word	0x2000c0b0
 80092c0:	2000c2ec 	.word	0x2000c2ec
 80092c4:	2000c0b4 	.word	0x2000c0b4
 80092c8:	2000c250 	.word	0x2000c250
 80092cc:	20000000 	.word	0x20000000
 80092d0:	2000c30c 	.word	0x2000c30c

080092d4 <first_driv>:
inline void first_driv(float log){
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	ed87 0a01 	vstr	s0, [r7, #4]
	static float logbuff=0;
	static float buff=0;
	logbuff = logbuff + log;
 80092de:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <first_driv+0x74>)
 80092e0:	ed93 7a00 	vldr	s14, [r3]
 80092e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80092e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ec:	4b16      	ldr	r3, [pc, #88]	; (8009348 <first_driv+0x74>)
 80092ee:	edc3 7a00 	vstr	s15, [r3]
//		logbuff = logbuff-10.0;
//		buff = logbuff;
//		log_count++;
//
//	}
	if(logbuff>=10.000){
 80092f2:	4b15      	ldr	r3, [pc, #84]	; (8009348 <first_driv+0x74>)
 80092f4:	edd3 7a00 	vldr	s15, [r3]
 80092f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80092fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	da00      	bge.n	8009308 <first_driv+0x34>
		logbuff = 0;
		//buff = logbuff;
		log_count++;

	}
}
 8009306:	e019      	b.n	800933c <first_driv+0x68>
		log_flag = 1;
 8009308:	4b10      	ldr	r3, [pc, #64]	; (800934c <first_driv+0x78>)
 800930a:	2201      	movs	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
		log2_flag=1;
 800930e:	4b10      	ldr	r3, [pc, #64]	; (8009350 <first_driv+0x7c>)
 8009310:	2201      	movs	r2, #1
 8009312:	701a      	strb	r2, [r3, #0]
		load_log += logbuff;
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <first_driv+0x80>)
 8009316:	ed93 7a00 	vldr	s14, [r3]
 800931a:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <first_driv+0x74>)
 800931c:	edd3 7a00 	vldr	s15, [r3]
 8009320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <first_driv+0x80>)
 8009326:	edc3 7a00 	vstr	s15, [r3]
		logbuff = 0;
 800932a:	4b07      	ldr	r3, [pc, #28]	; (8009348 <first_driv+0x74>)
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
		log_count++;
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <first_driv+0x84>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	4a07      	ldr	r2, [pc, #28]	; (8009358 <first_driv+0x84>)
 800933a:	6013      	str	r3, [r2, #0]
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	2000c268 	.word	0x2000c268
 800934c:	2000020a 	.word	0x2000020a
 8009350:	2000020b 	.word	0x2000020b
 8009354:	20000204 	.word	0x20000204
 8009358:	2000c0b4 	.word	0x2000c0b4
 800935c:	00000000 	.word	0x00000000

08009360 <logsecond_Speed>:
int logsecond_Speed(double h){
 8009360:	b590      	push	{r4, r7, lr}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	ed87 0b00 	vstr	d0, [r7]
	int spee=1300;
 800936a:	f240 5314 	movw	r3, #1300	; 0x514
 800936e:	60fb      	str	r3, [r7, #12]
	float ratio=0;
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	60bb      	str	r3, [r7, #8]
	if(h<0)h=-h;
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	f04f 0300 	mov.w	r3, #0
 800937e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009382:	f7ff fae3 	bl	800894c <__aeabi_dcmplt>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <logsecond_Speed+0x38>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009396:	607b      	str	r3, [r7, #4]
	switch(second_soeed){
 8009398:	4ba1      	ldr	r3, [pc, #644]	; (8009620 <logsecond_Speed+0x2c0>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	2b05      	cmp	r3, #5
 80093a0:	f200 81d2 	bhi.w	8009748 <logsecond_Speed+0x3e8>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <logsecond_Speed+0x4c>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093c5 	.word	0x080093c5
 80093b0:	08009453 	.word	0x08009453
 80093b4:	080094e1 	.word	0x080094e1
 80093b8:	0800956f 	.word	0x0800956f
 80093bc:	0800962d 	.word	0x0800962d
 80093c0:	080096bb 	.word	0x080096bb
//	else if(h < 500)  spee = work_ram[35];
//	else if(h < 800)  spee = work_ram[34];
//	else if(h < 1000) spee = work_ram[33];
//	else  spee = work_ram[32];
	case 1:
		h=h-100;
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	4b96      	ldr	r3, [pc, #600]	; (8009624 <logsecond_Speed+0x2c4>)
 80093ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ce:	f7fe fe93 	bl	80080f8 <__aeabi_dsub>
 80093d2:	4603      	mov	r3, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	4b91      	ldr	r3, [pc, #580]	; (8009624 <logsecond_Speed+0x2c4>)
 80093e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093e4:	f7ff fab2 	bl	800894c <__aeabi_dcmplt>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <logsecond_Speed+0x9a>
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	f04f 0400 	mov.w	r4, #0
 80093f6:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 80093fa:	f04f 0200 	mov.w	r2, #0
 80093fe:	4b8a      	ldr	r3, [pc, #552]	; (8009628 <logsecond_Speed+0x2c8>)
 8009400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009404:	f7ff fac0 	bl	8008988 <__aeabi_dcmpgt>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <logsecond_Speed+0xb8>
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	4c85      	ldr	r4, [pc, #532]	; (8009628 <logsecond_Speed+0x2c8>)
 8009414:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (5500*h)/1000;
 8009418:	a379      	add	r3, pc, #484	; (adr r3, 8009600 <logsecond_Speed+0x2a0>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009422:	f7ff f821 	bl	8008468 <__aeabi_dmul>
 8009426:	4603      	mov	r3, r0
 8009428:	460c      	mov	r4, r1
 800942a:	4618      	mov	r0, r3
 800942c:	4621      	mov	r1, r4
 800942e:	f04f 0200 	mov.w	r2, #0
 8009432:	4b7d      	ldr	r3, [pc, #500]	; (8009628 <logsecond_Speed+0x2c8>)
 8009434:	f7ff f942 	bl	80086bc <__aeabi_ddiv>
 8009438:	4603      	mov	r3, r0
 800943a:	460c      	mov	r4, r1
 800943c:	4618      	mov	r0, r3
 800943e:	4621      	mov	r1, r4
 8009440:	f7ff fac2 	bl	80089c8 <__aeabi_d2iz>
 8009444:	4603      	mov	r3, r0
 8009446:	60fb      	str	r3, [r7, #12]
		spee=spee+2500;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800944e:	60fb      	str	r3, [r7, #12]
//		else if(h < 300)  spee = 2000;
//		else if(h < 500)  spee = 2500;
//		else if(h < 800)  spee = 3500;
//		else if(h < 1000) spee = 4000;
//		else spee = 5500;
		break;
 8009450:	e17a      	b.n	8009748 <logsecond_Speed+0x3e8>
//		else if(h < 300)  spee = 2400;
//		else if(h < 500)  spee = 2700;
//		else if(h < 800)  spee = 3800;
//		else if(h < 1000) spee = 4000;
//		else spee = 6000;
		h=h-100;
 8009452:	f04f 0200 	mov.w	r2, #0
 8009456:	4b73      	ldr	r3, [pc, #460]	; (8009624 <logsecond_Speed+0x2c4>)
 8009458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800945c:	f7fe fe4c 	bl	80080f8 <__aeabi_dsub>
 8009460:	4603      	mov	r3, r0
 8009462:	460c      	mov	r4, r1
 8009464:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	4b6d      	ldr	r3, [pc, #436]	; (8009624 <logsecond_Speed+0x2c4>)
 800946e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009472:	f7ff fa6b 	bl	800894c <__aeabi_dcmplt>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <logsecond_Speed+0x128>
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	f04f 0400 	mov.w	r4, #0
 8009484:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	4b66      	ldr	r3, [pc, #408]	; (8009628 <logsecond_Speed+0x2c8>)
 800948e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009492:	f7ff fa79 	bl	8008988 <__aeabi_dcmpgt>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <logsecond_Speed+0x146>
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	4c61      	ldr	r4, [pc, #388]	; (8009628 <logsecond_Speed+0x2c8>)
 80094a2:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (6500*h)/1000;
 80094a6:	a358      	add	r3, pc, #352	; (adr r3, 8009608 <logsecond_Speed+0x2a8>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b0:	f7fe ffda 	bl	8008468 <__aeabi_dmul>
 80094b4:	4603      	mov	r3, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4618      	mov	r0, r3
 80094ba:	4621      	mov	r1, r4
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	4b59      	ldr	r3, [pc, #356]	; (8009628 <logsecond_Speed+0x2c8>)
 80094c2:	f7ff f8fb 	bl	80086bc <__aeabi_ddiv>
 80094c6:	4603      	mov	r3, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	4618      	mov	r0, r3
 80094cc:	4621      	mov	r1, r4
 80094ce:	f7ff fa7b 	bl	80089c8 <__aeabi_d2iz>
 80094d2:	4603      	mov	r3, r0
 80094d4:	60fb      	str	r3, [r7, #12]
		spee=spee+2500;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80094dc:	60fb      	str	r3, [r7, #12]

		break;
 80094de:	e133      	b.n	8009748 <logsecond_Speed+0x3e8>
	case 3:
		h=h-100;
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	4b4f      	ldr	r3, [pc, #316]	; (8009624 <logsecond_Speed+0x2c4>)
 80094e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ea:	f7fe fe05 	bl	80080f8 <__aeabi_dsub>
 80094ee:	4603      	mov	r3, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 80094f6:	f04f 0200 	mov.w	r2, #0
 80094fa:	4b4a      	ldr	r3, [pc, #296]	; (8009624 <logsecond_Speed+0x2c4>)
 80094fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009500:	f7ff fa24 	bl	800894c <__aeabi_dcmplt>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <logsecond_Speed+0x1b6>
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	f04f 0400 	mov.w	r4, #0
 8009512:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	4b43      	ldr	r3, [pc, #268]	; (8009628 <logsecond_Speed+0x2c8>)
 800951c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009520:	f7ff fa32 	bl	8008988 <__aeabi_dcmpgt>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <logsecond_Speed+0x1d4>
 800952a:	f04f 0300 	mov.w	r3, #0
 800952e:	4c3e      	ldr	r4, [pc, #248]	; (8009628 <logsecond_Speed+0x2c8>)
 8009530:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (6000*h)/1000;
 8009534:	a336      	add	r3, pc, #216	; (adr r3, 8009610 <logsecond_Speed+0x2b0>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800953e:	f7fe ff93 	bl	8008468 <__aeabi_dmul>
 8009542:	4603      	mov	r3, r0
 8009544:	460c      	mov	r4, r1
 8009546:	4618      	mov	r0, r3
 8009548:	4621      	mov	r1, r4
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	4b36      	ldr	r3, [pc, #216]	; (8009628 <logsecond_Speed+0x2c8>)
 8009550:	f7ff f8b4 	bl	80086bc <__aeabi_ddiv>
 8009554:	4603      	mov	r3, r0
 8009556:	460c      	mov	r4, r1
 8009558:	4618      	mov	r0, r3
 800955a:	4621      	mov	r1, r4
 800955c:	f7ff fa34 	bl	80089c8 <__aeabi_d2iz>
 8009560:	4603      	mov	r3, r0
 8009562:	60fb      	str	r3, [r7, #12]
		spee=spee+2800;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 800956a:	60fb      	str	r3, [r7, #12]
//		else if(h < 300)  spee = 2400;
//		else if(h < 500)  spee = 2700;
//		else if(h < 800)  spee = 3800;
//		else if(h < 1000) spee = 4000;
//		else spee = 6000;
		break;
 800956c:	e0ec      	b.n	8009748 <logsecond_Speed+0x3e8>

	case 4:
		h=h-100;
 800956e:	f04f 0200 	mov.w	r2, #0
 8009572:	4b2c      	ldr	r3, [pc, #176]	; (8009624 <logsecond_Speed+0x2c4>)
 8009574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009578:	f7fe fdbe 	bl	80080f8 <__aeabi_dsub>
 800957c:	4603      	mov	r3, r0
 800957e:	460c      	mov	r4, r1
 8009580:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	4b26      	ldr	r3, [pc, #152]	; (8009624 <logsecond_Speed+0x2c4>)
 800958a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800958e:	f7ff f9dd 	bl	800894c <__aeabi_dcmplt>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <logsecond_Speed+0x244>
 8009598:	f04f 0300 	mov.w	r3, #0
 800959c:	f04f 0400 	mov.w	r4, #0
 80095a0:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <logsecond_Speed+0x2c8>)
 80095aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ae:	f7ff f9eb 	bl	8008988 <__aeabi_dcmpgt>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <logsecond_Speed+0x262>
 80095b8:	f04f 0300 	mov.w	r3, #0
 80095bc:	4c1a      	ldr	r4, [pc, #104]	; (8009628 <logsecond_Speed+0x2c8>)
 80095be:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (7000*h)/1000;
 80095c2:	a315      	add	r3, pc, #84	; (adr r3, 8009618 <logsecond_Speed+0x2b8>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095cc:	f7fe ff4c 	bl	8008468 <__aeabi_dmul>
 80095d0:	4603      	mov	r3, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	4618      	mov	r0, r3
 80095d6:	4621      	mov	r1, r4
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	4b12      	ldr	r3, [pc, #72]	; (8009628 <logsecond_Speed+0x2c8>)
 80095de:	f7ff f86d 	bl	80086bc <__aeabi_ddiv>
 80095e2:	4603      	mov	r3, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	4618      	mov	r0, r3
 80095e8:	4621      	mov	r1, r4
 80095ea:	f7ff f9ed 	bl	80089c8 <__aeabi_d2iz>
 80095ee:	4603      	mov	r3, r0
 80095f0:	60fb      	str	r3, [r7, #12]
		spee=spee+2800;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 80095f8:	60fb      	str	r3, [r7, #12]

		break;
 80095fa:	e0a5      	b.n	8009748 <logsecond_Speed+0x3e8>
 80095fc:	f3af 8000 	nop.w
 8009600:	00000000 	.word	0x00000000
 8009604:	40b57c00 	.word	0x40b57c00
 8009608:	00000000 	.word	0x00000000
 800960c:	40b96400 	.word	0x40b96400
 8009610:	00000000 	.word	0x00000000
 8009614:	40b77000 	.word	0x40b77000
 8009618:	00000000 	.word	0x00000000
 800961c:	40bb5800 	.word	0x40bb5800
 8009620:	2000c0bc 	.word	0x2000c0bc
 8009624:	40590000 	.word	0x40590000
 8009628:	408f4000 	.word	0x408f4000

	case 5:
		h=h-100;
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	4b4d      	ldr	r3, [pc, #308]	; (8009768 <logsecond_Speed+0x408>)
 8009632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009636:	f7fe fd5f 	bl	80080f8 <__aeabi_dsub>
 800963a:	4603      	mov	r3, r0
 800963c:	460c      	mov	r4, r1
 800963e:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	4b48      	ldr	r3, [pc, #288]	; (8009768 <logsecond_Speed+0x408>)
 8009648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800964c:	f7ff f97e 	bl	800894c <__aeabi_dcmplt>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <logsecond_Speed+0x302>
 8009656:	f04f 0300 	mov.w	r3, #0
 800965a:	f04f 0400 	mov.w	r4, #0
 800965e:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	4b41      	ldr	r3, [pc, #260]	; (800976c <logsecond_Speed+0x40c>)
 8009668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800966c:	f7ff f98c 	bl	8008988 <__aeabi_dcmpgt>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <logsecond_Speed+0x320>
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	4c3c      	ldr	r4, [pc, #240]	; (800976c <logsecond_Speed+0x40c>)
 800967c:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (6000*h)/1000;
 8009680:	a335      	add	r3, pc, #212	; (adr r3, 8009758 <logsecond_Speed+0x3f8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968a:	f7fe feed 	bl	8008468 <__aeabi_dmul>
 800968e:	4603      	mov	r3, r0
 8009690:	460c      	mov	r4, r1
 8009692:	4618      	mov	r0, r3
 8009694:	4621      	mov	r1, r4
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	4b34      	ldr	r3, [pc, #208]	; (800976c <logsecond_Speed+0x40c>)
 800969c:	f7ff f80e 	bl	80086bc <__aeabi_ddiv>
 80096a0:	4603      	mov	r3, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	4618      	mov	r0, r3
 80096a6:	4621      	mov	r1, r4
 80096a8:	f7ff f98e 	bl	80089c8 <__aeabi_d2iz>
 80096ac:	4603      	mov	r3, r0
 80096ae:	60fb      	str	r3, [r7, #12]
		spee=spee+3000;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80096b6:	60fb      	str	r3, [r7, #12]
		break;
 80096b8:	e046      	b.n	8009748 <logsecond_Speed+0x3e8>
	case 6:
		h=h-100;
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <logsecond_Speed+0x408>)
 80096c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096c4:	f7fe fd18 	bl	80080f8 <__aeabi_dsub>
 80096c8:	4603      	mov	r3, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	e9c7 3400 	strd	r3, r4, [r7]
		if(h<100) h=0;
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	4b24      	ldr	r3, [pc, #144]	; (8009768 <logsecond_Speed+0x408>)
 80096d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096da:	f7ff f937 	bl	800894c <__aeabi_dcmplt>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <logsecond_Speed+0x390>
 80096e4:	f04f 0300 	mov.w	r3, #0
 80096e8:	f04f 0400 	mov.w	r4, #0
 80096ec:	e9c7 3400 	strd	r3, r4, [r7]
		if(h>1000) h=1000;
 80096f0:	f04f 0200 	mov.w	r2, #0
 80096f4:	4b1d      	ldr	r3, [pc, #116]	; (800976c <logsecond_Speed+0x40c>)
 80096f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096fa:	f7ff f945 	bl	8008988 <__aeabi_dcmpgt>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <logsecond_Speed+0x3ae>
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	4c18      	ldr	r4, [pc, #96]	; (800976c <logsecond_Speed+0x40c>)
 800970a:	e9c7 3400 	strd	r3, r4, [r7]
		spee= (6500*h)/1000;
 800970e:	a314      	add	r3, pc, #80	; (adr r3, 8009760 <logsecond_Speed+0x400>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009718:	f7fe fea6 	bl	8008468 <__aeabi_dmul>
 800971c:	4603      	mov	r3, r0
 800971e:	460c      	mov	r4, r1
 8009720:	4618      	mov	r0, r3
 8009722:	4621      	mov	r1, r4
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	4b10      	ldr	r3, [pc, #64]	; (800976c <logsecond_Speed+0x40c>)
 800972a:	f7fe ffc7 	bl	80086bc <__aeabi_ddiv>
 800972e:	4603      	mov	r3, r0
 8009730:	460c      	mov	r4, r1
 8009732:	4618      	mov	r0, r3
 8009734:	4621      	mov	r1, r4
 8009736:	f7ff f947 	bl	80089c8 <__aeabi_d2iz>
 800973a:	4603      	mov	r3, r0
 800973c:	60fb      	str	r3, [r7, #12]
		spee=spee+3000;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8009744:	60fb      	str	r3, [r7, #12]

		break;
 8009746:	bf00      	nop
//		else if(h < 300)  spee = 1600;
//		else if(h < 500)  spee = 1800;
//		else if(h < 800)  spee = 2100;
//		else if(h < 1000) spee = 4100;
//		else if(1000 < h)spee = 4600;
	return spee;
 8009748:	68fb      	ldr	r3, [r7, #12]

}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	bd90      	pop	{r4, r7, pc}
 8009752:	bf00      	nop
 8009754:	f3af 8000 	nop.w
 8009758:	00000000 	.word	0x00000000
 800975c:	40b77000 	.word	0x40b77000
 8009760:	00000000 	.word	0x00000000
 8009764:	40b96400 	.word	0x40b96400
 8009768:	40590000 	.word	0x40590000
 800976c:	408f4000 	.word	0x408f4000

08009770 <log_Cal>:
inline void log_Cal(){
 8009770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009774:	b096      	sub	sp, #88	; 0x58
 8009776:	af00      	add	r7, sp, #0
	uint i=0;
 8009778:	2300      	movs	r3, #0
 800977a:	657b      	str	r3, [r7, #84]	; 0x54
	uint d=0;
 800977c:	2300      	movs	r3, #0
 800977e:	653b      	str	r3, [r7, #80]	; 0x50
	uint l=0;
 8009780:	2300      	movs	r3, #0
 8009782:	61bb      	str	r3, [r7, #24]
	uint o=0;
 8009784:	2300      	movs	r3, #0
 8009786:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint h=0;
 8009788:	2300      	movs	r3, #0
 800978a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t callog;
	float Ca,Lo;
	float Lo_buff=0;
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	647b      	str	r3, [r7, #68]	; 0x44
	float sd=0;
 8009792:	f04f 0300 	mov.w	r3, #0
 8009796:	643b      	str	r3, [r7, #64]	; 0x40
	float sd_buff=0;
 8009798:	f04f 0300 	mov.w	r3, #0
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float sd_cou=0;
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	617b      	str	r3, [r7, #20]
	float sd_slo=0;
 80097a4:	f04f 0300 	mov.w	r3, #0
 80097a8:	63bb      	str	r3, [r7, #56]	; 0x38
	int cao=0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	613b      	str	r3, [r7, #16]
	float fu=0;
 80097ae:	f04f 0300 	mov.w	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
	float buff=10000;
 80097b4:	4b9a      	ldr	r3, [pc, #616]	; (8009a20 <log_Cal+0x2b0>)
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34


	o=39;
 80097b8:	2327      	movs	r3, #39	; 0x27
 80097ba:	64fb      	str	r3, [r7, #76]	; 0x4c
//			d++;
//		}
//		callog_adress+= 0x04;
//	}

	callog_adress = start_adress_sector7;
 80097bc:	4b99      	ldr	r3, [pc, #612]	; (8009a24 <log_Cal+0x2b4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a99      	ldr	r2, [pc, #612]	; (8009a28 <log_Cal+0x2b8>)
 80097c2:	6013      	str	r3, [r2, #0]
	loadlog_adress = start_adress_sector9;
 80097c4:	4b99      	ldr	r3, [pc, #612]	; (8009a2c <log_Cal+0x2bc>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a99      	ldr	r2, [pc, #612]	; (8009a30 <log_Cal+0x2c0>)
 80097ca:	6013      	str	r3, [r2, #0]
	while(1){
		Lo=*(float*)loadlog_adress-Lo_buff;
 80097cc:	4b98      	ldr	r3, [pc, #608]	; (8009a30 <log_Cal+0x2c0>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	ed93 7a00 	vldr	s14, [r3]
 80097d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80097d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097dc:	edc7 7a02 	vstr	s15, [r7, #8]
		Ca=*(float*)callog_adress;
 80097e0:	4b91      	ldr	r3, [pc, #580]	; (8009a28 <log_Cal+0x2b8>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	607b      	str	r3, [r7, #4]

		if(isnan(Ca) != 0)break;
 80097e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80097ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80097f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80097f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f8:	d65e      	bvs.n	80098b8 <log_Cal+0x148>
		Lo_buff += Lo;
 80097fa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80097fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8009802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009806:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(i==work_ram[o]){
 800980a:	4a8a      	ldr	r2, [pc, #552]	; (8009a34 <log_Cal+0x2c4>)
 800980c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009812:	461a      	mov	r2, r3
 8009814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009816:	4293      	cmp	r3, r2
 8009818:	d11d      	bne.n	8009856 <log_Cal+0xe6>
			for(int j=i; j>=i-10;j--){
 800981a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981c:	633b      	str	r3, [r7, #48]	; 0x30
 800981e:	e010      	b.n	8009842 <log_Cal+0xd2>
				secondsp[j]=logsecond_Speed(1500);
 8009820:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8009a18 <log_Cal+0x2a8>
 8009824:	f7ff fd9c 	bl	8009360 <logsecond_Speed>
 8009828:	ee07 0a90 	vmov	s15, r0
 800982c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009830:	4a81      	ldr	r2, [pc, #516]	; (8009a38 <log_Cal+0x2c8>)
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	edc3 7a00 	vstr	s15, [r3]
			for(int j=i; j>=i-10;j--){
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	3b01      	subs	r3, #1
 8009840:	633b      	str	r3, [r7, #48]	; 0x30
 8009842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009844:	f1a3 020a 	sub.w	r2, r3, #10
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	429a      	cmp	r2, r3
 800984c:	d9e8      	bls.n	8009820 <log_Cal+0xb0>
			}
			o++;
 800984e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009850:	3301      	adds	r3, #1
 8009852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009854:	e019      	b.n	800988a <log_Cal+0x11a>
//		}else secondsp[i]= logsecond_Speed(Lo/(Ca*(Lo/(double)work_ram[26])));
		}else secondsp[i]= logsecond_Speed(Lo/Ca);
 8009856:	ed97 7a02 	vldr	s14, [r7, #8]
 800985a:	edd7 7a01 	vldr	s15, [r7, #4]
 800985e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009862:	ee16 0a90 	vmov	r0, s13
 8009866:	f7fe fda7 	bl	80083b8 <__aeabi_f2d>
 800986a:	4603      	mov	r3, r0
 800986c:	460c      	mov	r4, r1
 800986e:	ec44 3b10 	vmov	d0, r3, r4
 8009872:	f7ff fd75 	bl	8009360 <logsecond_Speed>
 8009876:	ee07 0a90 	vmov	s15, r0
 800987a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800987e:	4a6e      	ldr	r2, [pc, #440]	; (8009a38 <log_Cal+0x2c8>)
 8009880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	edc3 7a00 	vstr	s15, [r3]
//		loada[i] = loada[i-1]+Lo;
		second_load[i] = Lo;
 800988a:	4a6c      	ldr	r2, [pc, #432]	; (8009a3c <log_Cal+0x2cc>)
 800988c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	601a      	str	r2, [r3, #0]
		callog_adress+= 0x04;
 8009896:	4b64      	ldr	r3, [pc, #400]	; (8009a28 <log_Cal+0x2b8>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3304      	adds	r3, #4
 800989c:	4a62      	ldr	r2, [pc, #392]	; (8009a28 <log_Cal+0x2b8>)
 800989e:	6013      	str	r3, [r2, #0]
		loadlog_adress+= 0x04;
 80098a0:	4b63      	ldr	r3, [pc, #396]	; (8009a30 <log_Cal+0x2c0>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4a62      	ldr	r2, [pc, #392]	; (8009a30 <log_Cal+0x2c0>)
 80098a8:	6013      	str	r3, [r2, #0]
		LED(2);
 80098aa:	2002      	movs	r0, #2
 80098ac:	f002 fb92 	bl	800bfd4 <LED>
		i++;
 80098b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b2:	3301      	adds	r3, #1
 80098b4:	657b      	str	r3, [r7, #84]	; 0x54
		Lo=*(float*)loadlog_adress-Lo_buff;
 80098b6:	e789      	b.n	80097cc <log_Cal+0x5c>
		if(isnan(Ca) != 0)break;
 80098b8:	bf00      	nop

	}

	for(int s=i-1;s>=0;s--){
 80098ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098bc:	3b01      	subs	r3, #1
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c0:	e0a1      	b.n	8009a06 <log_Cal+0x296>
		if(buff < secondsp[s]){
 80098c2:	4a5d      	ldr	r2, [pc, #372]	; (8009a38 <log_Cal+0x2c8>)
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	edd3 7a00 	vldr	s15, [r3]
 80098ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80098d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098da:	f140 808b 	bpl.w	80099f4 <log_Cal+0x284>
			if(buff>=2500 && secondsp[s]>=5000){
 80098de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80098e2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009a40 <log_Cal+0x2d0>
 80098e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ee:	db2f      	blt.n	8009950 <log_Cal+0x1e0>
 80098f0:	4a51      	ldr	r2, [pc, #324]	; (8009a38 <log_Cal+0x2c8>)
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	edd3 7a00 	vldr	s15, [r3]
 80098fc:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8009a44 <log_Cal+0x2d4>
 8009900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009908:	db22      	blt.n	8009950 <log_Cal+0x1e0>
				for( h=0 ;h<=5;h++){
 800990a:	2300      	movs	r3, #0
 800990c:	64bb      	str	r3, [r7, #72]	; 0x48
 800990e:	e019      	b.n	8009944 <log_Cal+0x1d4>
					if(secondsp[s-h] < buff)break;
 8009910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	4a48      	ldr	r2, [pc, #288]	; (8009a38 <log_Cal+0x2c8>)
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	edd3 7a00 	vldr	s15, [r3]
 8009920:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992c:	dc0e      	bgt.n	800994c <log_Cal+0x1dc>
					secondsp[s-h] = buff;
 800992e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	4a40      	ldr	r2, [pc, #256]	; (8009a38 <log_Cal+0x2c8>)
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800993c:	601a      	str	r2, [r3, #0]
				for( h=0 ;h<=5;h++){
 800993e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009940:	3301      	adds	r3, #1
 8009942:	64bb      	str	r3, [r7, #72]	; 0x48
 8009944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009946:	2b05      	cmp	r3, #5
 8009948:	d9e2      	bls.n	8009910 <log_Cal+0x1a0>
			if(buff>=2500 && secondsp[s]>=5000){
 800994a:	e04f      	b.n	80099ec <log_Cal+0x27c>
					if(secondsp[s-h] < buff)break;
 800994c:	bf00      	nop
			if(buff>=2500 && secondsp[s]>=5000){
 800994e:	e04d      	b.n	80099ec <log_Cal+0x27c>

				}
			}else if(buff>=2500){
 8009950:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009954:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8009a40 <log_Cal+0x2d0>
 8009958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	db20      	blt.n	80099a4 <log_Cal+0x234>
				for( h=0 ;h<=5;h++){
 8009962:	2300      	movs	r3, #0
 8009964:	64bb      	str	r3, [r7, #72]	; 0x48
 8009966:	e019      	b.n	800999c <log_Cal+0x22c>
					if(secondsp[s-h] < buff)break;
 8009968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	4a32      	ldr	r2, [pc, #200]	; (8009a38 <log_Cal+0x2c8>)
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	edd3 7a00 	vldr	s15, [r3]
 8009978:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800997c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009984:	dc2f      	bgt.n	80099e6 <log_Cal+0x276>
					secondsp[s-h] = buff;
 8009986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	4a2a      	ldr	r2, [pc, #168]	; (8009a38 <log_Cal+0x2c8>)
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009994:	601a      	str	r2, [r3, #0]
				for( h=0 ;h<=5;h++){
 8009996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009998:	3301      	adds	r3, #1
 800999a:	64bb      	str	r3, [r7, #72]	; 0x48
 800999c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800999e:	2b05      	cmp	r3, #5
 80099a0:	d9e2      	bls.n	8009968 <log_Cal+0x1f8>
 80099a2:	e023      	b.n	80099ec <log_Cal+0x27c>

				}
			}else {//if(buff<=3000 && secondsp[s]>=5000){
				for( h=0 ;h<=5;h++){
 80099a4:	2300      	movs	r3, #0
 80099a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80099a8:	e019      	b.n	80099de <log_Cal+0x26e>
					if(secondsp[s-h] < buff)break;
 80099aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	4a21      	ldr	r2, [pc, #132]	; (8009a38 <log_Cal+0x2c8>)
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	edd3 7a00 	vldr	s15, [r3]
 80099ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80099be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c6:	dc10      	bgt.n	80099ea <log_Cal+0x27a>
					secondsp[s-h] = buff;
 80099c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	4a1a      	ldr	r2, [pc, #104]	; (8009a38 <log_Cal+0x2c8>)
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d6:	601a      	str	r2, [r3, #0]
				for( h=0 ;h<=5;h++){
 80099d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099da:	3301      	adds	r3, #1
 80099dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80099de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	d9e2      	bls.n	80099aa <log_Cal+0x23a>
 80099e4:	e002      	b.n	80099ec <log_Cal+0x27c>
					if(secondsp[s-h] < buff)break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <log_Cal+0x27c>
					if(secondsp[s-h] < buff)break;
 80099ea:	bf00      	nop
//					if(secondsp[s-h] < buff)break;
//					secondsp[s-h] = buff;
//
//				}
//			}
			s=s-h;
 80099ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		buff = secondsp[s];
 80099f4:	4a10      	ldr	r2, [pc, #64]	; (8009a38 <log_Cal+0x2c8>)
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	637b      	str	r3, [r7, #52]	; 0x34
	for(int s=i-1;s>=0;s--){
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	3b01      	subs	r3, #1
 8009a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f6bf af5a 	bge.w	80098c2 <log_Cal+0x152>
	}


	for(int s=i-2;s>=0;s--){
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a10:	3b02      	subs	r3, #2
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a14:	e077      	b.n	8009b06 <log_Cal+0x396>
 8009a16:	bf00      	nop
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	40977000 	.word	0x40977000
 8009a20:	461c4000 	.word	0x461c4000
 8009a24:	080162a0 	.word	0x080162a0
 8009a28:	2000c2dc 	.word	0x2000c2dc
 8009a2c:	080162a8 	.word	0x080162a8
 8009a30:	2000c2e4 	.word	0x2000c2e4
 8009a34:	2000c30c 	.word	0x2000c30c
 8009a38:	20000210 	.word	0x20000210
 8009a3c:	20006160 	.word	0x20006160
 8009a40:	451c4000 	.word	0x451c4000
 8009a44:	459c4000 	.word	0x459c4000
		Lo=second_load[s];
 8009a48:	4a9e      	ldr	r2, [pc, #632]	; (8009cc4 <log_Cal+0x554>)
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60bb      	str	r3, [r7, #8]
	//	Lo_buff -= Lo;
//		printf("%lf\r\n",Lo);
//		HAL_Delay(10);
		if((secondsp[s-1] - secondsp[s])/(Lo/(double)work_ram[26])>Decm)secondsp[s-1]=Decm*Lo+secondsp[s];
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	3b01      	subs	r3, #1
 8009a58:	4a9b      	ldr	r2, [pc, #620]	; (8009cc8 <log_Cal+0x558>)
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	ed93 7a00 	vldr	s14, [r3]
 8009a62:	4a99      	ldr	r2, [pc, #612]	; (8009cc8 <log_Cal+0x558>)
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	edd3 7a00 	vldr	s15, [r3]
 8009a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a72:	ee17 0a90 	vmov	r0, s15
 8009a76:	f7fe fc9f 	bl	80083b8 <__aeabi_f2d>
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	68b8      	ldr	r0, [r7, #8]
 8009a80:	f7fe fc9a 	bl	80083b8 <__aeabi_f2d>
 8009a84:	4680      	mov	r8, r0
 8009a86:	4689      	mov	r9, r1
 8009a88:	4b90      	ldr	r3, [pc, #576]	; (8009ccc <log_Cal+0x55c>)
 8009a8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fc71 	bl	8008374 <__aeabi_ui2d>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7fe fe0f 	bl	80086bc <__aeabi_ddiv>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7fe fe09 	bl	80086bc <__aeabi_ddiv>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	4625      	mov	r5, r4
 8009ab0:	461c      	mov	r4, r3
 8009ab2:	4b87      	ldr	r3, [pc, #540]	; (8009cd0 <log_Cal+0x560>)
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fc6c 	bl	8008394 <__aeabi_i2d>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	f7fe ff60 	bl	8008988 <__aeabi_dcmpgt>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d018      	beq.n	8009b00 <log_Cal+0x390>
 8009ace:	4b80      	ldr	r3, [pc, #512]	; (8009cd0 <log_Cal+0x560>)
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ae2:	4a79      	ldr	r2, [pc, #484]	; (8009cc8 <log_Cal+0x558>)
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	edd3 7a00 	vldr	s15, [r3]
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	3b01      	subs	r3, #1
 8009af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009af6:	4a74      	ldr	r2, [pc, #464]	; (8009cc8 <log_Cal+0x558>)
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	edc3 7a00 	vstr	s15, [r3]
	for(int s=i-2;s>=0;s--){
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	3b01      	subs	r3, #1
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da9d      	bge.n	8009a48 <log_Cal+0x2d8>
	}

	for(int s=1;s<=i;s++){
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b10:	e05e      	b.n	8009bd0 <log_Cal+0x460>
		Lo=second_load[s];
 8009b12:	4a6c      	ldr	r2, [pc, #432]	; (8009cc4 <log_Cal+0x554>)
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60bb      	str	r3, [r7, #8]
		//Lo_buff += Lo;
		if((secondsp[s] - secondsp[s-1])/(Lo/(double)work_ram[26])>Accm)secondsp[s]=Accm*Lo+secondsp[s-1];
 8009b1e:	4a6a      	ldr	r2, [pc, #424]	; (8009cc8 <log_Cal+0x558>)
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	ed93 7a00 	vldr	s14, [r3]
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	4a66      	ldr	r2, [pc, #408]	; (8009cc8 <log_Cal+0x558>)
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	edd3 7a00 	vldr	s15, [r3]
 8009b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b3c:	ee17 0a90 	vmov	r0, s15
 8009b40:	f7fe fc3a 	bl	80083b8 <__aeabi_f2d>
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	68b8      	ldr	r0, [r7, #8]
 8009b4a:	f7fe fc35 	bl	80083b8 <__aeabi_f2d>
 8009b4e:	4680      	mov	r8, r0
 8009b50:	4689      	mov	r9, r1
 8009b52:	4b5e      	ldr	r3, [pc, #376]	; (8009ccc <log_Cal+0x55c>)
 8009b54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fc0c 	bl	8008374 <__aeabi_ui2d>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7fe fdaa 	bl	80086bc <__aeabi_ddiv>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7fe fda4 	bl	80086bc <__aeabi_ddiv>
 8009b74:	4603      	mov	r3, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	4625      	mov	r5, r4
 8009b7a:	461c      	mov	r4, r3
 8009b7c:	4b55      	ldr	r3, [pc, #340]	; (8009cd4 <log_Cal+0x564>)
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fc07 	bl	8008394 <__aeabi_i2d>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7fe fefb 	bl	8008988 <__aeabi_dcmpgt>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d018      	beq.n	8009bca <log_Cal+0x45a>
 8009b98:	4b4e      	ldr	r3, [pc, #312]	; (8009cd4 <log_Cal+0x564>)
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ba4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	4a45      	ldr	r2, [pc, #276]	; (8009cc8 <log_Cal+0x558>)
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	edd3 7a00 	vldr	s15, [r3]
 8009bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bbe:	4a42      	ldr	r2, [pc, #264]	; (8009cc8 <log_Cal+0x558>)
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	edc3 7a00 	vstr	s15, [r3]
	for(int s=1;s<=i;s++){
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	3301      	adds	r3, #1
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d29c      	bcs.n	8009b12 <log_Cal+0x3a2>

	}
	for(int s=0;s<=i;s++){
 8009bd8:	2300      	movs	r3, #0
 8009bda:	623b      	str	r3, [r7, #32]
 8009bdc:	e06b      	b.n	8009cb6 <log_Cal+0x546>
		if(secondsp[s+1]>=secondsp[s]){
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	3301      	adds	r3, #1
 8009be2:	4a39      	ldr	r2, [pc, #228]	; (8009cc8 <log_Cal+0x558>)
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	ed93 7a00 	vldr	s14, [r3]
 8009bec:	4a36      	ldr	r2, [pc, #216]	; (8009cc8 <log_Cal+0x558>)
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	edd3 7a00 	vldr	s15, [r3]
 8009bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	db17      	blt.n	8009c32 <log_Cal+0x4c2>
			if(sd_buff==0)sd = secondsp[s];
 8009c02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0e:	d105      	bne.n	8009c1c <log_Cal+0x4ac>
 8009c10:	4a2d      	ldr	r2, [pc, #180]	; (8009cc8 <log_Cal+0x558>)
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	643b      	str	r3, [r7, #64]	; 0x40
			sd_buff++;
 8009c1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c28:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			sd_slo= 0;
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	63bb      	str	r3, [r7, #56]	; 0x38

		}
		if(secondsp[s+1]<=secondsp[s]){
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	3301      	adds	r3, #1
 8009c36:	4a24      	ldr	r2, [pc, #144]	; (8009cc8 <log_Cal+0x558>)
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	ed93 7a00 	vldr	s14, [r3]
 8009c40:	4a21      	ldr	r2, [pc, #132]	; (8009cc8 <log_Cal+0x558>)
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	edd3 7a00 	vldr	s15, [r3]
 8009c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c54:	d82c      	bhi.n	8009cb0 <log_Cal+0x540>

			if(sd_buff <= 5 && sd_slo==0) speed_sloow(s-sd_buff,s,sd);
 8009c56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c5a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c66:	d818      	bhi.n	8009c9a <log_Cal+0x52a>
 8009c68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009c6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c74:	d111      	bne.n	8009c9a <log_Cal+0x52a>
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c8c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009c90:	6a39      	ldr	r1, [r7, #32]
 8009c92:	ee17 0a90 	vmov	r0, s15
 8009c96:	f7ff f999 	bl	8008fcc <speed_sloow>
			sd_slo++;
 8009c9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ca6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			sd_buff= 0;
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int s=0;s<=i;s++){
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	623b      	str	r3, [r7, #32]
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d28f      	bcs.n	8009bde <log_Cal+0x46e>

		}
	}
	for(int s=i;s>=0;s--){
 8009cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	e075      	b.n	8009db0 <log_Cal+0x640>
 8009cc4:	20006160 	.word	0x20006160
 8009cc8:	20000210 	.word	0x20000210
 8009ccc:	2000c30c 	.word	0x2000c30c
 8009cd0:	2000c306 	.word	0x2000c306
 8009cd4:	2000c308 	.word	0x2000c308
		if(secondsp[s-1]>=secondsp[s]){
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	4a5f      	ldr	r2, [pc, #380]	; (8009e5c <log_Cal+0x6ec>)
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	ed93 7a00 	vldr	s14, [r3]
 8009ce6:	4a5d      	ldr	r2, [pc, #372]	; (8009e5c <log_Cal+0x6ec>)
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	edd3 7a00 	vldr	s15, [r3]
 8009cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	db17      	blt.n	8009d2c <log_Cal+0x5bc>
			if(sd_buff==0)sd = secondsp[s];
 8009cfc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d08:	d105      	bne.n	8009d16 <log_Cal+0x5a6>
 8009d0a:	4a54      	ldr	r2, [pc, #336]	; (8009e5c <log_Cal+0x6ec>)
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	643b      	str	r3, [r7, #64]	; 0x40
			sd_buff++;
 8009d16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d22:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			sd_slo= 0;
 8009d26:	f04f 0300 	mov.w	r3, #0
 8009d2a:	63bb      	str	r3, [r7, #56]	; 0x38

		}
		if(secondsp[s-1]<=secondsp[s]){
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	4a4a      	ldr	r2, [pc, #296]	; (8009e5c <log_Cal+0x6ec>)
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	ed93 7a00 	vldr	s14, [r3]
 8009d3a:	4a48      	ldr	r2, [pc, #288]	; (8009e5c <log_Cal+0x6ec>)
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	edd3 7a00 	vldr	s15, [r3]
 8009d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4e:	d82c      	bhi.n	8009daa <log_Cal+0x63a>

			if(sd_buff <=  5 && sd_slo==0) speed_sloow(s,s+sd_buff,sd);
 8009d50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d54:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d60:	d818      	bhi.n	8009d94 <log_Cal+0x624>
 8009d62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009d66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	d111      	bne.n	8009d94 <log_Cal+0x624>
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d86:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009d8a:	ee17 1a90 	vmov	r1, s15
 8009d8e:	69f8      	ldr	r0, [r7, #28]
 8009d90:	f7ff f91c 	bl	8008fcc <speed_sloow>
			sd_slo++;
 8009d94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009da0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			sd_buff= 0;
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int s=i;s>=0;s--){
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	da90      	bge.n	8009cd8 <log_Cal+0x568>
//			}
//			s=s-h;
//		}
//		buff = secondsp[s];
//	}
	count_num = i;
 8009db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db8:	4a29      	ldr	r2, [pc, #164]	; (8009e60 <log_Cal+0x6f0>)
 8009dba:	6013      	str	r3, [r2, #0]
//		//printf("%d,",s);
//		printf("%f\n\r",mon_speed);
//		HAL_Delay(10);
//		count_num = s;
//	}
	i=0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	657b      	str	r3, [r7, #84]	; 0x54
	loadlog_adress = start_adress_sector9;
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <log_Cal+0x6f4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a28      	ldr	r2, [pc, #160]	; (8009e68 <log_Cal+0x6f8>)
 8009dc6:	6013      	str	r3, [r2, #0]
	while(1){
		Lo=*(float*)loadlog_adress;
 8009dc8:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <log_Cal+0x6f8>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	60bb      	str	r3, [r7, #8]
		if(isnan(Lo) != 0)break;
 8009dd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8009dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009dd8:	eeb4 7a67 	vcmp.f32	s14, s15
 8009ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de0:	d611      	bvs.n	8009e06 <log_Cal+0x696>
		second_load[i] = Lo;
 8009de2:	4a22      	ldr	r2, [pc, #136]	; (8009e6c <log_Cal+0x6fc>)
 8009de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	601a      	str	r2, [r3, #0]
		loadlog_adress+= 0x04;
 8009dee:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <log_Cal+0x6f8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <log_Cal+0x6f8>)
 8009df6:	6013      	str	r3, [r2, #0]
		//printf("%lf\r\n",Lo);
		LED(2);
 8009df8:	2002      	movs	r0, #2
 8009dfa:	f002 f8eb 	bl	800bfd4 <LED>
		i++;
 8009dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e00:	3301      	adds	r3, #1
 8009e02:	657b      	str	r3, [r7, #84]	; 0x54
		Lo=*(float*)loadlog_adress;
 8009e04:	e7e0      	b.n	8009dc8 <log_Cal+0x658>
		if(isnan(Lo) != 0)break;
 8009e06:	bf00      	nop
		//HAL_Delay(500);

	}

	side_adress = start_adress_sector10;
 8009e08:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <log_Cal+0x700>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a19      	ldr	r2, [pc, #100]	; (8009e74 <log_Cal+0x704>)
 8009e0e:	6013      	str	r3, [r2, #0]
	while(1){

		cao = *(uint32_t*)side_adress;
 8009e10:	4b18      	ldr	r3, [pc, #96]	; (8009e74 <log_Cal+0x704>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	613b      	str	r3, [r7, #16]
		fu =  *(float*)side_adress;
 8009e18:	4b16      	ldr	r3, [pc, #88]	; (8009e74 <log_Cal+0x704>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
		if(isnan(fu) != 0)break;
 8009e20:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e28:	eeb4 7a67 	vcmp.f32	s14, s15
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	d60e      	bvs.n	8009e50 <log_Cal+0x6e0>
		correction[d] = cao;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	b299      	uxth	r1, r3
 8009e36:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <log_Cal+0x708>)
 8009e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		d++;
 8009e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e40:	3301      	adds	r3, #1
 8009e42:	653b      	str	r3, [r7, #80]	; 0x50
		side_adress+= 0x04;
 8009e44:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <log_Cal+0x704>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	4a0a      	ldr	r2, [pc, #40]	; (8009e74 <log_Cal+0x704>)
 8009e4c:	6013      	str	r3, [r2, #0]
		cao = *(uint32_t*)side_adress;
 8009e4e:	e7df      	b.n	8009e10 <log_Cal+0x6a0>
		if(isnan(fu) != 0)break;
 8009e50:	bf00      	nop
	}
}
 8009e52:	bf00      	nop
 8009e54:	3758      	adds	r7, #88	; 0x58
 8009e56:	46bd      	mov	sp, r7
 8009e58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e5c:	20000210 	.word	0x20000210
 8009e60:	2000c0b8 	.word	0x2000c0b8
 8009e64:	080162a8 	.word	0x080162a8
 8009e68:	2000c2e4 	.word	0x2000c2e4
 8009e6c:	20006160 	.word	0x20006160
 8009e70:	080162ac 	.word	0x080162ac
 8009e74:	2000c2ec 	.word	0x2000c2ec
 8009e78:	2000c0c0 	.word	0x2000c0c0
 8009e7c:	00000000 	.word	0x00000000

08009e80 <second_driv>:
inline void second_driv(float log){
 8009e80:	b5b0      	push	{r4, r5, r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	ed87 0a01 	vstr	s0, [r7, #4]
	static  int hu=0;
	static float logbuff2=0;
	static float cale_val=0;
	static uint16_t num=0;
	static uint16_t corr = 0;
	float cale=0;
 8009e8a:	f04f 0300 	mov.w	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
	static int frp=0;
	static int frap = 0;
	static int cao=0;
	int cao_d=0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]
	int cao_v=10000;
 8009e94:	f242 7310 	movw	r3, #10000	; 0x2710
 8009e98:	61fb      	str	r3, [r7, #28]
	int carr_d=0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	61bb      	str	r3, [r7, #24]
	int cou_buff=0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	617b      	str	r3, [r7, #20]
	static uint16_t coi=0;
	static int cros=39;

	//float fu=0;
	static uint d=0;
	if(i<=0)corr=correction[0];
 8009ea2:	4b8f      	ldr	r3, [pc, #572]	; (800a0e0 <second_driv+0x260>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dc03      	bgt.n	8009eb2 <second_driv+0x32>
 8009eaa:	4b8e      	ldr	r3, [pc, #568]	; (800a0e4 <second_driv+0x264>)
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	4b8e      	ldr	r3, [pc, #568]	; (800a0e8 <second_driv+0x268>)
 8009eb0:	801a      	strh	r2, [r3, #0]
	num++;
 8009eb2:	4b8e      	ldr	r3, [pc, #568]	; (800a0ec <second_driv+0x26c>)
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	4b8c      	ldr	r3, [pc, #560]	; (800a0ec <second_driv+0x26c>)
 8009ebc:	801a      	strh	r2, [r3, #0]
	cale_val += calc_angle()*T;
 8009ebe:	f000 fd43 	bl	800a948 <calc_angle>
 8009ec2:	ee10 3a10 	vmov	r3, s0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fa76 	bl	80083b8 <__aeabi_f2d>
 8009ecc:	a37e      	add	r3, pc, #504	; (adr r3, 800a0c8 <second_driv+0x248>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f7fe fac9 	bl	8008468 <__aeabi_dmul>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	460c      	mov	r4, r1
 8009eda:	4625      	mov	r5, r4
 8009edc:	461c      	mov	r4, r3
 8009ede:	4b84      	ldr	r3, [pc, #528]	; (800a0f0 <second_driv+0x270>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fa68 	bl	80083b8 <__aeabi_f2d>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7fe f904 	bl	80080fc <__adddf3>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	4618      	mov	r0, r3
 8009efa:	4621      	mov	r1, r4
 8009efc:	f7fe fd8c 	bl	8008a18 <__aeabi_d2f>
 8009f00:	4602      	mov	r2, r0
 8009f02:	4b7b      	ldr	r3, [pc, #492]	; (800a0f0 <second_driv+0x270>)
 8009f04:	601a      	str	r2, [r3, #0]

	logbuff = logbuff+ log;
 8009f06:	4b7b      	ldr	r3, [pc, #492]	; (800a0f4 <second_driv+0x274>)
 8009f08:	ed93 7a00 	vldr	s14, [r3]
 8009f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f14:	4b77      	ldr	r3, [pc, #476]	; (800a0f4 <second_driv+0x274>)
 8009f16:	edc3 7a00 	vstr	s15, [r3]
	logbuff2 = logbuff2 + log;
 8009f1a:	4b77      	ldr	r3, [pc, #476]	; (800a0f8 <second_driv+0x278>)
 8009f1c:	ed93 7a00 	vldr	s14, [r3]
 8009f20:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f28:	4b73      	ldr	r3, [pc, #460]	; (800a0f8 <second_driv+0x278>)
 8009f2a:	edc3 7a00 	vstr	s15, [r3]
	if(logbuff2>=10.000){
 8009f2e:	4b72      	ldr	r3, [pc, #456]	; (800a0f8 <second_driv+0x278>)
 8009f30:	edd3 7a00 	vldr	s15, [r3]
 8009f34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f40:	db3b      	blt.n	8009fba <second_driv+0x13a>
		log_flag = 1;
 8009f42:	4b6e      	ldr	r3, [pc, #440]	; (800a0fc <second_driv+0x27c>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	701a      	strb	r2, [r3, #0]
		cale = cale_val;
 8009f48:	4b69      	ldr	r3, [pc, #420]	; (800a0f0 <second_driv+0x270>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	613b      	str	r3, [r7, #16]
		if((cale_buff-cale)<=0.05 && (cale_buff-cale)>=-0.05 )frp++;//0.005
 8009f4e:	4b6c      	ldr	r3, [pc, #432]	; (800a100 <second_driv+0x280>)
 8009f50:	ed93 7a00 	vldr	s14, [r3]
 8009f54:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f5c:	ee17 0a90 	vmov	r0, s15
 8009f60:	f7fe fa2a 	bl	80083b8 <__aeabi_f2d>
 8009f64:	a35a      	add	r3, pc, #360	; (adr r3, 800a0d0 <second_driv+0x250>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f7fe fcf9 	bl	8008960 <__aeabi_dcmple>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d017      	beq.n	8009fa4 <second_driv+0x124>
 8009f74:	4b62      	ldr	r3, [pc, #392]	; (800a100 <second_driv+0x280>)
 8009f76:	ed93 7a00 	vldr	s14, [r3]
 8009f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f82:	ee17 0a90 	vmov	r0, s15
 8009f86:	f7fe fa17 	bl	80083b8 <__aeabi_f2d>
 8009f8a:	a353      	add	r3, pc, #332	; (adr r3, 800a0d8 <second_driv+0x258>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7fe fcf0 	bl	8008974 <__aeabi_dcmpge>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <second_driv+0x124>
 8009f9a:	4b5a      	ldr	r3, [pc, #360]	; (800a104 <second_driv+0x284>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	4a58      	ldr	r2, [pc, #352]	; (800a104 <second_driv+0x284>)
 8009fa2:	6013      	str	r3, [r2, #0]
		cale_buff = cale;
 8009fa4:	4a56      	ldr	r2, [pc, #344]	; (800a100 <second_driv+0x280>)
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6013      	str	r3, [r2, #0]
		cale_val=0;
 8009faa:	4b51      	ldr	r3, [pc, #324]	; (800a0f0 <second_driv+0x270>)
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
		logbuff2=0;
 8009fb2:	4b51      	ldr	r3, [pc, #324]	; (800a0f8 <second_driv+0x278>)
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]
	}
	//test = logbuff;
	//driv_fan(speedget);
	if(straight_flag){
 8009fba:	4b53      	ldr	r3, [pc, #332]	; (800a108 <second_driv+0x288>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d011      	beq.n	8009fe6 <second_driv+0x166>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009fc8:	4850      	ldr	r0, [pc, #320]	; (800a10c <second_driv+0x28c>)
 8009fca:	f006 f809 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fd4:	484d      	ldr	r0, [pc, #308]	; (800a10c <second_driv+0x28c>)
 8009fd6:	f006 f803 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fe0:	484a      	ldr	r0, [pc, #296]	; (800a10c <second_driv+0x28c>)
 8009fe2:	f005 fffd 	bl	800ffe0 <HAL_GPIO_WritePin>
	}
	//else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(logbuff >= second_load[i]){
 8009fe6:	4b3e      	ldr	r3, [pc, #248]	; (800a0e0 <second_driv+0x260>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a49      	ldr	r2, [pc, #292]	; (800a110 <second_driv+0x290>)
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	ed93 7a00 	vldr	s14, [r3]
 8009ff4:	4b3f      	ldr	r3, [pc, #252]	; (800a0f4 <second_driv+0x274>)
 8009ff6:	edd3 7a00 	vldr	s15, [r3]
 8009ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a002:	f200 80fb 	bhi.w	800a1fc <second_driv+0x37c>
		if(logbuff > second_load[i+1]) i++;
 800a006:	4b36      	ldr	r3, [pc, #216]	; (800a0e0 <second_driv+0x260>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3301      	adds	r3, #1
 800a00c:	4a40      	ldr	r2, [pc, #256]	; (800a110 <second_driv+0x290>)
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	ed93 7a00 	vldr	s14, [r3]
 800a016:	4b37      	ldr	r3, [pc, #220]	; (800a0f4 <second_driv+0x274>)
 800a018:	edd3 7a00 	vldr	s15, [r3]
 800a01c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	d504      	bpl.n	800a030 <second_driv+0x1b0>
 800a026:	4b2e      	ldr	r3, [pc, #184]	; (800a0e0 <second_driv+0x260>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3301      	adds	r3, #1
 800a02c:	4a2c      	ldr	r2, [pc, #176]	; (800a0e0 <second_driv+0x260>)
 800a02e:	6013      	str	r3, [r2, #0]

		coi++;
 800a030:	4b38      	ldr	r3, [pc, #224]	; (800a114 <second_driv+0x294>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	b29a      	uxth	r2, r3
 800a038:	4b36      	ldr	r3, [pc, #216]	; (800a114 <second_driv+0x294>)
 800a03a:	801a      	strh	r2, [r3, #0]
		if(secondsp[i]<1500 && count_num > i && maker_flag==1)secondsp[i]=1500;
 800a03c:	4b28      	ldr	r3, [pc, #160]	; (800a0e0 <second_driv+0x260>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a35      	ldr	r2, [pc, #212]	; (800a118 <second_driv+0x298>)
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	edd3 7a00 	vldr	s15, [r3]
 800a04a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a11c <second_driv+0x29c>
 800a04e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a056:	d510      	bpl.n	800a07a <second_driv+0x1fa>
 800a058:	4b31      	ldr	r3, [pc, #196]	; (800a120 <second_driv+0x2a0>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	4b20      	ldr	r3, [pc, #128]	; (800a0e0 <second_driv+0x260>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	dd0a      	ble.n	800a07a <second_driv+0x1fa>
 800a064:	4b2f      	ldr	r3, [pc, #188]	; (800a124 <second_driv+0x2a4>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <second_driv+0x1fa>
 800a06c:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <second_driv+0x260>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a29      	ldr	r2, [pc, #164]	; (800a118 <second_driv+0x298>)
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	4a2c      	ldr	r2, [pc, #176]	; (800a128 <second_driv+0x2a8>)
 800a078:	601a      	str	r2, [r3, #0]
		if(count_num-100 < i || i <= 100){
 800a07a:	4b29      	ldr	r3, [pc, #164]	; (800a120 <second_driv+0x2a0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800a082:	4b17      	ldr	r3, [pc, #92]	; (800a0e0 <second_driv+0x260>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	db03      	blt.n	800a092 <second_driv+0x212>
 800a08a:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <second_driv+0x260>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b64      	cmp	r3, #100	; 0x64
 800a090:	dc4e      	bgt.n	800a130 <second_driv+0x2b0>
			goal=1;
 800a092:	4b26      	ldr	r3, [pc, #152]	; (800a12c <second_driv+0x2ac>)
 800a094:	2201      	movs	r2, #1
 800a096:	701a      	strb	r2, [r3, #0]
			if(secondsp[i]<1500)secondsp[i]=1500;
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <second_driv+0x260>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <second_driv+0x298>)
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	edd3 7a00 	vldr	s15, [r3]
 800a0a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a11c <second_driv+0x29c>
 800a0aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b2:	d540      	bpl.n	800a136 <second_driv+0x2b6>
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <second_driv+0x260>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a17      	ldr	r2, [pc, #92]	; (800a118 <second_driv+0x298>)
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	4a1a      	ldr	r2, [pc, #104]	; (800a128 <second_driv+0x2a8>)
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e038      	b.n	800a136 <second_driv+0x2b6>
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800a0cc:	3f50624d 	.word	0x3f50624d
 800a0d0:	9999999a 	.word	0x9999999a
 800a0d4:	3fa99999 	.word	0x3fa99999
 800a0d8:	9999999a 	.word	0x9999999a
 800a0dc:	bfa99999 	.word	0xbfa99999
 800a0e0:	2000c26c 	.word	0x2000c26c
 800a0e4:	2000c0c0 	.word	0x2000c0c0
 800a0e8:	2000c270 	.word	0x2000c270
 800a0ec:	2000c272 	.word	0x2000c272
 800a0f0:	2000c274 	.word	0x2000c274
 800a0f4:	2000c278 	.word	0x2000c278
 800a0f8:	2000c27c 	.word	0x2000c27c
 800a0fc:	2000020a 	.word	0x2000020a
 800a100:	2000c280 	.word	0x2000c280
 800a104:	2000c284 	.word	0x2000c284
 800a108:	2000020c 	.word	0x2000020c
 800a10c:	40020000 	.word	0x40020000
 800a110:	20006160 	.word	0x20006160
 800a114:	2000c288 	.word	0x2000c288
 800a118:	20000210 	.word	0x20000210
 800a11c:	44bb8000 	.word	0x44bb8000
 800a120:	2000c0b8 	.word	0x2000c0b8
 800a124:	2000c2b8 	.word	0x2000c2b8
 800a128:	44bb8000 	.word	0x44bb8000
 800a12c:	20000008 	.word	0x20000008
		}
		else goal=0;
 800a130:	4b9f      	ldr	r3, [pc, #636]	; (800a3b0 <second_driv+0x530>)
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]

		Average_speed = secondsp[i];
 800a136:	4b9f      	ldr	r3, [pc, #636]	; (800a3b4 <second_driv+0x534>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a9f      	ldr	r2, [pc, #636]	; (800a3b8 <second_driv+0x538>)
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	edd3 7a00 	vldr	s15, [r3]
 800a144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a148:	ee17 3a90 	vmov	r3, s15
 800a14c:	b21a      	sxth	r2, r3
 800a14e:	4b9b      	ldr	r3, [pc, #620]	; (800a3bc <second_driv+0x53c>)
 800a150:	801a      	strh	r2, [r3, #0]
		co++;
 800a152:	4b9b      	ldr	r3, [pc, #620]	; (800a3c0 <second_driv+0x540>)
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	3301      	adds	r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	4b99      	ldr	r3, [pc, #612]	; (800a3c0 <second_driv+0x540>)
 800a15c:	801a      	strh	r2, [r3, #0]
		i++;
 800a15e:	4b95      	ldr	r3, [pc, #596]	; (800a3b4 <second_driv+0x534>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a93      	ldr	r2, [pc, #588]	; (800a3b4 <second_driv+0x534>)
 800a166:	6013      	str	r3, [r2, #0]
		cao++;
 800a168:	4b96      	ldr	r3, [pc, #600]	; (800a3c4 <second_driv+0x544>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	4a95      	ldr	r2, [pc, #596]	; (800a3c4 <second_driv+0x544>)
 800a170:	6013      	str	r3, [r2, #0]
		FLASH_Write_Word_F(actual__callog_adress,cale_val);
 800a172:	4b95      	ldr	r3, [pc, #596]	; (800a3c8 <second_driv+0x548>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	4b95      	ldr	r3, [pc, #596]	; (800a3cc <second_driv+0x54c>)
 800a178:	edd3 7a00 	vldr	s15, [r3]
 800a17c:	eeb0 0a67 	vmov.f32	s0, s15
 800a180:	4610      	mov	r0, r2
 800a182:	f000 faa3 	bl	800a6cc <FLASH_Write_Word_F>
		FLASH_Write_Word_F(actual__velo_adress,Average_speed);
 800a186:	4b92      	ldr	r3, [pc, #584]	; (800a3d0 <second_driv+0x550>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	4b8c      	ldr	r3, [pc, #560]	; (800a3bc <second_driv+0x53c>)
 800a18c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a198:	eeb0 0a67 	vmov.f32	s0, s15
 800a19c:	4610      	mov	r0, r2
 800a19e:	f000 fa95 	bl	800a6cc <FLASH_Write_Word_F>
		FLASH_Write_Word_F(plan_velo_adress,speedget);
 800a1a2:	4b8c      	ldr	r3, [pc, #560]	; (800a3d4 <second_driv+0x554>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	4b8c      	ldr	r3, [pc, #560]	; (800a3d8 <second_driv+0x558>)
 800a1a8:	edd3 7a00 	vldr	s15, [r3]
 800a1ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f000 fa8b 	bl	800a6cc <FLASH_Write_Word_F>
		plan_velo_adress += 0x04;
 800a1b6:	4b87      	ldr	r3, [pc, #540]	; (800a3d4 <second_driv+0x554>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4a85      	ldr	r2, [pc, #532]	; (800a3d4 <second_driv+0x554>)
 800a1be:	6013      	str	r3, [r2, #0]
		actual__velo_adress += 0x04;
 800a1c0:	4b83      	ldr	r3, [pc, #524]	; (800a3d0 <second_driv+0x550>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4a82      	ldr	r2, [pc, #520]	; (800a3d0 <second_driv+0x550>)
 800a1c8:	6013      	str	r3, [r2, #0]
		actual__callog_adress+= 0x04;
 800a1ca:	4b7f      	ldr	r3, [pc, #508]	; (800a3c8 <second_driv+0x548>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4a7d      	ldr	r2, [pc, #500]	; (800a3c8 <second_driv+0x548>)
 800a1d2:	6013      	str	r3, [r2, #0]
//			//if(abs((corr-i) <= 20) && cao >= 30) straight_flag = true;
//			//if(corr <= i)corr=correction[d+1];
//		}

//		cale_buff = cale;
		if(frp >= 40 || cross_line){
 800a1d4:	4b81      	ldr	r3, [pc, #516]	; (800a3dc <second_driv+0x55c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b27      	cmp	r3, #39	; 0x27
 800a1da:	dc03      	bgt.n	800a1e4 <second_driv+0x364>
 800a1dc:	4b80      	ldr	r3, [pc, #512]	; (800a3e0 <second_driv+0x560>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <second_driv+0x376>
			straight_flag = true;
 800a1e4:	4b7f      	ldr	r3, [pc, #508]	; (800a3e4 <second_driv+0x564>)
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]
			frp=30;
 800a1ea:	4b7c      	ldr	r3, [pc, #496]	; (800a3dc <second_driv+0x55c>)
 800a1ec:	221e      	movs	r2, #30
 800a1ee:	601a      	str	r2, [r3, #0]
			frap = 0;
 800a1f0:	4b7d      	ldr	r3, [pc, #500]	; (800a3e8 <second_driv+0x568>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
		}

		//cale_val=0;
		num=0;
 800a1f6:	4b7d      	ldr	r3, [pc, #500]	; (800a3ec <second_driv+0x56c>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	801a      	strh	r2, [r3, #0]
	}
//	if(correc_maker==1 ){
	if(correc_maker==1  && straight_flag == 1){
 800a1fc:	4b7c      	ldr	r3, [pc, #496]	; (800a3f0 <second_driv+0x570>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	f040 8092 	bne.w	800a32a <second_driv+0x4aa>
 800a206:	4b77      	ldr	r3, [pc, #476]	; (800a3e4 <second_driv+0x564>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	f040 808d 	bne.w	800a32a <second_driv+0x4aa>

		hu=0;
 800a210:	4b78      	ldr	r3, [pc, #480]	; (800a3f4 <second_driv+0x574>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
		while(1){
			cao = correction[hu];
 800a216:	4b77      	ldr	r3, [pc, #476]	; (800a3f4 <second_driv+0x574>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a77      	ldr	r2, [pc, #476]	; (800a3f8 <second_driv+0x578>)
 800a21c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a220:	461a      	mov	r2, r3
 800a222:	4b68      	ldr	r3, [pc, #416]	; (800a3c4 <second_driv+0x544>)
 800a224:	601a      	str	r2, [r3, #0]
			if(correction[hu]==0 && hu > 0)break;
 800a226:	4b73      	ldr	r3, [pc, #460]	; (800a3f4 <second_driv+0x574>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a73      	ldr	r2, [pc, #460]	; (800a3f8 <second_driv+0x578>)
 800a22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d103      	bne.n	800a23c <second_driv+0x3bc>
 800a234:	4b6f      	ldr	r3, [pc, #444]	; (800a3f4 <second_driv+0x574>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc1a      	bgt.n	800a272 <second_driv+0x3f2>
			cao_d = abs(i-cao);
 800a23c:	4b5d      	ldr	r3, [pc, #372]	; (800a3b4 <second_driv+0x534>)
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	4b60      	ldr	r3, [pc, #384]	; (800a3c4 <second_driv+0x544>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	bfb8      	it	lt
 800a24a:	425b      	neglt	r3, r3
 800a24c:	60fb      	str	r3, [r7, #12]

			//if(cao_d<30)break;
			if (cao_v > cao_d){
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	dd07      	ble.n	800a266 <second_driv+0x3e6>
				cao_v = cao_d;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	61fb      	str	r3, [r7, #28]
				cou_buff = cao;
 800a25a:	4b5a      	ldr	r3, [pc, #360]	; (800a3c4 <second_driv+0x544>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	617b      	str	r3, [r7, #20]
				carr_d=hu;
 800a260:	4b64      	ldr	r3, [pc, #400]	; (800a3f4 <second_driv+0x574>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	61bb      	str	r3, [r7, #24]
			}
			hu++;
 800a266:	4b63      	ldr	r3, [pc, #396]	; (800a3f4 <second_driv+0x574>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	4a61      	ldr	r2, [pc, #388]	; (800a3f4 <second_driv+0x574>)
 800a26e:	6013      	str	r3, [r2, #0]
			cao = correction[hu];
 800a270:	e7d1      	b.n	800a216 <second_driv+0x396>
			if(correction[hu]==0 && hu > 0)break;
 800a272:	bf00      	nop

		}
		if(abs(i-cou_buff)<=100 || (cao >= 500 && abs(i-cou_buff)<=500)){
 800a274:	4b4f      	ldr	r3, [pc, #316]	; (800a3b4 <second_driv+0x534>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800a280:	db05      	blt.n	800a28e <second_driv+0x40e>
 800a282:	4b4c      	ldr	r3, [pc, #304]	; (800a3b4 <second_driv+0x534>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b64      	cmp	r3, #100	; 0x64
 800a28c:	dd12      	ble.n	800a2b4 <second_driv+0x434>
 800a28e:	4b4d      	ldr	r3, [pc, #308]	; (800a3c4 <second_driv+0x544>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a296:	db3f      	blt.n	800a318 <second_driv+0x498>
 800a298:	4b46      	ldr	r3, [pc, #280]	; (800a3b4 <second_driv+0x534>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800a2a4:	db38      	blt.n	800a318 <second_driv+0x498>
 800a2a6:	4b43      	ldr	r3, [pc, #268]	; (800a3b4 <second_driv+0x534>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a2b2:	dc31      	bgt.n	800a318 <second_driv+0x498>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a2ba:	4850      	ldr	r0, [pc, #320]	; (800a3fc <second_driv+0x57c>)
 800a2bc:	f005 fe90 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a2c6:	484d      	ldr	r0, [pc, #308]	; (800a3fc <second_driv+0x57c>)
 800a2c8:	f005 fe8a 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a2d2:	484a      	ldr	r0, [pc, #296]	; (800a3fc <second_driv+0x57c>)
 800a2d4:	f005 fe84 	bl	800ffe0 <HAL_GPIO_WritePin>
			i = cou_buff;
 800a2d8:	4a36      	ldr	r2, [pc, #216]	; (800a3b4 <second_driv+0x534>)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	6013      	str	r3, [r2, #0]
			logbuff=second_load[i];
 800a2de:	4b35      	ldr	r3, [pc, #212]	; (800a3b4 <second_driv+0x534>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a47      	ldr	r2, [pc, #284]	; (800a400 <second_driv+0x580>)
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a46      	ldr	r2, [pc, #280]	; (800a404 <second_driv+0x584>)
 800a2ec:	6013      	str	r3, [r2, #0]
			hu = carr_d;
 800a2ee:	4a41      	ldr	r2, [pc, #260]	; (800a3f4 <second_driv+0x574>)
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	6013      	str	r3, [r2, #0]
			d= carr_d+1;
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4b43      	ldr	r3, [pc, #268]	; (800a408 <second_driv+0x588>)
 800a2fc:	601a      	str	r2, [r3, #0]
			corr=correction[d];
 800a2fe:	4b42      	ldr	r3, [pc, #264]	; (800a408 <second_driv+0x588>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a3d      	ldr	r2, [pc, #244]	; (800a3f8 <second_driv+0x578>)
 800a304:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a308:	4b40      	ldr	r3, [pc, #256]	; (800a40c <second_driv+0x58c>)
 800a30a:	801a      	strh	r2, [r3, #0]
			cao=0;
 800a30c:	4b2d      	ldr	r3, [pc, #180]	; (800a3c4 <second_driv+0x544>)
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]
			coi=0;
 800a312:	4b3f      	ldr	r3, [pc, #252]	; (800a410 <second_driv+0x590>)
 800a314:	2200      	movs	r2, #0
 800a316:	801a      	strh	r2, [r3, #0]


		}
//		d++;
//		corr=correction[d];
		straight_flag=false;
 800a318:	4b32      	ldr	r3, [pc, #200]	; (800a3e4 <second_driv+0x564>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 800a31e:	4b34      	ldr	r3, [pc, #208]	; (800a3f0 <second_driv+0x570>)
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
		frp=0;
 800a324:	4b2d      	ldr	r3, [pc, #180]	; (800a3dc <second_driv+0x55c>)
 800a326:	2200      	movs	r2, #0
 800a328:	601a      	str	r2, [r3, #0]
	}
	if(cross_maker){
 800a32a:	4b3a      	ldr	r3, [pc, #232]	; (800a414 <second_driv+0x594>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d029      	beq.n	800a386 <second_driv+0x506>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800a332:	2201      	movs	r2, #1
 800a334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a338:	4830      	ldr	r0, [pc, #192]	; (800a3fc <second_driv+0x57c>)
 800a33a:	f005 fe51 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800a33e:	2201      	movs	r2, #1
 800a340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a344:	482d      	ldr	r0, [pc, #180]	; (800a3fc <second_driv+0x57c>)
 800a346:	f005 fe4b 	bl	800ffe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800a34a:	2201      	movs	r2, #1
 800a34c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a350:	482a      	ldr	r0, [pc, #168]	; (800a3fc <second_driv+0x57c>)
 800a352:	f005 fe45 	bl	800ffe0 <HAL_GPIO_WritePin>
		i = work_ram[cros];
 800a356:	4b30      	ldr	r3, [pc, #192]	; (800a418 <second_driv+0x598>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a30      	ldr	r2, [pc, #192]	; (800a41c <second_driv+0x59c>)
 800a35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a360:	461a      	mov	r2, r3
 800a362:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <second_driv+0x534>)
 800a364:	601a      	str	r2, [r3, #0]
		logbuff=second_load[i];
 800a366:	4b13      	ldr	r3, [pc, #76]	; (800a3b4 <second_driv+0x534>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a25      	ldr	r2, [pc, #148]	; (800a400 <second_driv+0x580>)
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a24      	ldr	r2, [pc, #144]	; (800a404 <second_driv+0x584>)
 800a374:	6013      	str	r3, [r2, #0]
		cross_maker = false;
 800a376:	4b27      	ldr	r3, [pc, #156]	; (800a414 <second_driv+0x594>)
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
		cros++;
 800a37c:	4b26      	ldr	r3, [pc, #152]	; (800a418 <second_driv+0x598>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3301      	adds	r3, #1
 800a382:	4a25      	ldr	r2, [pc, #148]	; (800a418 <second_driv+0x598>)
 800a384:	6013      	str	r3, [r2, #0]
	}
	if(correc_maker==1){
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <second_driv+0x570>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d10b      	bne.n	800a3a6 <second_driv+0x526>
		frp=0;
 800a38e:	4b13      	ldr	r3, [pc, #76]	; (800a3dc <second_driv+0x55c>)
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
		coi=0;
 800a394:	4b1e      	ldr	r3, [pc, #120]	; (800a410 <second_driv+0x590>)
 800a396:	2200      	movs	r2, #0
 800a398:	801a      	strh	r2, [r3, #0]
		straight_flag = false;
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <second_driv+0x564>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 800a3a0:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <second_driv+0x570>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]

	}

}
 800a3a6:	bf00      	nop
 800a3a8:	3720      	adds	r7, #32
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000008 	.word	0x20000008
 800a3b4:	2000c26c 	.word	0x2000c26c
 800a3b8:	20000210 	.word	0x20000210
 800a3bc:	20014326 	.word	0x20014326
 800a3c0:	20000208 	.word	0x20000208
 800a3c4:	2000c28c 	.word	0x2000c28c
 800a3c8:	2000c2d8 	.word	0x2000c2d8
 800a3cc:	2000c274 	.word	0x2000c274
 800a3d0:	2000c2e8 	.word	0x2000c2e8
 800a3d4:	2000c2e0 	.word	0x2000c2e0
 800a3d8:	20014604 	.word	0x20014604
 800a3dc:	2000c284 	.word	0x2000c284
 800a3e0:	2000c2c8 	.word	0x2000c2c8
 800a3e4:	2000020c 	.word	0x2000020c
 800a3e8:	2000c290 	.word	0x2000c290
 800a3ec:	2000c272 	.word	0x2000c272
 800a3f0:	2000c0b0 	.word	0x2000c0b0
 800a3f4:	2000c294 	.word	0x2000c294
 800a3f8:	2000c0c0 	.word	0x2000c0c0
 800a3fc:	40020000 	.word	0x40020000
 800a400:	20006160 	.word	0x20006160
 800a404:	2000c278 	.word	0x2000c278
 800a408:	2000c298 	.word	0x2000c298
 800a40c:	2000c270 	.word	0x2000c270
 800a410:	2000c288 	.word	0x2000c288
 800a414:	2000c250 	.word	0x2000c250
 800a418:	20000004 	.word	0x20000004
 800a41c:	2000c30c 	.word	0x2000c30c

0800a420 <log_play>:

void log_play(void){
 800a420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a424:	b096      	sub	sp, #88	; 0x58
 800a426:	af0a      	add	r7, sp, #40	; 0x28
	float Ca,Lo,SP,PLsp,PLca;
	float Lo_buff=0;
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int count=0;
 800a42e:	2300      	movs	r3, #0
 800a430:	62bb      	str	r3, [r7, #40]	; 0x28
	second_soeed=2;
 800a432:	4b4e      	ldr	r3, [pc, #312]	; (800a56c <log_play+0x14c>)
 800a434:	2202      	movs	r2, #2
 800a436:	701a      	strb	r2, [r3, #0]
	log_Cal();
 800a438:	f7ff f99a 	bl	8009770 <log_Cal>
	log_init ();
 800a43c:	f7fe fd8a 	bl	8008f54 <log_init>
	while(1){
		PLca =*(float*)actual__callog_adress;
 800a440:	4b4b      	ldr	r3, [pc, #300]	; (800a570 <log_play+0x150>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
		PLsp =*(float*)actual__velo_adress;
 800a448:	4b4a      	ldr	r3, [pc, #296]	; (800a574 <log_play+0x154>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	623b      	str	r3, [r7, #32]
		SP =*(float*)plan_velo_adress;
 800a450:	4b49      	ldr	r3, [pc, #292]	; (800a578 <log_play+0x158>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	61fb      	str	r3, [r7, #28]
		Lo=*(float*)loadlog_adress-Lo_buff;
 800a458:	4b48      	ldr	r3, [pc, #288]	; (800a57c <log_play+0x15c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	ed93 7a00 	vldr	s14, [r3]
 800a460:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a464:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a468:	edc7 7a06 	vstr	s15, [r7, #24]
		Ca=*(float*)callog_adress;
 800a46c:	4b44      	ldr	r3, [pc, #272]	; (800a580 <log_play+0x160>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	617b      	str	r3, [r7, #20]
		if(isnan(Ca) != 0)break;
 800a474:	ed97 7a05 	vldr	s14, [r7, #20]
 800a478:	edd7 7a05 	vldr	s15, [r7, #20]
 800a47c:	eeb4 7a67 	vcmp.f32	s14, s15
 800a480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a484:	d66b      	bvs.n	800a55e <log_play+0x13e>
		Lo_buff += Lo;
 800a486:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a48a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a48e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a492:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		if(secondsp[count]<=1800)secondsp[count]=2000;
 800a496:	4a3b      	ldr	r2, [pc, #236]	; (800a584 <log_play+0x164>)
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	edd3 7a00 	vldr	s15, [r3]
 800a4a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a588 <log_play+0x168>
 800a4a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ae:	d805      	bhi.n	800a4bc <log_play+0x9c>
 800a4b0:	4a34      	ldr	r2, [pc, #208]	; (800a584 <log_play+0x164>)
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	4a34      	ldr	r2, [pc, #208]	; (800a58c <log_play+0x16c>)
 800a4ba:	601a      	str	r2, [r3, #0]
		printf("%lf,%lf,%lf,%lf,%lf,%lf\n\r",Lo,Ca,secondsp[count],SP,PLsp,PLca);
 800a4bc:	69b8      	ldr	r0, [r7, #24]
 800a4be:	f7fd ff7b 	bl	80083b8 <__aeabi_f2d>
 800a4c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a4c6:	6978      	ldr	r0, [r7, #20]
 800a4c8:	f7fd ff76 	bl	80083b8 <__aeabi_f2d>
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	460d      	mov	r5, r1
 800a4d0:	4a2c      	ldr	r2, [pc, #176]	; (800a584 <log_play+0x164>)
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fd ff6c 	bl	80083b8 <__aeabi_f2d>
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	4689      	mov	r9, r1
 800a4e4:	69f8      	ldr	r0, [r7, #28]
 800a4e6:	f7fd ff67 	bl	80083b8 <__aeabi_f2d>
 800a4ea:	4682      	mov	sl, r0
 800a4ec:	468b      	mov	fp, r1
 800a4ee:	6a38      	ldr	r0, [r7, #32]
 800a4f0:	f7fd ff62 	bl	80083b8 <__aeabi_f2d>
 800a4f4:	e9c7 0100 	strd	r0, r1, [r7]
 800a4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4fa:	f7fd ff5d 	bl	80083b8 <__aeabi_f2d>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a506:	ed97 7b00 	vldr	d7, [r7]
 800a50a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a50e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800a512:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a516:	e9cd 4500 	strd	r4, r5, [sp]
 800a51a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a51e:	481c      	ldr	r0, [pc, #112]	; (800a590 <log_play+0x170>)
 800a520:	f009 fdca 	bl	80140b8 <iprintf>
		count++;
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	3301      	adds	r3, #1
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
		//HAL_Delay(1);
		callog_adress+= 0x04;
 800a52a:	4b15      	ldr	r3, [pc, #84]	; (800a580 <log_play+0x160>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3304      	adds	r3, #4
 800a530:	4a13      	ldr	r2, [pc, #76]	; (800a580 <log_play+0x160>)
 800a532:	6013      	str	r3, [r2, #0]
		loadlog_adress+= 0x04;
 800a534:	4b11      	ldr	r3, [pc, #68]	; (800a57c <log_play+0x15c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3304      	adds	r3, #4
 800a53a:	4a10      	ldr	r2, [pc, #64]	; (800a57c <log_play+0x15c>)
 800a53c:	6013      	str	r3, [r2, #0]
		plan_velo_adress+= 0x04;
 800a53e:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <log_play+0x158>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3304      	adds	r3, #4
 800a544:	4a0c      	ldr	r2, [pc, #48]	; (800a578 <log_play+0x158>)
 800a546:	6013      	str	r3, [r2, #0]
		actual__velo_adress+= 0x04;
 800a548:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <log_play+0x154>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3304      	adds	r3, #4
 800a54e:	4a09      	ldr	r2, [pc, #36]	; (800a574 <log_play+0x154>)
 800a550:	6013      	str	r3, [r2, #0]
		actual__callog_adress+= 0x04;
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <log_play+0x150>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3304      	adds	r3, #4
 800a558:	4a05      	ldr	r2, [pc, #20]	; (800a570 <log_play+0x150>)
 800a55a:	6013      	str	r3, [r2, #0]
		PLca =*(float*)actual__callog_adress;
 800a55c:	e770      	b.n	800a440 <log_play+0x20>
		if(isnan(Ca) != 0)break;
 800a55e:	bf00      	nop
		//plan_velo_adress+= 0x04;
	}

}
 800a560:	bf00      	nop
 800a562:	3730      	adds	r7, #48	; 0x30
 800a564:	46bd      	mov	sp, r7
 800a566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a56a:	bf00      	nop
 800a56c:	2000c0bc 	.word	0x2000c0bc
 800a570:	2000c2d8 	.word	0x2000c2d8
 800a574:	2000c2e8 	.word	0x2000c2e8
 800a578:	2000c2e0 	.word	0x2000c2e0
 800a57c:	2000c2e4 	.word	0x2000c2e4
 800a580:	2000c2dc 	.word	0x2000c2dc
 800a584:	20000210 	.word	0x20000210
 800a588:	44e10000 	.word	0x44e10000
 800a58c:	44fa0000 	.word	0x44fa0000
 800a590:	08016210 	.word	0x08016210

0800a594 <FLASH_Unlock>:
const uint32_t end_adress_sector10 	 = 	0x80DFFFF;
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800a598:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <FLASH_Unlock+0x1c>)
 800a59a:	4a06      	ldr	r2, [pc, #24]	; (800a5b4 <FLASH_Unlock+0x20>)
 800a59c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800a59e:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <FLASH_Unlock+0x1c>)
 800a5a0:	4a05      	ldr	r2, [pc, #20]	; (800a5b8 <FLASH_Unlock+0x24>)
 800a5a2:	605a      	str	r2, [r3, #4]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	40023c00 	.word	0x40023c00
 800a5b4:	45670123 	.word	0x45670123
 800a5b8:	cdef89ab 	.word	0xcdef89ab

0800a5bc <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <FLASH_Lock+0x1c>)
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	4a04      	ldr	r2, [pc, #16]	; (800a5d8 <FLASH_Lock+0x1c>)
 800a5c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5ca:	6113      	str	r3, [r2, #16]

}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	40023c00 	.word	0x40023c00

0800a5dc <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800a5e0:	bf00      	nop
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <FLASH_WaitBusy+0x1c>)
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f9      	bne.n	800a5e2 <FLASH_WaitBusy+0x6>
}
 800a5ee:	bf00      	nop
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	40023c00 	.word	0x40023c00

0800a5fc <FLASH_Erease8>:

	FLASH_Lock();
}

void FLASH_Erease8(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 800a600:	f7ff ffc8 	bl	800a594 <FLASH_Unlock>

	FLASH_WaitBusy();
 800a604:	f7ff ffea 	bl	800a5dc <FLASH_WaitBusy>

	FLASH->CR |= FLASH_CR_SER;//SER Bitset
 800a608:	4b0b      	ldr	r3, [pc, #44]	; (800a638 <FLASH_Erease8+0x3c>)
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	4a0a      	ldr	r2, [pc, #40]	; (800a638 <FLASH_Erease8+0x3c>)
 800a60e:	f043 0302 	orr.w	r3, r3, #2
 800a612:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_SECTOR8 & FLASH_CR_SNB_Msk;//セクタ選択
 800a614:	4b08      	ldr	r3, [pc, #32]	; (800a638 <FLASH_Erease8+0x3c>)
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	4a07      	ldr	r2, [pc, #28]	; (800a638 <FLASH_Erease8+0x3c>)
 800a61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a61e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;//STRT Bitset
 800a620:	4b05      	ldr	r3, [pc, #20]	; (800a638 <FLASH_Erease8+0x3c>)
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	4a04      	ldr	r2, [pc, #16]	; (800a638 <FLASH_Erease8+0x3c>)
 800a626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a62a:	6113      	str	r3, [r2, #16]

	FLASH_WaitBusy();
 800a62c:	f7ff ffd6 	bl	800a5dc <FLASH_WaitBusy>

	FLASH_Lock();
 800a630:	f7ff ffc4 	bl	800a5bc <FLASH_Lock>
}
 800a634:	bf00      	nop
 800a636:	bd80      	pop	{r7, pc}
 800a638:	40023c00 	.word	0x40023c00

0800a63c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800a646:	f005 f897 	bl	800f778 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800a652:	2301      	movs	r3, #1
 800a654:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800a656:	2302      	movs	r3, #2
 800a658:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800a65e:	f107 0208 	add.w	r2, r7, #8
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f005 f9e5 	bl	800fa38 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800a66e:	f005 f8a5 	bl	800f7bc <HAL_FLASH_Lock>
}
 800a672:	bf00      	nop
 800a674:	3720      	adds	r7, #32
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <FLASH_Write_Word_S>:

	FLASH_Lock();
}

void FLASH_Write_Word_S(uint32_t address, int32_t data)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800a686:	f7ff ff85 	bl	800a594 <FLASH_Unlock>

	FLASH_WaitBusy();
 800a68a:	f7ff ffa7 	bl	800a5dc <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800a68e:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <FLASH_Write_Word_S+0x4c>)
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	4a0d      	ldr	r2, [pc, #52]	; (800a6c8 <FLASH_Write_Word_S+0x4c>)
 800a694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a698:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800a69a:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <FLASH_Write_Word_S+0x4c>)
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	4a0a      	ldr	r2, [pc, #40]	; (800a6c8 <FLASH_Write_Word_S+0x4c>)
 800a6a0:	f043 0301 	orr.w	r3, r3, #1
 800a6a4:	6113      	str	r3, [r2, #16]

	*(__IO int32_t*)address = data;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800a6ac:	f7ff ff96 	bl	800a5dc <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800a6b0:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <FLASH_Write_Word_S+0x4c>)
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	4a04      	ldr	r2, [pc, #16]	; (800a6c8 <FLASH_Write_Word_S+0x4c>)
 800a6b6:	f023 0301 	bic.w	r3, r3, #1
 800a6ba:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800a6bc:	f7ff ff7e 	bl	800a5bc <FLASH_Lock>
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	40023c00 	.word	0x40023c00

0800a6cc <FLASH_Write_Word_F>:

inline void FLASH_Write_Word_F(uint32_t address, float data)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800a6d8:	f7ff ff5c 	bl	800a594 <FLASH_Unlock>

	FLASH_WaitBusy();
 800a6dc:	f7ff ff7e 	bl	800a5dc <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800a6e0:	4b0e      	ldr	r3, [pc, #56]	; (800a71c <FLASH_Write_Word_F+0x50>)
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <FLASH_Write_Word_F+0x50>)
 800a6e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6ea:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800a6ec:	4b0b      	ldr	r3, [pc, #44]	; (800a71c <FLASH_Write_Word_F+0x50>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	4a0a      	ldr	r2, [pc, #40]	; (800a71c <FLASH_Write_Word_F+0x50>)
 800a6f2:	f043 0301 	orr.w	r3, r3, #1
 800a6f6:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800a6fe:	f7ff ff6d 	bl	800a5dc <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800a702:	4b06      	ldr	r3, [pc, #24]	; (800a71c <FLASH_Write_Word_F+0x50>)
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	4a05      	ldr	r2, [pc, #20]	; (800a71c <FLASH_Write_Word_F+0x50>)
 800a708:	f023 0301 	bic.w	r3, r3, #1
 800a70c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800a70e:	f7ff ff55 	bl	800a5bc <FLASH_Lock>
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	40023c00 	.word	0x40023c00

0800a720 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a730:	b2db      	uxtb	r3, r3
 800a732:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800a734:	2200      	movs	r2, #0
 800a736:	2104      	movs	r1, #4
 800a738:	480d      	ldr	r0, [pc, #52]	; (800a770 <read_byte+0x50>)
 800a73a:	f005 fc51 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800a73e:	f107 010f 	add.w	r1, r7, #15
 800a742:	2364      	movs	r3, #100	; 0x64
 800a744:	2201      	movs	r2, #1
 800a746:	480b      	ldr	r0, [pc, #44]	; (800a774 <read_byte+0x54>)
 800a748:	f006 fd44 	bl	80111d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800a74c:	f107 010e 	add.w	r1, r7, #14
 800a750:	2364      	movs	r3, #100	; 0x64
 800a752:	2201      	movs	r2, #1
 800a754:	4807      	ldr	r0, [pc, #28]	; (800a774 <read_byte+0x54>)
 800a756:	f006 fe71 	bl	801143c <HAL_SPI_Receive>
	CS_SET;
 800a75a:	2201      	movs	r2, #1
 800a75c:	2104      	movs	r1, #4
 800a75e:	4804      	ldr	r0, [pc, #16]	; (800a770 <read_byte+0x50>)
 800a760:	f005 fc3e 	bl	800ffe0 <HAL_GPIO_WritePin>

	return val;
 800a764:	7bbb      	ldrb	r3, [r7, #14]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	40020c00 	.word	0x40020c00
 800a774:	200145ac 	.word	0x200145ac

0800a778 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	460a      	mov	r2, r1
 800a782:	71fb      	strb	r3, [r7, #7]
 800a784:	4613      	mov	r3, r2
 800a786:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800a792:	2200      	movs	r2, #0
 800a794:	2104      	movs	r1, #4
 800a796:	480c      	ldr	r0, [pc, #48]	; (800a7c8 <write_byte+0x50>)
 800a798:	f005 fc22 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800a79c:	f107 010f 	add.w	r1, r7, #15
 800a7a0:	2364      	movs	r3, #100	; 0x64
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	4809      	ldr	r0, [pc, #36]	; (800a7cc <write_byte+0x54>)
 800a7a6:	f006 fd15 	bl	80111d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800a7aa:	1db9      	adds	r1, r7, #6
 800a7ac:	2364      	movs	r3, #100	; 0x64
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	4806      	ldr	r0, [pc, #24]	; (800a7cc <write_byte+0x54>)
 800a7b2:	f006 fd0f 	bl	80111d4 <HAL_SPI_Transmit>
	CS_SET;
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	2104      	movs	r1, #4
 800a7ba:	4803      	ldr	r0, [pc, #12]	; (800a7c8 <write_byte+0x50>)
 800a7bc:	f005 fc10 	bl	800ffe0 <HAL_GPIO_WritePin>
}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	40020c00 	.word	0x40020c00
 800a7cc:	200145ac 	.word	0x200145ac

0800a7d0 <IMU_init>:

uint8_t IMU_init() {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f7ff ffa2 	bl	800a720 <read_byte>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800a7e0:	79bb      	ldrb	r3, [r7, #6]
 800a7e2:	2be0      	cmp	r3, #224	; 0xe0
 800a7e4:	d119      	bne.n	800a81a <IMU_init+0x4a>
		ret = 1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	2006      	movs	r0, #6
 800a7ee:	f7ff ffc3 	bl	800a778 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800a7f2:	2110      	movs	r1, #16
 800a7f4:	2003      	movs	r0, #3
 800a7f6:	f7ff ffbf 	bl	800a778 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800a7fa:	2120      	movs	r1, #32
 800a7fc:	207f      	movs	r0, #127	; 0x7f
 800a7fe:	f7ff ffbb 	bl	800a778 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800a802:	2117      	movs	r1, #23
 800a804:	2001      	movs	r0, #1
 800a806:	f7ff ffb7 	bl	800a778 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800a80a:	2106      	movs	r1, #6
 800a80c:	2014      	movs	r0, #20
 800a80e:	f7ff ffb3 	bl	800a778 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800a812:	2100      	movs	r1, #0
 800a814:	207f      	movs	r0, #127	; 0x7f
 800a816:	f7ff ffaf 	bl	800a778 <write_byte>
	}
	return ret;
 800a81a:	79fb      	ldrb	r3, [r7, #7]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <read_gyro_data>:

void read_zg_data() {
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
}

void read_gyro_data() {
 800a824:	b598      	push	{r3, r4, r7, lr}
 800a826:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800a828:	2033      	movs	r0, #51	; 0x33
 800a82a:	f7ff ff79 	bl	800a720 <read_byte>
 800a82e:	4603      	mov	r3, r0
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	b21c      	sxth	r4, r3
 800a834:	2034      	movs	r0, #52	; 0x34
 800a836:	f7ff ff73 	bl	800a720 <read_byte>
 800a83a:	4603      	mov	r3, r0
 800a83c:	b21b      	sxth	r3, r3
 800a83e:	4323      	orrs	r3, r4
 800a840:	b21a      	sxth	r2, r3
 800a842:	4b11      	ldr	r3, [pc, #68]	; (800a888 <read_gyro_data+0x64>)
 800a844:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800a846:	2035      	movs	r0, #53	; 0x35
 800a848:	f7ff ff6a 	bl	800a720 <read_byte>
 800a84c:	4603      	mov	r3, r0
 800a84e:	021b      	lsls	r3, r3, #8
 800a850:	b21c      	sxth	r4, r3
 800a852:	2036      	movs	r0, #54	; 0x36
 800a854:	f7ff ff64 	bl	800a720 <read_byte>
 800a858:	4603      	mov	r3, r0
 800a85a:	b21b      	sxth	r3, r3
 800a85c:	4323      	orrs	r3, r4
 800a85e:	b21a      	sxth	r2, r3
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <read_gyro_data+0x68>)
 800a862:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800a864:	2037      	movs	r0, #55	; 0x37
 800a866:	f7ff ff5b 	bl	800a720 <read_byte>
 800a86a:	4603      	mov	r3, r0
 800a86c:	021b      	lsls	r3, r3, #8
 800a86e:	b21c      	sxth	r4, r3
 800a870:	2038      	movs	r0, #56	; 0x38
 800a872:	f7ff ff55 	bl	800a720 <read_byte>
 800a876:	4603      	mov	r3, r0
 800a878:	b21b      	sxth	r3, r3
 800a87a:	4323      	orrs	r3, r4
 800a87c:	b21a      	sxth	r2, r3
 800a87e:	4b04      	ldr	r3, [pc, #16]	; (800a890 <read_gyro_data+0x6c>)
 800a880:	801a      	strh	r2, [r3, #0]
}
 800a882:	bf00      	nop
 800a884:	bd98      	pop	{r3, r4, r7, pc}
 800a886:	bf00      	nop
 800a888:	2000c2f8 	.word	0x2000c2f8
 800a88c:	2000c2f6 	.word	0x2000c2f6
 800a890:	2000c2f0 	.word	0x2000c2f0

0800a894 <off_angle>:
extern  uint16_t work_ram[BACKUP_FLASH_SECTOR_SIZE] __attribute__ ((aligned(4)));
 char _backup_flash_start;
float ang_average=0;

float ang;
void off_angle(){
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
	float average;
	int i;
	Flash_load();
 800a89a:	f001 fa5f 	bl	800bd5c <Flash_load>
	IMU_init();
 800a89e:	f7ff ff97 	bl	800a7d0 <IMU_init>
	//HAL_Delay(1500);

	for(i=0;i<=1000;i++){
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	603b      	str	r3, [r7, #0]
 800a8a6:	e014      	b.n	800a8d2 <off_angle+0x3e>
		read_gyro_data();
 800a8a8:	f7ff ffbc 	bl	800a824 <read_gyro_data>
		average = average+zg;
 800a8ac:	4b21      	ldr	r3, [pc, #132]	; (800a934 <off_angle+0xa0>)
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ba:	ed97 7a01 	vldr	s14, [r7, #4]
 800a8be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8c2:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	f003 fe54 	bl	800e574 <HAL_Delay>
	for(i=0;i<=1000;i++){
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	603b      	str	r3, [r7, #0]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8d8:	dde6      	ble.n	800a8a8 <off_angle+0x14>
	}
	LED(4);
 800a8da:	2004      	movs	r0, #4
 800a8dc:	f001 fb7a 	bl	800bfd4 <LED>
	ang_average = average/1000;
 800a8e0:	ed97 7a01 	vldr	s14, [r7, #4]
 800a8e4:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a938 <off_angle+0xa4>
 800a8e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8ec:	4b13      	ldr	r3, [pc, #76]	; (800a93c <off_angle+0xa8>)
 800a8ee:	edc3 7a00 	vstr	s15, [r3]
	if(average<=0) average = -average*100;
 800a8f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fe:	d809      	bhi.n	800a914 <off_angle+0x80>
 800a900:	edd7 7a01 	vldr	s15, [r7, #4]
 800a904:	eef1 7a67 	vneg.f32	s15, s15
 800a908:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a940 <off_angle+0xac>
 800a90c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a910:	edc7 7a01 	vstr	s15, [r7, #4]
	work_ram[30]= average;
 800a914:	edd7 7a01 	vldr	s15, [r7, #4]
 800a918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91c:	ee17 3a90 	vmov	r3, s15
 800a920:	b29a      	uxth	r2, r3
 800a922:	4b08      	ldr	r3, [pc, #32]	; (800a944 <off_angle+0xb0>)
 800a924:	879a      	strh	r2, [r3, #60]	; 0x3c
	//if(average>=50) average=-average/10;


//	printf("%f\r\n",ang_average);
//	printf("%d\r\n",work_ram[30]);
	Flash_store();
 800a926:	f001 fa29 	bl	800bd7c <Flash_store>
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	2000c2f0 	.word	0x2000c2f0
 800a938:	447a0000 	.word	0x447a0000
 800a93c:	2000c29c 	.word	0x2000c29c
 800a940:	42c80000 	.word	0x42c80000
 800a944:	2000c30c 	.word	0x2000c30c

0800a948 <calc_angle>:
inline float calc_angle(){
 800a948:	b5b0      	push	{r4, r5, r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
	float omega_z=0;
 800a94e:	f04f 0300 	mov.w	r3, #0
 800a952:	607b      	str	r3, [r7, #4]
	static float pre_zg;
	float R_IMU2 = 0.1;
 800a954:	4b34      	ldr	r3, [pc, #208]	; (800aa28 <calc_angle+0xe0>)
 800a956:	603b      	str	r3, [r7, #0]
	//float angle;
	read_gyro_data();
 800a958:	f7ff ff64 	bl	800a824 <read_gyro_data>
	omega_z = (((float)zg-ang_average) / 16.4) * PI / 180;
 800a95c:	4b33      	ldr	r3, [pc, #204]	; (800aa2c <calc_angle+0xe4>)
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	b21b      	sxth	r3, r3
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a96a:	4b31      	ldr	r3, [pc, #196]	; (800aa30 <calc_angle+0xe8>)
 800a96c:	edd3 7a00 	vldr	s15, [r3]
 800a970:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a974:	ee17 0a90 	vmov	r0, s15
 800a978:	f7fd fd1e 	bl	80083b8 <__aeabi_f2d>
 800a97c:	a326      	add	r3, pc, #152	; (adr r3, 800aa18 <calc_angle+0xd0>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f7fd fe9b 	bl	80086bc <__aeabi_ddiv>
 800a986:	4603      	mov	r3, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	4618      	mov	r0, r3
 800a98c:	4621      	mov	r1, r4
 800a98e:	a324      	add	r3, pc, #144	; (adr r3, 800aa20 <calc_angle+0xd8>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f7fd fd68 	bl	8008468 <__aeabi_dmul>
 800a998:	4603      	mov	r3, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4618      	mov	r0, r3
 800a99e:	4621      	mov	r1, r4
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <calc_angle+0xec>)
 800a9a6:	f7fd fe89 	bl	80086bc <__aeabi_ddiv>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7fe f831 	bl	8008a18 <__aeabi_d2f>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	607b      	str	r3, [r7, #4]
	//angle = angle+ (omega_z * 0.01);
	//if(driv_flag==2)omega_z= ((R_IMU2)*(omega_z) + (1.0 - (R_IMU2))* (pre_zg));
	omega_z= ((R_IMU)*(omega_z) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fd fcfc 	bl	80083b8 <__aeabi_f2d>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	4b1c      	ldr	r3, [pc, #112]	; (800aa38 <calc_angle+0xf0>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fd fcf5 	bl	80083b8 <__aeabi_f2d>
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	f04f 0300 	mov.w	r3, #0
 800a9d6:	f7fd fd47 	bl	8008468 <__aeabi_dmul>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	f7fd fb8b 	bl	80080fc <__adddf3>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f7fe f813 	bl	8008a18 <__aeabi_d2f>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	607b      	str	r3, [r7, #4]
	pre_zg =  omega_z;
 800a9f6:	4a10      	ldr	r2, [pc, #64]	; (800aa38 <calc_angle+0xf0>)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6013      	str	r3, [r2, #0]
	//ang = ang+(omega_z*T);
	ang = omega_z;
 800a9fc:	4a0f      	ldr	r2, [pc, #60]	; (800aa3c <calc_angle+0xf4>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
	return omega_z;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	ee07 3a90 	vmov	s15, r3
}
 800aa08:	eeb0 0a67 	vmov.f32	s0, s15
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bdb0      	pop	{r4, r5, r7, pc}
 800aa12:	bf00      	nop
 800aa14:	f3af 8000 	nop.w
 800aa18:	66666666 	.word	0x66666666
 800aa1c:	40306666 	.word	0x40306666
 800aa20:	fc8b007a 	.word	0xfc8b007a
 800aa24:	400921fa 	.word	0x400921fa
 800aa28:	3dcccccd 	.word	0x3dcccccd
 800aa2c:	2000c2f0 	.word	0x2000c2f0
 800aa30:	2000c29c 	.word	0x2000c29c
 800aa34:	40668000 	.word	0x40668000
 800aa38:	2000c2a0 	.word	0x2000c2a0
 800aa3c:	2000c2fc 	.word	0x2000c2fc

0800aa40 <Line_Motor>:
uint16_t  Ki;
uint16_t  Kd ;
extern float speedget ;

//float speedval_I=0 ;
inline float Line_Motor(){
 800aa40:	b5b0      	push	{r4, r5, r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
	static float sensvalBuf;
	static int sensval_I = 0;
	static float sensval_IBuf ;
	float sensval_D =0;
 800aa46:	f04f 0300 	mov.w	r3, #0
 800aa4a:	607b      	str	r3, [r7, #4]
	float sensval;//偏差


	sensval = senseGet();//hensa
 800aa4c:	f002 feb4 	bl	800d7b8 <senseGet>
 800aa50:	ed87 0a00 	vstr	s0, [r7]

    sensval_I = sensval_I + (float)sensval*T;
 800aa54:	4b62      	ldr	r3, [pc, #392]	; (800abe0 <Line_Motor+0x1a0>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fd fc9b 	bl	8008394 <__aeabi_i2d>
 800aa5e:	4604      	mov	r4, r0
 800aa60:	460d      	mov	r5, r1
 800aa62:	6838      	ldr	r0, [r7, #0]
 800aa64:	f7fd fca8 	bl	80083b8 <__aeabi_f2d>
 800aa68:	a359      	add	r3, pc, #356	; (adr r3, 800abd0 <Line_Motor+0x190>)
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f7fd fcfb 	bl	8008468 <__aeabi_dmul>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7fd fb3f 	bl	80080fc <__adddf3>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	4618      	mov	r0, r3
 800aa84:	4621      	mov	r1, r4
 800aa86:	f7fd ff9f 	bl	80089c8 <__aeabi_d2iz>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	4b54      	ldr	r3, [pc, #336]	; (800abe0 <Line_Motor+0x1a0>)
 800aa8e:	601a      	str	r2, [r3, #0]
    sensval_IBuf = sensval_IBuf + sensval;
 800aa90:	4b54      	ldr	r3, [pc, #336]	; (800abe4 <Line_Motor+0x1a4>)
 800aa92:	ed93 7a00 	vldr	s14, [r3]
 800aa96:	edd7 7a00 	vldr	s15, [r7]
 800aa9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa9e:	4b51      	ldr	r3, [pc, #324]	; (800abe4 <Line_Motor+0x1a4>)
 800aaa0:	edc3 7a00 	vstr	s15, [r3]

    if(sensval_I >= 1000000) sensval_I = 1000000;
 800aaa4:	4b4e      	ldr	r3, [pc, #312]	; (800abe0 <Line_Motor+0x1a0>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a4f      	ldr	r2, [pc, #316]	; (800abe8 <Line_Motor+0x1a8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	dd02      	ble.n	800aab4 <Line_Motor+0x74>
 800aaae:	4b4c      	ldr	r3, [pc, #304]	; (800abe0 <Line_Motor+0x1a0>)
 800aab0:	4a4e      	ldr	r2, [pc, #312]	; (800abec <Line_Motor+0x1ac>)
 800aab2:	601a      	str	r2, [r3, #0]
    if(sensval_I <= (-1000000)) sensval_I = (-1000000);
 800aab4:	4b4a      	ldr	r3, [pc, #296]	; (800abe0 <Line_Motor+0x1a0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a4d      	ldr	r2, [pc, #308]	; (800abf0 <Line_Motor+0x1b0>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	da02      	bge.n	800aac4 <Line_Motor+0x84>
 800aabe:	4b48      	ldr	r3, [pc, #288]	; (800abe0 <Line_Motor+0x1a0>)
 800aac0:	4a4c      	ldr	r2, [pc, #304]	; (800abf4 <Line_Motor+0x1b4>)
 800aac2:	601a      	str	r2, [r3, #0]

    sensval_D = (sensvalBuf - sensval)/T;
 800aac4:	4b4c      	ldr	r3, [pc, #304]	; (800abf8 <Line_Motor+0x1b8>)
 800aac6:	ed93 7a00 	vldr	s14, [r3]
 800aaca:	edd7 7a00 	vldr	s15, [r7]
 800aace:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aad2:	ee17 0a90 	vmov	r0, s15
 800aad6:	f7fd fc6f 	bl	80083b8 <__aeabi_f2d>
 800aada:	a33d      	add	r3, pc, #244	; (adr r3, 800abd0 <Line_Motor+0x190>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7fd fdec 	bl	80086bc <__aeabi_ddiv>
 800aae4:	4603      	mov	r3, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	4618      	mov	r0, r3
 800aaea:	4621      	mov	r1, r4
 800aaec:	f7fd ff94 	bl	8008a18 <__aeabi_d2f>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	607b      	str	r3, [r7, #4]
    sensvalBuf = sensval;
 800aaf4:	4a40      	ldr	r2, [pc, #256]	; (800abf8 <Line_Motor+0x1b8>)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	6013      	str	r3, [r2, #0]

	//return ((sensval* (float)Kp*0.001)+(sensval_I*(float)Ki*0.0001)-(sensval_D*(float)Kd*0.0001));
	return ((sensval* 1000)+(sensval_I*(float)Ki*0.0001)-(sensval_D*(float)Kd*0.0000))*(ang*10);
 800aafa:	edd7 7a00 	vldr	s15, [r7]
 800aafe:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800abfc <Line_Motor+0x1bc>
 800ab02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab06:	ee17 0a90 	vmov	r0, s15
 800ab0a:	f7fd fc55 	bl	80083b8 <__aeabi_f2d>
 800ab0e:	4604      	mov	r4, r0
 800ab10:	460d      	mov	r5, r1
 800ab12:	4b33      	ldr	r3, [pc, #204]	; (800abe0 <Line_Motor+0x1a0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab1e:	4b38      	ldr	r3, [pc, #224]	; (800ac00 <Line_Motor+0x1c0>)
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2e:	ee17 0a90 	vmov	r0, s15
 800ab32:	f7fd fc41 	bl	80083b8 <__aeabi_f2d>
 800ab36:	a328      	add	r3, pc, #160	; (adr r3, 800abd8 <Line_Motor+0x198>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7fd fc94 	bl	8008468 <__aeabi_dmul>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7fd fad8 	bl	80080fc <__adddf3>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4625      	mov	r5, r4
 800ab52:	461c      	mov	r4, r3
 800ab54:	4b2b      	ldr	r3, [pc, #172]	; (800ac04 <Line_Motor+0x1c4>)
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	ee07 3a90 	vmov	s15, r3
 800ab5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab60:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab68:	ee17 0a90 	vmov	r0, s15
 800ab6c:	f7fd fc24 	bl	80083b8 <__aeabi_f2d>
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	f7fd fc76 	bl	8008468 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7fd fab8 	bl	80080f8 <__aeabi_dsub>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	4625      	mov	r5, r4
 800ab8e:	461c      	mov	r4, r3
 800ab90:	4b1d      	ldr	r3, [pc, #116]	; (800ac08 <Line_Motor+0x1c8>)
 800ab92:	edd3 7a00 	vldr	s15, [r3]
 800ab96:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab9e:	ee17 0a90 	vmov	r0, s15
 800aba2:	f7fd fc09 	bl	80083b8 <__aeabi_f2d>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4620      	mov	r0, r4
 800abac:	4629      	mov	r1, r5
 800abae:	f7fd fc5b 	bl	8008468 <__aeabi_dmul>
 800abb2:	4603      	mov	r3, r0
 800abb4:	460c      	mov	r4, r1
 800abb6:	4618      	mov	r0, r3
 800abb8:	4621      	mov	r1, r4
 800abba:	f7fd ff2d 	bl	8008a18 <__aeabi_d2f>
 800abbe:	4603      	mov	r3, r0
 800abc0:	ee07 3a90 	vmov	s15, r3


}
 800abc4:	eeb0 0a67 	vmov.f32	s0, s15
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bdb0      	pop	{r4, r5, r7, pc}
 800abce:	bf00      	nop
 800abd0:	d2f1a9fc 	.word	0xd2f1a9fc
 800abd4:	3f50624d 	.word	0x3f50624d
 800abd8:	eb1c432d 	.word	0xeb1c432d
 800abdc:	3f1a36e2 	.word	0x3f1a36e2
 800abe0:	2000c2a4 	.word	0x2000c2a4
 800abe4:	2000c2a8 	.word	0x2000c2a8
 800abe8:	000f423f 	.word	0x000f423f
 800abec:	000f4240 	.word	0x000f4240
 800abf0:	fff0bdc1 	.word	0xfff0bdc1
 800abf4:	fff0bdc0 	.word	0xfff0bdc0
 800abf8:	2000c2ac 	.word	0x2000c2ac
 800abfc:	447a0000 	.word	0x447a0000
 800ac00:	2000c300 	.word	0x2000c300
 800ac04:	2000c302 	.word	0x2000c302
 800ac08:	2000c2fc 	.word	0x2000c2fc
 800ac0c:	00000000 	.word	0x00000000

0800ac10 <speed_get>:
inline float speed_get(){
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b089      	sub	sp, #36	; 0x24
 800ac14:	af00      	add	r7, sp, #0
	//static float speedbuffg=0;
	float speedget_L=0;
 800ac16:	f04f 0300 	mov.w	r3, #0
 800ac1a:	61fb      	str	r3, [r7, #28]
	float speedget_R=0;
 800ac1c:	f04f 0300 	mov.w	r3, #0
 800ac20:	61bb      	str	r3, [r7, #24]
	float load_L,load_R=0;
 800ac22:	f04f 0300 	mov.w	r3, #0
 800ac26:	617b      	str	r3, [r7, #20]
	float load=0;
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	613b      	str	r3, [r7, #16]
	int L=0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
	int R=0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60bb      	str	r3, [r7, #8]
//	static int i =0;
	L = TIM3 -> CNT -32768;
 800ac36:	4b52      	ldr	r3, [pc, #328]	; (800ad80 <speed_get+0x170>)
 800ac38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ac3e:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32768;
 800ac40:	4b4f      	ldr	r3, [pc, #316]	; (800ad80 <speed_get+0x170>)
 800ac42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ac46:	625a      	str	r2, [r3, #36]	; 0x24

	R = TIM4 -> CNT -32768;;
 800ac48:	4b4e      	ldr	r3, [pc, #312]	; (800ad84 <speed_get+0x174>)
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ac50:	60bb      	str	r3, [r7, #8]
	TIM4 -> CNT = 32768;
 800ac52:	4b4c      	ldr	r3, [pc, #304]	; (800ad84 <speed_get+0x174>)
 800ac54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ac58:	625a      	str	r2, [r3, #36]	; 0x24
//	speedget_R = (((24.1/4096)*(float)R)/T);
//	speedget_L = (((24.1/4096)*(float)L)/T);
//	speedget_R = (((24.1/4096)*(float)R)/T);
//	speedget_L = (((23/4096)*(float)L)/T);
//	speedget_R = (((23/4096)*(float)R)/T);
	load_L = (25.3/2048)*(float)L;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	ee07 3a90 	vmov	s15, r3
 800ac60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac64:	ee17 0a90 	vmov	r0, s15
 800ac68:	f7fd fba6 	bl	80083b8 <__aeabi_f2d>
 800ac6c:	a340      	add	r3, pc, #256	; (adr r3, 800ad70 <speed_get+0x160>)
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	f7fd fbf9 	bl	8008468 <__aeabi_dmul>
 800ac76:	4603      	mov	r3, r0
 800ac78:	460c      	mov	r4, r1
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	f7fd fecb 	bl	8008a18 <__aeabi_d2f>
 800ac82:	4603      	mov	r3, r0
 800ac84:	607b      	str	r3, [r7, #4]
	load_R = (25.3/2048)*(float)R;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac90:	ee17 0a90 	vmov	r0, s15
 800ac94:	f7fd fb90 	bl	80083b8 <__aeabi_f2d>
 800ac98:	a335      	add	r3, pc, #212	; (adr r3, 800ad70 <speed_get+0x160>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f7fd fbe3 	bl	8008468 <__aeabi_dmul>
 800aca2:	4603      	mov	r3, r0
 800aca4:	460c      	mov	r4, r1
 800aca6:	4618      	mov	r0, r3
 800aca8:	4621      	mov	r1, r4
 800acaa:	f7fd feb5 	bl	8008a18 <__aeabi_d2f>
 800acae:	4603      	mov	r3, r0
 800acb0:	617b      	str	r3, [r7, #20]
	speedget_L = load_L/T;
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7fd fb80 	bl	80083b8 <__aeabi_f2d>
 800acb8:	a32f      	add	r3, pc, #188	; (adr r3, 800ad78 <speed_get+0x168>)
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f7fd fcfd 	bl	80086bc <__aeabi_ddiv>
 800acc2:	4603      	mov	r3, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	4618      	mov	r0, r3
 800acc8:	4621      	mov	r1, r4
 800acca:	f7fd fea5 	bl	8008a18 <__aeabi_d2f>
 800acce:	4603      	mov	r3, r0
 800acd0:	61fb      	str	r3, [r7, #28]
	speedget_R = load_R/T;
 800acd2:	6978      	ldr	r0, [r7, #20]
 800acd4:	f7fd fb70 	bl	80083b8 <__aeabi_f2d>
 800acd8:	a327      	add	r3, pc, #156	; (adr r3, 800ad78 <speed_get+0x168>)
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7fd fced 	bl	80086bc <__aeabi_ddiv>
 800ace2:	4603      	mov	r3, r0
 800ace4:	460c      	mov	r4, r1
 800ace6:	4618      	mov	r0, r3
 800ace8:	4621      	mov	r1, r4
 800acea:	f7fd fe95 	bl	8008a18 <__aeabi_d2f>
 800acee:	4603      	mov	r3, r0
 800acf0:	61bb      	str	r3, [r7, #24]
//	if(load_L <= 0) load_L=0;
//	if(load_R <= 0) load_R=0;
	load = (load_R+load_L)/2.0f;
 800acf2:	ed97 7a05 	vldr	s14, [r7, #20]
 800acf6:	edd7 7a01 	vldr	s15, [r7, #4]
 800acfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ad02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad06:	edc7 7a04 	vstr	s15, [r7, #16]
	//load = (((24.1/4096)*(float)L)+((24.1/4096)*(float)R))/2;
	speedget = (speedget_R+speedget_L)/2;
 800ad0a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad0e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ad12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ad1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad1e:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <speed_get+0x178>)
 800ad20:	edc3 7a00 	vstr	s15, [r3]
	//speedbuffg += speedget*T;
	if(driv_flag==1&& maker_flag==1){
 800ad24:	4b19      	ldr	r3, [pc, #100]	; (800ad8c <speed_get+0x17c>)
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d109      	bne.n	800ad40 <speed_get+0x130>
 800ad2c:	4b18      	ldr	r3, [pc, #96]	; (800ad90 <speed_get+0x180>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d105      	bne.n	800ad40 <speed_get+0x130>

		first_driv(load);
 800ad34:	ed97 0a04 	vldr	s0, [r7, #16]
 800ad38:	f7fe facc 	bl	80092d4 <first_driv>
		first_cale();
 800ad3c:	f7fe f990 	bl	8009060 <first_cale>
	}
	if(driv_flag==2 && maker_flag==1)second_driv(load);
 800ad40:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <speed_get+0x17c>)
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d107      	bne.n	800ad58 <speed_get+0x148>
 800ad48:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <speed_get+0x180>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d103      	bne.n	800ad58 <speed_get+0x148>
 800ad50:	ed97 0a04 	vldr	s0, [r7, #16]
 800ad54:	f7ff f894 	bl	8009e80 <second_driv>

	return speedget;
 800ad58:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <speed_get+0x178>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	ee07 3a90 	vmov	s15, r3
}
 800ad60:	eeb0 0a67 	vmov.f32	s0, s15
 800ad64:	3724      	adds	r7, #36	; 0x24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd90      	pop	{r4, r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	f3af 8000 	nop.w
 800ad70:	cccccccd 	.word	0xcccccccd
 800ad74:	3f894ccc 	.word	0x3f894ccc
 800ad78:	d2f1a9fc 	.word	0xd2f1a9fc
 800ad7c:	3f50624d 	.word	0x3f50624d
 800ad80:	40000400 	.word	0x40000400
 800ad84:	40000800 	.word	0x40000800
 800ad88:	20014604 	.word	0x20014604
 800ad8c:	2000c2ba 	.word	0x2000c2ba
 800ad90:	2000c2b8 	.word	0x2000c2b8
 800ad94:	00000000 	.word	0x00000000

0800ad98 <Speed_Motor>:
inline void Speed_Motor(){
 800ad98:	b5b0      	push	{r4, r5, r7, lr}
 800ad9a:	ed2d 8b02 	vpush	{d8}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
	int16_t MotorL=0,MotorR=0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	83fb      	strh	r3, [r7, #30]
 800ada6:	2300      	movs	r3, #0
 800ada8:	83bb      	strh	r3, [r7, #28]

	float speedval;
	float val_v = 0;
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	61bb      	str	r3, [r7, #24]
	float val_k=0;
 800adb0:	f04f 0300 	mov.w	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
	float se=0;
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	613b      	str	r3, [r7, #16]
	static int speedval_I=0 ;
	static float speed_buff=0;
	float val= 0;
 800adbc:	f04f 0300 	mov.w	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
	float sKp = 2.5;//1.8
 800adc2:	4bbb      	ldr	r3, [pc, #748]	; (800b0b0 <Speed_Motor+0x318>)
 800adc4:	60bb      	str	r3, [r7, #8]
	float sKi= 28;//20
 800adc6:	4bbb      	ldr	r3, [pc, #748]	; (800b0b4 <Speed_Motor+0x31c>)
 800adc8:	607b      	str	r3, [r7, #4]
	//float lKi= 20;

	speedval = (float)Average_speed - speed_get();
 800adca:	4bbb      	ldr	r3, [pc, #748]	; (800b0b8 <Speed_Motor+0x320>)
 800adcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800add0:	ee07 3a90 	vmov	s15, r3
 800add4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800add8:	f7ff ff1a 	bl	800ac10 <speed_get>
 800addc:	eef0 7a40 	vmov.f32	s15, s0
 800ade0:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ade4:	edc7 7a00 	vstr	s15, [r7]
//	speedval = 0- speed_get();

	if(speed_buff != Average_speed && speed_buff > Average_speed && speedval_I > 0)speedval_I=0;
 800ade8:	4bb3      	ldr	r3, [pc, #716]	; (800b0b8 <Speed_Motor+0x320>)
 800adea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800adf6:	4bb1      	ldr	r3, [pc, #708]	; (800b0bc <Speed_Motor+0x324>)
 800adf8:	edd3 7a00 	vldr	s15, [r3]
 800adfc:	eeb4 7a67 	vcmp.f32	s14, s15
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	d015      	beq.n	800ae32 <Speed_Motor+0x9a>
 800ae06:	4bac      	ldr	r3, [pc, #688]	; (800b0b8 <Speed_Motor+0x320>)
 800ae08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae0c:	ee07 3a90 	vmov	s15, r3
 800ae10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae14:	4ba9      	ldr	r3, [pc, #676]	; (800b0bc <Speed_Motor+0x324>)
 800ae16:	edd3 7a00 	vldr	s15, [r3]
 800ae1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae22:	d506      	bpl.n	800ae32 <Speed_Motor+0x9a>
 800ae24:	4ba6      	ldr	r3, [pc, #664]	; (800b0c0 <Speed_Motor+0x328>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	dd02      	ble.n	800ae32 <Speed_Motor+0x9a>
 800ae2c:	4ba4      	ldr	r3, [pc, #656]	; (800b0c0 <Speed_Motor+0x328>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
	if(speed_buff != Average_speed && speed_buff < Average_speed && speedval_I < 0)speedval_I=0;
 800ae32:	4ba1      	ldr	r3, [pc, #644]	; (800b0b8 <Speed_Motor+0x320>)
 800ae34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae38:	ee07 3a90 	vmov	s15, r3
 800ae3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae40:	4b9e      	ldr	r3, [pc, #632]	; (800b0bc <Speed_Motor+0x324>)
 800ae42:	edd3 7a00 	vldr	s15, [r3]
 800ae46:	eeb4 7a67 	vcmp.f32	s14, s15
 800ae4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4e:	d015      	beq.n	800ae7c <Speed_Motor+0xe4>
 800ae50:	4b99      	ldr	r3, [pc, #612]	; (800b0b8 <Speed_Motor+0x320>)
 800ae52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae5e:	4b97      	ldr	r3, [pc, #604]	; (800b0bc <Speed_Motor+0x324>)
 800ae60:	edd3 7a00 	vldr	s15, [r3]
 800ae64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6c:	dd06      	ble.n	800ae7c <Speed_Motor+0xe4>
 800ae6e:	4b94      	ldr	r3, [pc, #592]	; (800b0c0 <Speed_Motor+0x328>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	da02      	bge.n	800ae7c <Speed_Motor+0xe4>
 800ae76:	4b92      	ldr	r3, [pc, #584]	; (800b0c0 <Speed_Motor+0x328>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]
	speed_buff = Average_speed;
 800ae7c:	4b8e      	ldr	r3, [pc, #568]	; (800b0b8 <Speed_Motor+0x320>)
 800ae7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae8a:	4b8c      	ldr	r3, [pc, #560]	; (800b0bc <Speed_Motor+0x324>)
 800ae8c:	edc3 7a00 	vstr	s15, [r3]
	//if(speedval <= 10.0 && speedval >= (-10.0))speedval_I=0;
	speedval_I = speedval_I + ((float)speedval*T);
 800ae90:	4b8b      	ldr	r3, [pc, #556]	; (800b0c0 <Speed_Motor+0x328>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fd fa7d 	bl	8008394 <__aeabi_i2d>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	6838      	ldr	r0, [r7, #0]
 800aea0:	f7fd fa8a 	bl	80083b8 <__aeabi_f2d>
 800aea4:	a380      	add	r3, pc, #512	; (adr r3, 800b0a8 <Speed_Motor+0x310>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f7fd fadd 	bl	8008468 <__aeabi_dmul>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7fd f921 	bl	80080fc <__adddf3>
 800aeba:	4603      	mov	r3, r0
 800aebc:	460c      	mov	r4, r1
 800aebe:	4618      	mov	r0, r3
 800aec0:	4621      	mov	r1, r4
 800aec2:	f7fd fd81 	bl	80089c8 <__aeabi_d2iz>
 800aec6:	4602      	mov	r2, r0
 800aec8:	4b7d      	ldr	r3, [pc, #500]	; (800b0c0 <Speed_Motor+0x328>)
 800aeca:	601a      	str	r2, [r3, #0]

	//if(speedval <= 10.0 && speedval >= (-10.0))speedval_I=0;

	if(speedval_I >= 100000) speedval_I = 100000;
 800aecc:	4b7c      	ldr	r3, [pc, #496]	; (800b0c0 <Speed_Motor+0x328>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a7c      	ldr	r2, [pc, #496]	; (800b0c4 <Speed_Motor+0x32c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	dd02      	ble.n	800aedc <Speed_Motor+0x144>
 800aed6:	4b7a      	ldr	r3, [pc, #488]	; (800b0c0 <Speed_Motor+0x328>)
 800aed8:	4a7b      	ldr	r2, [pc, #492]	; (800b0c8 <Speed_Motor+0x330>)
 800aeda:	601a      	str	r2, [r3, #0]
	if(speedval_I <= (-100000)) speedval_I = (-100000);
 800aedc:	4b78      	ldr	r3, [pc, #480]	; (800b0c0 <Speed_Motor+0x328>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a7a      	ldr	r2, [pc, #488]	; (800b0cc <Speed_Motor+0x334>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	da02      	bge.n	800aeec <Speed_Motor+0x154>
 800aee6:	4b76      	ldr	r3, [pc, #472]	; (800b0c0 <Speed_Motor+0x328>)
 800aee8:	4a79      	ldr	r2, [pc, #484]	; (800b0d0 <Speed_Motor+0x338>)
 800aeea:	601a      	str	r2, [r3, #0]

	//val_v = (speedval* sKp)+((float)speedval_I*sKi);
	val_k  = Line_Motor();
 800aeec:	f7ff fda8 	bl	800aa40 <Line_Motor>
 800aef0:	ed87 0a05 	vstr	s0, [r7, #20]
//	if(val_v >= 1400 && val_k >= 2000) val_v =1400;
//	if(val_v <= -1400 && val_k <= -2000) val_v = -1400;
	if(val_v >= 2000) val_v =2000;
 800aef4:	edd7 7a06 	vldr	s15, [r7, #24]
 800aef8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800b0e0 <Speed_Motor+0x348>
 800aefc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af04:	db01      	blt.n	800af0a <Speed_Motor+0x172>
 800af06:	4b73      	ldr	r3, [pc, #460]	; (800b0d4 <Speed_Motor+0x33c>)
 800af08:	61bb      	str	r3, [r7, #24]
	if(val_v <= -2000) val_v = -2000;
 800af0a:	edd7 7a06 	vldr	s15, [r7, #24]
 800af0e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800b0d8 <Speed_Motor+0x340>
 800af12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1a:	d801      	bhi.n	800af20 <Speed_Motor+0x188>
 800af1c:	4b6f      	ldr	r3, [pc, #444]	; (800b0dc <Speed_Motor+0x344>)
 800af1e:	61bb      	str	r3, [r7, #24]
	if(val_k >= 2000){
 800af20:	edd7 7a05 	vldr	s15, [r7, #20]
 800af24:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b0e0 <Speed_Motor+0x348>
 800af28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af30:	db01      	blt.n	800af36 <Speed_Motor+0x19e>
		val_k =2000;
 800af32:	4b68      	ldr	r3, [pc, #416]	; (800b0d4 <Speed_Motor+0x33c>)
 800af34:	617b      	str	r3, [r7, #20]
		//val_v = 0;
	}
	if(val_k <= -2000){
 800af36:	edd7 7a05 	vldr	s15, [r7, #20]
 800af3a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b0d8 <Speed_Motor+0x340>
 800af3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af46:	d801      	bhi.n	800af4c <Speed_Motor+0x1b4>
		val_k = -2000;
 800af48:	4b64      	ldr	r3, [pc, #400]	; (800b0dc <Speed_Motor+0x344>)
 800af4a:	617b      	str	r3, [r7, #20]
		//val_v = 0;
	}
//	if(val_k >= 2000) val_v = 0;
//	if(val_k <= -2000) val_v = 0;
	MotorL = roundf(val_v + val_k);
 800af4c:	ed97 7a06 	vldr	s14, [r7, #24]
 800af50:	edd7 7a05 	vldr	s15, [r7, #20]
 800af54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af58:	eeb0 0a67 	vmov.f32	s0, s15
 800af5c:	f00b f926 	bl	80161ac <roundf>
 800af60:	eef0 7a40 	vmov.f32	s15, s0
 800af64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af68:	ee17 3a90 	vmov	r3, s15
 800af6c:	83fb      	strh	r3, [r7, #30]
	MotorR =roundf( val_v - val_k);
 800af6e:	ed97 7a06 	vldr	s14, [r7, #24]
 800af72:	edd7 7a05 	vldr	s15, [r7, #20]
 800af76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af7a:	eeb0 0a67 	vmov.f32	s0, s15
 800af7e:	f00b f915 	bl	80161ac <roundf>
 800af82:	eef0 7a40 	vmov.f32	s15, s0
 800af86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af8a:	ee17 3a90 	vmov	r3, s15
 800af8e:	83bb      	strh	r3, [r7, #28]
	if(MotorL>=2000  ){
 800af90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800af94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af98:	db28      	blt.n	800afec <Speed_Motor+0x254>
		se = MotorL-2000;
 800af9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800af9e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afaa:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800afae:	ed97 7a06 	vldr	s14, [r7, #24]
 800afb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800afb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800afba:	edd7 7a05 	vldr	s15, [r7, #20]
 800afbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afc6:	ee17 3a90 	vmov	r3, s15
 800afca:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800afcc:	ed97 7a06 	vldr	s14, [r7, #24]
 800afd0:	edd7 7a04 	vldr	s15, [r7, #16]
 800afd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800afd8:	edd7 7a05 	vldr	s15, [r7, #20]
 800afdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afe4:	ee17 3a90 	vmov	r3, s15
 800afe8:	83bb      	strh	r3, [r7, #28]
 800afea:	e0a8      	b.n	800b13e <Speed_Motor+0x3a6>
	}
	else if(MotorR>=2000){
 800afec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800aff0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aff4:	db28      	blt.n	800b048 <Speed_Motor+0x2b0>
		se = MotorR-2000;
 800aff6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800affa:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b006:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b00a:	ed97 7a06 	vldr	s14, [r7, #24]
 800b00e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b012:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b016:	edd7 7a05 	vldr	s15, [r7, #20]
 800b01a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b01e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b022:	ee17 3a90 	vmov	r3, s15
 800b026:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b028:	ed97 7a06 	vldr	s14, [r7, #24]
 800b02c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b030:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b034:	edd7 7a05 	vldr	s15, [r7, #20]
 800b038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b03c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b040:	ee17 3a90 	vmov	r3, s15
 800b044:	83bb      	strh	r3, [r7, #28]
 800b046:	e07a      	b.n	800b13e <Speed_Motor+0x3a6>
	}
	else if(MotorL<=-2000 ){
 800b048:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b04c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b050:	dc48      	bgt.n	800b0e4 <Speed_Motor+0x34c>
		se = MotorL+2000;
 800b052:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b056:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b062:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b066:	ed97 7a06 	vldr	s14, [r7, #24]
 800b06a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b06e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b072:	edd7 7a05 	vldr	s15, [r7, #20]
 800b076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b07a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b07e:	ee17 3a90 	vmov	r3, s15
 800b082:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b084:	ed97 7a06 	vldr	s14, [r7, #24]
 800b088:	edd7 7a04 	vldr	s15, [r7, #16]
 800b08c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b090:	edd7 7a05 	vldr	s15, [r7, #20]
 800b094:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b09c:	ee17 3a90 	vmov	r3, s15
 800b0a0:	83bb      	strh	r3, [r7, #28]
 800b0a2:	e04c      	b.n	800b13e <Speed_Motor+0x3a6>
 800b0a4:	f3af 8000 	nop.w
 800b0a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b0ac:	3f50624d 	.word	0x3f50624d
 800b0b0:	40200000 	.word	0x40200000
 800b0b4:	41e00000 	.word	0x41e00000
 800b0b8:	20014326 	.word	0x20014326
 800b0bc:	2000c2b0 	.word	0x2000c2b0
 800b0c0:	2000c2b4 	.word	0x2000c2b4
 800b0c4:	0001869f 	.word	0x0001869f
 800b0c8:	000186a0 	.word	0x000186a0
 800b0cc:	fffe7961 	.word	0xfffe7961
 800b0d0:	fffe7960 	.word	0xfffe7960
 800b0d4:	44fa0000 	.word	0x44fa0000
 800b0d8:	c4fa0000 	.word	0xc4fa0000
 800b0dc:	c4fa0000 	.word	0xc4fa0000
 800b0e0:	44fa0000 	.word	0x44fa0000
	}
	else if(MotorR<=-2000 ){
 800b0e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b0e8:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b0ec:	dc27      	bgt.n	800b13e <Speed_Motor+0x3a6>
		se = MotorR+2000;
 800b0ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b0f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0fe:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800b102:	ed97 7a06 	vldr	s14, [r7, #24]
 800b106:	edd7 7a04 	vldr	s15, [r7, #16]
 800b10a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b10e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b112:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b11a:	ee17 3a90 	vmov	r3, s15
 800b11e:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800b120:	ed97 7a06 	vldr	s14, [r7, #24]
 800b124:	edd7 7a04 	vldr	s15, [r7, #16]
 800b128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b12c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b138:	ee17 3a90 	vmov	r3, s15
 800b13c:	83bb      	strh	r3, [r7, #28]
	}
	if(speedval>=2000){
 800b13e:	edd7 7a00 	vldr	s15, [r7]
 800b142:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 800b0e0 <Speed_Motor+0x348>
 800b146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14e:	db07      	blt.n	800b160 <Speed_Motor+0x3c8>
		MotorL=MotorL+200;
 800b150:	8bfb      	ldrh	r3, [r7, #30]
 800b152:	33c8      	adds	r3, #200	; 0xc8
 800b154:	b29b      	uxth	r3, r3
 800b156:	83fb      	strh	r3, [r7, #30]
		MotorR=MotorR+200;
 800b158:	8bbb      	ldrh	r3, [r7, #28]
 800b15a:	33c8      	adds	r3, #200	; 0xc8
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	83bb      	strh	r3, [r7, #28]
	}
//	if(MotorL-MotorR <= 2000) fan_pressure(14.5,15.0);
//	else fan_pressure(14.5,14.5);
//	if(MotorR-MotorL <= 2000) fan_pressure(15.0,14.5);
//	else fan_pressure(14.5,14.5);
	Motor(MotorL,MotorR);
 800b160:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b164:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b168:	4611      	mov	r1, r2
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 f8f0 	bl	800c350 <Motor>


}
 800b170:	bf00      	nop
 800b172:	3720      	adds	r7, #32
 800b174:	46bd      	mov	sp, r7
 800b176:	ecbd 8b02 	vpop	{d8}
 800b17a:	bdb0      	pop	{r4, r5, r7, pc}

0800b17c <adjust_spped>:
#include "initial.h"

uint16_t Accm;
uint16_t Decm;

void adjust_spped(){
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
	lcd_init();
 800b180:	f7fd fe4a 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b184:	f7fd fe8c 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b188:	2100      	movs	r1, #0
 800b18a:	2000      	movs	r0, #0
 800b18c:	f7fd fe98 	bl	8008ec0 <lcd_locate>
	lcd_printf("Ave_speed");
 800b190:	4833      	ldr	r0, [pc, #204]	; (800b260 <adjust_spped+0xe4>)
 800b192:	f7fd febf 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b196:	2101      	movs	r1, #1
 800b198:	2000      	movs	r0, #0
 800b19a:	f7fd fe91 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Average_speed);
 800b19e:	4b31      	ldr	r3, [pc, #196]	; (800b264 <adjust_spped+0xe8>)
 800b1a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4830      	ldr	r0, [pc, #192]	; (800b268 <adjust_spped+0xec>)
 800b1a8:	f7fd feb4 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b1ac:	4b2f      	ldr	r3, [pc, #188]	; (800b26c <adjust_spped+0xf0>)
 800b1ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b1b2:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b1b4:	e041      	b.n	800b23a <adjust_spped+0xbe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b1bc:	482c      	ldr	r0, [pc, #176]	; (800b270 <adjust_spped+0xf4>)
 800b1be:	f004 ff0f 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b1c2:	4b2a      	ldr	r3, [pc, #168]	; (800b26c <adjust_spped+0xf0>)
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d917      	bls.n	800b1fe <adjust_spped+0x82>
			Average_speed += 100;
 800b1ce:	4b25      	ldr	r3, [pc, #148]	; (800b264 <adjust_spped+0xe8>)
 800b1d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3364      	adds	r3, #100	; 0x64
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	b21a      	sxth	r2, r3
 800b1dc:	4b21      	ldr	r3, [pc, #132]	; (800b264 <adjust_spped+0xe8>)
 800b1de:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f7fd fe6c 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Average_speed);
 800b1e8:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <adjust_spped+0xe8>)
 800b1ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	481d      	ldr	r0, [pc, #116]	; (800b268 <adjust_spped+0xec>)
 800b1f2:	f7fd fe8f 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b1f6:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <adjust_spped+0xf0>)
 800b1f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b1fc:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000){
 800b1fe:	4b1b      	ldr	r3, [pc, #108]	; (800b26c <adjust_spped+0xf0>)
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	f647 022f 	movw	r2, #30767	; 0x782f
 800b206:	4293      	cmp	r3, r2
 800b208:	d817      	bhi.n	800b23a <adjust_spped+0xbe>
			Average_speed -= 100;
 800b20a:	4b16      	ldr	r3, [pc, #88]	; (800b264 <adjust_spped+0xe8>)
 800b20c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b64      	subs	r3, #100	; 0x64
 800b214:	b29b      	uxth	r3, r3
 800b216:	b21a      	sxth	r2, r3
 800b218:	4b12      	ldr	r3, [pc, #72]	; (800b264 <adjust_spped+0xe8>)
 800b21a:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b21c:	2101      	movs	r1, #1
 800b21e:	2000      	movs	r0, #0
 800b220:	f7fd fe4e 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Average_speed);
 800b224:	4b0f      	ldr	r3, [pc, #60]	; (800b264 <adjust_spped+0xe8>)
 800b226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b22a:	4619      	mov	r1, r3
 800b22c:	480e      	ldr	r0, [pc, #56]	; (800b268 <adjust_spped+0xec>)
 800b22e:	f7fd fe71 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b232:	4b0e      	ldr	r3, [pc, #56]	; (800b26c <adjust_spped+0xf0>)
 800b234:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b238:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b23a:	f001 f9b1 	bl	800c5a0 <switch_cheack>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1b8      	bne.n	800b1b6 <adjust_spped+0x3a>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b244:	2201      	movs	r2, #1
 800b246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b24a:	4809      	ldr	r0, [pc, #36]	; (800b270 <adjust_spped+0xf4>)
 800b24c:	f004 fec8 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[26]=Average_speed;
 800b250:	4b04      	ldr	r3, [pc, #16]	; (800b264 <adjust_spped+0xe8>)
 800b252:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b256:	b29a      	uxth	r2, r3
 800b258:	4b06      	ldr	r3, [pc, #24]	; (800b274 <adjust_spped+0xf8>)
 800b25a:	869a      	strh	r2, [r3, #52]	; 0x34

}
 800b25c:	bf00      	nop
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	0801622c 	.word	0x0801622c
 800b264:	20014326 	.word	0x20014326
 800b268:	08016238 	.word	0x08016238
 800b26c:	40000800 	.word	0x40000800
 800b270:	40020000 	.word	0x40020000
 800b274:	2000c30c 	.word	0x2000c30c

0800b278 <adjust_Kp>:
void adjust_Kp(){
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
	lcd_init();
 800b27c:	f7fd fdcc 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b280:	f7fd fe0e 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b284:	2100      	movs	r1, #0
 800b286:	2000      	movs	r0, #0
 800b288:	f7fd fe1a 	bl	8008ec0 <lcd_locate>
	lcd_printf("Kp");
 800b28c:	482e      	ldr	r0, [pc, #184]	; (800b348 <adjust_Kp+0xd0>)
 800b28e:	f7fd fe41 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b292:	2101      	movs	r1, #1
 800b294:	2000      	movs	r0, #0
 800b296:	f7fd fe13 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Kp);
 800b29a:	4b2c      	ldr	r3, [pc, #176]	; (800b34c <adjust_Kp+0xd4>)
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	482b      	ldr	r0, [pc, #172]	; (800b350 <adjust_Kp+0xd8>)
 800b2a2:	f7fd fe37 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b2a6:	4b2b      	ldr	r3, [pc, #172]	; (800b354 <adjust_Kp+0xdc>)
 800b2a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b2ac:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b2ae:	e039      	b.n	800b324 <adjust_Kp+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b2b6:	4828      	ldr	r0, [pc, #160]	; (800b358 <adjust_Kp+0xe0>)
 800b2b8:	f004 fe92 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b2bc:	4b25      	ldr	r3, [pc, #148]	; (800b354 <adjust_Kp+0xdc>)
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d913      	bls.n	800b2f0 <adjust_Kp+0x78>
			Kp ++;
 800b2c8:	4b20      	ldr	r3, [pc, #128]	; (800b34c <adjust_Kp+0xd4>)
 800b2ca:	881b      	ldrh	r3, [r3, #0]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	4b1e      	ldr	r3, [pc, #120]	; (800b34c <adjust_Kp+0xd4>)
 800b2d2:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f7fd fdf2 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kp);
 800b2dc:	4b1b      	ldr	r3, [pc, #108]	; (800b34c <adjust_Kp+0xd4>)
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	481b      	ldr	r0, [pc, #108]	; (800b350 <adjust_Kp+0xd8>)
 800b2e4:	f7fd fe16 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b2e8:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <adjust_Kp+0xdc>)
 800b2ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b2ee:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(TIM4 -> CNT<32768-2000) {
 800b2f0:	4b18      	ldr	r3, [pc, #96]	; (800b354 <adjust_Kp+0xdc>)
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	f647 022f 	movw	r2, #30767	; 0x782f
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d813      	bhi.n	800b324 <adjust_Kp+0xac>
			Kp --;
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <adjust_Kp+0xd4>)
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	3b01      	subs	r3, #1
 800b302:	b29a      	uxth	r2, r3
 800b304:	4b11      	ldr	r3, [pc, #68]	; (800b34c <adjust_Kp+0xd4>)
 800b306:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b308:	2101      	movs	r1, #1
 800b30a:	2000      	movs	r0, #0
 800b30c:	f7fd fdd8 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kp);
 800b310:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <adjust_Kp+0xd4>)
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	4619      	mov	r1, r3
 800b316:	480e      	ldr	r0, [pc, #56]	; (800b350 <adjust_Kp+0xd8>)
 800b318:	f7fd fdfc 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b31c:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <adjust_Kp+0xdc>)
 800b31e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b322:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b324:	f001 f93c 	bl	800c5a0 <switch_cheack>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1c0      	bne.n	800b2b0 <adjust_Kp+0x38>
		}
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b32e:	2201      	movs	r2, #1
 800b330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b334:	4808      	ldr	r0, [pc, #32]	; (800b358 <adjust_Kp+0xe0>)
 800b336:	f004 fe53 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[27]=Kp;
 800b33a:	4b04      	ldr	r3, [pc, #16]	; (800b34c <adjust_Kp+0xd4>)
 800b33c:	881a      	ldrh	r2, [r3, #0]
 800b33e:	4b07      	ldr	r3, [pc, #28]	; (800b35c <adjust_Kp+0xe4>)
 800b340:	86da      	strh	r2, [r3, #54]	; 0x36

}
 800b342:	bf00      	nop
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	0801623c 	.word	0x0801623c
 800b34c:	2000c304 	.word	0x2000c304
 800b350:	08016238 	.word	0x08016238
 800b354:	40000800 	.word	0x40000800
 800b358:	40020000 	.word	0x40020000
 800b35c:	2000c30c 	.word	0x2000c30c

0800b360 <adjust_Ki>:
void adjust_Ki(){
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
	lcd_init();
 800b364:	f7fd fd58 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b368:	f7fd fd9a 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b36c:	2100      	movs	r1, #0
 800b36e:	2000      	movs	r0, #0
 800b370:	f7fd fda6 	bl	8008ec0 <lcd_locate>
	lcd_printf("Ki");
 800b374:	482e      	ldr	r0, [pc, #184]	; (800b430 <adjust_Ki+0xd0>)
 800b376:	f7fd fdcd 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b37a:	2101      	movs	r1, #1
 800b37c:	2000      	movs	r0, #0
 800b37e:	f7fd fd9f 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Ki);
 800b382:	4b2c      	ldr	r3, [pc, #176]	; (800b434 <adjust_Ki+0xd4>)
 800b384:	881b      	ldrh	r3, [r3, #0]
 800b386:	4619      	mov	r1, r3
 800b388:	482b      	ldr	r0, [pc, #172]	; (800b438 <adjust_Ki+0xd8>)
 800b38a:	f7fd fdc3 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b38e:	4b2b      	ldr	r3, [pc, #172]	; (800b43c <adjust_Ki+0xdc>)
 800b390:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b394:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b396:	e039      	b.n	800b40c <adjust_Ki+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b398:	2200      	movs	r2, #0
 800b39a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b39e:	4828      	ldr	r0, [pc, #160]	; (800b440 <adjust_Ki+0xe0>)
 800b3a0:	f004 fe1e 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b3a4:	4b25      	ldr	r3, [pc, #148]	; (800b43c <adjust_Ki+0xdc>)
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d913      	bls.n	800b3d8 <adjust_Ki+0x78>
			Ki++;
 800b3b0:	4b20      	ldr	r3, [pc, #128]	; (800b434 <adjust_Ki+0xd4>)
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	4b1e      	ldr	r3, [pc, #120]	; (800b434 <adjust_Ki+0xd4>)
 800b3ba:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b3bc:	2101      	movs	r1, #1
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f7fd fd7e 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Ki);
 800b3c4:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <adjust_Ki+0xd4>)
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	481b      	ldr	r0, [pc, #108]	; (800b438 <adjust_Ki+0xd8>)
 800b3cc:	f7fd fda2 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b3d0:	4b1a      	ldr	r3, [pc, #104]	; (800b43c <adjust_Ki+0xdc>)
 800b3d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b3d6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000) {
 800b3d8:	4b18      	ldr	r3, [pc, #96]	; (800b43c <adjust_Ki+0xdc>)
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	f647 022f 	movw	r2, #30767	; 0x782f
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d813      	bhi.n	800b40c <adjust_Ki+0xac>
			Ki --;
 800b3e4:	4b13      	ldr	r3, [pc, #76]	; (800b434 <adjust_Ki+0xd4>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	4b11      	ldr	r3, [pc, #68]	; (800b434 <adjust_Ki+0xd4>)
 800b3ee:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	f7fd fd64 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Ki);
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <adjust_Ki+0xd4>)
 800b3fa:	881b      	ldrh	r3, [r3, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	480e      	ldr	r0, [pc, #56]	; (800b438 <adjust_Ki+0xd8>)
 800b400:	f7fd fd88 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b404:	4b0d      	ldr	r3, [pc, #52]	; (800b43c <adjust_Ki+0xdc>)
 800b406:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b40a:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b40c:	f001 f8c8 	bl	800c5a0 <switch_cheack>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1c0      	bne.n	800b398 <adjust_Ki+0x38>
		}
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b416:	2201      	movs	r2, #1
 800b418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b41c:	4808      	ldr	r0, [pc, #32]	; (800b440 <adjust_Ki+0xe0>)
 800b41e:	f004 fddf 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[28]=Ki;
 800b422:	4b04      	ldr	r3, [pc, #16]	; (800b434 <adjust_Ki+0xd4>)
 800b424:	881a      	ldrh	r2, [r3, #0]
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <adjust_Ki+0xe4>)
 800b428:	871a      	strh	r2, [r3, #56]	; 0x38
}
 800b42a:	bf00      	nop
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	08016240 	.word	0x08016240
 800b434:	2000c300 	.word	0x2000c300
 800b438:	08016238 	.word	0x08016238
 800b43c:	40000800 	.word	0x40000800
 800b440:	40020000 	.word	0x40020000
 800b444:	2000c30c 	.word	0x2000c30c

0800b448 <adjust_Kd>:
void adjust_Kd(){
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
	lcd_init();
 800b44c:	f7fd fce4 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b450:	f7fd fd26 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b454:	2100      	movs	r1, #0
 800b456:	2000      	movs	r0, #0
 800b458:	f7fd fd32 	bl	8008ec0 <lcd_locate>
	lcd_printf("Kd");
 800b45c:	482e      	ldr	r0, [pc, #184]	; (800b518 <adjust_Kd+0xd0>)
 800b45e:	f7fd fd59 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b462:	2101      	movs	r1, #1
 800b464:	2000      	movs	r0, #0
 800b466:	f7fd fd2b 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Kd);
 800b46a:	4b2c      	ldr	r3, [pc, #176]	; (800b51c <adjust_Kd+0xd4>)
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	4619      	mov	r1, r3
 800b470:	482b      	ldr	r0, [pc, #172]	; (800b520 <adjust_Kd+0xd8>)
 800b472:	f7fd fd4f 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b476:	4b2b      	ldr	r3, [pc, #172]	; (800b524 <adjust_Kd+0xdc>)
 800b478:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b47c:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b47e:	e039      	b.n	800b4f4 <adjust_Kd+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b480:	2200      	movs	r2, #0
 800b482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b486:	4828      	ldr	r0, [pc, #160]	; (800b528 <adjust_Kd+0xe0>)
 800b488:	f004 fdaa 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b48c:	4b25      	ldr	r3, [pc, #148]	; (800b524 <adjust_Kd+0xdc>)
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b494:	4293      	cmp	r3, r2
 800b496:	d913      	bls.n	800b4c0 <adjust_Kd+0x78>
			Kd++;
 800b498:	4b20      	ldr	r3, [pc, #128]	; (800b51c <adjust_Kd+0xd4>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	4b1e      	ldr	r3, [pc, #120]	; (800b51c <adjust_Kd+0xd4>)
 800b4a2:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	f7fd fd0a 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kd);
 800b4ac:	4b1b      	ldr	r3, [pc, #108]	; (800b51c <adjust_Kd+0xd4>)
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	481b      	ldr	r0, [pc, #108]	; (800b520 <adjust_Kd+0xd8>)
 800b4b4:	f7fd fd2e 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b4b8:	4b1a      	ldr	r3, [pc, #104]	; (800b524 <adjust_Kd+0xdc>)
 800b4ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b4be:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000) {
 800b4c0:	4b18      	ldr	r3, [pc, #96]	; (800b524 <adjust_Kd+0xdc>)
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	f647 022f 	movw	r2, #30767	; 0x782f
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d813      	bhi.n	800b4f4 <adjust_Kd+0xac>
			Kd --;
 800b4cc:	4b13      	ldr	r3, [pc, #76]	; (800b51c <adjust_Kd+0xd4>)
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	4b11      	ldr	r3, [pc, #68]	; (800b51c <adjust_Kd+0xd4>)
 800b4d6:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b4d8:	2101      	movs	r1, #1
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f7fd fcf0 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Kd);
 800b4e0:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <adjust_Kd+0xd4>)
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	480e      	ldr	r0, [pc, #56]	; (800b520 <adjust_Kd+0xd8>)
 800b4e8:	f7fd fd14 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <adjust_Kd+0xdc>)
 800b4ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b4f2:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b4f4:	f001 f854 	bl	800c5a0 <switch_cheack>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1c0      	bne.n	800b480 <adjust_Kd+0x38>
		}
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b4fe:	2201      	movs	r2, #1
 800b500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b504:	4808      	ldr	r0, [pc, #32]	; (800b528 <adjust_Kd+0xe0>)
 800b506:	f004 fd6b 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[29]=Kd;
 800b50a:	4b04      	ldr	r3, [pc, #16]	; (800b51c <adjust_Kd+0xd4>)
 800b50c:	881a      	ldrh	r2, [r3, #0]
 800b50e:	4b07      	ldr	r3, [pc, #28]	; (800b52c <adjust_Kd+0xe4>)
 800b510:	875a      	strh	r2, [r3, #58]	; 0x3a

}
 800b512:	bf00      	nop
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	08016244 	.word	0x08016244
 800b51c:	2000c302 	.word	0x2000c302
 800b520:	08016238 	.word	0x08016238
 800b524:	40000800 	.word	0x40000800
 800b528:	40020000 	.word	0x40020000
 800b52c:	2000c30c 	.word	0x2000c30c

0800b530 <tuning>:
void tuning(){
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
		adjust_spped();
 800b534:	f7ff fe22 	bl	800b17c <adjust_spped>
		HAL_Delay(100);
 800b538:	2064      	movs	r0, #100	; 0x64
 800b53a:	f003 f81b 	bl	800e574 <HAL_Delay>
		adjust_Kp();
 800b53e:	f7ff fe9b 	bl	800b278 <adjust_Kp>
		HAL_Delay(100);
 800b542:	2064      	movs	r0, #100	; 0x64
 800b544:	f003 f816 	bl	800e574 <HAL_Delay>
		adjust_Ki();
 800b548:	f7ff ff0a 	bl	800b360 <adjust_Ki>
		HAL_Delay(100);
 800b54c:	2064      	movs	r0, #100	; 0x64
 800b54e:	f003 f811 	bl	800e574 <HAL_Delay>
		adjust_Kd();
 800b552:	f7ff ff79 	bl	800b448 <adjust_Kd>
		HAL_Delay(100);
 800b556:	2064      	movs	r0, #100	; 0x64
 800b558:	f003 f80c 	bl	800e574 <HAL_Delay>

	Flash_store();
 800b55c:	f000 fc0e 	bl	800bd7c <Flash_store>
	lcd_clear();
 800b560:	f7fd fc9e 	bl	8008ea0 <lcd_clear>
}
 800b564:	bf00      	nop
 800b566:	bd80      	pop	{r7, pc}

0800b568 <adjust_Accm>:
void adjust_Accm(){
 800b568:	b580      	push	{r7, lr}
 800b56a:	af00      	add	r7, sp, #0

	lcd_init();
 800b56c:	f7fd fc54 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b570:	f7fd fc96 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b574:	2100      	movs	r1, #0
 800b576:	2000      	movs	r0, #0
 800b578:	f7fd fca2 	bl	8008ec0 <lcd_locate>
	lcd_printf("Accm");
 800b57c:	482e      	ldr	r0, [pc, #184]	; (800b638 <adjust_Accm+0xd0>)
 800b57e:	f7fd fcc9 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b582:	2101      	movs	r1, #1
 800b584:	2000      	movs	r0, #0
 800b586:	f7fd fc9b 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Accm);
 800b58a:	4b2c      	ldr	r3, [pc, #176]	; (800b63c <adjust_Accm+0xd4>)
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	4619      	mov	r1, r3
 800b590:	482b      	ldr	r0, [pc, #172]	; (800b640 <adjust_Accm+0xd8>)
 800b592:	f7fd fcbf 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b596:	4b2b      	ldr	r3, [pc, #172]	; (800b644 <adjust_Accm+0xdc>)
 800b598:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b59c:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b59e:	e039      	b.n	800b614 <adjust_Accm+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5a6:	4828      	ldr	r0, [pc, #160]	; (800b648 <adjust_Accm+0xe0>)
 800b5a8:	f004 fd1a 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b5ac:	4b25      	ldr	r3, [pc, #148]	; (800b644 <adjust_Accm+0xdc>)
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d913      	bls.n	800b5e0 <adjust_Accm+0x78>
			Accm ++;
 800b5b8:	4b20      	ldr	r3, [pc, #128]	; (800b63c <adjust_Accm+0xd4>)
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	4b1e      	ldr	r3, [pc, #120]	; (800b63c <adjust_Accm+0xd4>)
 800b5c2:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	f7fd fc7a 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Accm);
 800b5cc:	4b1b      	ldr	r3, [pc, #108]	; (800b63c <adjust_Accm+0xd4>)
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	481b      	ldr	r0, [pc, #108]	; (800b640 <adjust_Accm+0xd8>)
 800b5d4:	f7fd fc9e 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b5d8:	4b1a      	ldr	r3, [pc, #104]	; (800b644 <adjust_Accm+0xdc>)
 800b5da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b5de:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(TIM4 -> CNT<32768-2000) {
 800b5e0:	4b18      	ldr	r3, [pc, #96]	; (800b644 <adjust_Accm+0xdc>)
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	f647 022f 	movw	r2, #30767	; 0x782f
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d813      	bhi.n	800b614 <adjust_Accm+0xac>
			Accm --;
 800b5ec:	4b13      	ldr	r3, [pc, #76]	; (800b63c <adjust_Accm+0xd4>)
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	4b11      	ldr	r3, [pc, #68]	; (800b63c <adjust_Accm+0xd4>)
 800b5f6:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	f7fd fc60 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Accm);
 800b600:	4b0e      	ldr	r3, [pc, #56]	; (800b63c <adjust_Accm+0xd4>)
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	4619      	mov	r1, r3
 800b606:	480e      	ldr	r0, [pc, #56]	; (800b640 <adjust_Accm+0xd8>)
 800b608:	f7fd fc84 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <adjust_Accm+0xdc>)
 800b60e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b612:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b614:	f000 ffc4 	bl	800c5a0 <switch_cheack>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1c0      	bne.n	800b5a0 <adjust_Accm+0x38>
		}
		//HAL_Delay(100);
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b61e:	2201      	movs	r2, #1
 800b620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b624:	4808      	ldr	r0, [pc, #32]	; (800b648 <adjust_Accm+0xe0>)
 800b626:	f004 fcdb 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[31]=Accm;
 800b62a:	4b04      	ldr	r3, [pc, #16]	; (800b63c <adjust_Accm+0xd4>)
 800b62c:	881a      	ldrh	r2, [r3, #0]
 800b62e:	4b07      	ldr	r3, [pc, #28]	; (800b64c <adjust_Accm+0xe4>)
 800b630:	87da      	strh	r2, [r3, #62]	; 0x3e

}
 800b632:	bf00      	nop
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	08016248 	.word	0x08016248
 800b63c:	2000c308 	.word	0x2000c308
 800b640:	08016238 	.word	0x08016238
 800b644:	40000800 	.word	0x40000800
 800b648:	40020000 	.word	0x40020000
 800b64c:	2000c30c 	.word	0x2000c30c

0800b650 <adjust_Decm>:
void adjust_Decm(){
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0

	lcd_init();
 800b654:	f7fd fbe0 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b658:	f7fd fc22 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b65c:	2100      	movs	r1, #0
 800b65e:	2000      	movs	r0, #0
 800b660:	f7fd fc2e 	bl	8008ec0 <lcd_locate>
	lcd_printf("Decm");
 800b664:	482e      	ldr	r0, [pc, #184]	; (800b720 <adjust_Decm+0xd0>)
 800b666:	f7fd fc55 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b66a:	2101      	movs	r1, #1
 800b66c:	2000      	movs	r0, #0
 800b66e:	f7fd fc27 	bl	8008ec0 <lcd_locate>
	lcd_printf("%d",Decm);
 800b672:	4b2c      	ldr	r3, [pc, #176]	; (800b724 <adjust_Decm+0xd4>)
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	4619      	mov	r1, r3
 800b678:	482b      	ldr	r0, [pc, #172]	; (800b728 <adjust_Decm+0xd8>)
 800b67a:	f7fd fc4b 	bl	8008f14 <lcd_printf>
	TIM4 -> CNT=32768;
 800b67e:	4b2b      	ldr	r3, [pc, #172]	; (800b72c <adjust_Decm+0xdc>)
 800b680:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b684:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b686:	e039      	b.n	800b6fc <adjust_Decm+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800b688:	2200      	movs	r2, #0
 800b68a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b68e:	4828      	ldr	r0, [pc, #160]	; (800b730 <adjust_Decm+0xe0>)
 800b690:	f004 fca6 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(TIM4 -> CNT>32768+2000){
 800b694:	4b25      	ldr	r3, [pc, #148]	; (800b72c <adjust_Decm+0xdc>)
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d913      	bls.n	800b6c8 <adjust_Decm+0x78>
			Decm ++;
 800b6a0:	4b20      	ldr	r3, [pc, #128]	; (800b724 <adjust_Decm+0xd4>)
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <adjust_Decm+0xd4>)
 800b6aa:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f7fd fc06 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Decm);
 800b6b4:	4b1b      	ldr	r3, [pc, #108]	; (800b724 <adjust_Decm+0xd4>)
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	481b      	ldr	r0, [pc, #108]	; (800b728 <adjust_Decm+0xd8>)
 800b6bc:	f7fd fc2a 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b6c0:	4b1a      	ldr	r3, [pc, #104]	; (800b72c <adjust_Decm+0xdc>)
 800b6c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b6c6:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(TIM4 -> CNT<32768-2000) {
 800b6c8:	4b18      	ldr	r3, [pc, #96]	; (800b72c <adjust_Decm+0xdc>)
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	f647 022f 	movw	r2, #30767	; 0x782f
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d813      	bhi.n	800b6fc <adjust_Decm+0xac>
			Decm --;
 800b6d4:	4b13      	ldr	r3, [pc, #76]	; (800b724 <adjust_Decm+0xd4>)
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	4b11      	ldr	r3, [pc, #68]	; (800b724 <adjust_Decm+0xd4>)
 800b6de:	801a      	strh	r2, [r3, #0]
			lcd_locate(0,1);
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	f7fd fbec 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",Decm);
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <adjust_Decm+0xd4>)
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	480e      	ldr	r0, [pc, #56]	; (800b728 <adjust_Decm+0xd8>)
 800b6f0:	f7fd fc10 	bl	8008f14 <lcd_printf>
			TIM4 -> CNT=32768;
 800b6f4:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <adjust_Decm+0xdc>)
 800b6f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b6fa:	625a      	str	r2, [r3, #36]	; 0x24
	while(switch_cheack()){
 800b6fc:	f000 ff50 	bl	800c5a0 <switch_cheack>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1c0      	bne.n	800b688 <adjust_Decm+0x38>
		}
		//HAL_Delay(100);
		}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800b706:	2201      	movs	r2, #1
 800b708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b70c:	4808      	ldr	r0, [pc, #32]	; (800b730 <adjust_Decm+0xe0>)
 800b70e:	f004 fc67 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[32]=Decm;
 800b712:	4b04      	ldr	r3, [pc, #16]	; (800b724 <adjust_Decm+0xd4>)
 800b714:	881a      	ldrh	r2, [r3, #0]
 800b716:	4b07      	ldr	r3, [pc, #28]	; (800b734 <adjust_Decm+0xe4>)
 800b718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

}
 800b71c:	bf00      	nop
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	08016250 	.word	0x08016250
 800b724:	2000c306 	.word	0x2000c306
 800b728:	08016238 	.word	0x08016238
 800b72c:	40000800 	.word	0x40000800
 800b730:	40020000 	.word	0x40020000
 800b734:	2000c30c 	.word	0x2000c30c

0800b738 <accel_tuning>:
void accel_tuning(){
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
	adjust_Accm();
 800b73c:	f7ff ff14 	bl	800b568 <adjust_Accm>
	HAL_Delay(100);
 800b740:	2064      	movs	r0, #100	; 0x64
 800b742:	f002 ff17 	bl	800e574 <HAL_Delay>
	adjust_Decm();
 800b746:	f7ff ff83 	bl	800b650 <adjust_Decm>
	HAL_Delay(100);
 800b74a:	2064      	movs	r0, #100	; 0x64
 800b74c:	f002 ff12 	bl	800e574 <HAL_Delay>

	Flash_store();
 800b750:	f000 fb14 	bl	800bd7c <Flash_store>
	lcd_clear();
 800b754:	f7fd fba4 	bl	8008ea0 <lcd_clear>
}
 800b758:	bf00      	nop
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <adjust_spped_100>:
void adjust_spped_100(){
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
	lcd_init();
 800b762:	f7fd fb59 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b766:	f7fd fb9b 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b76a:	2100      	movs	r1, #0
 800b76c:	2000      	movs	r0, #0
 800b76e:	f7fd fba7 	bl	8008ec0 <lcd_locate>
	lcd_printf("100");
 800b772:	482c      	ldr	r0, [pc, #176]	; (800b824 <adjust_spped_100+0xc8>)
 800b774:	f7fd fbce 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b778:	2101      	movs	r1, #1
 800b77a:	2000      	movs	r0, #0
 800b77c:	f7fd fba0 	bl	8008ec0 <lcd_locate>
	uint speed_100 =work_ram[33];
 800b780:	4b29      	ldr	r3, [pc, #164]	; (800b828 <adjust_spped_100+0xcc>)
 800b782:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800b786:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed_100);
 800b788:	6879      	ldr	r1, [r7, #4]
 800b78a:	4828      	ldr	r0, [pc, #160]	; (800b82c <adjust_spped_100+0xd0>)
 800b78c:	f7fd fbc2 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b790:	e030      	b.n	800b7f4 <adjust_spped_100+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b792:	2200      	movs	r2, #0
 800b794:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b798:	4825      	ldr	r0, [pc, #148]	; (800b830 <adjust_spped_100+0xd4>)
 800b79a:	f004 fc21 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800b79e:	2104      	movs	r1, #4
 800b7a0:	4823      	ldr	r0, [pc, #140]	; (800b830 <adjust_spped_100+0xd4>)
 800b7a2:	f004 fc05 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <adjust_spped_100+0x66>
			speed_100 += 100;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3364      	adds	r3, #100	; 0x64
 800b7b0:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f7fd fb83 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed_100);
 800b7ba:	6879      	ldr	r1, [r7, #4]
 800b7bc:	481b      	ldr	r0, [pc, #108]	; (800b82c <adjust_spped_100+0xd0>)
 800b7be:	f7fd fba9 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b7c2:	2064      	movs	r0, #100	; 0x64
 800b7c4:	f002 fed6 	bl	800e574 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800b7c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b7cc:	4818      	ldr	r0, [pc, #96]	; (800b830 <adjust_spped_100+0xd4>)
 800b7ce:	f004 fbef 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <adjust_spped_100+0x92>
			speed_100 -= 100;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3b64      	subs	r3, #100	; 0x64
 800b7dc:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b7de:	2101      	movs	r1, #1
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	f7fd fb6d 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed_100);
 800b7e6:	6879      	ldr	r1, [r7, #4]
 800b7e8:	4810      	ldr	r0, [pc, #64]	; (800b82c <adjust_spped_100+0xd0>)
 800b7ea:	f7fd fb93 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b7ee:	2064      	movs	r0, #100	; 0x64
 800b7f0:	f002 fec0 	bl	800e574 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b7f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b7f8:	480d      	ldr	r0, [pc, #52]	; (800b830 <adjust_spped_100+0xd4>)
 800b7fa:	f004 fbd9 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b01      	cmp	r3, #1
 800b802:	d0c6      	beq.n	800b792 <adjust_spped_100+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b804:	2201      	movs	r2, #1
 800b806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b80a:	4809      	ldr	r0, [pc, #36]	; (800b830 <adjust_spped_100+0xd4>)
 800b80c:	f004 fbe8 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[33]=speed_100;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	b29a      	uxth	r2, r3
 800b814:	4b04      	ldr	r3, [pc, #16]	; (800b828 <adjust_spped_100+0xcc>)
 800b816:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	08016258 	.word	0x08016258
 800b828:	2000c30c 	.word	0x2000c30c
 800b82c:	08016238 	.word	0x08016238
 800b830:	40020800 	.word	0x40020800

0800b834 <adjust_spped_300>:
void adjust_spped_300(){
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
	lcd_init();
 800b83a:	f7fd faed 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b83e:	f7fd fb2f 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b842:	2100      	movs	r1, #0
 800b844:	2000      	movs	r0, #0
 800b846:	f7fd fb3b 	bl	8008ec0 <lcd_locate>
	lcd_printf("300");
 800b84a:	482c      	ldr	r0, [pc, #176]	; (800b8fc <adjust_spped_300+0xc8>)
 800b84c:	f7fd fb62 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b850:	2101      	movs	r1, #1
 800b852:	2000      	movs	r0, #0
 800b854:	f7fd fb34 	bl	8008ec0 <lcd_locate>
	uint speed = work_ram[34];
 800b858:	4b29      	ldr	r3, [pc, #164]	; (800b900 <adjust_spped_300+0xcc>)
 800b85a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b85e:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	4828      	ldr	r0, [pc, #160]	; (800b904 <adjust_spped_300+0xd0>)
 800b864:	f7fd fb56 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b868:	e030      	b.n	800b8cc <adjust_spped_300+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b86a:	2200      	movs	r2, #0
 800b86c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b870:	4825      	ldr	r0, [pc, #148]	; (800b908 <adjust_spped_300+0xd4>)
 800b872:	f004 fbb5 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800b876:	2104      	movs	r1, #4
 800b878:	4823      	ldr	r0, [pc, #140]	; (800b908 <adjust_spped_300+0xd4>)
 800b87a:	f004 fb99 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <adjust_spped_300+0x66>
			speed += 100;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3364      	adds	r3, #100	; 0x64
 800b888:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b88a:	2101      	movs	r1, #1
 800b88c:	2000      	movs	r0, #0
 800b88e:	f7fd fb17 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	481b      	ldr	r0, [pc, #108]	; (800b904 <adjust_spped_300+0xd0>)
 800b896:	f7fd fb3d 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b89a:	2064      	movs	r0, #100	; 0x64
 800b89c:	f002 fe6a 	bl	800e574 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800b8a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b8a4:	4818      	ldr	r0, [pc, #96]	; (800b908 <adjust_spped_300+0xd4>)
 800b8a6:	f004 fb83 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <adjust_spped_300+0x92>
			speed -= 100;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3b64      	subs	r3, #100	; 0x64
 800b8b4:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f7fd fb01 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	4810      	ldr	r0, [pc, #64]	; (800b904 <adjust_spped_300+0xd0>)
 800b8c2:	f7fd fb27 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b8c6:	2064      	movs	r0, #100	; 0x64
 800b8c8:	f002 fe54 	bl	800e574 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b8cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b8d0:	480d      	ldr	r0, [pc, #52]	; (800b908 <adjust_spped_300+0xd4>)
 800b8d2:	f004 fb6d 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d0c6      	beq.n	800b86a <adjust_spped_300+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b8e2:	4809      	ldr	r0, [pc, #36]	; (800b908 <adjust_spped_300+0xd4>)
 800b8e4:	f004 fb7c 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[34]=speed;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	4b04      	ldr	r3, [pc, #16]	; (800b900 <adjust_spped_300+0xcc>)
 800b8ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0801625c 	.word	0x0801625c
 800b900:	2000c30c 	.word	0x2000c30c
 800b904:	08016238 	.word	0x08016238
 800b908:	40020800 	.word	0x40020800

0800b90c <adjust_spped_500>:
void adjust_spped_500(){
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
	lcd_init();
 800b912:	f7fd fa81 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b916:	f7fd fac3 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b91a:	2100      	movs	r1, #0
 800b91c:	2000      	movs	r0, #0
 800b91e:	f7fd facf 	bl	8008ec0 <lcd_locate>
	lcd_printf("500");
 800b922:	482c      	ldr	r0, [pc, #176]	; (800b9d4 <adjust_spped_500+0xc8>)
 800b924:	f7fd faf6 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800b928:	2101      	movs	r1, #1
 800b92a:	2000      	movs	r0, #0
 800b92c:	f7fd fac8 	bl	8008ec0 <lcd_locate>
	uint speed = work_ram[35];
 800b930:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <adjust_spped_500+0xcc>)
 800b932:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b936:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800b938:	6879      	ldr	r1, [r7, #4]
 800b93a:	4828      	ldr	r0, [pc, #160]	; (800b9dc <adjust_spped_500+0xd0>)
 800b93c:	f7fd faea 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b940:	e030      	b.n	800b9a4 <adjust_spped_500+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800b942:	2200      	movs	r2, #0
 800b944:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b948:	4825      	ldr	r0, [pc, #148]	; (800b9e0 <adjust_spped_500+0xd4>)
 800b94a:	f004 fb49 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800b94e:	2104      	movs	r1, #4
 800b950:	4823      	ldr	r0, [pc, #140]	; (800b9e0 <adjust_spped_500+0xd4>)
 800b952:	f004 fb2d 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <adjust_spped_500+0x66>
			speed += 100;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3364      	adds	r3, #100	; 0x64
 800b960:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b962:	2101      	movs	r1, #1
 800b964:	2000      	movs	r0, #0
 800b966:	f7fd faab 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	481b      	ldr	r0, [pc, #108]	; (800b9dc <adjust_spped_500+0xd0>)
 800b96e:	f7fd fad1 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b972:	2064      	movs	r0, #100	; 0x64
 800b974:	f002 fdfe 	bl	800e574 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800b978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b97c:	4818      	ldr	r0, [pc, #96]	; (800b9e0 <adjust_spped_500+0xd4>)
 800b97e:	f004 fb17 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <adjust_spped_500+0x92>
			speed -= 100;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3b64      	subs	r3, #100	; 0x64
 800b98c:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800b98e:	2101      	movs	r1, #1
 800b990:	2000      	movs	r0, #0
 800b992:	f7fd fa95 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	4810      	ldr	r0, [pc, #64]	; (800b9dc <adjust_spped_500+0xd0>)
 800b99a:	f7fd fabb 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800b99e:	2064      	movs	r0, #100	; 0x64
 800b9a0:	f002 fde8 	bl	800e574 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800b9a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b9a8:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <adjust_spped_500+0xd4>)
 800b9aa:	f004 fb01 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d0c6      	beq.n	800b942 <adjust_spped_500+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9ba:	4809      	ldr	r0, [pc, #36]	; (800b9e0 <adjust_spped_500+0xd4>)
 800b9bc:	f004 fb10 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[35]=speed;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <adjust_spped_500+0xcc>)
 800b9c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08016260 	.word	0x08016260
 800b9d8:	2000c30c 	.word	0x2000c30c
 800b9dc:	08016238 	.word	0x08016238
 800b9e0:	40020800 	.word	0x40020800

0800b9e4 <adjust_spped_800>:
void adjust_spped_800(){
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
	lcd_init();
 800b9ea:	f7fd fa15 	bl	8008e18 <lcd_init>
	lcd_clear();
 800b9ee:	f7fd fa57 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f7fd fa63 	bl	8008ec0 <lcd_locate>
	lcd_printf("800");
 800b9fa:	482c      	ldr	r0, [pc, #176]	; (800baac <adjust_spped_800+0xc8>)
 800b9fc:	f7fd fa8a 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800ba00:	2101      	movs	r1, #1
 800ba02:	2000      	movs	r0, #0
 800ba04:	f7fd fa5c 	bl	8008ec0 <lcd_locate>
	uint speed= work_ram[36];
 800ba08:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <adjust_spped_800+0xcc>)
 800ba0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba0e:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	4828      	ldr	r0, [pc, #160]	; (800bab4 <adjust_spped_800+0xd0>)
 800ba14:	f7fd fa7e 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800ba18:	e030      	b.n	800ba7c <adjust_spped_800+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba20:	4825      	ldr	r0, [pc, #148]	; (800bab8 <adjust_spped_800+0xd4>)
 800ba22:	f004 fadd 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800ba26:	2104      	movs	r1, #4
 800ba28:	4823      	ldr	r0, [pc, #140]	; (800bab8 <adjust_spped_800+0xd4>)
 800ba2a:	f004 fac1 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <adjust_spped_800+0x66>
			speed += 100;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3364      	adds	r3, #100	; 0x64
 800ba38:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	f7fd fa3f 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	481b      	ldr	r0, [pc, #108]	; (800bab4 <adjust_spped_800+0xd0>)
 800ba46:	f7fd fa65 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800ba4a:	2064      	movs	r0, #100	; 0x64
 800ba4c:	f002 fd92 	bl	800e574 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800ba50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba54:	4818      	ldr	r0, [pc, #96]	; (800bab8 <adjust_spped_800+0xd4>)
 800ba56:	f004 faab 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <adjust_spped_800+0x92>
			speed -= 100;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3b64      	subs	r3, #100	; 0x64
 800ba64:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800ba66:	2101      	movs	r1, #1
 800ba68:	2000      	movs	r0, #0
 800ba6a:	f7fd fa29 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	4810      	ldr	r0, [pc, #64]	; (800bab4 <adjust_spped_800+0xd0>)
 800ba72:	f7fd fa4f 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800ba76:	2064      	movs	r0, #100	; 0x64
 800ba78:	f002 fd7c 	bl	800e574 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800ba7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba80:	480d      	ldr	r0, [pc, #52]	; (800bab8 <adjust_spped_800+0xd4>)
 800ba82:	f004 fa95 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d0c6      	beq.n	800ba1a <adjust_spped_800+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba92:	4809      	ldr	r0, [pc, #36]	; (800bab8 <adjust_spped_800+0xd4>)
 800ba94:	f004 faa4 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[36]=speed;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <adjust_spped_800+0xcc>)
 800ba9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	08016264 	.word	0x08016264
 800bab0:	2000c30c 	.word	0x2000c30c
 800bab4:	08016238 	.word	0x08016238
 800bab8:	40020800 	.word	0x40020800

0800babc <adjust_spped_1000>:
void adjust_spped_1000(){
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
	lcd_init();
 800bac2:	f7fd f9a9 	bl	8008e18 <lcd_init>
	lcd_clear();
 800bac6:	f7fd f9eb 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800baca:	2100      	movs	r1, #0
 800bacc:	2000      	movs	r0, #0
 800bace:	f7fd f9f7 	bl	8008ec0 <lcd_locate>
	lcd_printf("1000");
 800bad2:	482c      	ldr	r0, [pc, #176]	; (800bb84 <adjust_spped_1000+0xc8>)
 800bad4:	f7fd fa1e 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800bad8:	2101      	movs	r1, #1
 800bada:	2000      	movs	r0, #0
 800badc:	f7fd f9f0 	bl	8008ec0 <lcd_locate>
	uint speed= work_ram[37];
 800bae0:	4b29      	ldr	r3, [pc, #164]	; (800bb88 <adjust_spped_1000+0xcc>)
 800bae2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bae6:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4828      	ldr	r0, [pc, #160]	; (800bb8c <adjust_spped_1000+0xd0>)
 800baec:	f7fd fa12 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800baf0:	e030      	b.n	800bb54 <adjust_spped_1000+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800baf2:	2200      	movs	r2, #0
 800baf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baf8:	4825      	ldr	r0, [pc, #148]	; (800bb90 <adjust_spped_1000+0xd4>)
 800bafa:	f004 fa71 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bafe:	2104      	movs	r1, #4
 800bb00:	4823      	ldr	r0, [pc, #140]	; (800bb90 <adjust_spped_1000+0xd4>)
 800bb02:	f004 fa55 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10a      	bne.n	800bb22 <adjust_spped_1000+0x66>
			speed += 100;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3364      	adds	r3, #100	; 0x64
 800bb10:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bb12:	2101      	movs	r1, #1
 800bb14:	2000      	movs	r0, #0
 800bb16:	f7fd f9d3 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	481b      	ldr	r0, [pc, #108]	; (800bb8c <adjust_spped_1000+0xd0>)
 800bb1e:	f7fd f9f9 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bb22:	2064      	movs	r0, #100	; 0x64
 800bb24:	f002 fd26 	bl	800e574 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800bb28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb2c:	4818      	ldr	r0, [pc, #96]	; (800bb90 <adjust_spped_1000+0xd4>)
 800bb2e:	f004 fa3f 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10a      	bne.n	800bb4e <adjust_spped_1000+0x92>
			speed -= 100;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3b64      	subs	r3, #100	; 0x64
 800bb3c:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bb3e:	2101      	movs	r1, #1
 800bb40:	2000      	movs	r0, #0
 800bb42:	f7fd f9bd 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	4810      	ldr	r0, [pc, #64]	; (800bb8c <adjust_spped_1000+0xd0>)
 800bb4a:	f7fd f9e3 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bb4e:	2064      	movs	r0, #100	; 0x64
 800bb50:	f002 fd10 	bl	800e574 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bb54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb58:	480d      	ldr	r0, [pc, #52]	; (800bb90 <adjust_spped_1000+0xd4>)
 800bb5a:	f004 fa29 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d0c6      	beq.n	800baf2 <adjust_spped_1000+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800bb64:	2201      	movs	r2, #1
 800bb66:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb6a:	4809      	ldr	r0, [pc, #36]	; (800bb90 <adjust_spped_1000+0xd4>)
 800bb6c:	f004 fa38 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[37]=speed;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <adjust_spped_1000+0xcc>)
 800bb76:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 800bb7a:	bf00      	nop
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	08016268 	.word	0x08016268
 800bb88:	2000c30c 	.word	0x2000c30c
 800bb8c:	08016238 	.word	0x08016238
 800bb90:	40020800 	.word	0x40020800

0800bb94 <adjust_spped_MAX>:
void adjust_spped_MAX(){
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
	lcd_init();
 800bb9a:	f7fd f93d 	bl	8008e18 <lcd_init>
	lcd_clear();
 800bb9e:	f7fd f97f 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800bba2:	2100      	movs	r1, #0
 800bba4:	2000      	movs	r0, #0
 800bba6:	f7fd f98b 	bl	8008ec0 <lcd_locate>
	lcd_printf("MAX");
 800bbaa:	482c      	ldr	r0, [pc, #176]	; (800bc5c <adjust_spped_MAX+0xc8>)
 800bbac:	f7fd f9b2 	bl	8008f14 <lcd_printf>
	lcd_locate(0,1);
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f7fd f984 	bl	8008ec0 <lcd_locate>
	uint speed= work_ram[38];
 800bbb8:	4b29      	ldr	r3, [pc, #164]	; (800bc60 <adjust_spped_MAX+0xcc>)
 800bbba:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800bbbe:	607b      	str	r3, [r7, #4]
	lcd_printf("%d",speed);
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	4828      	ldr	r0, [pc, #160]	; (800bc64 <adjust_spped_MAX+0xd0>)
 800bbc4:	f7fd f9a6 	bl	8008f14 <lcd_printf>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bbc8:	e030      	b.n	800bc2c <adjust_spped_MAX+0x98>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbd0:	4825      	ldr	r0, [pc, #148]	; (800bc68 <adjust_spped_MAX+0xd4>)
 800bbd2:	f004 fa05 	bl	800ffe0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	4823      	ldr	r0, [pc, #140]	; (800bc68 <adjust_spped_MAX+0xd4>)
 800bbda:	f004 f9e9 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <adjust_spped_MAX+0x66>
			speed += 100;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3364      	adds	r3, #100	; 0x64
 800bbe8:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bbea:	2101      	movs	r1, #1
 800bbec:	2000      	movs	r0, #0
 800bbee:	f7fd f967 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bbf2:	6879      	ldr	r1, [r7, #4]
 800bbf4:	481b      	ldr	r0, [pc, #108]	; (800bc64 <adjust_spped_MAX+0xd0>)
 800bbf6:	f7fd f98d 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bbfa:	2064      	movs	r0, #100	; 0x64
 800bbfc:	f002 fcba 	bl	800e574 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) {
 800bc00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc04:	4818      	ldr	r0, [pc, #96]	; (800bc68 <adjust_spped_MAX+0xd4>)
 800bc06:	f004 f9d3 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <adjust_spped_MAX+0x92>
			speed -= 100;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3b64      	subs	r3, #100	; 0x64
 800bc14:	607b      	str	r3, [r7, #4]
			lcd_locate(0,1);
 800bc16:	2101      	movs	r1, #1
 800bc18:	2000      	movs	r0, #0
 800bc1a:	f7fd f951 	bl	8008ec0 <lcd_locate>
			lcd_printf("%d",speed);
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	4810      	ldr	r0, [pc, #64]	; (800bc64 <adjust_spped_MAX+0xd0>)
 800bc22:	f7fd f977 	bl	8008f14 <lcd_printf>
		}
		HAL_Delay(100);
 800bc26:	2064      	movs	r0, #100	; 0x64
 800bc28:	f002 fca4 	bl	800e574 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==1){
 800bc2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc30:	480d      	ldr	r0, [pc, #52]	; (800bc68 <adjust_spped_MAX+0xd4>)
 800bc32:	f004 f9bd 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d0c6      	beq.n	800bbca <adjust_spped_MAX+0x36>
		}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc42:	4809      	ldr	r0, [pc, #36]	; (800bc68 <adjust_spped_MAX+0xd4>)
 800bc44:	f004 f9cc 	bl	800ffe0 <HAL_GPIO_WritePin>
	work_ram[38]=speed;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	4b04      	ldr	r3, [pc, #16]	; (800bc60 <adjust_spped_MAX+0xcc>)
 800bc4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800bc52:	bf00      	nop
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	08016270 	.word	0x08016270
 800bc60:	2000c30c 	.word	0x2000c30c
 800bc64:	08016238 	.word	0x08016238
 800bc68:	40020800 	.word	0x40020800

0800bc6c <speed_tuning>:
void speed_tuning(){
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	af00      	add	r7, sp, #0
	adjust_spped_100();
 800bc70:	f7ff fd74 	bl	800b75c <adjust_spped_100>
	HAL_Delay(100);
 800bc74:	2064      	movs	r0, #100	; 0x64
 800bc76:	f002 fc7d 	bl	800e574 <HAL_Delay>
	adjust_spped_300();
 800bc7a:	f7ff fddb 	bl	800b834 <adjust_spped_300>
	HAL_Delay(100);
 800bc7e:	2064      	movs	r0, #100	; 0x64
 800bc80:	f002 fc78 	bl	800e574 <HAL_Delay>
	adjust_spped_500();
 800bc84:	f7ff fe42 	bl	800b90c <adjust_spped_500>
	HAL_Delay(100);
 800bc88:	2064      	movs	r0, #100	; 0x64
 800bc8a:	f002 fc73 	bl	800e574 <HAL_Delay>
	adjust_spped_800();
 800bc8e:	f7ff fea9 	bl	800b9e4 <adjust_spped_800>
	HAL_Delay(100);
 800bc92:	2064      	movs	r0, #100	; 0x64
 800bc94:	f002 fc6e 	bl	800e574 <HAL_Delay>
	adjust_spped_1000();
 800bc98:	f7ff ff10 	bl	800babc <adjust_spped_1000>
	HAL_Delay(100);
 800bc9c:	2064      	movs	r0, #100	; 0x64
 800bc9e:	f002 fc69 	bl	800e574 <HAL_Delay>
	adjust_spped_MAX();
 800bca2:	f7ff ff77 	bl	800bb94 <adjust_spped_MAX>
	HAL_Delay(100);
 800bca6:	2064      	movs	r0, #100	; 0x64
 800bca8:	f002 fc64 	bl	800e574 <HAL_Delay>

	Flash_store();
 800bcac:	f000 f866 	bl	800bd7c <Flash_store>
	lcd_clear();
 800bcb0:	f7fd f8f6 	bl	8008ea0 <lcd_clear>
}
 800bcb4:	bf00      	nop
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <Flash_clear>:




bool Flash_clear()
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800bcbe:	f003 fd5b 	bl	800f778 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800bcca:	2302      	movs	r3, #2
 800bccc:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800bcd2:	1d3a      	adds	r2, r7, #4
 800bcd4:	f107 0308 	add.w	r3, r7, #8
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f003 feac 	bl	800fa38 <HAL_FLASHEx_Erase>
 800bce0:	4603      	mov	r3, r0
 800bce2:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800bce4:	f003 fd6a 	bl	800f7bc <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800bce8:	7ffb      	ldrb	r3, [r7, #31]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d105      	bne.n	800bcfa <Flash_clear+0x42>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf4:	d101      	bne.n	800bcfa <Flash_clear+0x42>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e000      	b.n	800bcfc <Flash_clear+0x44>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	b2db      	uxtb	r3, r3
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3720      	adds	r7, #32
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <Flash_clear2>:
bool Flash_clear2()
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b088      	sub	sp, #32
 800bd0e:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800bd10:	f003 fd32 	bl	800f778 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bd14:	2300      	movs	r3, #0
 800bd16:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM2;
 800bd18:	2306      	movs	r3, #6
 800bd1a:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 6;
 800bd20:	2306      	movs	r3, #6
 800bd22:	617b      	str	r3, [r7, #20]


    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result2 = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800bd24:	1d3a      	adds	r2, r7, #4
 800bd26:	f107 0308 	add.w	r3, r7, #8
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f003 fe83 	bl	800fa38 <HAL_FLASHEx_Erase>
 800bd32:	4603      	mov	r3, r0
 800bd34:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800bd36:	f003 fd41 	bl	800f7bc <HAL_FLASH_Lock>

    return result2 == HAL_OK && error_sector == 0xFFFFFFFF;
 800bd3a:	7ffb      	ldrb	r3, [r7, #31]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d105      	bne.n	800bd4c <Flash_clear2+0x42>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d101      	bne.n	800bd4c <Flash_clear2+0x42>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e000      	b.n	800bd4e <Flash_clear2+0x44>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	b2db      	uxtb	r3, r3
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3720      	adds	r7, #32
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <Flash_load>:

uint16_t* Flash_load()
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800bd60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bd64:	4903      	ldr	r1, [pc, #12]	; (800bd74 <Flash_load+0x18>)
 800bd66:	4804      	ldr	r0, [pc, #16]	; (800bd78 <Flash_load+0x1c>)
 800bd68:	f007 fd36 	bl	80137d8 <memcpy>
    return work_ram;
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <Flash_load+0x1c>)
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	08004000 	.word	0x08004000
 800bd78:	2000c30c 	.word	0x2000c30c

0800bd7c <Flash_store>:

bool Flash_store()
{
 800bd7c:	b590      	push	{r4, r7, lr}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 800bd82:	f7ff ff99 	bl	800bcb8 <Flash_clear>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f083 0301 	eor.w	r3, r3, #1
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <Flash_store+0x1a>
 800bd92:	2300      	movs	r3, #0
 800bd94:	e02f      	b.n	800bdf6 <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800bd96:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <Flash_store+0x84>)
 800bd98:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800bd9a:	f003 fced 	bl	800f778 <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800bd9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda2:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800bda4:	2300      	movs	r3, #0
 800bda6:	60bb      	str	r3, [r7, #8]
 800bda8:	e017      	b.n	800bdda <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4a15      	ldr	r2, [pc, #84]	; (800be04 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 800bdb0:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	4413      	add	r3, r2
 800bdba:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800bdbc:	f04f 0400 	mov.w	r4, #0
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4623      	mov	r3, r4
 800bdc4:	2002      	movs	r0, #2
 800bdc6:	f003 fc83 	bl	800f6d0 <HAL_FLASH_Program>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d107      	bne.n	800bde4 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	60bb      	str	r3, [r7, #8]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d3e3      	bcc.n	800bdaa <Flash_store+0x2e>
 800bde2:	e000      	b.n	800bde6 <Flash_store+0x6a>
        if (result != HAL_OK) break;
 800bde4:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800bde6:	f003 fce9 	bl	800f7bc <HAL_FLASH_Lock>

    return result == HAL_OK;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bf0c      	ite	eq
 800bdf0:	2301      	moveq	r3, #1
 800bdf2:	2300      	movne	r3, #0
 800bdf4:	b2db      	uxtb	r3, r3
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd90      	pop	{r4, r7, pc}
 800bdfe:	bf00      	nop
 800be00:	2000c30c 	.word	0x2000c30c
 800be04:	08004000 	.word	0x08004000

0800be08 <init>:
uint8_t maker_left;
uint8_t maker_flag=0;
uint8_t cross_flag=0;
float tread = 100;
void MX_TIM6_Init(void);
void init(){
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, SENSOR_NUMBER) != HAL_OK){
 800be0e:	220d      	movs	r2, #13
 800be10:	4959      	ldr	r1, [pc, #356]	; (800bf78 <init+0x170>)
 800be12:	485a      	ldr	r0, [pc, #360]	; (800bf7c <init+0x174>)
 800be14:	f002 fc14 	bl	800e640 <HAL_ADC_Start_DMA>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <init+0x1a>
	  Error_Handler();
 800be1e:	f001 fc0f 	bl	800d640 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK){
 800be22:	2104      	movs	r1, #4
 800be24:	4856      	ldr	r0, [pc, #344]	; (800bf80 <init+0x178>)
 800be26:	f005 ff6b 	bl	8011d00 <HAL_TIM_PWM_Start>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <init+0x2c>
		  Error_Handler();
 800be30:	f001 fc06 	bl	800d640 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3) != HAL_OK){
 800be34:	2108      	movs	r1, #8
 800be36:	4853      	ldr	r0, [pc, #332]	; (800bf84 <init+0x17c>)
 800be38:	f005 ff62 	bl	8011d00 <HAL_TIM_PWM_Start>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <init+0x3e>
	      Error_Handler();
 800be42:	f001 fbfd 	bl	800d640 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK){
 800be46:	2108      	movs	r1, #8
 800be48:	484f      	ldr	r0, [pc, #316]	; (800bf88 <init+0x180>)
 800be4a:	f005 ff59 	bl	8011d00 <HAL_TIM_PWM_Start>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <init+0x50>
		  Error_Handler();
 800be54:	f001 fbf4 	bl	800d640 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800be58:	210c      	movs	r1, #12
 800be5a:	484b      	ldr	r0, [pc, #300]	; (800bf88 <init+0x180>)
 800be5c:	f005 ff50 	bl	8011d00 <HAL_TIM_PWM_Start>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <init+0x62>
		  Error_Handler();
 800be66:	f001 fbeb 	bl	800d640 <Error_Handler>
	}
	lcd_init();
 800be6a:	f7fc ffd5 	bl	8008e18 <lcd_init>
	lcd_clear();
 800be6e:	f7fd f817 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800be72:	2100      	movs	r1, #0
 800be74:	2000      	movs	r0, #0
 800be76:	f7fd f823 	bl	8008ec0 <lcd_locate>
	lcd_printf("OK");
 800be7a:	4844      	ldr	r0, [pc, #272]	; (800bf8c <init+0x184>)
 800be7c:	f7fd f84a 	bl	8008f14 <lcd_printf>

	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800be80:	213c      	movs	r1, #60	; 0x3c
 800be82:	4843      	ldr	r0, [pc, #268]	; (800bf90 <init+0x188>)
 800be84:	f006 f80c 	bl	8011ea0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800be88:	213c      	movs	r1, #60	; 0x3c
 800be8a:	4842      	ldr	r0, [pc, #264]	; (800bf94 <init+0x18c>)
 800be8c:	f006 f808 	bl	8011ea0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_ALL);
 800be90:	213c      	movs	r1, #60	; 0x3c
 800be92:	483b      	ldr	r0, [pc, #236]	; (800bf80 <init+0x178>)
 800be94:	f005 ff34 	bl	8011d00 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_ALL);
 800be98:	213c      	movs	r1, #60	; 0x3c
 800be9a:	483a      	ldr	r0, [pc, #232]	; (800bf84 <init+0x17c>)
 800be9c:	f005 ff30 	bl	8011d00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_ALL);
 800bea0:	213c      	movs	r1, #60	; 0x3c
 800bea2:	4839      	ldr	r0, [pc, #228]	; (800bf88 <init+0x180>)
 800bea4:	f005 ff2c 	bl	8011d00 <HAL_TIM_PWM_Start>

	Flash_load();
 800bea8:	f7ff ff58 	bl	800bd5c <Flash_load>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800beac:	2300      	movs	r3, #0
 800beae:	607b      	str	r3, [r7, #4]
 800beb0:	e013      	b.n	800beda <init+0xd2>
		ADC_dif[z] = work_ram[z];
 800beb2:	4a39      	ldr	r2, [pc, #228]	; (800bf98 <init+0x190>)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800beba:	4a38      	ldr	r2, [pc, #224]	; (800bf9c <init+0x194>)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_Small[z]=work_ram[z+SENSOR_NUMBER];
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	330d      	adds	r3, #13
 800bec6:	4a34      	ldr	r2, [pc, #208]	; (800bf98 <init+0x190>)
 800bec8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800becc:	4a34      	ldr	r2, [pc, #208]	; (800bfa0 <init+0x198>)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3301      	adds	r3, #1
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b0c      	cmp	r3, #12
 800bede:	dde8      	ble.n	800beb2 <init+0xaa>
	}
	flashcheck();
 800bee0:	f000 fb20 	bl	800c524 <flashcheck>
	Average_speed=work_ram[26];
 800bee4:	4b2c      	ldr	r3, [pc, #176]	; (800bf98 <init+0x190>)
 800bee6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bee8:	b21a      	sxth	r2, r3
 800beea:	4b2e      	ldr	r3, [pc, #184]	; (800bfa4 <init+0x19c>)
 800beec:	801a      	strh	r2, [r3, #0]
	Kp = work_ram[27];
 800beee:	4b2a      	ldr	r3, [pc, #168]	; (800bf98 <init+0x190>)
 800bef0:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bef2:	4b2d      	ldr	r3, [pc, #180]	; (800bfa8 <init+0x1a0>)
 800bef4:	801a      	strh	r2, [r3, #0]
	Ki = work_ram[28];
 800bef6:	4b28      	ldr	r3, [pc, #160]	; (800bf98 <init+0x190>)
 800bef8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800befa:	4b2c      	ldr	r3, [pc, #176]	; (800bfac <init+0x1a4>)
 800befc:	801a      	strh	r2, [r3, #0]
	Kd = work_ram[29];
 800befe:	4b26      	ldr	r3, [pc, #152]	; (800bf98 <init+0x190>)
 800bf00:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800bf02:	4b2b      	ldr	r3, [pc, #172]	; (800bfb0 <init+0x1a8>)
 800bf04:	801a      	strh	r2, [r3, #0]

	ang_average = work_ram[30]/1000;
 800bf06:	4b24      	ldr	r3, [pc, #144]	; (800bf98 <init+0x190>)
 800bf08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf0a:	4a2a      	ldr	r2, [pc, #168]	; (800bfb4 <init+0x1ac>)
 800bf0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf10:	099b      	lsrs	r3, r3, #6
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	ee07 3a90 	vmov	s15, r3
 800bf18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf1c:	4b26      	ldr	r3, [pc, #152]	; (800bfb8 <init+0x1b0>)
 800bf1e:	edc3 7a00 	vstr	s15, [r3]
	if(ang_average>=50) ang_average = (ang_average*-1)/100;
 800bf22:	4b25      	ldr	r3, [pc, #148]	; (800bfb8 <init+0x1b0>)
 800bf24:	edd3 7a00 	vldr	s15, [r3]
 800bf28:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800bfbc <init+0x1b4>
 800bf2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf34:	db0b      	blt.n	800bf4e <init+0x146>
 800bf36:	4b20      	ldr	r3, [pc, #128]	; (800bfb8 <init+0x1b0>)
 800bf38:	edd3 7a00 	vldr	s15, [r3]
 800bf3c:	eeb1 7a67 	vneg.f32	s14, s15
 800bf40:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bfc0 <init+0x1b8>
 800bf44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf48:	4b1b      	ldr	r3, [pc, #108]	; (800bfb8 <init+0x1b0>)
 800bf4a:	edc3 7a00 	vstr	s15, [r3]
	Accm = work_ram[31];
 800bf4e:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <init+0x190>)
 800bf50:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800bf52:	4b1c      	ldr	r3, [pc, #112]	; (800bfc4 <init+0x1bc>)
 800bf54:	801a      	strh	r2, [r3, #0]
	Decm = work_ram[32];
 800bf56:	4b10      	ldr	r3, [pc, #64]	; (800bf98 <init+0x190>)
 800bf58:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800bf5c:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <init+0x1c0>)
 800bf5e:	801a      	strh	r2, [r3, #0]

	TIM4 -> CNT = 32768;
 800bf60:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <init+0x1c4>)
 800bf62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf66:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 32768;
 800bf68:	4b19      	ldr	r3, [pc, #100]	; (800bfd0 <init+0x1c8>)
 800bf6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf6e:	625a      	str	r2, [r3, #36]	; 0x24

}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	2001430c 	.word	0x2001430c
 800bf7c:	200143ec 	.word	0x200143ec
 800bf80:	200144d8 	.word	0x200144d8
 800bf84:	20014328 	.word	0x20014328
 800bf88:	20014518 	.word	0x20014518
 800bf8c:	08016274 	.word	0x08016274
 800bf90:	20014368 	.word	0x20014368
 800bf94:	200143ac 	.word	0x200143ac
 800bf98:	2000c30c 	.word	0x2000c30c
 800bf9c:	2001464c 	.word	0x2001464c
 800bfa0:	20014668 	.word	0x20014668
 800bfa4:	20014326 	.word	0x20014326
 800bfa8:	2000c304 	.word	0x2000c304
 800bfac:	2000c300 	.word	0x2000c300
 800bfb0:	2000c302 	.word	0x2000c302
 800bfb4:	10624dd3 	.word	0x10624dd3
 800bfb8:	2000c29c 	.word	0x2000c29c
 800bfbc:	42480000 	.word	0x42480000
 800bfc0:	42c80000 	.word	0x42c80000
 800bfc4:	2000c308 	.word	0x2000c308
 800bfc8:	2000c306 	.word	0x2000c306
 800bfcc:	40000800 	.word	0x40000800
 800bfd0:	40000400 	.word	0x40000400

0800bfd4 <LED>:
void LED(uint8_t x){
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	2b07      	cmp	r3, #7
 800bfe4:	f200 80ac 	bhi.w	800c140 <LED+0x16c>
 800bfe8:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <LED+0x1c>)
 800bfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfee:	bf00      	nop
 800bff0:	0800c011 	.word	0x0800c011
 800bff4:	0800c037 	.word	0x0800c037
 800bff8:	0800c05d 	.word	0x0800c05d
 800bffc:	0800c083 	.word	0x0800c083
 800c000:	0800c0a9 	.word	0x0800c0a9
 800c004:	0800c0cf 	.word	0x0800c0cf
 800c008:	0800c0f5 	.word	0x0800c0f5
 800c00c:	0800c11b 	.word	0x0800c11b
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c010:	2200      	movs	r2, #0
 800c012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c016:	484c      	ldr	r0, [pc, #304]	; (800c148 <LED+0x174>)
 800c018:	f003 ffe2 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c01c:	2201      	movs	r2, #1
 800c01e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c022:	4849      	ldr	r0, [pc, #292]	; (800c148 <LED+0x174>)
 800c024:	f003 ffdc 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c028:	2201      	movs	r2, #1
 800c02a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c02e:	4846      	ldr	r0, [pc, #280]	; (800c148 <LED+0x174>)
 800c030:	f003 ffd6 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c034:	e084      	b.n	800c140 <LED+0x16c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c036:	2201      	movs	r2, #1
 800c038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c03c:	4842      	ldr	r0, [pc, #264]	; (800c148 <LED+0x174>)
 800c03e:	f003 ffcf 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c042:	2200      	movs	r2, #0
 800c044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c048:	483f      	ldr	r0, [pc, #252]	; (800c148 <LED+0x174>)
 800c04a:	f003 ffc9 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c04e:	2201      	movs	r2, #1
 800c050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c054:	483c      	ldr	r0, [pc, #240]	; (800c148 <LED+0x174>)
 800c056:	f003 ffc3 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c05a:	e071      	b.n	800c140 <LED+0x16c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c05c:	2200      	movs	r2, #0
 800c05e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c062:	4839      	ldr	r0, [pc, #228]	; (800c148 <LED+0x174>)
 800c064:	f003 ffbc 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c068:	2200      	movs	r2, #0
 800c06a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c06e:	4836      	ldr	r0, [pc, #216]	; (800c148 <LED+0x174>)
 800c070:	f003 ffb6 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c074:	2201      	movs	r2, #1
 800c076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c07a:	4833      	ldr	r0, [pc, #204]	; (800c148 <LED+0x174>)
 800c07c:	f003 ffb0 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c080:	e05e      	b.n	800c140 <LED+0x16c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c082:	2201      	movs	r2, #1
 800c084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c088:	482f      	ldr	r0, [pc, #188]	; (800c148 <LED+0x174>)
 800c08a:	f003 ffa9 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c08e:	2201      	movs	r2, #1
 800c090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c094:	482c      	ldr	r0, [pc, #176]	; (800c148 <LED+0x174>)
 800c096:	f003 ffa3 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c09a:	2200      	movs	r2, #0
 800c09c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c0a0:	4829      	ldr	r0, [pc, #164]	; (800c148 <LED+0x174>)
 800c0a2:	f003 ff9d 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c0a6:	e04b      	b.n	800c140 <LED+0x16c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0ae:	4826      	ldr	r0, [pc, #152]	; (800c148 <LED+0x174>)
 800c0b0:	f003 ff96 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0ba:	4823      	ldr	r0, [pc, #140]	; (800c148 <LED+0x174>)
 800c0bc:	f003 ff90 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c0c6:	4820      	ldr	r0, [pc, #128]	; (800c148 <LED+0x174>)
 800c0c8:	f003 ff8a 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c0cc:	e038      	b.n	800c140 <LED+0x16c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0d4:	481c      	ldr	r0, [pc, #112]	; (800c148 <LED+0x174>)
 800c0d6:	f003 ff83 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0e0:	4819      	ldr	r0, [pc, #100]	; (800c148 <LED+0x174>)
 800c0e2:	f003 ff7d 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c0ec:	4816      	ldr	r0, [pc, #88]	; (800c148 <LED+0x174>)
 800c0ee:	f003 ff77 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c0f2:	e025      	b.n	800c140 <LED+0x16c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0fa:	4813      	ldr	r0, [pc, #76]	; (800c148 <LED+0x174>)
 800c0fc:	f003 ff70 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c100:	2200      	movs	r2, #0
 800c102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c106:	4810      	ldr	r0, [pc, #64]	; (800c148 <LED+0x174>)
 800c108:	f003 ff6a 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800c10c:	2200      	movs	r2, #0
 800c10e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c112:	480d      	ldr	r0, [pc, #52]	; (800c148 <LED+0x174>)
 800c114:	f003 ff64 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c118:	e012      	b.n	800c140 <LED+0x16c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800c11a:	2201      	movs	r2, #1
 800c11c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c120:	4809      	ldr	r0, [pc, #36]	; (800c148 <LED+0x174>)
 800c122:	f003 ff5d 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c126:	2201      	movs	r2, #1
 800c128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c12c:	4806      	ldr	r0, [pc, #24]	; (800c148 <LED+0x174>)
 800c12e:	f003 ff57 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800c132:	2201      	movs	r2, #1
 800c134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <LED+0x174>)
 800c13a:	f003 ff51 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c13e:	bf00      	nop

	}

}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	40020400 	.word	0x40020400

0800c14c <LED2>:
void LED2(uint8_t x){
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	3b01      	subs	r3, #1
 800c15a:	2b07      	cmp	r3, #7
 800c15c:	f200 809c 	bhi.w	800c298 <LED2+0x14c>
 800c160:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <LED2+0x1c>)
 800c162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c166:	bf00      	nop
 800c168:	0800c189 	.word	0x0800c189
 800c16c:	0800c1ab 	.word	0x0800c1ab
 800c170:	0800c1cd 	.word	0x0800c1cd
 800c174:	0800c1ef 	.word	0x0800c1ef
 800c178:	0800c211 	.word	0x0800c211
 800c17c:	0800c233 	.word	0x0800c233
 800c180:	0800c255 	.word	0x0800c255
 800c184:	0800c277 	.word	0x0800c277
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c188:	2200      	movs	r2, #0
 800c18a:	2120      	movs	r1, #32
 800c18c:	4844      	ldr	r0, [pc, #272]	; (800c2a0 <LED2+0x154>)
 800c18e:	f003 ff27 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c192:	2201      	movs	r2, #1
 800c194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c198:	4842      	ldr	r0, [pc, #264]	; (800c2a4 <LED2+0x158>)
 800c19a:	f003 ff21 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c19e:	2201      	movs	r2, #1
 800c1a0:	2110      	movs	r1, #16
 800c1a2:	483f      	ldr	r0, [pc, #252]	; (800c2a0 <LED2+0x154>)
 800c1a4:	f003 ff1c 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c1a8:	e076      	b.n	800c298 <LED2+0x14c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	2120      	movs	r1, #32
 800c1ae:	483c      	ldr	r0, [pc, #240]	; (800c2a0 <LED2+0x154>)
 800c1b0:	f003 ff16 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c1ba:	483a      	ldr	r0, [pc, #232]	; (800c2a4 <LED2+0x158>)
 800c1bc:	f003 ff10 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	2110      	movs	r1, #16
 800c1c4:	4836      	ldr	r0, [pc, #216]	; (800c2a0 <LED2+0x154>)
 800c1c6:	f003 ff0b 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c1ca:	e065      	b.n	800c298 <LED2+0x14c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2120      	movs	r1, #32
 800c1d0:	4833      	ldr	r0, [pc, #204]	; (800c2a0 <LED2+0x154>)
 800c1d2:	f003 ff05 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c1dc:	4831      	ldr	r0, [pc, #196]	; (800c2a4 <LED2+0x158>)
 800c1de:	f003 feff 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	2110      	movs	r1, #16
 800c1e6:	482e      	ldr	r0, [pc, #184]	; (800c2a0 <LED2+0x154>)
 800c1e8:	f003 fefa 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c1ec:	e054      	b.n	800c298 <LED2+0x14c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	2120      	movs	r1, #32
 800c1f2:	482b      	ldr	r0, [pc, #172]	; (800c2a0 <LED2+0x154>)
 800c1f4:	f003 fef4 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c1fe:	4829      	ldr	r0, [pc, #164]	; (800c2a4 <LED2+0x158>)
 800c200:	f003 feee 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c204:	2200      	movs	r2, #0
 800c206:	2110      	movs	r1, #16
 800c208:	4825      	ldr	r0, [pc, #148]	; (800c2a0 <LED2+0x154>)
 800c20a:	f003 fee9 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c20e:	e043      	b.n	800c298 <LED2+0x14c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c210:	2200      	movs	r2, #0
 800c212:	2120      	movs	r1, #32
 800c214:	4822      	ldr	r0, [pc, #136]	; (800c2a0 <LED2+0x154>)
 800c216:	f003 fee3 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c21a:	2201      	movs	r2, #1
 800c21c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c220:	4820      	ldr	r0, [pc, #128]	; (800c2a4 <LED2+0x158>)
 800c222:	f003 fedd 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c226:	2200      	movs	r2, #0
 800c228:	2110      	movs	r1, #16
 800c22a:	481d      	ldr	r0, [pc, #116]	; (800c2a0 <LED2+0x154>)
 800c22c:	f003 fed8 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c230:	e032      	b.n	800c298 <LED2+0x14c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c232:	2201      	movs	r2, #1
 800c234:	2120      	movs	r1, #32
 800c236:	481a      	ldr	r0, [pc, #104]	; (800c2a0 <LED2+0x154>)
 800c238:	f003 fed2 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c23c:	2200      	movs	r2, #0
 800c23e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c242:	4818      	ldr	r0, [pc, #96]	; (800c2a4 <LED2+0x158>)
 800c244:	f003 fecc 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c248:	2200      	movs	r2, #0
 800c24a:	2110      	movs	r1, #16
 800c24c:	4814      	ldr	r0, [pc, #80]	; (800c2a0 <LED2+0x154>)
 800c24e:	f003 fec7 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c252:	e021      	b.n	800c298 <LED2+0x14c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800c254:	2200      	movs	r2, #0
 800c256:	2120      	movs	r1, #32
 800c258:	4811      	ldr	r0, [pc, #68]	; (800c2a0 <LED2+0x154>)
 800c25a:	f003 fec1 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c25e:	2200      	movs	r2, #0
 800c260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c264:	480f      	ldr	r0, [pc, #60]	; (800c2a4 <LED2+0x158>)
 800c266:	f003 febb 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800c26a:	2200      	movs	r2, #0
 800c26c:	2110      	movs	r1, #16
 800c26e:	480c      	ldr	r0, [pc, #48]	; (800c2a0 <LED2+0x154>)
 800c270:	f003 feb6 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c274:	e010      	b.n	800c298 <LED2+0x14c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800c276:	2201      	movs	r2, #1
 800c278:	2120      	movs	r1, #32
 800c27a:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <LED2+0x154>)
 800c27c:	f003 feb0 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c280:	2201      	movs	r2, #1
 800c282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c286:	4807      	ldr	r0, [pc, #28]	; (800c2a4 <LED2+0x158>)
 800c288:	f003 feaa 	bl	800ffe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800c28c:	2201      	movs	r2, #1
 800c28e:	2110      	movs	r1, #16
 800c290:	4803      	ldr	r0, [pc, #12]	; (800c2a0 <LED2+0x154>)
 800c292:	f003 fea5 	bl	800ffe0 <HAL_GPIO_WritePin>
			break;
 800c296:	bf00      	nop

	}

}
 800c298:	bf00      	nop
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	40020400 	.word	0x40020400
 800c2a4:	40020000 	.word	0x40020000

0800c2a8 <error>:
void error(){
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ESC_MIN);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ESC_MIN);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <error+0x2c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800c2b4:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <error+0x2c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_Base_Stop_IT(&htim6);
 800c2bc:	4806      	ldr	r0, [pc, #24]	; (800c2d8 <error+0x30>)
 800c2be:	f005 fcc8 	bl	8011c52 <HAL_TIM_Base_Stop_IT>

	while(1){
		Motor(0,0);
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	f000 f843 	bl	800c350 <Motor>
		LED(1);
 800c2ca:	2001      	movs	r0, #1
 800c2cc:	f7ff fe82 	bl	800bfd4 <LED>
		Motor(0,0);
 800c2d0:	e7f7      	b.n	800c2c2 <error+0x1a>
 800c2d2:	bf00      	nop
 800c2d4:	20014518 	.word	0x20014518
 800c2d8:	20014498 	.word	0x20014498

0800c2dc <stop>:
	}
}
void stop(){
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
	Average_speed = 1000;
 800c2e0:	4b18      	ldr	r3, [pc, #96]	; (800c344 <stop+0x68>)
 800c2e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2e6:	801a      	strh	r2, [r3, #0]
	while(1){
		Average_speed = Average_speed-200;
 800c2e8:	4b16      	ldr	r3, [pc, #88]	; (800c344 <stop+0x68>)
 800c2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	3bc8      	subs	r3, #200	; 0xc8
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	b21a      	sxth	r2, r3
 800c2f6:	4b13      	ldr	r3, [pc, #76]	; (800c344 <stop+0x68>)
 800c2f8:	801a      	strh	r2, [r3, #0]
		//if(driv_flag=1)Average_speed = Average_speed-100;
		HAL_Delay(50);
 800c2fa:	2032      	movs	r0, #50	; 0x32
 800c2fc:	f002 f93a 	bl	800e574 <HAL_Delay>
		if(Average_speed<10)break;
 800c300:	4b10      	ldr	r3, [pc, #64]	; (800c344 <stop+0x68>)
 800c302:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c306:	2b09      	cmp	r3, #9
 800c308:	dd00      	ble.n	800c30c <stop+0x30>
		Average_speed = Average_speed-200;
 800c30a:	e7ed      	b.n	800c2e8 <stop+0xc>
		if(Average_speed<10)break;
 800c30c:	bf00      	nop
	}
	//HAL_Delay(10);
	Average_speed = 0;
 800c30e:	4b0d      	ldr	r3, [pc, #52]	; (800c344 <stop+0x68>)
 800c310:	2200      	movs	r2, #0
 800c312:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <stop+0x6c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2200      	movs	r2, #0
 800c31a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <stop+0x6c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2200      	movs	r2, #0
 800c322:	641a      	str	r2, [r3, #64]	; 0x40
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ESC_MIN);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ESC_MIN);

	HAL_Delay(700);
 800c324:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800c328:	f002 f924 	bl	800e574 <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim6);
 800c32c:	4807      	ldr	r0, [pc, #28]	; (800c34c <stop+0x70>)
 800c32e:	f005 fc90 	bl	8011c52 <HAL_TIM_Base_Stop_IT>
	Motor(0,0);
 800c332:	2100      	movs	r1, #0
 800c334:	2000      	movs	r0, #0
 800c336:	f000 f80b 	bl	800c350 <Motor>
	LED(6);
 800c33a:	2006      	movs	r0, #6
 800c33c:	f7ff fe4a 	bl	800bfd4 <LED>


}
 800c340:	bf00      	nop
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20014326 	.word	0x20014326
 800c348:	20014518 	.word	0x20014518
 800c34c:	20014498 	.word	0x20014498

0800c350 <Motor>:
void Motor(int16_t MotorL,int16_t MotorR)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	460a      	mov	r2, r1
 800c35a:	80fb      	strh	r3, [r7, #6]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80bb      	strh	r3, [r7, #4]
//		if (MotorR >= 2000) MotorR = 2000;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MotorR);
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//
//	}
	if(MotorL > 0 ){
 800c360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c364:	2b00      	cmp	r3, #0
 800c366:	dd06      	ble.n	800c376 <Motor+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800c368:	2201      	movs	r2, #1
 800c36a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c36e:	4824      	ldr	r0, [pc, #144]	; (800c400 <Motor+0xb0>)
 800c370:	f003 fe36 	bl	800ffe0 <HAL_GPIO_WritePin>
 800c374:	e00d      	b.n	800c392 <Motor+0x42>


	}else if(MotorL < 0){
 800c376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	da09      	bge.n	800c392 <Motor+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800c37e:	2200      	movs	r2, #0
 800c380:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c384:	481e      	ldr	r0, [pc, #120]	; (800c400 <Motor+0xb0>)
 800c386:	f003 fe2b 	bl	800ffe0 <HAL_GPIO_WritePin>
		MotorL = -MotorL;
 800c38a:	88fb      	ldrh	r3, [r7, #6]
 800c38c:	425b      	negs	r3, r3
 800c38e:	b29b      	uxth	r3, r3
 800c390:	80fb      	strh	r3, [r7, #6]
	}
	if(MotorR > 0 ){
 800c392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	dd06      	ble.n	800c3a8 <Motor+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800c39a:	2200      	movs	r2, #0
 800c39c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3a0:	4818      	ldr	r0, [pc, #96]	; (800c404 <Motor+0xb4>)
 800c3a2:	f003 fe1d 	bl	800ffe0 <HAL_GPIO_WritePin>
 800c3a6:	e00d      	b.n	800c3c4 <Motor+0x74>

	}else if(MotorR < 0){
 800c3a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da09      	bge.n	800c3c4 <Motor+0x74>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3b6:	4813      	ldr	r0, [pc, #76]	; (800c404 <Motor+0xb4>)
 800c3b8:	f003 fe12 	bl	800ffe0 <HAL_GPIO_WritePin>
		MotorR = -MotorR;
 800c3bc:	88bb      	ldrh	r3, [r7, #4]
 800c3be:	425b      	negs	r3, r3
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	80bb      	strh	r3, [r7, #4]

	}
	if (MotorR > 2000) MotorR = 2000;
 800c3c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c3c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c3cc:	dd02      	ble.n	800c3d4 <Motor+0x84>
 800c3ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c3d2:	80bb      	strh	r3, [r7, #4]
	if (MotorL > 2000) MotorL = 2000;
 800c3d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c3dc:	dd02      	ble.n	800c3e4 <Motor+0x94>
 800c3de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c3e2:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MotorL);
 800c3e4:	4b08      	ldr	r3, [pc, #32]	; (800c408 <Motor+0xb8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3ec:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MotorR);
 800c3ee:	4b07      	ldr	r3, [pc, #28]	; (800c40c <Motor+0xbc>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c3f6:	639a      	str	r2, [r3, #56]	; 0x38


}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	40020800 	.word	0x40020800
 800c404:	40020000 	.word	0x40020000
 800c408:	20014328 	.word	0x20014328
 800c40c:	200144d8 	.word	0x200144d8

0800c410 <sidemaker>:
void sidemaker(){
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15) ==0) maker_right = true;
 800c414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c418:	481b      	ldr	r0, [pc, #108]	; (800c488 <sidemaker+0x78>)
 800c41a:	f003 fdc9 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d103      	bne.n	800c42c <sidemaker+0x1c>
 800c424:	4b19      	ldr	r3, [pc, #100]	; (800c48c <sidemaker+0x7c>)
 800c426:	2201      	movs	r2, #1
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	e002      	b.n	800c432 <sidemaker+0x22>
	else maker_right = false;
 800c42c:	4b17      	ldr	r3, [pc, #92]	; (800c48c <sidemaker+0x7c>)
 800c42e:	2200      	movs	r2, #0
 800c430:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2) ==0 ) maker_left = true;
 800c432:	2104      	movs	r1, #4
 800c434:	4816      	ldr	r0, [pc, #88]	; (800c490 <sidemaker+0x80>)
 800c436:	f003 fdbb 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <sidemaker+0x38>
 800c440:	4b14      	ldr	r3, [pc, #80]	; (800c494 <sidemaker+0x84>)
 800c442:	2201      	movs	r2, #1
 800c444:	701a      	strb	r2, [r3, #0]
 800c446:	e002      	b.n	800c44e <sidemaker+0x3e>
	else maker_left = false;
 800c448:	4b12      	ldr	r3, [pc, #72]	; (800c494 <sidemaker+0x84>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]

	if(log_flag){
 800c44e:	4b12      	ldr	r3, [pc, #72]	; (800c498 <sidemaker+0x88>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d016      	beq.n	800c484 <sidemaker+0x74>
	  if(cross_line) cross_flag++;
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <sidemaker+0x8c>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d005      	beq.n	800c46a <sidemaker+0x5a>
 800c45e:	4b10      	ldr	r3, [pc, #64]	; (800c4a0 <sidemaker+0x90>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	b2da      	uxtb	r2, r3
 800c466:	4b0e      	ldr	r3, [pc, #56]	; (800c4a0 <sidemaker+0x90>)
 800c468:	701a      	strb	r2, [r3, #0]
	  if(cross_flag>=11) {
 800c46a:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <sidemaker+0x90>)
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	2b0a      	cmp	r3, #10
 800c470:	d905      	bls.n	800c47e <sidemaker+0x6e>
		  cross_line=0;
 800c472:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <sidemaker+0x8c>)
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
		  cross_flag=0;
 800c478:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <sidemaker+0x90>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	701a      	strb	r2, [r3, #0]
	  }
		  log_flag= false;
 800c47e:	4b06      	ldr	r3, [pc, #24]	; (800c498 <sidemaker+0x88>)
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
	  }
}
 800c484:	bf00      	nop
 800c486:	bd80      	pop	{r7, pc}
 800c488:	40020800 	.word	0x40020800
 800c48c:	200143a8 	.word	0x200143a8
 800c490:	40020400 	.word	0x40020400
 800c494:	20014494 	.word	0x20014494
 800c498:	2000020a 	.word	0x2000020a
 800c49c:	2000c2c8 	.word	0x2000c2c8
 800c4a0:	2000c2b9 	.word	0x2000c2b9

0800c4a4 <fan_pressure>:
void fan_pressure(float L,float R){
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800c4ae:	edc7 0a00 	vstr	s1, [r7]
	int fanL=0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
	int fanR=0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	60bb      	str	r3, [r7, #8]
	if(L>120)L=150;
 800c4ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800c4be:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c518 <fan_pressure+0x74>
 800c4c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ca:	dd01      	ble.n	800c4d0 <fan_pressure+0x2c>
 800c4cc:	4b13      	ldr	r3, [pc, #76]	; (800c51c <fan_pressure+0x78>)
 800c4ce:	607b      	str	r3, [r7, #4]
	if(R>120)R=150;
 800c4d0:	edd7 7a00 	vldr	s15, [r7]
 800c4d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c518 <fan_pressure+0x74>
 800c4d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e0:	dd01      	ble.n	800c4e6 <fan_pressure+0x42>
 800c4e2:	4b0e      	ldr	r3, [pc, #56]	; (800c51c <fan_pressure+0x78>)
 800c4e4:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, L);
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <fan_pressure+0x7c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800c4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f2:	ee17 2a90 	vmov	r2, s15
 800c4f6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, R);
 800c4f8:	4b09      	ldr	r3, [pc, #36]	; (800c520 <fan_pressure+0x7c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	edd7 7a00 	vldr	s15, [r7]
 800c500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c504:	ee17 2a90 	vmov	r2, s15
 800c508:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c50a:	bf00      	nop
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	42f00000 	.word	0x42f00000
 800c51c:	43160000 	.word	0x43160000
 800c520:	20014518 	.word	0x20014518

0800c524 <flashcheck>:

	fan_Lim = (19*(100-fan))/100;

	fan_pressure(round(fan_Lim),round(fan_Lim));
}
void flashcheck(){
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
	if(work_ram[28] != 0){
 800c528:	4b1c      	ldr	r3, [pc, #112]	; (800c59c <flashcheck+0x78>)
 800c52a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d033      	beq.n	800c598 <flashcheck+0x74>
		  work_ram[26]=1800;
 800c530:	4b1a      	ldr	r3, [pc, #104]	; (800c59c <flashcheck+0x78>)
 800c532:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800c536:	869a      	strh	r2, [r3, #52]	; 0x34
		  work_ram[27]=200;
 800c538:	4b18      	ldr	r3, [pc, #96]	; (800c59c <flashcheck+0x78>)
 800c53a:	22c8      	movs	r2, #200	; 0xc8
 800c53c:	86da      	strh	r2, [r3, #54]	; 0x36
		  work_ram[28]=0;
 800c53e:	4b17      	ldr	r3, [pc, #92]	; (800c59c <flashcheck+0x78>)
 800c540:	2200      	movs	r2, #0
 800c542:	871a      	strh	r2, [r3, #56]	; 0x38
		  work_ram[29]=42;
 800c544:	4b15      	ldr	r3, [pc, #84]	; (800c59c <flashcheck+0x78>)
 800c546:	222a      	movs	r2, #42	; 0x2a
 800c548:	875a      	strh	r2, [r3, #58]	; 0x3a
		  work_ram[31]=17;
 800c54a:	4b14      	ldr	r3, [pc, #80]	; (800c59c <flashcheck+0x78>)
 800c54c:	2211      	movs	r2, #17
 800c54e:	87da      	strh	r2, [r3, #62]	; 0x3e
		  work_ram[32]=4;
 800c550:	4b12      	ldr	r3, [pc, #72]	; (800c59c <flashcheck+0x78>)
 800c552:	2204      	movs	r2, #4
 800c554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		  work_ram[33] = 2000;
 800c558:	4b10      	ldr	r3, [pc, #64]	; (800c59c <flashcheck+0x78>)
 800c55a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c55e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		  work_ram[34] = 3000;
 800c562:	4b0e      	ldr	r3, [pc, #56]	; (800c59c <flashcheck+0x78>)
 800c564:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		  work_ram[35] = 3500;
 800c56c:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <flashcheck+0x78>)
 800c56e:	f640 52ac 	movw	r2, #3500	; 0xdac
 800c572:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		  work_ram[36] = 4500;
 800c576:	4b09      	ldr	r3, [pc, #36]	; (800c59c <flashcheck+0x78>)
 800c578:	f241 1294 	movw	r2, #4500	; 0x1194
 800c57c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		  work_ram[37] = 4500;
 800c580:	4b06      	ldr	r3, [pc, #24]	; (800c59c <flashcheck+0x78>)
 800c582:	f241 1294 	movw	r2, #4500	; 0x1194
 800c586:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		  work_ram[38] = 7000;
 800c58a:	4b04      	ldr	r3, [pc, #16]	; (800c59c <flashcheck+0x78>)
 800c58c:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c590:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		  Flash_store();
 800c594:	f7ff fbf2 	bl	800bd7c <Flash_store>
	}
}
 800c598:	bf00      	nop
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	2000c30c 	.word	0x2000c30c

0800c5a0 <switch_cheack>:
uint8_t switch_cheack(){
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 800c5a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c5a8:	4802      	ldr	r0, [pc, #8]	; (800c5b4 <switch_cheack+0x14>)
 800c5aa:	f003 fd01 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800c5ae:	4603      	mov	r3, r0

}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	40020800 	.word	0x40020800

0800c5b8 <switch_cheack2>:
uint8_t switch_cheack2(){
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15);
 800c5bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c5c0:	4802      	ldr	r0, [pc, #8]	; (800c5cc <switch_cheack2+0x14>)
 800c5c2:	f003 fcf5 	bl	800ffb0 <HAL_GPIO_ReadPin>
 800c5c6:	4603      	mov	r3, r0

}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	40020400 	.word	0x40020400

0800c5d0 <mode_Selection>:
int mode_Selection(uint8_t cheak){
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]
	int8_t i=1;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	73fb      	strb	r3, [r7, #15]
	TIM1 -> CNT = 32768;
 800c5de:	4b35      	ldr	r3, [pc, #212]	; (800c6b4 <mode_Selection+0xe4>)
 800c5e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c5e4:	625a      	str	r2, [r3, #36]	; 0x24
	LED(1);
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	f7ff fcf4 	bl	800bfd4 <LED>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c5f2:	4831      	ldr	r0, [pc, #196]	; (800c6b8 <mode_Selection+0xe8>)
 800c5f4:	f003 fcf4 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c5fe:	482e      	ldr	r0, [pc, #184]	; (800c6b8 <mode_Selection+0xe8>)
 800c600:	f003 fcee 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800c604:	2200      	movs	r2, #0
 800c606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c60a:	482b      	ldr	r0, [pc, #172]	; (800c6b8 <mode_Selection+0xe8>)
 800c60c:	f003 fce8 	bl	800ffe0 <HAL_GPIO_WritePin>
	while (switch_cheack()){
 800c610:	e033      	b.n	800c67a <mode_Selection+0xaa>

		if(TIM4 -> CNT>32768+2000){
 800c612:	4b2a      	ldr	r3, [pc, #168]	; (800c6bc <mode_Selection+0xec>)
 800c614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c616:	f248 72d0 	movw	r2, #34768	; 0x87d0
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d913      	bls.n	800c646 <mode_Selection+0x76>
			i++;
 800c61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	3301      	adds	r3, #1
 800c626:	b2db      	uxtb	r3, r3
 800c628:	73fb      	strb	r3, [r7, #15]
			if(i>=8)i=1;
 800c62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c62e:	2b07      	cmp	r3, #7
 800c630:	dd01      	ble.n	800c636 <mode_Selection+0x66>
 800c632:	2301      	movs	r3, #1
 800c634:	73fb      	strb	r3, [r7, #15]
			LED(i);
 800c636:	7bfb      	ldrb	r3, [r7, #15]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff fccb 	bl	800bfd4 <LED>
			TIM4 -> CNT=32768;
 800c63e:	4b1f      	ldr	r3, [pc, #124]	; (800c6bc <mode_Selection+0xec>)
 800c640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c644:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4 -> CNT<32768-2000){
 800c646:	4b1d      	ldr	r3, [pc, #116]	; (800c6bc <mode_Selection+0xec>)
 800c648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64a:	f647 022f 	movw	r2, #30767	; 0x782f
 800c64e:	4293      	cmp	r3, r2
 800c650:	d813      	bhi.n	800c67a <mode_Selection+0xaa>
			i--;
 800c652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	3b01      	subs	r3, #1
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	73fb      	strb	r3, [r7, #15]
			if(i<=0)i=7;
 800c65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dc01      	bgt.n	800c66a <mode_Selection+0x9a>
 800c666:	2307      	movs	r3, #7
 800c668:	73fb      	strb	r3, [r7, #15]
			LED(i);
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff fcb1 	bl	800bfd4 <LED>
			TIM4 -> CNT=32768;
 800c672:	4b12      	ldr	r3, [pc, #72]	; (800c6bc <mode_Selection+0xec>)
 800c674:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c678:	625a      	str	r2, [r3, #36]	; 0x24
	while (switch_cheack()){
 800c67a:	f7ff ff91 	bl	800c5a0 <switch_cheack>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1c6      	bne.n	800c612 <mode_Selection+0x42>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800c684:	2201      	movs	r2, #1
 800c686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c68a:	480b      	ldr	r0, [pc, #44]	; (800c6b8 <mode_Selection+0xe8>)
 800c68c:	f003 fca8 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800c690:	2201      	movs	r2, #1
 800c692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c696:	4808      	ldr	r0, [pc, #32]	; (800c6b8 <mode_Selection+0xe8>)
 800c698:	f003 fca2 	bl	800ffe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800c69c:	2201      	movs	r2, #1
 800c69e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c6a2:	4805      	ldr	r0, [pc, #20]	; (800c6b8 <mode_Selection+0xe8>)
 800c6a4:	f003 fc9c 	bl	800ffe0 <HAL_GPIO_WritePin>
	return i;
 800c6a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	40010000 	.word	0x40010000
 800c6b8:	40020000 	.word	0x40020000
 800c6bc:	40000800 	.word	0x40000800

0800c6c0 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, 0xFFFF);
 800c6c8:	1d39      	adds	r1, r7, #4
 800c6ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	4803      	ldr	r0, [pc, #12]	; (800c6e0 <__io_putchar+0x20>)
 800c6d2:	f006 f9b8 	bl	8012a46 <HAL_UART_Transmit>
	return ch;
 800c6d6:	687b      	ldr	r3, [r7, #4]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20014608 	.word	0x20014608

0800c6e4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_TIM_PeriodElapsedCallback>:
//  {
//    ITM_SendChar(*ptr++);
//  }
//  return len;
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
	ghq++;
 800c700:	4b18      	ldr	r3, [pc, #96]	; (800c764 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	4a17      	ldr	r2, [pc, #92]	; (800c764 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800c708:	6013      	str	r3, [r2, #0]
	Speed_Motor();
 800c70a:	f7fe fb45 	bl	800ad98 <Speed_Motor>
	sidemaker();
 800c70e:	f7ff fe7f 	bl	800c410 <sidemaker>
	calc_angle();
 800c712:	f7fe f919 	bl	800a948 <calc_angle>
//	  }
	//if(driv_flag==1&& maker_flag==1)first_cale();
//	if(straight_flag) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//	else if(driv_flag ==1) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  if(maker_flag==0 && Average_speed<=work_ram[26])Average_speed+=5;
 800c716:	4b14      	ldr	r3, [pc, #80]	; (800c768 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d111      	bne.n	800c742 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800c71e:	4b13      	ldr	r3, [pc, #76]	; (800c76c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800c720:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c724:	461a      	mov	r2, r3
 800c726:	4b12      	ldr	r3, [pc, #72]	; (800c770 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800c728:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c72a:	429a      	cmp	r2, r3
 800c72c:	dc09      	bgt.n	800c742 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800c730:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c734:	b29b      	uxth	r3, r3
 800c736:	3305      	adds	r3, #5
 800c738:	b29b      	uxth	r3, r3
 800c73a:	b21a      	sxth	r2, r3
 800c73c:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800c73e:	801a      	strh	r2, [r3, #0]
  else if(driv_flag ==1 && maker_flag==1) Average_speed=work_ram[26];


}
 800c740:	e00c      	b.n	800c75c <HAL_TIM_PeriodElapsedCallback+0x64>
  else if(driv_flag ==1 && maker_flag==1) Average_speed=work_ram[26];
 800c742:	4b0c      	ldr	r3, [pc, #48]	; (800c774 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d108      	bne.n	800c75c <HAL_TIM_PeriodElapsedCallback+0x64>
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d104      	bne.n	800c75c <HAL_TIM_PeriodElapsedCallback+0x64>
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800c754:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c756:	b21a      	sxth	r2, r3
 800c758:	4b04      	ldr	r3, [pc, #16]	; (800c76c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800c75a:	801a      	strh	r2, [r3, #0]
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	2000c2bc 	.word	0x2000c2bc
 800c768:	2000c2b8 	.word	0x2000c2b8
 800c76c:	20014326 	.word	0x20014326
 800c770:	2000c30c 	.word	0x2000c30c
 800c774:	2000c2ba 	.word	0x2000c2ba

0800c778 <mode>:
void mode(){
 800c778:	b590      	push	{r4, r7, lr}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
	uint8_t i=1;
 800c77e:	2301      	movs	r3, #1
 800c780:	73fb      	strb	r3, [r7, #15]
	uint16_t jl=39;
 800c782:	2327      	movs	r3, #39	; 0x27
 800c784:	81bb      	strh	r3, [r7, #12]
	int a=0;
 800c786:	2300      	movs	r3, #0
 800c788:	60bb      	str	r3, [r7, #8]
	float cal=0;
 800c78a:	f04f 0300 	mov.w	r3, #0
 800c78e:	607b      	str	r3, [r7, #4]
	float spp=0;
 800c790:	f04f 0300 	mov.w	r3, #0
 800c794:	603b      	str	r3, [r7, #0]
	while(1){
		i=mode_Selection(switch_cheack());
 800c796:	f7ff ff03 	bl	800c5a0 <switch_cheack>
 800c79a:	4603      	mov	r3, r0
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff ff17 	bl	800c5d0 <mode_Selection>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]

		switch(i){
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	2b06      	cmp	r3, #6
 800c7ac:	d8f3      	bhi.n	800c796 <mode+0x1e>
 800c7ae:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <mode+0x3c>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c7d1 	.word	0x0800c7d1
 800c7b8:	0800c7ef 	.word	0x0800c7ef
 800c7bc:	0800c80d 	.word	0x0800c80d
 800c7c0:	0800c947 	.word	0x0800c947
 800c7c4:	0800c94d 	.word	0x0800c94d
 800c7c8:	0800caa5 	.word	0x0800caa5
 800c7cc:	0800caab 	.word	0x0800caab
//			//HAL_Delay(500);
//			IMU_init();
//			off_angle();
//			break;
		case 1://green
			LED(1);
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	f7ff fbff 	bl	800bfd4 <LED>
			lcd_clear();
 800c7d6:	f7fc fb63 	bl	8008ea0 <lcd_clear>
			lcd_locate(0,0);
 800c7da:	2100      	movs	r1, #0
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f7fc fb6f 	bl	8008ec0 <lcd_locate>
			lcd_printf("ADCinit");
 800c7e2:	48b4      	ldr	r0, [pc, #720]	; (800cab4 <mode+0x33c>)
 800c7e4:	f7fc fb96 	bl	8008f14 <lcd_printf>
			ADCinit();
 800c7e8:	f000 ff2e 	bl	800d648 <ADCinit>
			break;
 800c7ec:	e160      	b.n	800cab0 <mode+0x338>
		case 2:
			LED(2);//light blue
 800c7ee:	2002      	movs	r0, #2
 800c7f0:	f7ff fbf0 	bl	800bfd4 <LED>
			lcd_clear();
 800c7f4:	f7fc fb54 	bl	8008ea0 <lcd_clear>
			lcd_locate(0,0);
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	f7fc fb60 	bl	8008ec0 <lcd_locate>
			lcd_printf("nomusan");
 800c800:	48ad      	ldr	r0, [pc, #692]	; (800cab8 <mode+0x340>)
 800c802:	f7fc fb87 	bl	8008f14 <lcd_printf>
			tuning();
 800c806:	f7fe fe93 	bl	800b530 <tuning>
			break;
 800c80a:	e151      	b.n	800cab0 <mode+0x338>

		case 3:

			second_soeed=0;
 800c80c:	4bab      	ldr	r3, [pc, #684]	; (800cabc <mode+0x344>)
 800c80e:	2200      	movs	r2, #0
 800c810:	701a      	strb	r2, [r3, #0]
			Flash_clear2();
 800c812:	f7ff fa7a 	bl	800bd0a <Flash_clear2>
			LED(8);
 800c816:	2008      	movs	r0, #8
 800c818:	f7ff fbdc 	bl	800bfd4 <LED>
			LED2(1);
 800c81c:	2001      	movs	r0, #1
 800c81e:	f7ff fc95 	bl	800c14c <LED2>
			while(switch_cheack2());
 800c822:	bf00      	nop
 800c824:	f7ff fec8 	bl	800c5b8 <switch_cheack2>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1fa      	bne.n	800c824 <mode+0xac>
			LED2(2);
 800c82e:	2002      	movs	r0, #2
 800c830:	f7ff fc8c 	bl	800c14c <LED2>
			HAL_Delay(300);
 800c834:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c838:	f001 fe9c 	bl	800e574 <HAL_Delay>
			off_angle();
 800c83c:	f7fe f82a 	bl	800a894 <off_angle>
			HAL_Delay(100);
 800c840:	2064      	movs	r0, #100	; 0x64
 800c842:	f001 fe97 	bl	800e574 <HAL_Delay>
			fan_pressure(100,100);
 800c846:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800cac0 <mode+0x348>
 800c84a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800cac0 <mode+0x348>
 800c84e:	f7ff fe29 	bl	800c4a4 <fan_pressure>
			HAL_Delay(1000);
 800c852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c856:	f001 fe8d 	bl	800e574 <HAL_Delay>
			log_init ();
 800c85a:	f7fc fb7b 	bl	8008f54 <log_init>
			lcd_clear();
 800c85e:	f7fc fb1f 	bl	8008ea0 <lcd_clear>
			//Kd = 40;
			TIM4 -> CNT = 32768;
 800c862:	4b98      	ldr	r3, [pc, #608]	; (800cac4 <mode+0x34c>)
 800c864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c868:	625a      	str	r2, [r3, #36]	; 0x24
			TIM3 -> CNT = 32768;
 800c86a:	4b97      	ldr	r3, [pc, #604]	; (800cac8 <mode+0x350>)
 800c86c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c870:	625a      	str	r2, [r3, #36]	; 0x24
//			fan_pressure(9,9);
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1940);
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2000);
			HAL_TIM_Base_Start_IT(&htim6);
 800c872:	4896      	ldr	r0, [pc, #600]	; (800cacc <mode+0x354>)
 800c874:	f005 f9c9 	bl	8011c0a <HAL_TIM_Base_Start_IT>
			LED(2);
 800c878:	2002      	movs	r0, #2
 800c87a:	f7ff fbab 	bl	800bfd4 <LED>
			maker_flag=0;
 800c87e:	4b94      	ldr	r3, [pc, #592]	; (800cad0 <mode+0x358>)
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
			driv_flag=1;
 800c884:	4b93      	ldr	r3, [pc, #588]	; (800cad4 <mode+0x35c>)
 800c886:	2201      	movs	r2, #1
 800c888:	801a      	strh	r2, [r3, #0]
			Average_speed=0;
 800c88a:	4b93      	ldr	r3, [pc, #588]	; (800cad8 <mode+0x360>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	801a      	strh	r2, [r3, #0]
			while (1){

			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800c890:	4b92      	ldr	r3, [pc, #584]	; (800cadc <mode+0x364>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d016      	beq.n	800c8c6 <mode+0x14e>
 800c898:	4b91      	ldr	r3, [pc, #580]	; (800cae0 <mode+0x368>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d112      	bne.n	800c8c6 <mode+0x14e>
 800c8a0:	4b90      	ldr	r3, [pc, #576]	; (800cae4 <mode+0x36c>)
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10e      	bne.n	800c8c6 <mode+0x14e>
				  while(maker_right);
 800c8a8:	bf00      	nop
 800c8aa:	4b8c      	ldr	r3, [pc, #560]	; (800cadc <mode+0x364>)
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1fb      	bne.n	800c8aa <mode+0x132>
				  maker_flag++;
 800c8b2:	4b87      	ldr	r3, [pc, #540]	; (800cad0 <mode+0x358>)
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	4b85      	ldr	r3, [pc, #532]	; (800cad0 <mode+0x358>)
 800c8bc:	701a      	strb	r2, [r3, #0]
				  if(maker_flag>=2){
 800c8be:	4b84      	ldr	r3, [pc, #528]	; (800cad0 <mode+0x358>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d82f      	bhi.n	800c926 <mode+0x1ae>
					  break;
				  }
			  }
			  if(maker_left && cross_line==0 && maker_right == 0){
 800c8c6:	4b87      	ldr	r3, [pc, #540]	; (800cae4 <mode+0x36c>)
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d012      	beq.n	800c8f4 <mode+0x17c>
 800c8ce:	4b84      	ldr	r3, [pc, #528]	; (800cae0 <mode+0x368>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10e      	bne.n	800c8f4 <mode+0x17c>
 800c8d6:	4b81      	ldr	r3, [pc, #516]	; (800cadc <mode+0x364>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <mode+0x17c>
				  correc_maker = true;
 800c8de:	4b82      	ldr	r3, [pc, #520]	; (800cae8 <mode+0x370>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]
				  while(maker_left);
 800c8e4:	bf00      	nop
 800c8e6:	4b7f      	ldr	r3, [pc, #508]	; (800cae4 <mode+0x36c>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1fb      	bne.n	800c8e6 <mode+0x16e>
				  correc_maker = false;
 800c8ee:	4b7e      	ldr	r3, [pc, #504]	; (800cae8 <mode+0x370>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	701a      	strb	r2, [r3, #0]
			  }
			  if((maker_left || maker_right )&& cross_line==1 ){
 800c8f4:	4b7b      	ldr	r3, [pc, #492]	; (800cae4 <mode+0x36c>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <mode+0x18c>
 800c8fc:	4b77      	ldr	r3, [pc, #476]	; (800cadc <mode+0x364>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d0c5      	beq.n	800c890 <mode+0x118>
 800c904:	4b76      	ldr	r3, [pc, #472]	; (800cae0 <mode+0x368>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d1c1      	bne.n	800c890 <mode+0x118>
				  while(maker_left || maker_right);
 800c90c:	bf00      	nop
 800c90e:	4b75      	ldr	r3, [pc, #468]	; (800cae4 <mode+0x36c>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1fb      	bne.n	800c90e <mode+0x196>
 800c916:	4b71      	ldr	r3, [pc, #452]	; (800cadc <mode+0x364>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1f7      	bne.n	800c90e <mode+0x196>
				  cross_maker = true;
 800c91e:	4b73      	ldr	r3, [pc, #460]	; (800caec <mode+0x374>)
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800c924:	e7b4      	b.n	800c890 <mode+0x118>
					  break;
 800c926:	bf00      	nop
			  }

			}

			stop();
 800c928:	f7ff fcd8 	bl	800c2dc <stop>
			fan_pressure(0,0);
 800c92c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800caf0 <mode+0x378>
 800c930:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800caf0 <mode+0x378>
 800c934:	f7ff fdb6 	bl	800c4a4 <fan_pressure>
			Flash_store();
 800c938:	f7ff fa20 	bl	800bd7c <Flash_store>
			Kd = work_ram[29];
 800c93c:	4b6d      	ldr	r3, [pc, #436]	; (800caf4 <mode+0x37c>)
 800c93e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c940:	4b6d      	ldr	r3, [pc, #436]	; (800caf8 <mode+0x380>)
 800c942:	801a      	strh	r2, [r3, #0]
			break;
 800c944:	e0b4      	b.n	800cab0 <mode+0x338>
		case 4:
			accel_tuning();
 800c946:	f7fe fef7 	bl	800b738 <accel_tuning>
			break;
 800c94a:	e0b1      	b.n	800cab0 <mode+0x338>
//			}
////			printf("%lf\r\n",fao);
////			printf("%d\r\n",c);
//			break;
		case 5:
			i=1;
 800c94c:	2301      	movs	r3, #1
 800c94e:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(500);
 800c950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c954:	f001 fe0e 	bl	800e574 <HAL_Delay>
			second_soeed=mode_Selection(switch_cheack2());
 800c958:	f7ff fe2e 	bl	800c5b8 <switch_cheack2>
 800c95c:	4603      	mov	r3, r0
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff fe36 	bl	800c5d0 <mode_Selection>
 800c964:	4603      	mov	r3, r0
 800c966:	b2da      	uxtb	r2, r3
 800c968:	4b54      	ldr	r3, [pc, #336]	; (800cabc <mode+0x344>)
 800c96a:	701a      	strb	r2, [r3, #0]
			LED2(3);
 800c96c:	2003      	movs	r0, #3
 800c96e:	f7ff fbed 	bl	800c14c <LED2>
			FLASH_EreaseSector(11);
 800c972:	200b      	movs	r0, #11
 800c974:	f7fd fe62 	bl	800a63c <FLASH_EreaseSector>
			FLASH_Erease8();
 800c978:	f7fd fe40 	bl	800a5fc <FLASH_Erease8>
			log_init ();
 800c97c:	f7fc faea 	bl	8008f54 <log_init>
			log_Cal();
 800c980:	f7fc fef6 	bl	8009770 <log_Cal>
			log_init ();
 800c984:	f7fc fae6 	bl	8008f54 <log_init>
			HAL_Delay(10);
 800c988:	200a      	movs	r0, #10
 800c98a:	f001 fdf3 	bl	800e574 <HAL_Delay>
			off_angle();
 800c98e:	f7fd ff81 	bl	800a894 <off_angle>
			HAL_Delay(100);
 800c992:	2064      	movs	r0, #100	; 0x64
 800c994:	f001 fdee 	bl	800e574 <HAL_Delay>
			maker_flag=0;
 800c998:	4b4d      	ldr	r3, [pc, #308]	; (800cad0 <mode+0x358>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	701a      	strb	r2, [r3, #0]
			driv_flag=2;
 800c99e:	4b4d      	ldr	r3, [pc, #308]	; (800cad4 <mode+0x35c>)
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	801a      	strh	r2, [r3, #0]
//			if(second_soeed == 1){
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2060);
//				fan_pressure(13.4,13.4);
//			}else {
				fan_pressure(120,120);
 800c9a4:	eddf 0a55 	vldr	s1, [pc, #340]	; 800cafc <mode+0x384>
 800c9a8:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800cafc <mode+0x384>
 800c9ac:	f7ff fd7a 	bl	800c4a4 <fan_pressure>
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2020);
//				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2080);
//			}
			HAL_Delay(500);
 800c9b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c9b4:	f001 fdde 	bl	800e574 <HAL_Delay>
			Average_speed=0;
 800c9b8:	4b47      	ldr	r3, [pc, #284]	; (800cad8 <mode+0x360>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	801a      	strh	r2, [r3, #0]
			spp=700;
 800c9be:	4b50      	ldr	r3, [pc, #320]	; (800cb00 <mode+0x388>)
 800c9c0:	603b      	str	r3, [r7, #0]
			LED(2);
 800c9c2:	2002      	movs	r0, #2
 800c9c4:	f7ff fb06 	bl	800bfd4 <LED>
			TIM4 -> CNT = 32768;
 800c9c8:	4b3e      	ldr	r3, [pc, #248]	; (800cac4 <mode+0x34c>)
 800c9ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c9ce:	625a      	str	r2, [r3, #36]	; 0x24
			TIM3 -> CNT = 32768;
 800c9d0:	4b3d      	ldr	r3, [pc, #244]	; (800cac8 <mode+0x350>)
 800c9d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c9d6:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 800c9d8:	483c      	ldr	r0, [pc, #240]	; (800cacc <mode+0x354>)
 800c9da:	f005 f916 	bl	8011c0a <HAL_TIM_Base_Start_IT>
			while (1){

			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800c9de:	4b3f      	ldr	r3, [pc, #252]	; (800cadc <mode+0x364>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d016      	beq.n	800ca14 <mode+0x29c>
 800c9e6:	4b3e      	ldr	r3, [pc, #248]	; (800cae0 <mode+0x368>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d112      	bne.n	800ca14 <mode+0x29c>
 800c9ee:	4b3d      	ldr	r3, [pc, #244]	; (800cae4 <mode+0x36c>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10e      	bne.n	800ca14 <mode+0x29c>
				  while(maker_right);
 800c9f6:	bf00      	nop
 800c9f8:	4b38      	ldr	r3, [pc, #224]	; (800cadc <mode+0x364>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1fb      	bne.n	800c9f8 <mode+0x280>
				  maker_flag++;
 800ca00:	4b33      	ldr	r3, [pc, #204]	; (800cad0 <mode+0x358>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	4b31      	ldr	r3, [pc, #196]	; (800cad0 <mode+0x358>)
 800ca0a:	701a      	strb	r2, [r3, #0]
				  if(maker_flag>=2){
 800ca0c:	4b30      	ldr	r3, [pc, #192]	; (800cad0 <mode+0x358>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d82f      	bhi.n	800ca74 <mode+0x2fc>
					  break;
				  }
			  }
			  if(maker_left && cross_line==0 && maker_right==0){
 800ca14:	4b33      	ldr	r3, [pc, #204]	; (800cae4 <mode+0x36c>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d012      	beq.n	800ca42 <mode+0x2ca>
 800ca1c:	4b30      	ldr	r3, [pc, #192]	; (800cae0 <mode+0x368>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10e      	bne.n	800ca42 <mode+0x2ca>
 800ca24:	4b2d      	ldr	r3, [pc, #180]	; (800cadc <mode+0x364>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <mode+0x2ca>
					  correc_maker = true;
 800ca2c:	4b2e      	ldr	r3, [pc, #184]	; (800cae8 <mode+0x370>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	701a      	strb	r2, [r3, #0]
					  while(maker_left);
 800ca32:	bf00      	nop
 800ca34:	4b2b      	ldr	r3, [pc, #172]	; (800cae4 <mode+0x36c>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1fb      	bne.n	800ca34 <mode+0x2bc>
					  correc_maker = false;
 800ca3c:	4b2a      	ldr	r3, [pc, #168]	; (800cae8 <mode+0x370>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	701a      	strb	r2, [r3, #0]

				  }
			  if((maker_left || maker_right )&& cross_line==1 ){
 800ca42:	4b28      	ldr	r3, [pc, #160]	; (800cae4 <mode+0x36c>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d103      	bne.n	800ca52 <mode+0x2da>
 800ca4a:	4b24      	ldr	r3, [pc, #144]	; (800cadc <mode+0x364>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0c5      	beq.n	800c9de <mode+0x266>
 800ca52:	4b23      	ldr	r3, [pc, #140]	; (800cae0 <mode+0x368>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d1c1      	bne.n	800c9de <mode+0x266>
				  while(maker_left || maker_right);
 800ca5a:	bf00      	nop
 800ca5c:	4b21      	ldr	r3, [pc, #132]	; (800cae4 <mode+0x36c>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1fb      	bne.n	800ca5c <mode+0x2e4>
 800ca64:	4b1d      	ldr	r3, [pc, #116]	; (800cadc <mode+0x364>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1f7      	bne.n	800ca5c <mode+0x2e4>
				  cross_maker = true;
 800ca6c:	4b1f      	ldr	r3, [pc, #124]	; (800caec <mode+0x374>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	701a      	strb	r2, [r3, #0]
			  if(maker_right && cross_line==0 && maker_left == 0 ){
 800ca72:	e7b4      	b.n	800c9de <mode+0x266>
					  break;
 800ca74:	bf00      	nop
			  }

			 // if(Average_speed<work_ram[26])Average_speed=work_ram[26];
			}

			stop();
 800ca76:	f7ff fc31 	bl	800c2dc <stop>
			fan_pressure(0,0);
 800ca7a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800caf0 <mode+0x378>
 800ca7e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800caf0 <mode+0x378>
 800ca82:	f7ff fd0f 	bl	800c4a4 <fan_pressure>
			lcd_clear();
 800ca86:	f7fc fa0b 	bl	8008ea0 <lcd_clear>
			lcd_printf("%lf",test);
 800ca8a:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <mode+0x38c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fb fc92 	bl	80083b8 <__aeabi_f2d>
 800ca94:	4603      	mov	r3, r0
 800ca96:	460c      	mov	r4, r1
 800ca98:	461a      	mov	r2, r3
 800ca9a:	4623      	mov	r3, r4
 800ca9c:	481a      	ldr	r0, [pc, #104]	; (800cb08 <mode+0x390>)
 800ca9e:	f7fc fa39 	bl	8008f14 <lcd_printf>
			break;
 800caa2:	e005      	b.n	800cab0 <mode+0x338>
		case 6:
			log_play();
 800caa4:	f7fd fcbc 	bl	800a420 <log_play>
			break;
 800caa8:	e002      	b.n	800cab0 <mode+0x338>
		case 7:
			speed_tuning();
 800caaa:	f7ff f8df 	bl	800bc6c <speed_tuning>
			break;
 800caae:	bf00      	nop
		i=mode_Selection(switch_cheack());
 800cab0:	e671      	b.n	800c796 <mode+0x1e>
 800cab2:	bf00      	nop
 800cab4:	08016278 	.word	0x08016278
 800cab8:	08016280 	.word	0x08016280
 800cabc:	2000c0bc 	.word	0x2000c0bc
 800cac0:	42c80000 	.word	0x42c80000
 800cac4:	40000800 	.word	0x40000800
 800cac8:	40000400 	.word	0x40000400
 800cacc:	20014498 	.word	0x20014498
 800cad0:	2000c2b8 	.word	0x2000c2b8
 800cad4:	2000c2ba 	.word	0x2000c2ba
 800cad8:	20014326 	.word	0x20014326
 800cadc:	200143a8 	.word	0x200143a8
 800cae0:	2000c2c8 	.word	0x2000c2c8
 800cae4:	20014494 	.word	0x20014494
 800cae8:	2000c0b0 	.word	0x2000c0b0
 800caec:	2000c250 	.word	0x2000c250
 800caf0:	00000000 	.word	0x00000000
 800caf4:	2000c30c 	.word	0x2000c30c
 800caf8:	2000c302 	.word	0x2000c302
 800cafc:	42f00000 	.word	0x42f00000
 800cb00:	442f0000 	.word	0x442f0000
 800cb04:	2000c2c4 	.word	0x2000c2c4
 800cb08:	08016288 	.word	0x08016288

0800cb0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	int i=0;
//	int z=0;
//	int g=0;
	int cal=0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cb16:	f001 fcbb 	bl	800e490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cb1a:	f000 f869 	bl	800cbf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb1e:	f000 fcc3 	bl	800d4a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800cb22:	f000 fca1 	bl	800d468 <MX_DMA_Init>
  MX_ADC1_Init();
 800cb26:	f000 f8cd 	bl	800ccc4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800cb2a:	f000 f9c5 	bl	800ceb8 <MX_I2C1_Init>
  MX_SPI3_Init();
 800cb2e:	f000 f9f1 	bl	800cf14 <MX_SPI3_Init>
  MX_TIM1_Init();
 800cb32:	f000 fa25 	bl	800cf80 <MX_TIM1_Init>
  MX_TIM3_Init();
 800cb36:	f000 fb0b 	bl	800d150 <MX_TIM3_Init>
  MX_TIM4_Init();
 800cb3a:	f000 fb5d 	bl	800d1f8 <MX_TIM4_Init>
  MX_TIM8_Init();
 800cb3e:	f000 fbe5 	bl	800d30c <MX_TIM8_Init>
  MX_USART6_UART_Init();
 800cb42:	f000 fc67 	bl	800d414 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800cb46:	f000 fbab 	bl	800d2a0 <MX_TIM6_Init>
  MX_TIM2_Init();
 800cb4a:	f000 fa9d 	bl	800d088 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(100);

  init();
 800cb4e:	f7ff f95b 	bl	800be08 <init>
 // ADCinit();

//  brushi_init();
  IMU_init();
 800cb52:	f7fd fe3d 	bl	800a7d0 <IMU_init>
  IMU_init();
 800cb56:	f7fd fe3b 	bl	800a7d0 <IMU_init>
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50)
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 50);
//  fan_pressure(10,0);f
 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 400);
 // Kd = 10;
if(switch_cheack2()==0){
 800cb5a:	f7ff fd2d 	bl	800c5b8 <switch_cheack2>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d112      	bne.n	800cb8a <main+0x7e>
	LED(4);
 800cb64:	2004      	movs	r0, #4
 800cb66:	f7ff fa35 	bl	800bfd4 <LED>
	LED2(4);
 800cb6a:	2004      	movs	r0, #4
 800cb6c:	f7ff faee 	bl	800c14c <LED2>
	HAL_Delay(500);
 800cb70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cb74:	f001 fcfe 	bl	800e574 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 800cb78:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <main+0xcc>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2264      	movs	r2, #100	; 0x64
 800cb7e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100);
 800cb80:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <main+0xcc>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2264      	movs	r2, #100	; 0x64
 800cb86:	641a      	str	r2, [r3, #64]	; 0x40
	while(1);
 800cb88:	e7fe      	b.n	800cb88 <main+0x7c>
}
//  HAL_TIM_Base_Start_IT(&htim6);
 // tuning();
//  second_soeed = 2;
//  log_Cal();
 	 mode();
 800cb8a:	f7ff fdf5 	bl	800c778 <mode>
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 // __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 400);
// Motor(500,500);

//  mode_Selection(1);
LED(5);
 800cb8e:	2005      	movs	r0, #5
 800cb90:	f7ff fa20 	bl	800bfd4 <LED>
LED2(5);
 800cb94:	2005      	movs	r0, #5
 800cb96:	f7ff fad9 	bl	800c14c <LED2>
//  Flash_store();
 // driv_fan(3800);
//  maker_flag=1;
//  driv_flag=2;
//  HAL_TIM_Base_Start_IT(&htim6);
  TIM3-> CNT = 0;
 800cb9a:	4b10      	ldr	r3, [pc, #64]	; (800cbdc <main+0xd0>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	625a      	str	r2, [r3, #36]	; 0x24
//  fan_pressure(15,15);
//mode_Selection(1);
//  TIM3 -> CNT = 32768;
  while (1)
  {
	  read_gyro_data();
 800cba0:	f7fd fe40 	bl	800a824 <read_gyro_data>
//	plan_velo_adress+= 0x04;
//
//	HAL_Delay(1000);

//	 a= analog[0];
	  test =  (a-32768 );
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <main+0xd4>)
 800cba6:	881b      	ldrh	r3, [r3, #0]
 800cba8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800cbac:	ee07 3a90 	vmov	s15, r3
 800cbb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbb4:	4b0b      	ldr	r3, [pc, #44]	; (800cbe4 <main+0xd8>)
 800cbb6:	edc3 7a00 	vstr	s15, [r3]
//	  printf("%d,",analog[10]);
//	  printf("%d,",analog[11]);
//	  printf("%d,\r\n",analog[12]);
//	  printf("%d\r\n",a);
//	  read_gyro_data();
	  a=TIM4 -> CNT;
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <main+0xdc>)
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <main+0xd4>)
 800cbc2:	801a      	strh	r2, [r3, #0]
	  b=TIM3 -> CNT;
 800cbc4:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <main+0xd0>)
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	4b08      	ldr	r3, [pc, #32]	; (800cbec <main+0xe0>)
 800cbcc:	801a      	strh	r2, [r3, #0]
//			  g=0;
//		  }
//		  log_flag= false;
	//  }
	  //printf("%lf\r\n",speedget());
	  HAL_Delay(100);
 800cbce:	2064      	movs	r0, #100	; 0x64
 800cbd0:	f001 fcd0 	bl	800e574 <HAL_Delay>
	  read_gyro_data();
 800cbd4:	e7e4      	b.n	800cba0 <main+0x94>
 800cbd6:	bf00      	nop
 800cbd8:	20014518 	.word	0x20014518
 800cbdc:	40000400 	.word	0x40000400
 800cbe0:	2000c2c0 	.word	0x2000c2c0
 800cbe4:	2000c2c4 	.word	0x2000c2c4
 800cbe8:	40000800 	.word	0x40000800
 800cbec:	2000c2c2 	.word	0x2000c2c2

0800cbf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b094      	sub	sp, #80	; 0x50
 800cbf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cbf6:	f107 0320 	add.w	r3, r7, #32
 800cbfa:	2230      	movs	r2, #48	; 0x30
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f006 fdf5 	bl	80137ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cc04:	f107 030c 	add.w	r3, r7, #12
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	609a      	str	r2, [r3, #8]
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cc14:	2300      	movs	r3, #0
 800cc16:	60bb      	str	r3, [r7, #8]
 800cc18:	4b28      	ldr	r3, [pc, #160]	; (800ccbc <SystemClock_Config+0xcc>)
 800cc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1c:	4a27      	ldr	r2, [pc, #156]	; (800ccbc <SystemClock_Config+0xcc>)
 800cc1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc22:	6413      	str	r3, [r2, #64]	; 0x40
 800cc24:	4b25      	ldr	r3, [pc, #148]	; (800ccbc <SystemClock_Config+0xcc>)
 800cc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc2c:	60bb      	str	r3, [r7, #8]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cc30:	2300      	movs	r3, #0
 800cc32:	607b      	str	r3, [r7, #4]
 800cc34:	4b22      	ldr	r3, [pc, #136]	; (800ccc0 <SystemClock_Config+0xd0>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a21      	ldr	r2, [pc, #132]	; (800ccc0 <SystemClock_Config+0xd0>)
 800cc3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	4b1f      	ldr	r3, [pc, #124]	; (800ccc0 <SystemClock_Config+0xd0>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc48:	607b      	str	r3, [r7, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cc50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cc54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cc56:	2302      	movs	r3, #2
 800cc58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cc5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800cc60:	2306      	movs	r3, #6
 800cc62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800cc64:	23a8      	movs	r3, #168	; 0xa8
 800cc66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cc68:	2302      	movs	r3, #2
 800cc6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cc70:	f107 0320 	add.w	r3, r7, #32
 800cc74:	4618      	mov	r0, r3
 800cc76:	f003 fe0d 	bl	8010894 <HAL_RCC_OscConfig>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800cc80:	f000 fcde 	bl	800d640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cc84:	230f      	movs	r3, #15
 800cc86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cc90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cc94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cc96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800cc9c:	f107 030c 	add.w	r3, r7, #12
 800cca0:	2105      	movs	r1, #5
 800cca2:	4618      	mov	r0, r3
 800cca4:	f004 f866 	bl	8010d74 <HAL_RCC_ClockConfig>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ccae:	f000 fcc7 	bl	800d640 <Error_Handler>
  }
}
 800ccb2:	bf00      	nop
 800ccb4:	3750      	adds	r7, #80	; 0x50
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	40023800 	.word	0x40023800
 800ccc0:	40007000 	.word	0x40007000

0800ccc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ccca:	463b      	mov	r3, r7
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	605a      	str	r2, [r3, #4]
 800ccd2:	609a      	str	r2, [r3, #8]
 800ccd4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ccd6:	4b75      	ldr	r3, [pc, #468]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ccd8:	4a75      	ldr	r2, [pc, #468]	; (800ceb0 <MX_ADC1_Init+0x1ec>)
 800ccda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ccdc:	4b73      	ldr	r3, [pc, #460]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ccde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cce2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cce4:	4b71      	ldr	r3, [pc, #452]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ccea:	4b70      	ldr	r3, [pc, #448]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ccec:	2201      	movs	r2, #1
 800ccee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ccf0:	4b6e      	ldr	r3, [pc, #440]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ccf6:	4b6d      	ldr	r3, [pc, #436]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ccfe:	4b6b      	ldr	r3, [pc, #428]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cd04:	4b69      	ldr	r3, [pc, #420]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd06:	4a6b      	ldr	r2, [pc, #428]	; (800ceb4 <MX_ADC1_Init+0x1f0>)
 800cd08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cd0a:	4b68      	ldr	r3, [pc, #416]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 800cd10:	4b66      	ldr	r3, [pc, #408]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd12:	220d      	movs	r2, #13
 800cd14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800cd16:	4b65      	ldr	r3, [pc, #404]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cd1e:	4b63      	ldr	r3, [pc, #396]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd20:	2201      	movs	r2, #1
 800cd22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cd24:	4861      	ldr	r0, [pc, #388]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd26:	f001 fc47 	bl	800e5b8 <HAL_ADC_Init>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800cd30:	f000 fc86 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800cd34:	2309      	movs	r3, #9
 800cd36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800cd3c:	2307      	movs	r3, #7
 800cd3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd40:	463b      	mov	r3, r7
 800cd42:	4619      	mov	r1, r3
 800cd44:	4859      	ldr	r0, [pc, #356]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd46:	f001 fd81 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800cd50:	f000 fc76 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800cd54:	2308      	movs	r3, #8
 800cd56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800cd58:	2302      	movs	r3, #2
 800cd5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd5c:	463b      	mov	r3, r7
 800cd5e:	4619      	mov	r1, r3
 800cd60:	4852      	ldr	r0, [pc, #328]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd62:	f001 fd73 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800cd6c:	f000 fc68 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800cd70:	230f      	movs	r3, #15
 800cd72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800cd74:	2303      	movs	r3, #3
 800cd76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd78:	463b      	mov	r3, r7
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	484b      	ldr	r0, [pc, #300]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd7e:	f001 fd65 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800cd88:	f000 fc5a 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800cd8c:	230e      	movs	r3, #14
 800cd8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800cd90:	2304      	movs	r3, #4
 800cd92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd94:	463b      	mov	r3, r7
 800cd96:	4619      	mov	r1, r3
 800cd98:	4844      	ldr	r0, [pc, #272]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cd9a:	f001 fd57 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800cda4:	f000 fc4c 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800cda8:	2305      	movs	r3, #5
 800cdaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800cdac:	2305      	movs	r3, #5
 800cdae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cdb0:	463b      	mov	r3, r7
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	483d      	ldr	r0, [pc, #244]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cdb6:	f001 fd49 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800cdc0:	f000 fc3e 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800cdc4:	2304      	movs	r3, #4
 800cdc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800cdc8:	2306      	movs	r3, #6
 800cdca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cdcc:	463b      	mov	r3, r7
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4836      	ldr	r0, [pc, #216]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cdd2:	f001 fd3b 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800cddc:	f000 fc30 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800cde0:	2303      	movs	r3, #3
 800cde2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800cde4:	2307      	movs	r3, #7
 800cde6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cde8:	463b      	mov	r3, r7
 800cdea:	4619      	mov	r1, r3
 800cdec:	482f      	ldr	r0, [pc, #188]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800cdee:	f001 fd2d 	bl	800e84c <HAL_ADC_ConfigChannel>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800cdf8:	f000 fc22 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800ce00:	2308      	movs	r3, #8
 800ce02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce04:	463b      	mov	r3, r7
 800ce06:	4619      	mov	r1, r3
 800ce08:	4828      	ldr	r0, [pc, #160]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ce0a:	f001 fd1f 	bl	800e84c <HAL_ADC_ConfigChannel>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800ce14:	f000 fc14 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800ce1c:	2309      	movs	r3, #9
 800ce1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce20:	463b      	mov	r3, r7
 800ce22:	4619      	mov	r1, r3
 800ce24:	4821      	ldr	r0, [pc, #132]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ce26:	f001 fd11 	bl	800e84c <HAL_ADC_ConfigChannel>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800ce30:	f000 fc06 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800ce34:	2300      	movs	r3, #0
 800ce36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800ce38:	230a      	movs	r3, #10
 800ce3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce3c:	463b      	mov	r3, r7
 800ce3e:	4619      	mov	r1, r3
 800ce40:	481a      	ldr	r0, [pc, #104]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ce42:	f001 fd03 	bl	800e84c <HAL_ADC_ConfigChannel>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800ce4c:	f000 fbf8 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800ce50:	230d      	movs	r3, #13
 800ce52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800ce54:	230b      	movs	r3, #11
 800ce56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce58:	463b      	mov	r3, r7
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4813      	ldr	r0, [pc, #76]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ce5e:	f001 fcf5 	bl	800e84c <HAL_ADC_ConfigChannel>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800ce68:	f000 fbea 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800ce6c:	230c      	movs	r3, #12
 800ce6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800ce70:	230c      	movs	r3, #12
 800ce72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce74:	463b      	mov	r3, r7
 800ce76:	4619      	mov	r1, r3
 800ce78:	480c      	ldr	r0, [pc, #48]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ce7a:	f001 fce7 	bl	800e84c <HAL_ADC_ConfigChannel>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800ce84:	f000 fbdc 	bl	800d640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800ce88:	230b      	movs	r3, #11
 800ce8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800ce8c:	230d      	movs	r3, #13
 800ce8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce90:	463b      	mov	r3, r7
 800ce92:	4619      	mov	r1, r3
 800ce94:	4805      	ldr	r0, [pc, #20]	; (800ceac <MX_ADC1_Init+0x1e8>)
 800ce96:	f001 fcd9 	bl	800e84c <HAL_ADC_ConfigChannel>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800cea0:	f000 fbce 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cea4:	bf00      	nop
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	200143ec 	.word	0x200143ec
 800ceb0:	40012000 	.word	0x40012000
 800ceb4:	0f000001 	.word	0x0f000001

0800ceb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cebc:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <MX_I2C1_Init+0x50>)
 800cebe:	4a13      	ldr	r2, [pc, #76]	; (800cf0c <MX_I2C1_Init+0x54>)
 800cec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800cec2:	4b11      	ldr	r3, [pc, #68]	; (800cf08 <MX_I2C1_Init+0x50>)
 800cec4:	4a12      	ldr	r2, [pc, #72]	; (800cf10 <MX_I2C1_Init+0x58>)
 800cec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cec8:	4b0f      	ldr	r3, [pc, #60]	; (800cf08 <MX_I2C1_Init+0x50>)
 800ceca:	2200      	movs	r2, #0
 800cecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <MX_I2C1_Init+0x50>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ced4:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <MX_I2C1_Init+0x50>)
 800ced6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ceda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cedc:	4b0a      	ldr	r3, [pc, #40]	; (800cf08 <MX_I2C1_Init+0x50>)
 800cede:	2200      	movs	r2, #0
 800cee0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800cee2:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <MX_I2C1_Init+0x50>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cee8:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <MX_I2C1_Init+0x50>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ceee:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <MX_I2C1_Init+0x50>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800cef4:	4804      	ldr	r0, [pc, #16]	; (800cf08 <MX_I2C1_Init+0x50>)
 800cef6:	f003 f88d 	bl	8010014 <HAL_I2C_Init>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800cf00:	f000 fb9e 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cf04:	bf00      	nop
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	20014558 	.word	0x20014558
 800cf0c:	40005400 	.word	0x40005400
 800cf10:	000186a0 	.word	0x000186a0

0800cf14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800cf18:	4b17      	ldr	r3, [pc, #92]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf1a:	4a18      	ldr	r2, [pc, #96]	; (800cf7c <MX_SPI3_Init+0x68>)
 800cf1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800cf1e:	4b16      	ldr	r3, [pc, #88]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf20:	f44f 7282 	mov.w	r2, #260	; 0x104
 800cf24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800cf2c:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800cf32:	4b11      	ldr	r3, [pc, #68]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf34:	2202      	movs	r2, #2
 800cf36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800cf38:	4b0f      	ldr	r3, [pc, #60]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800cf3e:	4b0e      	ldr	r3, [pc, #56]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800cf52:	4b09      	ldr	r3, [pc, #36]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf58:	4b07      	ldr	r3, [pc, #28]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800cf5e:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf60:	220a      	movs	r2, #10
 800cf62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800cf64:	4804      	ldr	r0, [pc, #16]	; (800cf78 <MX_SPI3_Init+0x64>)
 800cf66:	f004 f8d1 	bl	801110c <HAL_SPI_Init>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d001      	beq.n	800cf74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800cf70:	f000 fb66 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800cf74:	bf00      	nop
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	200145ac 	.word	0x200145ac
 800cf7c:	40003c00 	.word	0x40003c00

0800cf80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b092      	sub	sp, #72	; 0x48
 800cf84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cf90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	605a      	str	r2, [r3, #4]
 800cf9a:	609a      	str	r2, [r3, #8]
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	611a      	str	r2, [r3, #16]
 800cfa0:	615a      	str	r2, [r3, #20]
 800cfa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800cfa4:	1d3b      	adds	r3, r7, #4
 800cfa6:	2220      	movs	r2, #32
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f006 fc1f 	bl	80137ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800cfb0:	4b33      	ldr	r3, [pc, #204]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfb2:	4a34      	ldr	r2, [pc, #208]	; (800d084 <MX_TIM1_Init+0x104>)
 800cfb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800cfb6:	4b32      	ldr	r3, [pc, #200]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cfbc:	4b30      	ldr	r3, [pc, #192]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800cfc2:	4b2f      	ldr	r3, [pc, #188]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cfc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cfca:	4b2d      	ldr	r3, [pc, #180]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800cfd0:	4b2b      	ldr	r3, [pc, #172]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cfd6:	4b2a      	ldr	r3, [pc, #168]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800cfdc:	4828      	ldr	r0, [pc, #160]	; (800d080 <MX_TIM1_Init+0x100>)
 800cfde:	f004 fe63 	bl	8011ca8 <HAL_TIM_PWM_Init>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800cfe8:	f000 fb2a 	bl	800d640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cfec:	2300      	movs	r3, #0
 800cfee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cff0:	2300      	movs	r3, #0
 800cff2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800cff4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cff8:	4619      	mov	r1, r3
 800cffa:	4821      	ldr	r0, [pc, #132]	; (800d080 <MX_TIM1_Init+0x100>)
 800cffc:	f005 fbf4 	bl	80127e8 <HAL_TIMEx_MasterConfigSynchronization>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800d006:	f000 fb1b 	bl	800d640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d00a:	2360      	movs	r3, #96	; 0x60
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d012:	2300      	movs	r3, #0
 800d014:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d016:	2300      	movs	r3, #0
 800d018:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d01e:	2300      	movs	r3, #0
 800d020:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d022:	2300      	movs	r3, #0
 800d024:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d02a:	2204      	movs	r2, #4
 800d02c:	4619      	mov	r1, r3
 800d02e:	4814      	ldr	r0, [pc, #80]	; (800d080 <MX_TIM1_Init+0x100>)
 800d030:	f005 f876 	bl	8012120 <HAL_TIM_PWM_ConfigChannel>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800d03a:	f000 fb01 	bl	800d640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d03e:	2300      	movs	r3, #0
 800d040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d042:	2300      	movs	r3, #0
 800d044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d046:	2300      	movs	r3, #0
 800d048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d04e:	2300      	movs	r3, #0
 800d050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d058:	2300      	movs	r3, #0
 800d05a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800d05c:	1d3b      	adds	r3, r7, #4
 800d05e:	4619      	mov	r1, r3
 800d060:	4807      	ldr	r0, [pc, #28]	; (800d080 <MX_TIM1_Init+0x100>)
 800d062:	f005 fc3d 	bl	80128e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800d06c:	f000 fae8 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800d070:	4803      	ldr	r0, [pc, #12]	; (800d080 <MX_TIM1_Init+0x100>)
 800d072:	f001 f807 	bl	800e084 <HAL_TIM_MspPostInit>

}
 800d076:	bf00      	nop
 800d078:	3748      	adds	r7, #72	; 0x48
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200144d8 	.word	0x200144d8
 800d084:	40010000 	.word	0x40010000

0800d088 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08a      	sub	sp, #40	; 0x28
 800d08c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d08e:	f107 0320 	add.w	r3, r7, #32
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d098:	1d3b      	adds	r3, r7, #4
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	605a      	str	r2, [r3, #4]
 800d0a0:	609a      	str	r2, [r3, #8]
 800d0a2:	60da      	str	r2, [r3, #12]
 800d0a4:	611a      	str	r2, [r3, #16]
 800d0a6:	615a      	str	r2, [r3, #20]
 800d0a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d0aa:	4b28      	ldr	r3, [pc, #160]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d0b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d0b2:	4b26      	ldr	r3, [pc, #152]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0b8:	4b24      	ldr	r3, [pc, #144]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800d0be:	4b23      	ldr	r3, [pc, #140]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0c0:	f240 3247 	movw	r2, #839	; 0x347
 800d0c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d0c6:	4b21      	ldr	r3, [pc, #132]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0cc:	4b1f      	ldr	r3, [pc, #124]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d0d2:	481e      	ldr	r0, [pc, #120]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0d4:	f004 fde8 	bl	8011ca8 <HAL_TIM_PWM_Init>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d001      	beq.n	800d0e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d0de:	f000 faaf 	bl	800d640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d0ea:	f107 0320 	add.w	r3, r7, #32
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4816      	ldr	r0, [pc, #88]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d0f2:	f005 fb79 	bl	80127e8 <HAL_TIMEx_MasterConfigSynchronization>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d001      	beq.n	800d100 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800d0fc:	f000 faa0 	bl	800d640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d100:	2360      	movs	r3, #96	; 0x60
 800d102:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d110:	1d3b      	adds	r3, r7, #4
 800d112:	2208      	movs	r2, #8
 800d114:	4619      	mov	r1, r3
 800d116:	480d      	ldr	r0, [pc, #52]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d118:	f005 f802 	bl	8012120 <HAL_TIM_PWM_ConfigChannel>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800d122:	f000 fa8d 	bl	800d640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d126:	1d3b      	adds	r3, r7, #4
 800d128:	220c      	movs	r2, #12
 800d12a:	4619      	mov	r1, r3
 800d12c:	4807      	ldr	r0, [pc, #28]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d12e:	f004 fff7 	bl	8012120 <HAL_TIM_PWM_ConfigChannel>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800d138:	f000 fa82 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d13c:	4803      	ldr	r0, [pc, #12]	; (800d14c <MX_TIM2_Init+0xc4>)
 800d13e:	f000 ffa1 	bl	800e084 <HAL_TIM_MspPostInit>

}
 800d142:	bf00      	nop
 800d144:	3728      	adds	r7, #40	; 0x28
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	20014518 	.word	0x20014518

0800d150 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08c      	sub	sp, #48	; 0x30
 800d154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d156:	f107 030c 	add.w	r3, r7, #12
 800d15a:	2224      	movs	r2, #36	; 0x24
 800d15c:	2100      	movs	r1, #0
 800d15e:	4618      	mov	r0, r3
 800d160:	f006 fb45 	bl	80137ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d164:	1d3b      	adds	r3, r7, #4
 800d166:	2200      	movs	r2, #0
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d16c:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d16e:	4a21      	ldr	r2, [pc, #132]	; (800d1f4 <MX_TIM3_Init+0xa4>)
 800d170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d172:	4b1f      	ldr	r3, [pc, #124]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d174:	2200      	movs	r2, #0
 800d176:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d178:	4b1d      	ldr	r3, [pc, #116]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d17e:	4b1c      	ldr	r3, [pc, #112]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d186:	4b1a      	ldr	r3, [pc, #104]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d188:	2200      	movs	r2, #0
 800d18a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d18c:	4b18      	ldr	r3, [pc, #96]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d18e:	2200      	movs	r2, #0
 800d190:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800d192:	2301      	movs	r3, #1
 800d194:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d196:	2300      	movs	r3, #0
 800d198:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d19a:	2301      	movs	r3, #1
 800d19c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d1b6:	f107 030c 	add.w	r3, r7, #12
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	480c      	ldr	r0, [pc, #48]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d1be:	f004 fddd 	bl	8011d7c <HAL_TIM_Encoder_Init>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d001      	beq.n	800d1cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800d1c8:	f000 fa3a 	bl	800d640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d1d4:	1d3b      	adds	r3, r7, #4
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4805      	ldr	r0, [pc, #20]	; (800d1f0 <MX_TIM3_Init+0xa0>)
 800d1da:	f005 fb05 	bl	80127e8 <HAL_TIMEx_MasterConfigSynchronization>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800d1e4:	f000 fa2c 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800d1e8:	bf00      	nop
 800d1ea:	3730      	adds	r7, #48	; 0x30
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	200143ac 	.word	0x200143ac
 800d1f4:	40000400 	.word	0x40000400

0800d1f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08c      	sub	sp, #48	; 0x30
 800d1fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d1fe:	f107 030c 	add.w	r3, r7, #12
 800d202:	2224      	movs	r2, #36	; 0x24
 800d204:	2100      	movs	r1, #0
 800d206:	4618      	mov	r0, r3
 800d208:	f006 faf1 	bl	80137ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d20c:	1d3b      	adds	r3, r7, #4
 800d20e:	2200      	movs	r2, #0
 800d210:	601a      	str	r2, [r3, #0]
 800d212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d214:	4b20      	ldr	r3, [pc, #128]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d216:	4a21      	ldr	r2, [pc, #132]	; (800d29c <MX_TIM4_Init+0xa4>)
 800d218:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d21a:	4b1f      	ldr	r3, [pc, #124]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d220:	4b1d      	ldr	r3, [pc, #116]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d222:	2200      	movs	r2, #0
 800d224:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800d226:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d22c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d22e:	4b1a      	ldr	r3, [pc, #104]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d230:	2200      	movs	r2, #0
 800d232:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d234:	4b18      	ldr	r3, [pc, #96]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d236:	2200      	movs	r2, #0
 800d238:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800d23a:	2301      	movs	r3, #1
 800d23c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d23e:	2300      	movs	r3, #0
 800d240:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d242:	2301      	movs	r3, #1
 800d244:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d246:	2300      	movs	r3, #0
 800d248:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d24e:	2300      	movs	r3, #0
 800d250:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d252:	2301      	movs	r3, #1
 800d254:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d256:	2300      	movs	r3, #0
 800d258:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d25e:	f107 030c 	add.w	r3, r7, #12
 800d262:	4619      	mov	r1, r3
 800d264:	480c      	ldr	r0, [pc, #48]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d266:	f004 fd89 	bl	8011d7c <HAL_TIM_Encoder_Init>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800d270:	f000 f9e6 	bl	800d640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d274:	2300      	movs	r3, #0
 800d276:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d278:	2300      	movs	r3, #0
 800d27a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d27c:	1d3b      	adds	r3, r7, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4805      	ldr	r0, [pc, #20]	; (800d298 <MX_TIM4_Init+0xa0>)
 800d282:	f005 fab1 	bl	80127e8 <HAL_TIMEx_MasterConfigSynchronization>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800d28c:	f000 f9d8 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d290:	bf00      	nop
 800d292:	3730      	adds	r7, #48	; 0x30
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20014368 	.word	0x20014368
 800d29c:	40000800 	.word	0x40000800

0800d2a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2a6:	463b      	mov	r3, r7
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d2ae:	4b15      	ldr	r3, [pc, #84]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2b0:	4a15      	ldr	r2, [pc, #84]	; (800d308 <MX_TIM6_Init+0x68>)
 800d2b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800d2b4:	4b13      	ldr	r3, [pc, #76]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2b6:	2253      	movs	r2, #83	; 0x53
 800d2b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2ba:	4b12      	ldr	r3, [pc, #72]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800d2c0:	4b10      	ldr	r3, [pc, #64]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d2c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2c8:	4b0e      	ldr	r3, [pc, #56]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d2ce:	480d      	ldr	r0, [pc, #52]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2d0:	f004 fc70 	bl	8011bb4 <HAL_TIM_Base_Init>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800d2da:	f000 f9b1 	bl	800d640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d2e6:	463b      	mov	r3, r7
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4806      	ldr	r0, [pc, #24]	; (800d304 <MX_TIM6_Init+0x64>)
 800d2ec:	f005 fa7c 	bl	80127e8 <HAL_TIMEx_MasterConfigSynchronization>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800d2f6:	f000 f9a3 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d2fa:	bf00      	nop
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	20014498 	.word	0x20014498
 800d308:	40001000 	.word	0x40001000

0800d30c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b092      	sub	sp, #72	; 0x48
 800d310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d316:	2200      	movs	r2, #0
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	605a      	str	r2, [r3, #4]
 800d326:	609a      	str	r2, [r3, #8]
 800d328:	60da      	str	r2, [r3, #12]
 800d32a:	611a      	str	r2, [r3, #16]
 800d32c:	615a      	str	r2, [r3, #20]
 800d32e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d330:	1d3b      	adds	r3, r7, #4
 800d332:	2220      	movs	r2, #32
 800d334:	2100      	movs	r1, #0
 800d336:	4618      	mov	r0, r3
 800d338:	f006 fa59 	bl	80137ee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d33c:	4b33      	ldr	r3, [pc, #204]	; (800d40c <MX_TIM8_Init+0x100>)
 800d33e:	4a34      	ldr	r2, [pc, #208]	; (800d410 <MX_TIM8_Init+0x104>)
 800d340:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800d342:	4b32      	ldr	r3, [pc, #200]	; (800d40c <MX_TIM8_Init+0x100>)
 800d344:	2200      	movs	r2, #0
 800d346:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d348:	4b30      	ldr	r3, [pc, #192]	; (800d40c <MX_TIM8_Init+0x100>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 800d34e:	4b2f      	ldr	r3, [pc, #188]	; (800d40c <MX_TIM8_Init+0x100>)
 800d350:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d354:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d356:	4b2d      	ldr	r3, [pc, #180]	; (800d40c <MX_TIM8_Init+0x100>)
 800d358:	2200      	movs	r2, #0
 800d35a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d35c:	4b2b      	ldr	r3, [pc, #172]	; (800d40c <MX_TIM8_Init+0x100>)
 800d35e:	2200      	movs	r2, #0
 800d360:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d362:	4b2a      	ldr	r3, [pc, #168]	; (800d40c <MX_TIM8_Init+0x100>)
 800d364:	2200      	movs	r2, #0
 800d366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800d368:	4828      	ldr	r0, [pc, #160]	; (800d40c <MX_TIM8_Init+0x100>)
 800d36a:	f004 fc9d 	bl	8011ca8 <HAL_TIM_PWM_Init>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800d374:	f000 f964 	bl	800d640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d378:	2300      	movs	r3, #0
 800d37a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d37c:	2300      	movs	r3, #0
 800d37e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d384:	4619      	mov	r1, r3
 800d386:	4821      	ldr	r0, [pc, #132]	; (800d40c <MX_TIM8_Init+0x100>)
 800d388:	f005 fa2e 	bl	80127e8 <HAL_TIMEx_MasterConfigSynchronization>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d001      	beq.n	800d396 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800d392:	f000 f955 	bl	800d640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d396:	2360      	movs	r3, #96	; 0x60
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d3b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3b6:	2208      	movs	r2, #8
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4814      	ldr	r0, [pc, #80]	; (800d40c <MX_TIM8_Init+0x100>)
 800d3bc:	f004 feb0 	bl	8012120 <HAL_TIM_PWM_ConfigChannel>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800d3c6:	f000 f93b 	bl	800d640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d3de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d3e8:	1d3b      	adds	r3, r7, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4807      	ldr	r0, [pc, #28]	; (800d40c <MX_TIM8_Init+0x100>)
 800d3ee:	f005 fa77 	bl	80128e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800d3f8:	f000 f922 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800d3fc:	4803      	ldr	r0, [pc, #12]	; (800d40c <MX_TIM8_Init+0x100>)
 800d3fe:	f000 fe41 	bl	800e084 <HAL_TIM_MspPostInit>

}
 800d402:	bf00      	nop
 800d404:	3748      	adds	r7, #72	; 0x48
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20014328 	.word	0x20014328
 800d410:	40010400 	.word	0x40010400

0800d414 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800d418:	4b11      	ldr	r3, [pc, #68]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d41a:	4a12      	ldr	r2, [pc, #72]	; (800d464 <MX_USART6_UART_Init+0x50>)
 800d41c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 14400;
 800d41e:	4b10      	ldr	r3, [pc, #64]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d420:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800d424:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d426:	4b0e      	ldr	r3, [pc, #56]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d428:	2200      	movs	r2, #0
 800d42a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d42c:	4b0c      	ldr	r3, [pc, #48]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d42e:	2200      	movs	r2, #0
 800d430:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d432:	4b0b      	ldr	r3, [pc, #44]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d434:	2200      	movs	r2, #0
 800d436:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d438:	4b09      	ldr	r3, [pc, #36]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d43a:	220c      	movs	r2, #12
 800d43c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d43e:	4b08      	ldr	r3, [pc, #32]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d440:	2200      	movs	r2, #0
 800d442:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d444:	4b06      	ldr	r3, [pc, #24]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d446:	2200      	movs	r2, #0
 800d448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800d44a:	4805      	ldr	r0, [pc, #20]	; (800d460 <MX_USART6_UART_Init+0x4c>)
 800d44c:	f005 faae 	bl	80129ac <HAL_UART_Init>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800d456:	f000 f8f3 	bl	800d640 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800d45a:	bf00      	nop
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20014608 	.word	0x20014608
 800d464:	40011400 	.word	0x40011400

0800d468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d46e:	2300      	movs	r3, #0
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <MX_DMA_Init+0x3c>)
 800d474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d476:	4a0b      	ldr	r2, [pc, #44]	; (800d4a4 <MX_DMA_Init+0x3c>)
 800d478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d47c:	6313      	str	r3, [r2, #48]	; 0x30
 800d47e:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <MX_DMA_Init+0x3c>)
 800d480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d486:	607b      	str	r3, [r7, #4]
 800d488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d48a:	2200      	movs	r2, #0
 800d48c:	2100      	movs	r1, #0
 800d48e:	2038      	movs	r0, #56	; 0x38
 800d490:	f001 fd57 	bl	800ef42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d494:	2038      	movs	r0, #56	; 0x38
 800d496:	f001 fd70 	bl	800ef7a <HAL_NVIC_EnableIRQ>

}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	40023800 	.word	0x40023800

0800d4a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	; 0x28
 800d4ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4ae:	f107 0314 	add.w	r3, r7, #20
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	605a      	str	r2, [r3, #4]
 800d4b8:	609a      	str	r2, [r3, #8]
 800d4ba:	60da      	str	r2, [r3, #12]
 800d4bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4be:	2300      	movs	r3, #0
 800d4c0:	613b      	str	r3, [r7, #16]
 800d4c2:	4b5a      	ldr	r3, [pc, #360]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c6:	4a59      	ldr	r2, [pc, #356]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4c8:	f043 0304 	orr.w	r3, r3, #4
 800d4cc:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ce:	4b57      	ldr	r3, [pc, #348]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d2:	f003 0304 	and.w	r3, r3, #4
 800d4d6:	613b      	str	r3, [r7, #16]
 800d4d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60fb      	str	r3, [r7, #12]
 800d4de:	4b53      	ldr	r3, [pc, #332]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e2:	4a52      	ldr	r2, [pc, #328]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4e8:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ea:	4b50      	ldr	r3, [pc, #320]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f2:	60fb      	str	r3, [r7, #12]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	60bb      	str	r3, [r7, #8]
 800d4fa:	4b4c      	ldr	r3, [pc, #304]	; (800d62c <MX_GPIO_Init+0x184>)
 800d4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fe:	4a4b      	ldr	r2, [pc, #300]	; (800d62c <MX_GPIO_Init+0x184>)
 800d500:	f043 0301 	orr.w	r3, r3, #1
 800d504:	6313      	str	r3, [r2, #48]	; 0x30
 800d506:	4b49      	ldr	r3, [pc, #292]	; (800d62c <MX_GPIO_Init+0x184>)
 800d508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50a:	f003 0301 	and.w	r3, r3, #1
 800d50e:	60bb      	str	r3, [r7, #8]
 800d510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d512:	2300      	movs	r3, #0
 800d514:	607b      	str	r3, [r7, #4]
 800d516:	4b45      	ldr	r3, [pc, #276]	; (800d62c <MX_GPIO_Init+0x184>)
 800d518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51a:	4a44      	ldr	r2, [pc, #272]	; (800d62c <MX_GPIO_Init+0x184>)
 800d51c:	f043 0302 	orr.w	r3, r3, #2
 800d520:	6313      	str	r3, [r2, #48]	; 0x30
 800d522:	4b42      	ldr	r3, [pc, #264]	; (800d62c <MX_GPIO_Init+0x184>)
 800d524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d526:	f003 0302 	and.w	r3, r3, #2
 800d52a:	607b      	str	r3, [r7, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d52e:	2300      	movs	r3, #0
 800d530:	603b      	str	r3, [r7, #0]
 800d532:	4b3e      	ldr	r3, [pc, #248]	; (800d62c <MX_GPIO_Init+0x184>)
 800d534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d536:	4a3d      	ldr	r2, [pc, #244]	; (800d62c <MX_GPIO_Init+0x184>)
 800d538:	f043 0308 	orr.w	r3, r3, #8
 800d53c:	6313      	str	r3, [r2, #48]	; 0x30
 800d53e:	4b3b      	ldr	r3, [pc, #236]	; (800d62c <MX_GPIO_Init+0x184>)
 800d540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d542:	f003 0308 	and.w	r3, r3, #8
 800d546:	603b      	str	r3, [r7, #0]
 800d548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800d54a:	2200      	movs	r2, #0
 800d54c:	f247 0130 	movw	r1, #28720	; 0x7030
 800d550:	4837      	ldr	r0, [pc, #220]	; (800d630 <MX_GPIO_Init+0x188>)
 800d552:	f002 fd45 	bl	800ffe0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d556:	2200      	movs	r2, #0
 800d558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d55c:	4835      	ldr	r0, [pc, #212]	; (800d634 <MX_GPIO_Init+0x18c>)
 800d55e:	f002 fd3f 	bl	800ffe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800d562:	2200      	movs	r2, #0
 800d564:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 800d568:	4833      	ldr	r0, [pc, #204]	; (800d638 <MX_GPIO_Init+0x190>)
 800d56a:	f002 fd39 	bl	800ffe0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d56e:	2200      	movs	r2, #0
 800d570:	2104      	movs	r1, #4
 800d572:	4832      	ldr	r0, [pc, #200]	; (800d63c <MX_GPIO_Init+0x194>)
 800d574:	f002 fd34 	bl	800ffe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800d578:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800d57c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d57e:	2300      	movs	r3, #0
 800d580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d582:	2301      	movs	r3, #1
 800d584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d586:	f107 0314 	add.w	r3, r7, #20
 800d58a:	4619      	mov	r1, r3
 800d58c:	4829      	ldr	r0, [pc, #164]	; (800d634 <MX_GPIO_Init+0x18c>)
 800d58e:	f002 fb75 	bl	800fc7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800d592:	f248 0304 	movw	r3, #32772	; 0x8004
 800d596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d598:	2300      	movs	r3, #0
 800d59a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d59c:	2300      	movs	r3, #0
 800d59e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5a0:	f107 0314 	add.w	r3, r7, #20
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4822      	ldr	r0, [pc, #136]	; (800d630 <MX_GPIO_Init+0x188>)
 800d5a8:	f002 fb68 	bl	800fc7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800d5ac:	f247 0330 	movw	r3, #28720	; 0x7030
 800d5b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5be:	f107 0314 	add.w	r3, r7, #20
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	481a      	ldr	r0, [pc, #104]	; (800d630 <MX_GPIO_Init+0x188>)
 800d5c6:	f002 fb59 	bl	800fc7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5dc:	f107 0314 	add.w	r3, r7, #20
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4814      	ldr	r0, [pc, #80]	; (800d634 <MX_GPIO_Init+0x18c>)
 800d5e4:	f002 fb4a 	bl	800fc7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800d5e8:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 800d5ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5fa:	f107 0314 	add.w	r3, r7, #20
 800d5fe:	4619      	mov	r1, r3
 800d600:	480d      	ldr	r0, [pc, #52]	; (800d638 <MX_GPIO_Init+0x190>)
 800d602:	f002 fb3b 	bl	800fc7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d606:	2304      	movs	r3, #4
 800d608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d60a:	2301      	movs	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d60e:	2300      	movs	r3, #0
 800d610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d612:	2300      	movs	r3, #0
 800d614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d616:	f107 0314 	add.w	r3, r7, #20
 800d61a:	4619      	mov	r1, r3
 800d61c:	4807      	ldr	r0, [pc, #28]	; (800d63c <MX_GPIO_Init+0x194>)
 800d61e:	f002 fb2d 	bl	800fc7c <HAL_GPIO_Init>

}
 800d622:	bf00      	nop
 800d624:	3728      	adds	r7, #40	; 0x28
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	40023800 	.word	0x40023800
 800d630:	40020400 	.word	0x40020400
 800d634:	40020800 	.word	0x40020800
 800d638:	40020000 	.word	0x40020000
 800d63c:	40020c00 	.word	0x40020c00

0800d640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d640:	b480      	push	{r7}
 800d642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d644:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d646:	e7fe      	b.n	800d646 <Error_Handler+0x6>

0800d648 <ADCinit>:
uint16_t ADC_Small[SENSOR_NUMBER];
uint16_t ADC_dif[SENSOR_NUMBER];
uint8_t cross_line=0;

extern uint16_t work_ram[BACKUP_FLASH_SECTOR_SIZE] __attribute__ ((aligned(4)));
void ADCinit(){
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08c      	sub	sp, #48	; 0x30
 800d64c:	af00      	add	r7, sp, #0
	Flash_load();
 800d64e:	f7fe fb85 	bl	800bd5c <Flash_load>
	lcd_printf("ADCinit");
 800d652:	4853      	ldr	r0, [pc, #332]	; (800d7a0 <ADCinit+0x158>)
 800d654:	f7fb fc5e 	bl	8008f14 <lcd_printf>
	HAL_Delay(100);
 800d658:	2064      	movs	r0, #100	; 0x64
 800d65a:	f000 ff8b 	bl	800e574 <HAL_Delay>
	uint16_t ADC_Max[SENSOR_NUMBER]={0};
 800d65e:	1d3b      	adds	r3, r7, #4
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	605a      	str	r2, [r3, #4]
 800d666:	609a      	str	r2, [r3, #8]
 800d668:	60da      	str	r2, [r3, #12]
 800d66a:	611a      	str	r2, [r3, #16]
 800d66c:	615a      	str	r2, [r3, #20]
 800d66e:	831a      	strh	r2, [r3, #24]
	uint16_t i;

	for(int z=0;z<SENSOR_NUMBER;z++){
 800d670:	2300      	movs	r3, #0
 800d672:	62bb      	str	r3, [r7, #40]	; 0x28
 800d674:	e008      	b.n	800d688 <ADCinit+0x40>
		ADC_Small[z]=10000;
 800d676:	4a4b      	ldr	r2, [pc, #300]	; (800d7a4 <ADCinit+0x15c>)
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	f242 7110 	movw	r1, #10000	; 0x2710
 800d67e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d684:	3301      	adds	r3, #1
 800d686:	62bb      	str	r3, [r7, #40]	; 0x28
 800d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68a:	2b0c      	cmp	r3, #12
 800d68c:	ddf3      	ble.n	800d676 <ADCinit+0x2e>
	}
	LED2(1);
 800d68e:	2001      	movs	r0, #1
 800d690:	f7fe fd5c 	bl	800c14c <LED2>

	i = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (switch_cheack2())
 800d698:	e037      	b.n	800d70a <ADCinit+0xc2>
	{
		if(analog[i] > ADC_Max[i]){
 800d69a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d69c:	4a42      	ldr	r2, [pc, #264]	; (800d7a8 <ADCinit+0x160>)
 800d69e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d6a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d6aa:	440b      	add	r3, r1
 800d6ac:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d90a      	bls.n	800d6ca <ADCinit+0x82>
			ADC_Max[i] = analog[i];
 800d6b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6b8:	493b      	ldr	r1, [pc, #236]	; (800d7a8 <ADCinit+0x160>)
 800d6ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d6c4:	440b      	add	r3, r1
 800d6c6:	f823 2c2c 	strh.w	r2, [r3, #-44]
		}
		if(analog[i] < ADC_Small[i]){
 800d6ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6cc:	4a36      	ldr	r2, [pc, #216]	; (800d7a8 <ADCinit+0x160>)
 800d6ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d6d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6d4:	4933      	ldr	r1, [pc, #204]	; (800d7a4 <ADCinit+0x15c>)
 800d6d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d207      	bcs.n	800d6ee <ADCinit+0xa6>
			ADC_Small[i] = analog[i];
 800d6de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6e2:	4931      	ldr	r1, [pc, #196]	; (800d7a8 <ADCinit+0x160>)
 800d6e4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800d6e8:	4a2e      	ldr	r2, [pc, #184]	; (800d7a4 <ADCinit+0x15c>)
 800d6ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		i++;
 800d6ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if(i == SENSOR_NUMBER){
 800d6f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6f6:	2b0d      	cmp	r3, #13
 800d6f8:	d101      	bne.n	800d6fe <ADCinit+0xb6>
			i=0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		LED(2);
 800d6fe:	2002      	movs	r0, #2
 800d700:	f7fe fc68 	bl	800bfd4 <LED>
		LED2(2);
 800d704:	2002      	movs	r0, #2
 800d706:	f7fe fd21 	bl	800c14c <LED2>
	while (switch_cheack2())
 800d70a:	f7fe ff55 	bl	800c5b8 <switch_cheack2>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1c2      	bne.n	800d69a <ADCinit+0x52>

	}
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d714:	2300      	movs	r3, #0
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
 800d718:	e024      	b.n	800d764 <ADCinit+0x11c>
		ADC_dif[z] = ADC_Max[z]-ADC_Small[z];
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d722:	4413      	add	r3, r2
 800d724:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 800d728:	491e      	ldr	r1, [pc, #120]	; (800d7a4 <ADCinit+0x15c>)
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	b299      	uxth	r1, r3
 800d734:	4a1d      	ldr	r2, [pc, #116]	; (800d7ac <ADCinit+0x164>)
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		work_ram[z] = ADC_dif[z];
 800d73c:	4a1b      	ldr	r2, [pc, #108]	; (800d7ac <ADCinit+0x164>)
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800d744:	4a1a      	ldr	r2, [pc, #104]	; (800d7b0 <ADCinit+0x168>)
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		work_ram[z+SENSOR_NUMBER] = ADC_Small[z];
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	330d      	adds	r3, #13
 800d750:	4914      	ldr	r1, [pc, #80]	; (800d7a4 <ADCinit+0x15c>)
 800d752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d754:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800d758:	4a15      	ldr	r2, [pc, #84]	; (800d7b0 <ADCinit+0x168>)
 800d75a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	3301      	adds	r3, #1
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	2b0c      	cmp	r3, #12
 800d768:	ddd7      	ble.n	800d71a <ADCinit+0xd2>
	}
	Flash_store();
 800d76a:	f7fe fb07 	bl	800bd7c <Flash_store>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d76e:	2300      	movs	r3, #0
 800d770:	623b      	str	r3, [r7, #32]
 800d772:	e00b      	b.n	800d78c <ADCinit+0x144>
		printf("%d,%d\r\n",z,ADC_Small[z]);
 800d774:	4a0b      	ldr	r2, [pc, #44]	; (800d7a4 <ADCinit+0x15c>)
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d77c:	461a      	mov	r2, r3
 800d77e:	6a39      	ldr	r1, [r7, #32]
 800d780:	480c      	ldr	r0, [pc, #48]	; (800d7b4 <ADCinit+0x16c>)
 800d782:	f006 fc99 	bl	80140b8 <iprintf>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	3301      	adds	r3, #1
 800d78a:	623b      	str	r3, [r7, #32]
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	2b0c      	cmp	r3, #12
 800d790:	ddf0      	ble.n	800d774 <ADCinit+0x12c>
	}
//	for(int z=0;z<SENSOR_NUMBER;z++){
//		printf("%d,%d\r\n",z,ADC_Max[z]);
//	}
	LED2(3);
 800d792:	2003      	movs	r0, #3
 800d794:	f7fe fcda 	bl	800c14c <LED2>

}
 800d798:	bf00      	nop
 800d79a:	3730      	adds	r7, #48	; 0x30
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	0801628c 	.word	0x0801628c
 800d7a4:	20014668 	.word	0x20014668
 800d7a8:	2001430c 	.word	0x2001430c
 800d7ac:	2001464c 	.word	0x2001464c
 800d7b0:	2000c30c 	.word	0x2000c30c
 800d7b4:	08016294 	.word	0x08016294

0800d7b8 <senseGet>:
inline float senseGet(){
 800d7b8:	b5b0      	push	{r4, r5, r7, lr}
 800d7ba:	b0a0      	sub	sp, #128	; 0x80
 800d7bc:	af00      	add	r7, sp, #0
	float sensL=0;
 800d7be:	f04f 0300 	mov.w	r3, #0
 800d7c2:	673b      	str	r3, [r7, #112]	; 0x70
	float sensR=0;
 800d7c4:	f04f 0300 	mov.w	r3, #0
 800d7c8:	66fb      	str	r3, [r7, #108]	; 0x6c
	float sensval=0;
 800d7ca:	f04f 0300 	mov.w	r3, #0
 800d7ce:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t sens[SENSOR_NUMBER];
	float sensRatio[SENSOR_NUMBER];
	static float sens_buff[SENSOR_NUMBER];
	static uint8_t error_count=0;
	uint8_t black= 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
//		}
//		if(sens[i] <= ADC_Small[i]){
//			sens[i] = ADC_Small[i] ;
//		}
//	}
	sensval=0;
 800d7d6:	f04f 0300 	mov.w	r3, #0
 800d7da:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i=0; i<SENSOR_NUMBER; i++){
 800d7dc:	2300      	movs	r3, #0
 800d7de:	677b      	str	r3, [r7, #116]	; 0x74
 800d7e0:	e099      	b.n	800d916 <senseGet+0x15e>
		sens[i] = analog[i];
 800d7e2:	4ad7      	ldr	r2, [pc, #860]	; (800db40 <senseGet+0x388>)
 800d7e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800d7f4:	440b      	add	r3, r1
 800d7f6:	f843 2c48 	str.w	r2, [r3, #-72]
		if(sens[i] >=  (ADC_Small[i]+ADC_dif[i])){
 800d7fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d802:	4413      	add	r3, r2
 800d804:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800d808:	49ce      	ldr	r1, [pc, #824]	; (800db44 <senseGet+0x38c>)
 800d80a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d80c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d810:	4610      	mov	r0, r2
 800d812:	49cd      	ldr	r1, [pc, #820]	; (800db48 <senseGet+0x390>)
 800d814:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d816:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d81a:	4402      	add	r2, r0
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d311      	bcc.n	800d844 <senseGet+0x8c>
			//ADC_dif[i] = sens[i]-ADC_Small[i];
			sens[i] =  (ADC_Small[i]+ADC_dif[i]);
 800d820:	4ac8      	ldr	r2, [pc, #800]	; (800db44 <senseGet+0x38c>)
 800d822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d828:	4619      	mov	r1, r3
 800d82a:	4ac7      	ldr	r2, [pc, #796]	; (800db48 <senseGet+0x390>)
 800d82c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d82e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d832:	440b      	add	r3, r1
 800d834:	461a      	mov	r2, r3
 800d836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800d83e:	440b      	add	r3, r1
 800d840:	f843 2c48 	str.w	r2, [r3, #-72]
		}
		if(sens[i] <= ADC_Small[i]){
 800d844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d84c:	4413      	add	r3, r2
 800d84e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800d852:	49bc      	ldr	r1, [pc, #752]	; (800db44 <senseGet+0x38c>)
 800d854:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d856:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d80b      	bhi.n	800d876 <senseGet+0xbe>
			sens[i] = ADC_Small[i] ;
 800d85e:	4ab9      	ldr	r2, [pc, #740]	; (800db44 <senseGet+0x38c>)
 800d860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d866:	461a      	mov	r2, r3
 800d868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800d870:	440b      	add	r3, r1
 800d872:	f843 2c48 	str.w	r2, [r3, #-72]
		}
		sensRatio[i] = (1000.0f/(float)ADC_dif[i])*((float)(sens[i]-(float)ADC_Small[i]));
 800d876:	4ab4      	ldr	r2, [pc, #720]	; (800db48 <senseGet+0x390>)
 800d878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d87a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	eddf 6ab1 	vldr	s13, [pc, #708]	; 800db4c <senseGet+0x394>
 800d88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d896:	4413      	add	r3, r2
 800d898:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800d89c:	ee07 3a90 	vmov	s15, r3
 800d8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a4:	4aa7      	ldr	r2, [pc, #668]	; (800db44 <senseGet+0x38c>)
 800d8a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8ac:	ee07 3a90 	vmov	s15, r3
 800d8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d8c4:	4413      	add	r3, r2
 800d8c6:	3b7c      	subs	r3, #124	; 0x7c
 800d8c8:	edc3 7a00 	vstr	s15, [r3]
//		sensRatio[i] = (sensRatio_buff[i]+sensRatio[i])/2;
//		sensRatio_buff[i]=sensRatio[i];
		sensval = sensval+sensRatio[i];
 800d8cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d8d4:	4413      	add	r3, r2
 800d8d6:	3b7c      	subs	r3, #124	; 0x7c
 800d8d8:	edd3 7a00 	vldr	s15, [r3]
 800d8dc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800d8e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8e4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		if(sensRatio[i] >= 600) black++;
 800d8e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d8f0:	4413      	add	r3, r2
 800d8f2:	3b7c      	subs	r3, #124	; 0x7c
 800d8f4:	edd3 7a00 	vldr	s15, [r3]
 800d8f8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800db50 <senseGet+0x398>
 800d8fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d904:	db04      	blt.n	800d910 <senseGet+0x158>
 800d906:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800d90a:	3301      	adds	r3, #1
 800d90c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for(int i=0; i<SENSOR_NUMBER; i++){
 800d910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d912:	3301      	adds	r3, #1
 800d914:	677b      	str	r3, [r7, #116]	; 0x74
 800d916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d918:	2b0c      	cmp	r3, #12
 800d91a:	f77f af62 	ble.w	800d7e2 <senseGet+0x2a>
//		if(i<=5)sensL += sensRatio[i];
//		if(i>=7)sensR += sensRatio[i];
	}
	sensL = sensRatio[5]+sensRatio[4]*1.4+sensRatio[3]*1.8+sensRatio[2]*2.2+sensRatio[1]*2.6+sensRatio[0]*3.0;
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	4618      	mov	r0, r3
 800d922:	f7fa fd49 	bl	80083b8 <__aeabi_f2d>
 800d926:	4604      	mov	r4, r0
 800d928:	460d      	mov	r5, r1
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fa fd43 	bl	80083b8 <__aeabi_f2d>
 800d932:	a37b      	add	r3, pc, #492	; (adr r3, 800db20 <senseGet+0x368>)
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f7fa fd96 	bl	8008468 <__aeabi_dmul>
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	4620      	mov	r0, r4
 800d942:	4629      	mov	r1, r5
 800d944:	f7fa fbda 	bl	80080fc <__adddf3>
 800d948:	4603      	mov	r3, r0
 800d94a:	460c      	mov	r4, r1
 800d94c:	4625      	mov	r5, r4
 800d94e:	461c      	mov	r4, r3
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	4618      	mov	r0, r3
 800d954:	f7fa fd30 	bl	80083b8 <__aeabi_f2d>
 800d958:	a373      	add	r3, pc, #460	; (adr r3, 800db28 <senseGet+0x370>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f7fa fd83 	bl	8008468 <__aeabi_dmul>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	4620      	mov	r0, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	f7fa fbc7 	bl	80080fc <__adddf3>
 800d96e:	4603      	mov	r3, r0
 800d970:	460c      	mov	r4, r1
 800d972:	4625      	mov	r5, r4
 800d974:	461c      	mov	r4, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fa fd1d 	bl	80083b8 <__aeabi_f2d>
 800d97e:	a36c      	add	r3, pc, #432	; (adr r3, 800db30 <senseGet+0x378>)
 800d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d984:	f7fa fd70 	bl	8008468 <__aeabi_dmul>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4620      	mov	r0, r4
 800d98e:	4629      	mov	r1, r5
 800d990:	f7fa fbb4 	bl	80080fc <__adddf3>
 800d994:	4603      	mov	r3, r0
 800d996:	460c      	mov	r4, r1
 800d998:	4625      	mov	r5, r4
 800d99a:	461c      	mov	r4, r3
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fa fd0a 	bl	80083b8 <__aeabi_f2d>
 800d9a4:	a364      	add	r3, pc, #400	; (adr r3, 800db38 <senseGet+0x380>)
 800d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9aa:	f7fa fd5d 	bl	8008468 <__aeabi_dmul>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	f7fa fba1 	bl	80080fc <__adddf3>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	460c      	mov	r4, r1
 800d9be:	4625      	mov	r5, r4
 800d9c0:	461c      	mov	r4, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fa fcf7 	bl	80083b8 <__aeabi_f2d>
 800d9ca:	f04f 0200 	mov.w	r2, #0
 800d9ce:	4b61      	ldr	r3, [pc, #388]	; (800db54 <senseGet+0x39c>)
 800d9d0:	f7fa fd4a 	bl	8008468 <__aeabi_dmul>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	4620      	mov	r0, r4
 800d9da:	4629      	mov	r1, r5
 800d9dc:	f7fa fb8e 	bl	80080fc <__adddf3>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	460c      	mov	r4, r1
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	f7fb f816 	bl	8008a18 <__aeabi_d2f>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	673b      	str	r3, [r7, #112]	; 0x70
	sensR = sensRatio[7]+sensRatio[8]*1.4+sensRatio[9]*1.8+sensRatio[10]*2.2+sensRatio[11]*2.6+sensRatio[12]*3.0;
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fa fce0 	bl	80083b8 <__aeabi_f2d>
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	460d      	mov	r5, r1
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fa fcda 	bl	80083b8 <__aeabi_f2d>
 800da04:	a346      	add	r3, pc, #280	; (adr r3, 800db20 <senseGet+0x368>)
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	f7fa fd2d 	bl	8008468 <__aeabi_dmul>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4620      	mov	r0, r4
 800da14:	4629      	mov	r1, r5
 800da16:	f7fa fb71 	bl	80080fc <__adddf3>
 800da1a:	4603      	mov	r3, r0
 800da1c:	460c      	mov	r4, r1
 800da1e:	4625      	mov	r5, r4
 800da20:	461c      	mov	r4, r3
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	4618      	mov	r0, r3
 800da26:	f7fa fcc7 	bl	80083b8 <__aeabi_f2d>
 800da2a:	a33f      	add	r3, pc, #252	; (adr r3, 800db28 <senseGet+0x370>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f7fa fd1a 	bl	8008468 <__aeabi_dmul>
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	4620      	mov	r0, r4
 800da3a:	4629      	mov	r1, r5
 800da3c:	f7fa fb5e 	bl	80080fc <__adddf3>
 800da40:	4603      	mov	r3, r0
 800da42:	460c      	mov	r4, r1
 800da44:	4625      	mov	r5, r4
 800da46:	461c      	mov	r4, r3
 800da48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fa fcb4 	bl	80083b8 <__aeabi_f2d>
 800da50:	a337      	add	r3, pc, #220	; (adr r3, 800db30 <senseGet+0x378>)
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	f7fa fd07 	bl	8008468 <__aeabi_dmul>
 800da5a:	4602      	mov	r2, r0
 800da5c:	460b      	mov	r3, r1
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7fa fb4b 	bl	80080fc <__adddf3>
 800da66:	4603      	mov	r3, r0
 800da68:	460c      	mov	r4, r1
 800da6a:	4625      	mov	r5, r4
 800da6c:	461c      	mov	r4, r3
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	4618      	mov	r0, r3
 800da72:	f7fa fca1 	bl	80083b8 <__aeabi_f2d>
 800da76:	a330      	add	r3, pc, #192	; (adr r3, 800db38 <senseGet+0x380>)
 800da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7c:	f7fa fcf4 	bl	8008468 <__aeabi_dmul>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4620      	mov	r0, r4
 800da86:	4629      	mov	r1, r5
 800da88:	f7fa fb38 	bl	80080fc <__adddf3>
 800da8c:	4603      	mov	r3, r0
 800da8e:	460c      	mov	r4, r1
 800da90:	4625      	mov	r5, r4
 800da92:	461c      	mov	r4, r3
 800da94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da96:	4618      	mov	r0, r3
 800da98:	f7fa fc8e 	bl	80083b8 <__aeabi_f2d>
 800da9c:	f04f 0200 	mov.w	r2, #0
 800daa0:	4b2c      	ldr	r3, [pc, #176]	; (800db54 <senseGet+0x39c>)
 800daa2:	f7fa fce1 	bl	8008468 <__aeabi_dmul>
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7fa fb25 	bl	80080fc <__adddf3>
 800dab2:	4603      	mov	r3, r0
 800dab4:	460c      	mov	r4, r1
 800dab6:	4618      	mov	r0, r3
 800dab8:	4621      	mov	r1, r4
 800daba:	f7fa ffad 	bl	8008a18 <__aeabi_d2f>
 800dabe:	4603      	mov	r3, r0
 800dac0:	66fb      	str	r3, [r7, #108]	; 0x6c
//		sensR += sensRatio[i];
//	}
	//if ((sensL+sensR)/12<=400){
//	if ((sensRatio[0]+sensRatio[12])/2<=500 /*|| (sensRatio[1]+sensRatio[11])/2 <= 650*/) {
//	if ((sensRatio[0]<=800 && sensRatio[12]<=800) && (sensRatio[1]<=800 && sensRatio[11]<=800)) {
	if ((sensRatio[0]<=600 || sensRatio[1]<=500) && (sensRatio[11]<=500 || sensRatio[12]<=600) && sensRatio[6]<=800) {
 800dac2:	edd7 7a01 	vldr	s15, [r7, #4]
 800dac6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800db50 <senseGet+0x398>
 800daca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad2:	d908      	bls.n	800dae6 <senseGet+0x32e>
 800dad4:	edd7 7a02 	vldr	s15, [r7, #8]
 800dad8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800db58 <senseGet+0x3a0>
 800dadc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae4:	d842      	bhi.n	800db6c <senseGet+0x3b4>
 800dae6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800daea:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800db58 <senseGet+0x3a0>
 800daee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	d908      	bls.n	800db0a <senseGet+0x352>
 800daf8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dafc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800db50 <senseGet+0x398>
 800db00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db08:	d830      	bhi.n	800db6c <senseGet+0x3b4>
 800db0a:	edd7 7a07 	vldr	s15, [r7, #28]
 800db0e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800db5c <senseGet+0x3a4>
 800db12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1a:	d827      	bhi.n	800db6c <senseGet+0x3b4>
 800db1c:	e020      	b.n	800db60 <senseGet+0x3a8>
 800db1e:	bf00      	nop
 800db20:	66666666 	.word	0x66666666
 800db24:	3ff66666 	.word	0x3ff66666
 800db28:	cccccccd 	.word	0xcccccccd
 800db2c:	3ffccccc 	.word	0x3ffccccc
 800db30:	9999999a 	.word	0x9999999a
 800db34:	40019999 	.word	0x40019999
 800db38:	cccccccd 	.word	0xcccccccd
 800db3c:	4004cccc 	.word	0x4004cccc
 800db40:	2001430c 	.word	0x2001430c
 800db44:	20014668 	.word	0x20014668
 800db48:	2001464c 	.word	0x2001464c
 800db4c:	447a0000 	.word	0x447a0000
 800db50:	44160000 	.word	0x44160000
 800db54:	40080000 	.word	0x40080000
 800db58:	43fa0000 	.word	0x43fa0000
 800db5c:	44480000 	.word	0x44480000
		cross_line=true;
 800db60:	4b18      	ldr	r3, [pc, #96]	; (800dbc4 <senseGet+0x40c>)
 800db62:	2201      	movs	r2, #1
 800db64:	701a      	strb	r2, [r3, #0]
		cross_flag=0;
 800db66:	4b18      	ldr	r3, [pc, #96]	; (800dbc8 <senseGet+0x410>)
 800db68:	2200      	movs	r2, #0
 800db6a:	701a      	strb	r2, [r3, #0]
//		if(sensRatio[i] >= 600) black++;
//	}

	//if((sensL-sensR) >=  )
//	if ((sensRatio[6]>=900) && (sensRatio[5])>=900 && (sensRatio[7])>=900) error_count++;
	if(black >= 13){
 800db6c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800db70:	2b0c      	cmp	r3, #12
 800db72:	d909      	bls.n	800db88 <senseGet+0x3d0>
		error_count++;
 800db74:	4b15      	ldr	r3, [pc, #84]	; (800dbcc <senseGet+0x414>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	3301      	adds	r3, #1
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	4b13      	ldr	r3, [pc, #76]	; (800dbcc <senseGet+0x414>)
 800db7e:	701a      	strb	r2, [r3, #0]
		black=0;
 800db80:	2300      	movs	r3, #0
 800db82:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800db86:	e005      	b.n	800db94 <senseGet+0x3dc>
	}
	else {
		error_count=0;
 800db88:	4b10      	ldr	r3, [pc, #64]	; (800dbcc <senseGet+0x414>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	701a      	strb	r2, [r3, #0]
		black=0;
 800db8e:	2300      	movs	r3, #0
 800db90:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	}
	//if ((sensRatio[0]<=900 && sensRatio[12]<=900)) error_count++;
	//if ((sensRatio[6])>=700) error_count++;
//	else if ((sensRatio[6])<=700)error_count=0;
	if(error_count>110)error();
 800db94:	4b0d      	ldr	r3, [pc, #52]	; (800dbcc <senseGet+0x414>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b6e      	cmp	r3, #110	; 0x6e
 800db9a:	d901      	bls.n	800dba0 <senseGet+0x3e8>
 800db9c:	f7fe fb84 	bl	800c2a8 <error>
	return (sensL-sensR)/sensval;
 800dba0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800dba4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dbac:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800dbb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800dbb4:	eef0 7a66 	vmov.f32	s15, s13
	//return sensRatio[6];

}
 800dbb8:	eeb0 0a67 	vmov.f32	s0, s15
 800dbbc:	3780      	adds	r7, #128	; 0x80
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	2000c2c8 	.word	0x2000c2c8
 800dbc8:	2000c2b9 	.word	0x2000c2b9
 800dbcc:	2000c2c9 	.word	0x2000c2c9

0800dbd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	607b      	str	r3, [r7, #4]
 800dbda:	4b10      	ldr	r3, [pc, #64]	; (800dc1c <HAL_MspInit+0x4c>)
 800dbdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbde:	4a0f      	ldr	r2, [pc, #60]	; (800dc1c <HAL_MspInit+0x4c>)
 800dbe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dbe4:	6453      	str	r3, [r2, #68]	; 0x44
 800dbe6:	4b0d      	ldr	r3, [pc, #52]	; (800dc1c <HAL_MspInit+0x4c>)
 800dbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbee:	607b      	str	r3, [r7, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	603b      	str	r3, [r7, #0]
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <HAL_MspInit+0x4c>)
 800dbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbfa:	4a08      	ldr	r2, [pc, #32]	; (800dc1c <HAL_MspInit+0x4c>)
 800dbfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc00:	6413      	str	r3, [r2, #64]	; 0x40
 800dc02:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <HAL_MspInit+0x4c>)
 800dc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dc0e:	bf00      	nop
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	40023800 	.word	0x40023800

0800dc20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b08c      	sub	sp, #48	; 0x30
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc28:	f107 031c 	add.w	r3, r7, #28
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	605a      	str	r2, [r3, #4]
 800dc32:	609a      	str	r2, [r3, #8]
 800dc34:	60da      	str	r2, [r3, #12]
 800dc36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a49      	ldr	r2, [pc, #292]	; (800dd64 <HAL_ADC_MspInit+0x144>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	f040 808c 	bne.w	800dd5c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800dc44:	2300      	movs	r3, #0
 800dc46:	61bb      	str	r3, [r7, #24]
 800dc48:	4b47      	ldr	r3, [pc, #284]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc4c:	4a46      	ldr	r2, [pc, #280]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc52:	6453      	str	r3, [r2, #68]	; 0x44
 800dc54:	4b44      	ldr	r3, [pc, #272]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc5c:	61bb      	str	r3, [r7, #24]
 800dc5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dc60:	2300      	movs	r3, #0
 800dc62:	617b      	str	r3, [r7, #20]
 800dc64:	4b40      	ldr	r3, [pc, #256]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc68:	4a3f      	ldr	r2, [pc, #252]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc6a:	f043 0304 	orr.w	r3, r3, #4
 800dc6e:	6313      	str	r3, [r2, #48]	; 0x30
 800dc70:	4b3d      	ldr	r3, [pc, #244]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	617b      	str	r3, [r7, #20]
 800dc7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	613b      	str	r3, [r7, #16]
 800dc80:	4b39      	ldr	r3, [pc, #228]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc84:	4a38      	ldr	r2, [pc, #224]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	6313      	str	r3, [r2, #48]	; 0x30
 800dc8c:	4b36      	ldr	r3, [pc, #216]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	613b      	str	r3, [r7, #16]
 800dc96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc98:	2300      	movs	r3, #0
 800dc9a:	60fb      	str	r3, [r7, #12]
 800dc9c:	4b32      	ldr	r3, [pc, #200]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca0:	4a31      	ldr	r2, [pc, #196]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dca2:	f043 0302 	orr.w	r3, r3, #2
 800dca6:	6313      	str	r3, [r2, #48]	; 0x30
 800dca8:	4b2f      	ldr	r3, [pc, #188]	; (800dd68 <HAL_ADC_MspInit+0x148>)
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcac:	f003 0302 	and.w	r3, r3, #2
 800dcb0:	60fb      	str	r3, [r7, #12]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800dcb4:	233e      	movs	r3, #62	; 0x3e
 800dcb6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dcc0:	f107 031c 	add.w	r3, r7, #28
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4829      	ldr	r0, [pc, #164]	; (800dd6c <HAL_ADC_MspInit+0x14c>)
 800dcc8:	f001 ffd8 	bl	800fc7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800dccc:	233f      	movs	r3, #63	; 0x3f
 800dcce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcd8:	f107 031c 	add.w	r3, r7, #28
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4824      	ldr	r0, [pc, #144]	; (800dd70 <HAL_ADC_MspInit+0x150>)
 800dce0:	f001 ffcc 	bl	800fc7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800dce4:	2303      	movs	r3, #3
 800dce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dce8:	2303      	movs	r3, #3
 800dcea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcec:	2300      	movs	r3, #0
 800dcee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcf0:	f107 031c 	add.w	r3, r7, #28
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	481f      	ldr	r0, [pc, #124]	; (800dd74 <HAL_ADC_MspInit+0x154>)
 800dcf8:	f001 ffc0 	bl	800fc7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800dcfc:	4b1e      	ldr	r3, [pc, #120]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dcfe:	4a1f      	ldr	r2, [pc, #124]	; (800dd7c <HAL_ADC_MspInit+0x15c>)
 800dd00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800dd02:	4b1d      	ldr	r3, [pc, #116]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dd08:	4b1b      	ldr	r3, [pc, #108]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dd0e:	4b1a      	ldr	r3, [pc, #104]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800dd14:	4b18      	ldr	r3, [pc, #96]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dd1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dd1c:	4b16      	ldr	r3, [pc, #88]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dd24:	4b14      	ldr	r3, [pc, #80]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dd2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800dd2c:	4b12      	ldr	r3, [pc, #72]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800dd34:	4b10      	ldr	r3, [pc, #64]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800dd3a:	4b0f      	ldr	r3, [pc, #60]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800dd40:	480d      	ldr	r0, [pc, #52]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd42:	f001 f935 	bl	800efb0 <HAL_DMA_Init>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800dd4c:	f7ff fc78 	bl	800d640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a09      	ldr	r2, [pc, #36]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd54:	639a      	str	r2, [r3, #56]	; 0x38
 800dd56:	4a08      	ldr	r2, [pc, #32]	; (800dd78 <HAL_ADC_MspInit+0x158>)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800dd5c:	bf00      	nop
 800dd5e:	3730      	adds	r7, #48	; 0x30
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	40012000 	.word	0x40012000
 800dd68:	40023800 	.word	0x40023800
 800dd6c:	40020800 	.word	0x40020800
 800dd70:	40020000 	.word	0x40020000
 800dd74:	40020400 	.word	0x40020400
 800dd78:	20014434 	.word	0x20014434
 800dd7c:	40026410 	.word	0x40026410

0800dd80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08a      	sub	sp, #40	; 0x28
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd88:	f107 0314 	add.w	r3, r7, #20
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	605a      	str	r2, [r3, #4]
 800dd92:	609a      	str	r2, [r3, #8]
 800dd94:	60da      	str	r2, [r3, #12]
 800dd96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a19      	ldr	r2, [pc, #100]	; (800de04 <HAL_I2C_MspInit+0x84>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d12c      	bne.n	800ddfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dda2:	2300      	movs	r3, #0
 800dda4:	613b      	str	r3, [r7, #16]
 800dda6:	4b18      	ldr	r3, [pc, #96]	; (800de08 <HAL_I2C_MspInit+0x88>)
 800dda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddaa:	4a17      	ldr	r2, [pc, #92]	; (800de08 <HAL_I2C_MspInit+0x88>)
 800ddac:	f043 0302 	orr.w	r3, r3, #2
 800ddb0:	6313      	str	r3, [r2, #48]	; 0x30
 800ddb2:	4b15      	ldr	r3, [pc, #84]	; (800de08 <HAL_I2C_MspInit+0x88>)
 800ddb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb6:	f003 0302 	and.w	r3, r3, #2
 800ddba:	613b      	str	r3, [r7, #16]
 800ddbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ddbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ddc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ddc4:	2312      	movs	r3, #18
 800ddc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ddd0:	2304      	movs	r3, #4
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ddd4:	f107 0314 	add.w	r3, r7, #20
 800ddd8:	4619      	mov	r1, r3
 800ddda:	480c      	ldr	r0, [pc, #48]	; (800de0c <HAL_I2C_MspInit+0x8c>)
 800dddc:	f001 ff4e 	bl	800fc7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800dde0:	2300      	movs	r3, #0
 800dde2:	60fb      	str	r3, [r7, #12]
 800dde4:	4b08      	ldr	r3, [pc, #32]	; (800de08 <HAL_I2C_MspInit+0x88>)
 800dde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde8:	4a07      	ldr	r2, [pc, #28]	; (800de08 <HAL_I2C_MspInit+0x88>)
 800ddea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddee:	6413      	str	r3, [r2, #64]	; 0x40
 800ddf0:	4b05      	ldr	r3, [pc, #20]	; (800de08 <HAL_I2C_MspInit+0x88>)
 800ddf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ddfc:	bf00      	nop
 800ddfe:	3728      	adds	r7, #40	; 0x28
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	40005400 	.word	0x40005400
 800de08:	40023800 	.word	0x40023800
 800de0c:	40020400 	.word	0x40020400

0800de10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b08a      	sub	sp, #40	; 0x28
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de18:	f107 0314 	add.w	r3, r7, #20
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	605a      	str	r2, [r3, #4]
 800de22:	609a      	str	r2, [r3, #8]
 800de24:	60da      	str	r2, [r3, #12]
 800de26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a19      	ldr	r2, [pc, #100]	; (800de94 <HAL_SPI_MspInit+0x84>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d12c      	bne.n	800de8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800de32:	2300      	movs	r3, #0
 800de34:	613b      	str	r3, [r7, #16]
 800de36:	4b18      	ldr	r3, [pc, #96]	; (800de98 <HAL_SPI_MspInit+0x88>)
 800de38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <HAL_SPI_MspInit+0x88>)
 800de3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de40:	6413      	str	r3, [r2, #64]	; 0x40
 800de42:	4b15      	ldr	r3, [pc, #84]	; (800de98 <HAL_SPI_MspInit+0x88>)
 800de44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de4a:	613b      	str	r3, [r7, #16]
 800de4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	4b11      	ldr	r3, [pc, #68]	; (800de98 <HAL_SPI_MspInit+0x88>)
 800de54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de56:	4a10      	ldr	r2, [pc, #64]	; (800de98 <HAL_SPI_MspInit+0x88>)
 800de58:	f043 0304 	orr.w	r3, r3, #4
 800de5c:	6313      	str	r3, [r2, #48]	; 0x30
 800de5e:	4b0e      	ldr	r3, [pc, #56]	; (800de98 <HAL_SPI_MspInit+0x88>)
 800de60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de62:	f003 0304 	and.w	r3, r3, #4
 800de66:	60fb      	str	r3, [r7, #12]
 800de68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800de6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800de6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de70:	2302      	movs	r3, #2
 800de72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de78:	2303      	movs	r3, #3
 800de7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800de7c:	2306      	movs	r3, #6
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de80:	f107 0314 	add.w	r3, r7, #20
 800de84:	4619      	mov	r1, r3
 800de86:	4805      	ldr	r0, [pc, #20]	; (800de9c <HAL_SPI_MspInit+0x8c>)
 800de88:	f001 fef8 	bl	800fc7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800de8c:	bf00      	nop
 800de8e:	3728      	adds	r7, #40	; 0x28
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	40003c00 	.word	0x40003c00
 800de98:	40023800 	.word	0x40023800
 800de9c:	40020800 	.word	0x40020800

0800dea0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a1f      	ldr	r2, [pc, #124]	; (800df2c <HAL_TIM_PWM_MspInit+0x8c>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d10e      	bne.n	800ded0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800deb2:	2300      	movs	r3, #0
 800deb4:	617b      	str	r3, [r7, #20]
 800deb6:	4b1e      	ldr	r3, [pc, #120]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800deb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deba:	4a1d      	ldr	r2, [pc, #116]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800debc:	f043 0301 	orr.w	r3, r3, #1
 800dec0:	6453      	str	r3, [r2, #68]	; 0x44
 800dec2:	4b1b      	ldr	r3, [pc, #108]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800dec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	617b      	str	r3, [r7, #20]
 800decc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800dece:	e026      	b.n	800df1e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ded8:	d10e      	bne.n	800def8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800deda:	2300      	movs	r3, #0
 800dedc:	613b      	str	r3, [r7, #16]
 800dede:	4b14      	ldr	r3, [pc, #80]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800dee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee2:	4a13      	ldr	r2, [pc, #76]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800dee4:	f043 0301 	orr.w	r3, r3, #1
 800dee8:	6413      	str	r3, [r2, #64]	; 0x40
 800deea:	4b11      	ldr	r3, [pc, #68]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800deec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	613b      	str	r3, [r7, #16]
 800def4:	693b      	ldr	r3, [r7, #16]
}
 800def6:	e012      	b.n	800df1e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a0d      	ldr	r2, [pc, #52]	; (800df34 <HAL_TIM_PWM_MspInit+0x94>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d10d      	bne.n	800df1e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800df02:	2300      	movs	r3, #0
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	4b0a      	ldr	r3, [pc, #40]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800df08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df0a:	4a09      	ldr	r2, [pc, #36]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800df0c:	f043 0302 	orr.w	r3, r3, #2
 800df10:	6453      	str	r3, [r2, #68]	; 0x44
 800df12:	4b07      	ldr	r3, [pc, #28]	; (800df30 <HAL_TIM_PWM_MspInit+0x90>)
 800df14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	68fb      	ldr	r3, [r7, #12]
}
 800df1e:	bf00      	nop
 800df20:	371c      	adds	r7, #28
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	40010000 	.word	0x40010000
 800df30:	40023800 	.word	0x40023800
 800df34:	40010400 	.word	0x40010400

0800df38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08c      	sub	sp, #48	; 0x30
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df40:	f107 031c 	add.w	r3, r7, #28
 800df44:	2200      	movs	r2, #0
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	605a      	str	r2, [r3, #4]
 800df4a:	609a      	str	r2, [r3, #8]
 800df4c:	60da      	str	r2, [r3, #12]
 800df4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a32      	ldr	r2, [pc, #200]	; (800e020 <HAL_TIM_Encoder_MspInit+0xe8>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d12c      	bne.n	800dfb4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800df5a:	2300      	movs	r3, #0
 800df5c:	61bb      	str	r3, [r7, #24]
 800df5e:	4b31      	ldr	r3, [pc, #196]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800df60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df62:	4a30      	ldr	r2, [pc, #192]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800df64:	f043 0302 	orr.w	r3, r3, #2
 800df68:	6413      	str	r3, [r2, #64]	; 0x40
 800df6a:	4b2e      	ldr	r3, [pc, #184]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800df6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df6e:	f003 0302 	and.w	r3, r3, #2
 800df72:	61bb      	str	r3, [r7, #24]
 800df74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df76:	2300      	movs	r3, #0
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	4b2a      	ldr	r3, [pc, #168]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800df7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df7e:	4a29      	ldr	r2, [pc, #164]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800df80:	f043 0301 	orr.w	r3, r3, #1
 800df84:	6313      	str	r3, [r2, #48]	; 0x30
 800df86:	4b27      	ldr	r3, [pc, #156]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800df88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	617b      	str	r3, [r7, #20]
 800df90:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800df92:	23c0      	movs	r3, #192	; 0xc0
 800df94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df96:	2302      	movs	r3, #2
 800df98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df9a:	2300      	movs	r3, #0
 800df9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800dfa2:	2302      	movs	r3, #2
 800dfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfa6:	f107 031c 	add.w	r3, r7, #28
 800dfaa:	4619      	mov	r1, r3
 800dfac:	481e      	ldr	r0, [pc, #120]	; (800e028 <HAL_TIM_Encoder_MspInit+0xf0>)
 800dfae:	f001 fe65 	bl	800fc7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800dfb2:	e030      	b.n	800e016 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a1c      	ldr	r2, [pc, #112]	; (800e02c <HAL_TIM_Encoder_MspInit+0xf4>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d12b      	bne.n	800e016 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	613b      	str	r3, [r7, #16]
 800dfc2:	4b18      	ldr	r3, [pc, #96]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800dfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfc6:	4a17      	ldr	r2, [pc, #92]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800dfc8:	f043 0304 	orr.w	r3, r3, #4
 800dfcc:	6413      	str	r3, [r2, #64]	; 0x40
 800dfce:	4b15      	ldr	r3, [pc, #84]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800dfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd2:	f003 0304 	and.w	r3, r3, #4
 800dfd6:	613b      	str	r3, [r7, #16]
 800dfd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dfda:	2300      	movs	r3, #0
 800dfdc:	60fb      	str	r3, [r7, #12]
 800dfde:	4b11      	ldr	r3, [pc, #68]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800dfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe2:	4a10      	ldr	r2, [pc, #64]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800dfe4:	f043 0302 	orr.w	r3, r3, #2
 800dfe8:	6313      	str	r3, [r2, #48]	; 0x30
 800dfea:	4b0e      	ldr	r3, [pc, #56]	; (800e024 <HAL_TIM_Encoder_MspInit+0xec>)
 800dfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfee:	f003 0302 	and.w	r3, r3, #2
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800dff6:	23c0      	movs	r3, #192	; 0xc0
 800dff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dffa:	2302      	movs	r3, #2
 800dffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dffe:	2300      	movs	r3, #0
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e002:	2300      	movs	r3, #0
 800e004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e006:	2302      	movs	r3, #2
 800e008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e00a:	f107 031c 	add.w	r3, r7, #28
 800e00e:	4619      	mov	r1, r3
 800e010:	4807      	ldr	r0, [pc, #28]	; (800e030 <HAL_TIM_Encoder_MspInit+0xf8>)
 800e012:	f001 fe33 	bl	800fc7c <HAL_GPIO_Init>
}
 800e016:	bf00      	nop
 800e018:	3730      	adds	r7, #48	; 0x30
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	40000400 	.word	0x40000400
 800e024:	40023800 	.word	0x40023800
 800e028:	40020000 	.word	0x40020000
 800e02c:	40000800 	.word	0x40000800
 800e030:	40020400 	.word	0x40020400

0800e034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a0e      	ldr	r2, [pc, #56]	; (800e07c <HAL_TIM_Base_MspInit+0x48>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d115      	bne.n	800e072 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e046:	2300      	movs	r3, #0
 800e048:	60fb      	str	r3, [r7, #12]
 800e04a:	4b0d      	ldr	r3, [pc, #52]	; (800e080 <HAL_TIM_Base_MspInit+0x4c>)
 800e04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e04e:	4a0c      	ldr	r2, [pc, #48]	; (800e080 <HAL_TIM_Base_MspInit+0x4c>)
 800e050:	f043 0310 	orr.w	r3, r3, #16
 800e054:	6413      	str	r3, [r2, #64]	; 0x40
 800e056:	4b0a      	ldr	r3, [pc, #40]	; (800e080 <HAL_TIM_Base_MspInit+0x4c>)
 800e058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e05a:	f003 0310 	and.w	r3, r3, #16
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800e062:	2200      	movs	r2, #0
 800e064:	2100      	movs	r1, #0
 800e066:	2036      	movs	r0, #54	; 0x36
 800e068:	f000 ff6b 	bl	800ef42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e06c:	2036      	movs	r0, #54	; 0x36
 800e06e:	f000 ff84 	bl	800ef7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	40001000 	.word	0x40001000
 800e080:	40023800 	.word	0x40023800

0800e084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b08a      	sub	sp, #40	; 0x28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e08c:	f107 0314 	add.w	r3, r7, #20
 800e090:	2200      	movs	r2, #0
 800e092:	601a      	str	r2, [r3, #0]
 800e094:	605a      	str	r2, [r3, #4]
 800e096:	609a      	str	r2, [r3, #8]
 800e098:	60da      	str	r2, [r3, #12]
 800e09a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a37      	ldr	r2, [pc, #220]	; (800e180 <HAL_TIM_MspPostInit+0xfc>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d11f      	bne.n	800e0e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	4b36      	ldr	r3, [pc, #216]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ae:	4a35      	ldr	r2, [pc, #212]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e0b0:	f043 0301 	orr.w	r3, r3, #1
 800e0b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0b6:	4b33      	ldr	r3, [pc, #204]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	613b      	str	r3, [r7, #16]
 800e0c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0d8:	f107 0314 	add.w	r3, r7, #20
 800e0dc:	4619      	mov	r1, r3
 800e0de:	482a      	ldr	r0, [pc, #168]	; (800e188 <HAL_TIM_MspPostInit+0x104>)
 800e0e0:	f001 fdcc 	bl	800fc7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e0e4:	e048      	b.n	800e178 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0ee:	d11f      	bne.n	800e130 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	4b23      	ldr	r3, [pc, #140]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f8:	4a22      	ldr	r2, [pc, #136]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e0fa:	f043 0302 	orr.w	r3, r3, #2
 800e0fe:	6313      	str	r3, [r2, #48]	; 0x30
 800e100:	4b20      	ldr	r3, [pc, #128]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e104:	f003 0302 	and.w	r3, r3, #2
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e10c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e112:	2302      	movs	r3, #2
 800e114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e116:	2300      	movs	r3, #0
 800e118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e11a:	2300      	movs	r3, #0
 800e11c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e11e:	2301      	movs	r3, #1
 800e120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e122:	f107 0314 	add.w	r3, r7, #20
 800e126:	4619      	mov	r1, r3
 800e128:	4818      	ldr	r0, [pc, #96]	; (800e18c <HAL_TIM_MspPostInit+0x108>)
 800e12a:	f001 fda7 	bl	800fc7c <HAL_GPIO_Init>
}
 800e12e:	e023      	b.n	800e178 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a16      	ldr	r2, [pc, #88]	; (800e190 <HAL_TIM_MspPostInit+0x10c>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d11e      	bne.n	800e178 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e13a:	2300      	movs	r3, #0
 800e13c:	60bb      	str	r3, [r7, #8]
 800e13e:	4b11      	ldr	r3, [pc, #68]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e142:	4a10      	ldr	r2, [pc, #64]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e144:	f043 0304 	orr.w	r3, r3, #4
 800e148:	6313      	str	r3, [r2, #48]	; 0x30
 800e14a:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <HAL_TIM_MspPostInit+0x100>)
 800e14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	60bb      	str	r3, [r7, #8]
 800e154:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800e156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e15a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e15c:	2302      	movs	r3, #2
 800e15e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e160:	2300      	movs	r3, #0
 800e162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e164:	2300      	movs	r3, #0
 800e166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e168:	2303      	movs	r3, #3
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e16c:	f107 0314 	add.w	r3, r7, #20
 800e170:	4619      	mov	r1, r3
 800e172:	4808      	ldr	r0, [pc, #32]	; (800e194 <HAL_TIM_MspPostInit+0x110>)
 800e174:	f001 fd82 	bl	800fc7c <HAL_GPIO_Init>
}
 800e178:	bf00      	nop
 800e17a:	3728      	adds	r7, #40	; 0x28
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	40010000 	.word	0x40010000
 800e184:	40023800 	.word	0x40023800
 800e188:	40020000 	.word	0x40020000
 800e18c:	40020400 	.word	0x40020400
 800e190:	40010400 	.word	0x40010400
 800e194:	40020800 	.word	0x40020800

0800e198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08a      	sub	sp, #40	; 0x28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1a0:	f107 0314 	add.w	r3, r7, #20
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	605a      	str	r2, [r3, #4]
 800e1aa:	609a      	str	r2, [r3, #8]
 800e1ac:	60da      	str	r2, [r3, #12]
 800e1ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a1d      	ldr	r2, [pc, #116]	; (800e22c <HAL_UART_MspInit+0x94>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d133      	bne.n	800e222 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	613b      	str	r3, [r7, #16]
 800e1be:	4b1c      	ldr	r3, [pc, #112]	; (800e230 <HAL_UART_MspInit+0x98>)
 800e1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1c2:	4a1b      	ldr	r2, [pc, #108]	; (800e230 <HAL_UART_MspInit+0x98>)
 800e1c4:	f043 0320 	orr.w	r3, r3, #32
 800e1c8:	6453      	str	r3, [r2, #68]	; 0x44
 800e1ca:	4b19      	ldr	r3, [pc, #100]	; (800e230 <HAL_UART_MspInit+0x98>)
 800e1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ce:	f003 0320 	and.w	r3, r3, #32
 800e1d2:	613b      	str	r3, [r7, #16]
 800e1d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	60fb      	str	r3, [r7, #12]
 800e1da:	4b15      	ldr	r3, [pc, #84]	; (800e230 <HAL_UART_MspInit+0x98>)
 800e1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1de:	4a14      	ldr	r2, [pc, #80]	; (800e230 <HAL_UART_MspInit+0x98>)
 800e1e0:	f043 0304 	orr.w	r3, r3, #4
 800e1e4:	6313      	str	r3, [r2, #48]	; 0x30
 800e1e6:	4b12      	ldr	r3, [pc, #72]	; (800e230 <HAL_UART_MspInit+0x98>)
 800e1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ea:	f003 0304 	and.w	r3, r3, #4
 800e1ee:	60fb      	str	r3, [r7, #12]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e1f2:	23c0      	movs	r3, #192	; 0xc0
 800e1f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1fe:	2303      	movs	r3, #3
 800e200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e202:	2308      	movs	r3, #8
 800e204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e206:	f107 0314 	add.w	r3, r7, #20
 800e20a:	4619      	mov	r1, r3
 800e20c:	4809      	ldr	r0, [pc, #36]	; (800e234 <HAL_UART_MspInit+0x9c>)
 800e20e:	f001 fd35 	bl	800fc7c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800e212:	2200      	movs	r2, #0
 800e214:	2100      	movs	r1, #0
 800e216:	2047      	movs	r0, #71	; 0x47
 800e218:	f000 fe93 	bl	800ef42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800e21c:	2047      	movs	r0, #71	; 0x47
 800e21e:	f000 feac 	bl	800ef7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e222:	bf00      	nop
 800e224:	3728      	adds	r7, #40	; 0x28
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	40011400 	.word	0x40011400
 800e230:	40023800 	.word	0x40023800
 800e234:	40020800 	.word	0x40020800

0800e238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e238:	b480      	push	{r7}
 800e23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e23c:	e7fe      	b.n	800e23c <NMI_Handler+0x4>

0800e23e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e23e:	b480      	push	{r7}
 800e240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e242:	e7fe      	b.n	800e242 <HardFault_Handler+0x4>

0800e244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e244:	b480      	push	{r7}
 800e246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e248:	e7fe      	b.n	800e248 <MemManage_Handler+0x4>

0800e24a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e24a:	b480      	push	{r7}
 800e24c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e24e:	e7fe      	b.n	800e24e <BusFault_Handler+0x4>

0800e250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e250:	b480      	push	{r7}
 800e252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e254:	e7fe      	b.n	800e254 <UsageFault_Handler+0x4>

0800e256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e256:	b480      	push	{r7}
 800e258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e25a:	bf00      	nop
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e264:	b480      	push	{r7}
 800e266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e268:	bf00      	nop
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e272:	b480      	push	{r7}
 800e274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e276:	bf00      	nop
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e284:	f000 f956 	bl	800e534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e288:	bf00      	nop
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e290:	4802      	ldr	r0, [pc, #8]	; (800e29c <TIM6_DAC_IRQHandler+0x10>)
 800e292:	f003 fe3c 	bl	8011f0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e296:	bf00      	nop
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20014498 	.word	0x20014498

0800e2a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e2a4:	4802      	ldr	r0, [pc, #8]	; (800e2b0 <DMA2_Stream0_IRQHandler+0x10>)
 800e2a6:	f000 ffab 	bl	800f200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e2aa:	bf00      	nop
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20014434 	.word	0x20014434

0800e2b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800e2b8:	4802      	ldr	r0, [pc, #8]	; (800e2c4 <USART6_IRQHandler+0x10>)
 800e2ba:	f004 fc5d 	bl	8012b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800e2be:	bf00      	nop
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	20014608 	.word	0x20014608

0800e2c8 <_read>:
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b086      	sub	sp, #24
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	617b      	str	r3, [r7, #20]
 800e2d8:	e00a      	b.n	800e2f0 <_read+0x28>
 800e2da:	f3af 8000 	nop.w
 800e2de:	4601      	mov	r1, r0
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	1c5a      	adds	r2, r3, #1
 800e2e4:	60ba      	str	r2, [r7, #8]
 800e2e6:	b2ca      	uxtb	r2, r1
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	617b      	str	r3, [r7, #20]
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	dbf0      	blt.n	800e2da <_read+0x12>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <_write>:
 800e302:	b580      	push	{r7, lr}
 800e304:	b086      	sub	sp, #24
 800e306:	af00      	add	r7, sp, #0
 800e308:	60f8      	str	r0, [r7, #12]
 800e30a:	60b9      	str	r1, [r7, #8]
 800e30c:	607a      	str	r2, [r7, #4]
 800e30e:	2300      	movs	r3, #0
 800e310:	617b      	str	r3, [r7, #20]
 800e312:	e009      	b.n	800e328 <_write+0x26>
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	1c5a      	adds	r2, r3, #1
 800e318:	60ba      	str	r2, [r7, #8]
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe f9cf 	bl	800c6c0 <__io_putchar>
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	3301      	adds	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	dbf1      	blt.n	800e314 <_write+0x12>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4618      	mov	r0, r3
 800e334:	3718      	adds	r7, #24
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <_close>:
 800e33a:	b480      	push	{r7}
 800e33c:	b083      	sub	sp, #12
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	f04f 33ff 	mov.w	r3, #4294967295
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr

0800e352 <_fstat>:
 800e352:	b480      	push	{r7}
 800e354:	b083      	sub	sp, #12
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	6039      	str	r1, [r7, #0]
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e362:	605a      	str	r2, [r3, #4]
 800e364:	2300      	movs	r3, #0
 800e366:	4618      	mov	r0, r3
 800e368:	370c      	adds	r7, #12
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <_isatty>:
 800e372:	b480      	push	{r7}
 800e374:	b083      	sub	sp, #12
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	2301      	movs	r3, #1
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <_lseek>:
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	2300      	movs	r3, #0
 800e396:	4618      	mov	r0, r3
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
	...

0800e3a4 <_sbrk>:
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	4a14      	ldr	r2, [pc, #80]	; (800e400 <_sbrk+0x5c>)
 800e3ae:	4b15      	ldr	r3, [pc, #84]	; (800e404 <_sbrk+0x60>)
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	617b      	str	r3, [r7, #20]
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	613b      	str	r3, [r7, #16]
 800e3b8:	4b13      	ldr	r3, [pc, #76]	; (800e408 <_sbrk+0x64>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d102      	bne.n	800e3c6 <_sbrk+0x22>
 800e3c0:	4b11      	ldr	r3, [pc, #68]	; (800e408 <_sbrk+0x64>)
 800e3c2:	4a12      	ldr	r2, [pc, #72]	; (800e40c <_sbrk+0x68>)
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	4b10      	ldr	r3, [pc, #64]	; (800e408 <_sbrk+0x64>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d207      	bcs.n	800e3e4 <_sbrk+0x40>
 800e3d4:	f005 f9d6 	bl	8013784 <__errno>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	230c      	movs	r3, #12
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e2:	e009      	b.n	800e3f8 <_sbrk+0x54>
 800e3e4:	4b08      	ldr	r3, [pc, #32]	; (800e408 <_sbrk+0x64>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	60fb      	str	r3, [r7, #12]
 800e3ea:	4b07      	ldr	r3, [pc, #28]	; (800e408 <_sbrk+0x64>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	4a05      	ldr	r2, [pc, #20]	; (800e408 <_sbrk+0x64>)
 800e3f4:	6013      	str	r3, [r2, #0]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	20020000 	.word	0x20020000
 800e404:	00000400 	.word	0x00000400
 800e408:	2000c2cc 	.word	0x2000c2cc
 800e40c:	200146b0 	.word	0x200146b0

0800e410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e410:	b480      	push	{r7}
 800e412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e414:	4b08      	ldr	r3, [pc, #32]	; (800e438 <SystemInit+0x28>)
 800e416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e41a:	4a07      	ldr	r2, [pc, #28]	; (800e438 <SystemInit+0x28>)
 800e41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e424:	4b04      	ldr	r3, [pc, #16]	; (800e438 <SystemInit+0x28>)
 800e426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e42a:	609a      	str	r2, [r3, #8]
#endif
}
 800e42c:	bf00      	nop
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	e000ed00 	.word	0xe000ed00

0800e43c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e43c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e442:	e003      	b.n	800e44c <LoopCopyDataInit>

0800e444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e444:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e44a:	3104      	adds	r1, #4

0800e44c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e44c:	480b      	ldr	r0, [pc, #44]	; (800e47c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e44e:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e454:	d3f6      	bcc.n	800e444 <CopyDataInit>
  ldr  r2, =_sbss
 800e456:	4a0b      	ldr	r2, [pc, #44]	; (800e484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e458:	e002      	b.n	800e460 <LoopFillZerobss>

0800e45a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e45a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e45c:	f842 3b04 	str.w	r3, [r2], #4

0800e460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e460:	4b09      	ldr	r3, [pc, #36]	; (800e488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e464:	d3f9      	bcc.n	800e45a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e466:	f7ff ffd3 	bl	800e410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e46a:	f005 f991 	bl	8013790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e46e:	f7fe fb4d 	bl	800cb0c <main>
  bx  lr    
 800e472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e474:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e478:	080165a8 	.word	0x080165a8
  ldr  r0, =_sdata
 800e47c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e480:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800e484:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800e488:	200146ac 	.word	0x200146ac

0800e48c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e48c:	e7fe      	b.n	800e48c <ADC_IRQHandler>
	...

0800e490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e494:	4b0e      	ldr	r3, [pc, #56]	; (800e4d0 <HAL_Init+0x40>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a0d      	ldr	r2, [pc, #52]	; (800e4d0 <HAL_Init+0x40>)
 800e49a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e49e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <HAL_Init+0x40>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a0a      	ldr	r2, [pc, #40]	; (800e4d0 <HAL_Init+0x40>)
 800e4a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e4aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e4ac:	4b08      	ldr	r3, [pc, #32]	; (800e4d0 <HAL_Init+0x40>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a07      	ldr	r2, [pc, #28]	; (800e4d0 <HAL_Init+0x40>)
 800e4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e4b8:	2003      	movs	r0, #3
 800e4ba:	f000 fd37 	bl	800ef2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e4be:	2000      	movs	r0, #0
 800e4c0:	f000 f808 	bl	800e4d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e4c4:	f7ff fb84 	bl	800dbd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	40023c00 	.word	0x40023c00

0800e4d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e4dc:	4b12      	ldr	r3, [pc, #72]	; (800e528 <HAL_InitTick+0x54>)
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	4b12      	ldr	r3, [pc, #72]	; (800e52c <HAL_InitTick+0x58>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e4ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f000 fd4f 	bl	800ef96 <HAL_SYSTICK_Config>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e4fe:	2301      	movs	r3, #1
 800e500:	e00e      	b.n	800e520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b0f      	cmp	r3, #15
 800e506:	d80a      	bhi.n	800e51e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e508:	2200      	movs	r2, #0
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	f04f 30ff 	mov.w	r0, #4294967295
 800e510:	f000 fd17 	bl	800ef42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e514:	4a06      	ldr	r2, [pc, #24]	; (800e530 <HAL_InitTick+0x5c>)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e000      	b.n	800e520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
}
 800e520:	4618      	mov	r0, r3
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	2000000c 	.word	0x2000000c
 800e52c:	20000014 	.word	0x20000014
 800e530:	20000010 	.word	0x20000010

0800e534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e534:	b480      	push	{r7}
 800e536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e538:	4b06      	ldr	r3, [pc, #24]	; (800e554 <HAL_IncTick+0x20>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	461a      	mov	r2, r3
 800e53e:	4b06      	ldr	r3, [pc, #24]	; (800e558 <HAL_IncTick+0x24>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4413      	add	r3, r2
 800e544:	4a04      	ldr	r2, [pc, #16]	; (800e558 <HAL_IncTick+0x24>)
 800e546:	6013      	str	r3, [r2, #0]
}
 800e548:	bf00      	nop
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	20000014 	.word	0x20000014
 800e558:	20014684 	.word	0x20014684

0800e55c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
  return uwTick;
 800e560:	4b03      	ldr	r3, [pc, #12]	; (800e570 <HAL_GetTick+0x14>)
 800e562:	681b      	ldr	r3, [r3, #0]
}
 800e564:	4618      	mov	r0, r3
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	20014684 	.word	0x20014684

0800e574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e57c:	f7ff ffee 	bl	800e55c <HAL_GetTick>
 800e580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58c:	d005      	beq.n	800e59a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <HAL_Delay+0x40>)
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	4413      	add	r3, r2
 800e598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e59a:	bf00      	nop
 800e59c:	f7ff ffde 	bl	800e55c <HAL_GetTick>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d8f7      	bhi.n	800e59c <HAL_Delay+0x28>
  {
  }
}
 800e5ac:	bf00      	nop
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20000014 	.word	0x20000014

0800e5b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e033      	b.n	800e636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d109      	bne.n	800e5ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff fb22 	bl	800dc20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ee:	f003 0310 	and.w	r3, r3, #16
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d118      	bne.n	800e628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e5fe:	f023 0302 	bic.w	r3, r3, #2
 800e602:	f043 0202 	orr.w	r2, r3, #2
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fa40 	bl	800ea90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61a:	f023 0303 	bic.w	r3, r3, #3
 800e61e:	f043 0201 	orr.w	r2, r3, #1
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	641a      	str	r2, [r3, #64]	; 0x40
 800e626:	e001      	b.n	800e62c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e634:	7bfb      	ldrb	r3, [r7, #15]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
	...

0800e640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e656:	2b01      	cmp	r3, #1
 800e658:	d101      	bne.n	800e65e <HAL_ADC_Start_DMA+0x1e>
 800e65a:	2302      	movs	r3, #2
 800e65c:	e0cc      	b.n	800e7f8 <HAL_ADC_Start_DMA+0x1b8>
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2201      	movs	r2, #1
 800e662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	2b01      	cmp	r3, #1
 800e672:	d018      	beq.n	800e6a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	689a      	ldr	r2, [r3, #8]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0201 	orr.w	r2, r2, #1
 800e682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e684:	4b5e      	ldr	r3, [pc, #376]	; (800e800 <HAL_ADC_Start_DMA+0x1c0>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a5e      	ldr	r2, [pc, #376]	; (800e804 <HAL_ADC_Start_DMA+0x1c4>)
 800e68a:	fba2 2303 	umull	r2, r3, r2, r3
 800e68e:	0c9a      	lsrs	r2, r3, #18
 800e690:	4613      	mov	r3, r2
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	4413      	add	r3, r2
 800e696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e698:	e002      	b.n	800e6a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	3b01      	subs	r3, #1
 800e69e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1f9      	bne.n	800e69a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	f003 0301 	and.w	r3, r3, #1
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	f040 80a0 	bne.w	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e6be:	f023 0301 	bic.w	r3, r3, #1
 800e6c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e6e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e6f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6f4:	d106      	bne.n	800e704 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6fa:	f023 0206 	bic.w	r2, r3, #6
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	645a      	str	r2, [r3, #68]	; 0x44
 800e702:	e002      	b.n	800e70a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e712:	4b3d      	ldr	r3, [pc, #244]	; (800e808 <HAL_ADC_Start_DMA+0x1c8>)
 800e714:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71a:	4a3c      	ldr	r2, [pc, #240]	; (800e80c <HAL_ADC_Start_DMA+0x1cc>)
 800e71c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e722:	4a3b      	ldr	r2, [pc, #236]	; (800e810 <HAL_ADC_Start_DMA+0x1d0>)
 800e724:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e72a:	4a3a      	ldr	r2, [pc, #232]	; (800e814 <HAL_ADC_Start_DMA+0x1d4>)
 800e72c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e736:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e746:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	689a      	ldr	r2, [r3, #8]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e756:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	334c      	adds	r3, #76	; 0x4c
 800e762:	4619      	mov	r1, r3
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f000 fcd0 	bl	800f10c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	f003 031f 	and.w	r3, r3, #31
 800e774:	2b00      	cmp	r3, #0
 800e776:	d12a      	bne.n	800e7ce <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a26      	ldr	r2, [pc, #152]	; (800e818 <HAL_ADC_Start_DMA+0x1d8>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d015      	beq.n	800e7ae <HAL_ADC_Start_DMA+0x16e>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4a25      	ldr	r2, [pc, #148]	; (800e81c <HAL_ADC_Start_DMA+0x1dc>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d105      	bne.n	800e798 <HAL_ADC_Start_DMA+0x158>
 800e78c:	4b1e      	ldr	r3, [pc, #120]	; (800e808 <HAL_ADC_Start_DMA+0x1c8>)
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	f003 031f 	and.w	r3, r3, #31
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00a      	beq.n	800e7ae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a20      	ldr	r2, [pc, #128]	; (800e820 <HAL_ADC_Start_DMA+0x1e0>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d129      	bne.n	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
 800e7a2:	4b19      	ldr	r3, [pc, #100]	; (800e808 <HAL_ADC_Start_DMA+0x1c8>)
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	f003 031f 	and.w	r3, r3, #31
 800e7aa:	2b0f      	cmp	r3, #15
 800e7ac:	d823      	bhi.n	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d11c      	bne.n	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e7ca:	609a      	str	r2, [r3, #8]
 800e7cc:	e013      	b.n	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a11      	ldr	r2, [pc, #68]	; (800e818 <HAL_ADC_Start_DMA+0x1d8>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d10e      	bne.n	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d107      	bne.n	800e7f6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e7f4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	2000000c 	.word	0x2000000c
 800e804:	431bde83 	.word	0x431bde83
 800e808:	40012300 	.word	0x40012300
 800e80c:	0800ec89 	.word	0x0800ec89
 800e810:	0800ed43 	.word	0x0800ed43
 800e814:	0800ed5f 	.word	0x0800ed5f
 800e818:	40012000 	.word	0x40012000
 800e81c:	40012100 	.word	0x40012100
 800e820:	40012200 	.word	0x40012200

0800e824 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b085      	sub	sp, #20
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800e856:	2300      	movs	r3, #0
 800e858:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e860:	2b01      	cmp	r3, #1
 800e862:	d101      	bne.n	800e868 <HAL_ADC_ConfigChannel+0x1c>
 800e864:	2302      	movs	r3, #2
 800e866:	e105      	b.n	800ea74 <HAL_ADC_ConfigChannel+0x228>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b09      	cmp	r3, #9
 800e876:	d925      	bls.n	800e8c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68d9      	ldr	r1, [r3, #12]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	b29b      	uxth	r3, r3
 800e884:	461a      	mov	r2, r3
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	3b1e      	subs	r3, #30
 800e88e:	2207      	movs	r2, #7
 800e890:	fa02 f303 	lsl.w	r3, r2, r3
 800e894:	43da      	mvns	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	400a      	ands	r2, r1
 800e89c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68d9      	ldr	r1, [r3, #12]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	689a      	ldr	r2, [r3, #8]
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	4403      	add	r3, r0
 800e8b6:	3b1e      	subs	r3, #30
 800e8b8:	409a      	lsls	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	430a      	orrs	r2, r1
 800e8c0:	60da      	str	r2, [r3, #12]
 800e8c2:	e022      	b.n	800e90a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6919      	ldr	r1, [r3, #16]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	2207      	movs	r2, #7
 800e8da:	fa02 f303 	lsl.w	r3, r2, r3
 800e8de:	43da      	mvns	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	400a      	ands	r2, r1
 800e8e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6919      	ldr	r1, [r3, #16]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	689a      	ldr	r2, [r3, #8]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	4403      	add	r3, r0
 800e900:	409a      	lsls	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	430a      	orrs	r2, r1
 800e908:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	2b06      	cmp	r3, #6
 800e910:	d824      	bhi.n	800e95c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	4613      	mov	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	3b05      	subs	r3, #5
 800e924:	221f      	movs	r2, #31
 800e926:	fa02 f303 	lsl.w	r3, r2, r3
 800e92a:	43da      	mvns	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	400a      	ands	r2, r1
 800e932:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	b29b      	uxth	r3, r3
 800e940:	4618      	mov	r0, r3
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	3b05      	subs	r3, #5
 800e94e:	fa00 f203 	lsl.w	r2, r0, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	430a      	orrs	r2, r1
 800e958:	635a      	str	r2, [r3, #52]	; 0x34
 800e95a:	e04c      	b.n	800e9f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	2b0c      	cmp	r3, #12
 800e962:	d824      	bhi.n	800e9ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	685a      	ldr	r2, [r3, #4]
 800e96e:	4613      	mov	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	3b23      	subs	r3, #35	; 0x23
 800e976:	221f      	movs	r2, #31
 800e978:	fa02 f303 	lsl.w	r3, r2, r3
 800e97c:	43da      	mvns	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	400a      	ands	r2, r1
 800e984:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	b29b      	uxth	r3, r3
 800e992:	4618      	mov	r0, r3
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	685a      	ldr	r2, [r3, #4]
 800e998:	4613      	mov	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4413      	add	r3, r2
 800e99e:	3b23      	subs	r3, #35	; 0x23
 800e9a0:	fa00 f203 	lsl.w	r2, r0, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	430a      	orrs	r2, r1
 800e9aa:	631a      	str	r2, [r3, #48]	; 0x30
 800e9ac:	e023      	b.n	800e9f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	3b41      	subs	r3, #65	; 0x41
 800e9c0:	221f      	movs	r2, #31
 800e9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c6:	43da      	mvns	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	400a      	ands	r2, r1
 800e9ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4618      	mov	r0, r3
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	685a      	ldr	r2, [r3, #4]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4413      	add	r3, r2
 800e9e8:	3b41      	subs	r3, #65	; 0x41
 800e9ea:	fa00 f203 	lsl.w	r2, r0, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e9f6:	4b22      	ldr	r3, [pc, #136]	; (800ea80 <HAL_ADC_ConfigChannel+0x234>)
 800e9f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a21      	ldr	r2, [pc, #132]	; (800ea84 <HAL_ADC_ConfigChannel+0x238>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d109      	bne.n	800ea18 <HAL_ADC_ConfigChannel+0x1cc>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b12      	cmp	r3, #18
 800ea0a:	d105      	bne.n	800ea18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a19      	ldr	r2, [pc, #100]	; (800ea84 <HAL_ADC_ConfigChannel+0x238>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d123      	bne.n	800ea6a <HAL_ADC_ConfigChannel+0x21e>
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b10      	cmp	r3, #16
 800ea28:	d003      	beq.n	800ea32 <HAL_ADC_ConfigChannel+0x1e6>
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b11      	cmp	r3, #17
 800ea30:	d11b      	bne.n	800ea6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b10      	cmp	r3, #16
 800ea44:	d111      	bne.n	800ea6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ea46:	4b10      	ldr	r3, [pc, #64]	; (800ea88 <HAL_ADC_ConfigChannel+0x23c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a10      	ldr	r2, [pc, #64]	; (800ea8c <HAL_ADC_ConfigChannel+0x240>)
 800ea4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea50:	0c9a      	lsrs	r2, r3, #18
 800ea52:	4613      	mov	r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ea5c:	e002      	b.n	800ea64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1f9      	bne.n	800ea5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	40012300 	.word	0x40012300
 800ea84:	40012000 	.word	0x40012000
 800ea88:	2000000c 	.word	0x2000000c
 800ea8c:	431bde83 	.word	0x431bde83

0800ea90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ea98:	4b79      	ldr	r3, [pc, #484]	; (800ec80 <ADC_Init+0x1f0>)
 800ea9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	431a      	orrs	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	6859      	ldr	r1, [r3, #4]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	691b      	ldr	r3, [r3, #16]
 800ead0:	021a      	lsls	r2, r3, #8
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	430a      	orrs	r2, r1
 800ead8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800eae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	6859      	ldr	r1, [r3, #4]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	689a      	ldr	r2, [r3, #8]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	430a      	orrs	r2, r1
 800eafa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	689a      	ldr	r2, [r3, #8]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6899      	ldr	r1, [r3, #8]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	68da      	ldr	r2, [r3, #12]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	430a      	orrs	r2, r1
 800eb1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb22:	4a58      	ldr	r2, [pc, #352]	; (800ec84 <ADC_Init+0x1f4>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d022      	beq.n	800eb6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	689a      	ldr	r2, [r3, #8]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800eb36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6899      	ldr	r1, [r3, #8]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	689a      	ldr	r2, [r3, #8]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eb58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6899      	ldr	r1, [r3, #8]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	430a      	orrs	r2, r1
 800eb6a:	609a      	str	r2, [r3, #8]
 800eb6c:	e00f      	b.n	800eb8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	689a      	ldr	r2, [r3, #8]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800eb7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	689a      	ldr	r2, [r3, #8]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eb8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	689a      	ldr	r2, [r3, #8]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f022 0202 	bic.w	r2, r2, #2
 800eb9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	6899      	ldr	r1, [r3, #8]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	7e1b      	ldrb	r3, [r3, #24]
 800eba8:	005a      	lsls	r2, r3, #1
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	430a      	orrs	r2, r1
 800ebb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d01b      	beq.n	800ebf4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	685a      	ldr	r2, [r3, #4]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ebda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6859      	ldr	r1, [r3, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	035a      	lsls	r2, r3, #13
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	605a      	str	r2, [r3, #4]
 800ebf2:	e007      	b.n	800ec04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ec12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	69db      	ldr	r3, [r3, #28]
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	051a      	lsls	r2, r3, #20
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	430a      	orrs	r2, r1
 800ec28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	689a      	ldr	r2, [r3, #8]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ec38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6899      	ldr	r1, [r3, #8]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec46:	025a      	lsls	r2, r3, #9
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	430a      	orrs	r2, r1
 800ec4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	689a      	ldr	r2, [r3, #8]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6899      	ldr	r1, [r3, #8]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	695b      	ldr	r3, [r3, #20]
 800ec6a:	029a      	lsls	r2, r3, #10
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	430a      	orrs	r2, r1
 800ec72:	609a      	str	r2, [r3, #8]
}
 800ec74:	bf00      	nop
 800ec76:	3714      	adds	r7, #20
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr
 800ec80:	40012300 	.word	0x40012300
 800ec84:	0f000001 	.word	0x0f000001

0800ec88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d13c      	bne.n	800ed1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d12b      	bne.n	800ed14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d127      	bne.n	800ed14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d006      	beq.n	800ece0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d119      	bne.n	800ed14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f022 0220 	bic.w	r2, r2, #32
 800ecee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d105      	bne.n	800ed14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0c:	f043 0201 	orr.w	r2, r3, #1
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f7fd fce5 	bl	800c6e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ed1a:	e00e      	b.n	800ed3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d003      	beq.n	800ed30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f7ff fd85 	bl	800e838 <HAL_ADC_ErrorCallback>
}
 800ed2e:	e004      	b.n	800ed3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
}
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff fd67 	bl	800e824 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ed56:	bf00      	nop
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2240      	movs	r2, #64	; 0x40
 800ed70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed76:	f043 0204 	orr.w	r2, r3, #4
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f7ff fd5a 	bl	800e838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ed84:	bf00      	nop
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f003 0307 	and.w	r3, r3, #7
 800ed9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ed9c:	4b0c      	ldr	r3, [pc, #48]	; (800edd0 <__NVIC_SetPriorityGrouping+0x44>)
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800eda8:	4013      	ands	r3, r2
 800edaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800edb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800edb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800edbe:	4a04      	ldr	r2, [pc, #16]	; (800edd0 <__NVIC_SetPriorityGrouping+0x44>)
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	60d3      	str	r3, [r2, #12]
}
 800edc4:	bf00      	nop
 800edc6:	3714      	adds	r7, #20
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	e000ed00 	.word	0xe000ed00

0800edd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800edd4:	b480      	push	{r7}
 800edd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800edd8:	4b04      	ldr	r3, [pc, #16]	; (800edec <__NVIC_GetPriorityGrouping+0x18>)
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	f003 0307 	and.w	r3, r3, #7
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	e000ed00 	.word	0xe000ed00

0800edf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800edfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	db0b      	blt.n	800ee1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	f003 021f 	and.w	r2, r3, #31
 800ee08:	4907      	ldr	r1, [pc, #28]	; (800ee28 <__NVIC_EnableIRQ+0x38>)
 800ee0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee0e:	095b      	lsrs	r3, r3, #5
 800ee10:	2001      	movs	r0, #1
 800ee12:	fa00 f202 	lsl.w	r2, r0, r2
 800ee16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	e000e100 	.word	0xe000e100

0800ee2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	4603      	mov	r3, r0
 800ee34:	6039      	str	r1, [r7, #0]
 800ee36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	db0a      	blt.n	800ee56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	b2da      	uxtb	r2, r3
 800ee44:	490c      	ldr	r1, [pc, #48]	; (800ee78 <__NVIC_SetPriority+0x4c>)
 800ee46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee4a:	0112      	lsls	r2, r2, #4
 800ee4c:	b2d2      	uxtb	r2, r2
 800ee4e:	440b      	add	r3, r1
 800ee50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ee54:	e00a      	b.n	800ee6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	4908      	ldr	r1, [pc, #32]	; (800ee7c <__NVIC_SetPriority+0x50>)
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	f003 030f 	and.w	r3, r3, #15
 800ee62:	3b04      	subs	r3, #4
 800ee64:	0112      	lsls	r2, r2, #4
 800ee66:	b2d2      	uxtb	r2, r2
 800ee68:	440b      	add	r3, r1
 800ee6a:	761a      	strb	r2, [r3, #24]
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr
 800ee78:	e000e100 	.word	0xe000e100
 800ee7c:	e000ed00 	.word	0xe000ed00

0800ee80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b089      	sub	sp, #36	; 0x24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f003 0307 	and.w	r3, r3, #7
 800ee92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	f1c3 0307 	rsb	r3, r3, #7
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	bf28      	it	cs
 800ee9e:	2304      	movcs	r3, #4
 800eea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	3304      	adds	r3, #4
 800eea6:	2b06      	cmp	r3, #6
 800eea8:	d902      	bls.n	800eeb0 <NVIC_EncodePriority+0x30>
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	3b03      	subs	r3, #3
 800eeae:	e000      	b.n	800eeb2 <NVIC_EncodePriority+0x32>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	fa02 f303 	lsl.w	r3, r2, r3
 800eebe:	43da      	mvns	r2, r3
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	401a      	ands	r2, r3
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800eec8:	f04f 31ff 	mov.w	r1, #4294967295
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	fa01 f303 	lsl.w	r3, r1, r3
 800eed2:	43d9      	mvns	r1, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800eed8:	4313      	orrs	r3, r2
         );
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3724      	adds	r7, #36	; 0x24
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
	...

0800eee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	3b01      	subs	r3, #1
 800eef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eef8:	d301      	bcc.n	800eefe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800eefa:	2301      	movs	r3, #1
 800eefc:	e00f      	b.n	800ef1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800eefe:	4a0a      	ldr	r2, [pc, #40]	; (800ef28 <SysTick_Config+0x40>)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3b01      	subs	r3, #1
 800ef04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ef06:	210f      	movs	r1, #15
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	f7ff ff8e 	bl	800ee2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ef10:	4b05      	ldr	r3, [pc, #20]	; (800ef28 <SysTick_Config+0x40>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ef16:	4b04      	ldr	r3, [pc, #16]	; (800ef28 <SysTick_Config+0x40>)
 800ef18:	2207      	movs	r2, #7
 800ef1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	e000e010 	.word	0xe000e010

0800ef2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7ff ff29 	bl	800ed8c <__NVIC_SetPriorityGrouping>
}
 800ef3a:	bf00      	nop
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b086      	sub	sp, #24
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	4603      	mov	r3, r0
 800ef4a:	60b9      	str	r1, [r7, #8]
 800ef4c:	607a      	str	r2, [r7, #4]
 800ef4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ef50:	2300      	movs	r3, #0
 800ef52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ef54:	f7ff ff3e 	bl	800edd4 <__NVIC_GetPriorityGrouping>
 800ef58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	68b9      	ldr	r1, [r7, #8]
 800ef5e:	6978      	ldr	r0, [r7, #20]
 800ef60:	f7ff ff8e 	bl	800ee80 <NVIC_EncodePriority>
 800ef64:	4602      	mov	r2, r0
 800ef66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7ff ff5d 	bl	800ee2c <__NVIC_SetPriority>
}
 800ef72:	bf00      	nop
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b082      	sub	sp, #8
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	4603      	mov	r3, r0
 800ef82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ef84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff ff31 	bl	800edf0 <__NVIC_EnableIRQ>
}
 800ef8e:	bf00      	nop
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff ffa2 	bl	800eee8 <SysTick_Config>
 800efa4:	4603      	mov	r3, r0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b086      	sub	sp, #24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800efb8:	2300      	movs	r3, #0
 800efba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800efbc:	f7ff face 	bl	800e55c <HAL_GetTick>
 800efc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d101      	bne.n	800efcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	e099      	b.n	800f100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2202      	movs	r2, #2
 800efd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f022 0201 	bic.w	r2, r2, #1
 800efea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800efec:	e00f      	b.n	800f00e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800efee:	f7ff fab5 	bl	800e55c <HAL_GetTick>
 800eff2:	4602      	mov	r2, r0
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	2b05      	cmp	r3, #5
 800effa:	d908      	bls.n	800f00e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2220      	movs	r2, #32
 800f000:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2203      	movs	r2, #3
 800f006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e078      	b.n	800f100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1e8      	bne.n	800efee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f024:	697a      	ldr	r2, [r7, #20]
 800f026:	4b38      	ldr	r3, [pc, #224]	; (800f108 <HAL_DMA_Init+0x158>)
 800f028:	4013      	ands	r3, r2
 800f02a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f03a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6a1b      	ldr	r3, [r3, #32]
 800f058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f064:	2b04      	cmp	r3, #4
 800f066:	d107      	bne.n	800f078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f070:	4313      	orrs	r3, r2
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	4313      	orrs	r3, r2
 800f076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	697a      	ldr	r2, [r7, #20]
 800f07e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f023 0307 	bic.w	r3, r3, #7
 800f08e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f094:	697a      	ldr	r2, [r7, #20]
 800f096:	4313      	orrs	r3, r2
 800f098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d117      	bne.n	800f0d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00e      	beq.n	800f0d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fa91 	bl	800f5dc <DMA_CheckFifoParam>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d008      	beq.n	800f0d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2240      	movs	r2, #64	; 0x40
 800f0c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e016      	b.n	800f100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	697a      	ldr	r2, [r7, #20]
 800f0d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fa48 	bl	800f570 <DMA_CalcBaseAndBitshift>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0e8:	223f      	movs	r2, #63	; 0x3f
 800f0ea:	409a      	lsls	r2, r3
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3718      	adds	r7, #24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	f010803f 	.word	0xf010803f

0800f10c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b086      	sub	sp, #24
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f11a:	2300      	movs	r3, #0
 800f11c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f122:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d101      	bne.n	800f132 <HAL_DMA_Start_IT+0x26>
 800f12e:	2302      	movs	r3, #2
 800f130:	e040      	b.n	800f1b4 <HAL_DMA_Start_IT+0xa8>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b01      	cmp	r3, #1
 800f144:	d12f      	bne.n	800f1a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2202      	movs	r2, #2
 800f14a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2200      	movs	r2, #0
 800f152:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	68b9      	ldr	r1, [r7, #8]
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f000 f9da 	bl	800f514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f164:	223f      	movs	r2, #63	; 0x3f
 800f166:	409a      	lsls	r2, r3
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f042 0216 	orr.w	r2, r2, #22
 800f17a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f180:	2b00      	cmp	r3, #0
 800f182:	d007      	beq.n	800f194 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f042 0208 	orr.w	r2, r2, #8
 800f192:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f042 0201 	orr.w	r2, r2, #1
 800f1a2:	601a      	str	r2, [r3, #0]
 800f1a4:	e005      	b.n	800f1b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d004      	beq.n	800f1da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2280      	movs	r2, #128	; 0x80
 800f1d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e00c      	b.n	800f1f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2205      	movs	r2, #5
 800f1de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f022 0201 	bic.w	r2, r2, #1
 800f1f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f208:	2300      	movs	r3, #0
 800f20a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f20c:	4b92      	ldr	r3, [pc, #584]	; (800f458 <HAL_DMA_IRQHandler+0x258>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a92      	ldr	r2, [pc, #584]	; (800f45c <HAL_DMA_IRQHandler+0x25c>)
 800f212:	fba2 2303 	umull	r2, r3, r2, r3
 800f216:	0a9b      	lsrs	r3, r3, #10
 800f218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f21e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f22a:	2208      	movs	r2, #8
 800f22c:	409a      	lsls	r2, r3
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	4013      	ands	r3, r2
 800f232:	2b00      	cmp	r3, #0
 800f234:	d01a      	beq.n	800f26c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f003 0304 	and.w	r3, r3, #4
 800f240:	2b00      	cmp	r3, #0
 800f242:	d013      	beq.n	800f26c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f022 0204 	bic.w	r2, r2, #4
 800f252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f258:	2208      	movs	r2, #8
 800f25a:	409a      	lsls	r2, r3
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f264:	f043 0201 	orr.w	r2, r3, #1
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f270:	2201      	movs	r2, #1
 800f272:	409a      	lsls	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	4013      	ands	r3, r2
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d012      	beq.n	800f2a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	695b      	ldr	r3, [r3, #20]
 800f282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00b      	beq.n	800f2a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f28e:	2201      	movs	r2, #1
 800f290:	409a      	lsls	r2, r3
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f29a:	f043 0202 	orr.w	r2, r3, #2
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2a6:	2204      	movs	r2, #4
 800f2a8:	409a      	lsls	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d012      	beq.n	800f2d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f003 0302 	and.w	r3, r3, #2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00b      	beq.n	800f2d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2c4:	2204      	movs	r2, #4
 800f2c6:	409a      	lsls	r2, r3
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2d0:	f043 0204 	orr.w	r2, r3, #4
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2dc:	2210      	movs	r2, #16
 800f2de:	409a      	lsls	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4013      	ands	r3, r2
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d043      	beq.n	800f370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f003 0308 	and.w	r3, r3, #8
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d03c      	beq.n	800f370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2fa:	2210      	movs	r2, #16
 800f2fc:	409a      	lsls	r2, r3
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d018      	beq.n	800f342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d108      	bne.n	800f330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f322:	2b00      	cmp	r3, #0
 800f324:	d024      	beq.n	800f370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	4798      	blx	r3
 800f32e:	e01f      	b.n	800f370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f334:	2b00      	cmp	r3, #0
 800f336:	d01b      	beq.n	800f370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	4798      	blx	r3
 800f340:	e016      	b.n	800f370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d107      	bne.n	800f360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f022 0208 	bic.w	r2, r2, #8
 800f35e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f364:	2b00      	cmp	r3, #0
 800f366:	d003      	beq.n	800f370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f374:	2220      	movs	r2, #32
 800f376:	409a      	lsls	r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	4013      	ands	r3, r2
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f000 808e 	beq.w	800f49e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 0310 	and.w	r3, r3, #16
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 8086 	beq.w	800f49e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f396:	2220      	movs	r2, #32
 800f398:	409a      	lsls	r2, r3
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b05      	cmp	r3, #5
 800f3a8:	d136      	bne.n	800f418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f022 0216 	bic.w	r2, r2, #22
 800f3b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	695a      	ldr	r2, [r3, #20]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d103      	bne.n	800f3da <HAL_DMA_IRQHandler+0x1da>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d007      	beq.n	800f3ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f022 0208 	bic.w	r2, r2, #8
 800f3e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3ee:	223f      	movs	r2, #63	; 0x3f
 800f3f0:	409a      	lsls	r2, r3
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2201      	movs	r2, #1
 800f402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d07d      	beq.n	800f50a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	4798      	blx	r3
        }
        return;
 800f416:	e078      	b.n	800f50a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f422:	2b00      	cmp	r3, #0
 800f424:	d01c      	beq.n	800f460 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f430:	2b00      	cmp	r3, #0
 800f432:	d108      	bne.n	800f446 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d030      	beq.n	800f49e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	4798      	blx	r3
 800f444:	e02b      	b.n	800f49e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d027      	beq.n	800f49e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	4798      	blx	r3
 800f456:	e022      	b.n	800f49e <HAL_DMA_IRQHandler+0x29e>
 800f458:	2000000c 	.word	0x2000000c
 800f45c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10f      	bne.n	800f48e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f022 0210 	bic.w	r2, r2, #16
 800f47c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d032      	beq.n	800f50c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d022      	beq.n	800f4f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2205      	movs	r2, #5
 800f4b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f022 0201 	bic.w	r2, r2, #1
 800f4c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	60bb      	str	r3, [r7, #8]
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d307      	bcc.n	800f4e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1f2      	bne.n	800f4ca <HAL_DMA_IRQHandler+0x2ca>
 800f4e4:	e000      	b.n	800f4e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f4e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d005      	beq.n	800f50c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	4798      	blx	r3
 800f508:	e000      	b.n	800f50c <HAL_DMA_IRQHandler+0x30c>
        return;
 800f50a:	bf00      	nop
    }
  }
}
 800f50c:	3718      	adds	r7, #24
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop

0800f514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
 800f520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	683a      	ldr	r2, [r7, #0]
 800f538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	2b40      	cmp	r3, #64	; 0x40
 800f540:	d108      	bne.n	800f554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f552:	e007      	b.n	800f564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	60da      	str	r2, [r3, #12]
}
 800f564:	bf00      	nop
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	3b10      	subs	r3, #16
 800f580:	4a14      	ldr	r2, [pc, #80]	; (800f5d4 <DMA_CalcBaseAndBitshift+0x64>)
 800f582:	fba2 2303 	umull	r2, r3, r2, r3
 800f586:	091b      	lsrs	r3, r3, #4
 800f588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f58a:	4a13      	ldr	r2, [pc, #76]	; (800f5d8 <DMA_CalcBaseAndBitshift+0x68>)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4413      	add	r3, r2
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d909      	bls.n	800f5b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f5a6:	f023 0303 	bic.w	r3, r3, #3
 800f5aa:	1d1a      	adds	r2, r3, #4
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	659a      	str	r2, [r3, #88]	; 0x58
 800f5b0:	e007      	b.n	800f5c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f5ba:	f023 0303 	bic.w	r3, r3, #3
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3714      	adds	r7, #20
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr
 800f5d2:	bf00      	nop
 800f5d4:	aaaaaaab 	.word	0xaaaaaaab
 800f5d8:	080162cc 	.word	0x080162cc

0800f5dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d11f      	bne.n	800f636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	2b03      	cmp	r3, #3
 800f5fa:	d855      	bhi.n	800f6a8 <DMA_CheckFifoParam+0xcc>
 800f5fc:	a201      	add	r2, pc, #4	; (adr r2, 800f604 <DMA_CheckFifoParam+0x28>)
 800f5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f602:	bf00      	nop
 800f604:	0800f615 	.word	0x0800f615
 800f608:	0800f627 	.word	0x0800f627
 800f60c:	0800f615 	.word	0x0800f615
 800f610:	0800f6a9 	.word	0x0800f6a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d045      	beq.n	800f6ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f624:	e042      	b.n	800f6ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f62e:	d13f      	bne.n	800f6b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800f630:	2301      	movs	r3, #1
 800f632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f634:	e03c      	b.n	800f6b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	699b      	ldr	r3, [r3, #24]
 800f63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f63e:	d121      	bne.n	800f684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2b03      	cmp	r3, #3
 800f644:	d836      	bhi.n	800f6b4 <DMA_CheckFifoParam+0xd8>
 800f646:	a201      	add	r2, pc, #4	; (adr r2, 800f64c <DMA_CheckFifoParam+0x70>)
 800f648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64c:	0800f65d 	.word	0x0800f65d
 800f650:	0800f663 	.word	0x0800f663
 800f654:	0800f65d 	.word	0x0800f65d
 800f658:	0800f675 	.word	0x0800f675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	73fb      	strb	r3, [r7, #15]
      break;
 800f660:	e02f      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d024      	beq.n	800f6b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f672:	e021      	b.n	800f6b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f67c:	d11e      	bne.n	800f6bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800f67e:	2301      	movs	r3, #1
 800f680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f682:	e01b      	b.n	800f6bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	2b02      	cmp	r3, #2
 800f688:	d902      	bls.n	800f690 <DMA_CheckFifoParam+0xb4>
 800f68a:	2b03      	cmp	r3, #3
 800f68c:	d003      	beq.n	800f696 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f68e:	e018      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	73fb      	strb	r3, [r7, #15]
      break;
 800f694:	e015      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00e      	beq.n	800f6c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800f6a6:	e00b      	b.n	800f6c0 <DMA_CheckFifoParam+0xe4>
      break;
 800f6a8:	bf00      	nop
 800f6aa:	e00a      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6ac:	bf00      	nop
 800f6ae:	e008      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6b0:	bf00      	nop
 800f6b2:	e006      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6b4:	bf00      	nop
 800f6b6:	e004      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6b8:	bf00      	nop
 800f6ba:	e002      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      break;   
 800f6bc:	bf00      	nop
 800f6be:	e000      	b.n	800f6c2 <DMA_CheckFifoParam+0xe6>
      break;
 800f6c0:	bf00      	nop
    }
  } 
  
  return status; 
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3714      	adds	r7, #20
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f6e2:	4b23      	ldr	r3, [pc, #140]	; (800f770 <HAL_FLASH_Program+0xa0>)
 800f6e4:	7e1b      	ldrb	r3, [r3, #24]
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d101      	bne.n	800f6ee <HAL_FLASH_Program+0x1e>
 800f6ea:	2302      	movs	r3, #2
 800f6ec:	e03b      	b.n	800f766 <HAL_FLASH_Program+0x96>
 800f6ee:	4b20      	ldr	r3, [pc, #128]	; (800f770 <HAL_FLASH_Program+0xa0>)
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f6f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f6f8:	f000 f870 	bl	800f7dc <FLASH_WaitForLastOperation>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800f700:	7dfb      	ldrb	r3, [r7, #23]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d12b      	bne.n	800f75e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d105      	bne.n	800f718 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800f70c:	783b      	ldrb	r3, [r7, #0]
 800f70e:	4619      	mov	r1, r3
 800f710:	68b8      	ldr	r0, [r7, #8]
 800f712:	f000 f919 	bl	800f948 <FLASH_Program_Byte>
 800f716:	e016      	b.n	800f746 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d105      	bne.n	800f72a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800f71e:	883b      	ldrh	r3, [r7, #0]
 800f720:	4619      	mov	r1, r3
 800f722:	68b8      	ldr	r0, [r7, #8]
 800f724:	f000 f8ec 	bl	800f900 <FLASH_Program_HalfWord>
 800f728:	e00d      	b.n	800f746 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	d105      	bne.n	800f73c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	4619      	mov	r1, r3
 800f734:	68b8      	ldr	r0, [r7, #8]
 800f736:	f000 f8c1 	bl	800f8bc <FLASH_Program_Word>
 800f73a:	e004      	b.n	800f746 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800f73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f740:	68b8      	ldr	r0, [r7, #8]
 800f742:	f000 f88b 	bl	800f85c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f746:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f74a:	f000 f847 	bl	800f7dc <FLASH_WaitForLastOperation>
 800f74e:	4603      	mov	r3, r0
 800f750:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800f752:	4b08      	ldr	r3, [pc, #32]	; (800f774 <HAL_FLASH_Program+0xa4>)
 800f754:	691b      	ldr	r3, [r3, #16]
 800f756:	4a07      	ldr	r2, [pc, #28]	; (800f774 <HAL_FLASH_Program+0xa4>)
 800f758:	f023 0301 	bic.w	r3, r3, #1
 800f75c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f75e:	4b04      	ldr	r3, [pc, #16]	; (800f770 <HAL_FLASH_Program+0xa0>)
 800f760:	2200      	movs	r2, #0
 800f762:	761a      	strb	r2, [r3, #24]
  
  return status;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20014688 	.word	0x20014688
 800f774:	40023c00 	.word	0x40023c00

0800f778 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800f77e:	2300      	movs	r3, #0
 800f780:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f782:	4b0b      	ldr	r3, [pc, #44]	; (800f7b0 <HAL_FLASH_Unlock+0x38>)
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	2b00      	cmp	r3, #0
 800f788:	da0b      	bge.n	800f7a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <HAL_FLASH_Unlock+0x38>)
 800f78c:	4a09      	ldr	r2, [pc, #36]	; (800f7b4 <HAL_FLASH_Unlock+0x3c>)
 800f78e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <HAL_FLASH_Unlock+0x38>)
 800f792:	4a09      	ldr	r2, [pc, #36]	; (800f7b8 <HAL_FLASH_Unlock+0x40>)
 800f794:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f796:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <HAL_FLASH_Unlock+0x38>)
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	da01      	bge.n	800f7a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	40023c00 	.word	0x40023c00
 800f7b4:	45670123 	.word	0x45670123
 800f7b8:	cdef89ab 	.word	0xcdef89ab

0800f7bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800f7c0:	4b05      	ldr	r3, [pc, #20]	; (800f7d8 <HAL_FLASH_Lock+0x1c>)
 800f7c2:	691b      	ldr	r3, [r3, #16]
 800f7c4:	4a04      	ldr	r2, [pc, #16]	; (800f7d8 <HAL_FLASH_Lock+0x1c>)
 800f7c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f7ca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr
 800f7d8:	40023c00 	.word	0x40023c00

0800f7dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7e8:	4b1a      	ldr	r3, [pc, #104]	; (800f854 <FLASH_WaitForLastOperation+0x78>)
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800f7ee:	f7fe feb5 	bl	800e55c <HAL_GetTick>
 800f7f2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f7f4:	e010      	b.n	800f818 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fc:	d00c      	beq.n	800f818 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d007      	beq.n	800f814 <FLASH_WaitForLastOperation+0x38>
 800f804:	f7fe feaa 	bl	800e55c <HAL_GetTick>
 800f808:	4602      	mov	r2, r0
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	1ad3      	subs	r3, r2, r3
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	429a      	cmp	r2, r3
 800f812:	d201      	bcs.n	800f818 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800f814:	2303      	movs	r3, #3
 800f816:	e019      	b.n	800f84c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f818:	4b0f      	ldr	r3, [pc, #60]	; (800f858 <FLASH_WaitForLastOperation+0x7c>)
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1e8      	bne.n	800f7f6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800f824:	4b0c      	ldr	r3, [pc, #48]	; (800f858 <FLASH_WaitForLastOperation+0x7c>)
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f830:	4b09      	ldr	r3, [pc, #36]	; (800f858 <FLASH_WaitForLastOperation+0x7c>)
 800f832:	2201      	movs	r2, #1
 800f834:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800f836:	4b08      	ldr	r3, [pc, #32]	; (800f858 <FLASH_WaitForLastOperation+0x7c>)
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d003      	beq.n	800f84a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800f842:	f000 f8a3 	bl	800f98c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e000      	b.n	800f84c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800f84a:	2300      	movs	r3, #0
  
}  
 800f84c:	4618      	mov	r0, r3
 800f84e:	3710      	adds	r7, #16
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	20014688 	.word	0x20014688
 800f858:	40023c00 	.word	0x40023c00

0800f85c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800f85c:	b490      	push	{r4, r7}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f868:	4b13      	ldr	r3, [pc, #76]	; (800f8b8 <FLASH_Program_DoubleWord+0x5c>)
 800f86a:	691b      	ldr	r3, [r3, #16]
 800f86c:	4a12      	ldr	r2, [pc, #72]	; (800f8b8 <FLASH_Program_DoubleWord+0x5c>)
 800f86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800f874:	4b10      	ldr	r3, [pc, #64]	; (800f8b8 <FLASH_Program_DoubleWord+0x5c>)
 800f876:	691b      	ldr	r3, [r3, #16]
 800f878:	4a0f      	ldr	r2, [pc, #60]	; (800f8b8 <FLASH_Program_DoubleWord+0x5c>)
 800f87a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f87e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f880:	4b0d      	ldr	r3, [pc, #52]	; (800f8b8 <FLASH_Program_DoubleWord+0x5c>)
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	4a0c      	ldr	r2, [pc, #48]	; (800f8b8 <FLASH_Program_DoubleWord+0x5c>)
 800f886:	f043 0301 	orr.w	r3, r3, #1
 800f88a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800f892:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800f896:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f89a:	f04f 0300 	mov.w	r3, #0
 800f89e:	f04f 0400 	mov.w	r4, #0
 800f8a2:	0013      	movs	r3, r2
 800f8a4:	2400      	movs	r4, #0
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	3204      	adds	r2, #4
 800f8aa:	6013      	str	r3, [r2, #0]
}
 800f8ac:	bf00      	nop
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bc90      	pop	{r4, r7}
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	40023c00 	.word	0x40023c00

0800f8bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f8c6:	4b0d      	ldr	r3, [pc, #52]	; (800f8fc <FLASH_Program_Word+0x40>)
 800f8c8:	691b      	ldr	r3, [r3, #16]
 800f8ca:	4a0c      	ldr	r2, [pc, #48]	; (800f8fc <FLASH_Program_Word+0x40>)
 800f8cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800f8d2:	4b0a      	ldr	r3, [pc, #40]	; (800f8fc <FLASH_Program_Word+0x40>)
 800f8d4:	691b      	ldr	r3, [r3, #16]
 800f8d6:	4a09      	ldr	r2, [pc, #36]	; (800f8fc <FLASH_Program_Word+0x40>)
 800f8d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f8dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f8de:	4b07      	ldr	r3, [pc, #28]	; (800f8fc <FLASH_Program_Word+0x40>)
 800f8e0:	691b      	ldr	r3, [r3, #16]
 800f8e2:	4a06      	ldr	r2, [pc, #24]	; (800f8fc <FLASH_Program_Word+0x40>)
 800f8e4:	f043 0301 	orr.w	r3, r3, #1
 800f8e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	683a      	ldr	r2, [r7, #0]
 800f8ee:	601a      	str	r2, [r3, #0]
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	40023c00 	.word	0x40023c00

0800f900 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	460b      	mov	r3, r1
 800f90a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f90c:	4b0d      	ldr	r3, [pc, #52]	; (800f944 <FLASH_Program_HalfWord+0x44>)
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	4a0c      	ldr	r2, [pc, #48]	; (800f944 <FLASH_Program_HalfWord+0x44>)
 800f912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800f918:	4b0a      	ldr	r3, [pc, #40]	; (800f944 <FLASH_Program_HalfWord+0x44>)
 800f91a:	691b      	ldr	r3, [r3, #16]
 800f91c:	4a09      	ldr	r2, [pc, #36]	; (800f944 <FLASH_Program_HalfWord+0x44>)
 800f91e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f924:	4b07      	ldr	r3, [pc, #28]	; (800f944 <FLASH_Program_HalfWord+0x44>)
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	4a06      	ldr	r2, [pc, #24]	; (800f944 <FLASH_Program_HalfWord+0x44>)
 800f92a:	f043 0301 	orr.w	r3, r3, #1
 800f92e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	887a      	ldrh	r2, [r7, #2]
 800f934:	801a      	strh	r2, [r3, #0]
}
 800f936:	bf00      	nop
 800f938:	370c      	adds	r7, #12
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	40023c00 	.word	0x40023c00

0800f948 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	460b      	mov	r3, r1
 800f952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f954:	4b0c      	ldr	r3, [pc, #48]	; (800f988 <FLASH_Program_Byte+0x40>)
 800f956:	691b      	ldr	r3, [r3, #16]
 800f958:	4a0b      	ldr	r2, [pc, #44]	; (800f988 <FLASH_Program_Byte+0x40>)
 800f95a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f95e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800f960:	4b09      	ldr	r3, [pc, #36]	; (800f988 <FLASH_Program_Byte+0x40>)
 800f962:	4a09      	ldr	r2, [pc, #36]	; (800f988 <FLASH_Program_Byte+0x40>)
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f968:	4b07      	ldr	r3, [pc, #28]	; (800f988 <FLASH_Program_Byte+0x40>)
 800f96a:	691b      	ldr	r3, [r3, #16]
 800f96c:	4a06      	ldr	r2, [pc, #24]	; (800f988 <FLASH_Program_Byte+0x40>)
 800f96e:	f043 0301 	orr.w	r3, r3, #1
 800f972:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	78fa      	ldrb	r2, [r7, #3]
 800f978:	701a      	strb	r2, [r3, #0]
}
 800f97a:	bf00      	nop
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	40023c00 	.word	0x40023c00

0800f98c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800f98c:	b480      	push	{r7}
 800f98e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800f990:	4b27      	ldr	r3, [pc, #156]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	f003 0310 	and.w	r3, r3, #16
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d008      	beq.n	800f9ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f99c:	4b25      	ldr	r3, [pc, #148]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	f043 0310 	orr.w	r3, r3, #16
 800f9a4:	4a23      	ldr	r2, [pc, #140]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f9a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f9a8:	4b21      	ldr	r3, [pc, #132]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f9aa:	2210      	movs	r2, #16
 800f9ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800f9ae:	4b20      	ldr	r3, [pc, #128]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	f003 0320 	and.w	r3, r3, #32
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d008      	beq.n	800f9cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f9ba:	4b1e      	ldr	r3, [pc, #120]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	f043 0308 	orr.w	r3, r3, #8
 800f9c2:	4a1c      	ldr	r2, [pc, #112]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f9c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f9c6:	4b1a      	ldr	r3, [pc, #104]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f9c8:	2220      	movs	r2, #32
 800f9ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800f9cc:	4b18      	ldr	r3, [pc, #96]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d008      	beq.n	800f9ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f9d8:	4b16      	ldr	r3, [pc, #88]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f9da:	69db      	ldr	r3, [r3, #28]
 800f9dc:	f043 0304 	orr.w	r3, r3, #4
 800f9e0:	4a14      	ldr	r2, [pc, #80]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f9e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f9e4:	4b12      	ldr	r3, [pc, #72]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f9e6:	2240      	movs	r2, #64	; 0x40
 800f9e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800f9ea:	4b11      	ldr	r3, [pc, #68]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d008      	beq.n	800fa08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f9f6:	4b0f      	ldr	r3, [pc, #60]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	f043 0302 	orr.w	r3, r3, #2
 800f9fe:	4a0d      	ldr	r2, [pc, #52]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800fa00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fa02:	4b0b      	ldr	r3, [pc, #44]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800fa04:	2280      	movs	r2, #128	; 0x80
 800fa06:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fa08:	4b09      	ldr	r3, [pc, #36]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	f003 0302 	and.w	r3, r3, #2
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d008      	beq.n	800fa26 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fa14:	4b07      	ldr	r3, [pc, #28]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800fa16:	69db      	ldr	r3, [r3, #28]
 800fa18:	f043 0320 	orr.w	r3, r3, #32
 800fa1c:	4a05      	ldr	r2, [pc, #20]	; (800fa34 <FLASH_SetErrorCode+0xa8>)
 800fa1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fa20:	4b03      	ldr	r3, [pc, #12]	; (800fa30 <FLASH_SetErrorCode+0xa4>)
 800fa22:	2202      	movs	r2, #2
 800fa24:	60da      	str	r2, [r3, #12]
  }
}
 800fa26:	bf00      	nop
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr
 800fa30:	40023c00 	.word	0x40023c00
 800fa34:	20014688 	.word	0x20014688

0800fa38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fa4a:	4b31      	ldr	r3, [pc, #196]	; (800fb10 <HAL_FLASHEx_Erase+0xd8>)
 800fa4c:	7e1b      	ldrb	r3, [r3, #24]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d101      	bne.n	800fa56 <HAL_FLASHEx_Erase+0x1e>
 800fa52:	2302      	movs	r3, #2
 800fa54:	e058      	b.n	800fb08 <HAL_FLASHEx_Erase+0xd0>
 800fa56:	4b2e      	ldr	r3, [pc, #184]	; (800fb10 <HAL_FLASHEx_Erase+0xd8>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fa5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fa60:	f7ff febc 	bl	800f7dc <FLASH_WaitForLastOperation>
 800fa64:	4603      	mov	r3, r0
 800fa66:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800fa68:	7bfb      	ldrb	r3, [r7, #15]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d148      	bne.n	800fb00 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	f04f 32ff 	mov.w	r2, #4294967295
 800fa74:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d115      	bne.n	800faaa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	691b      	ldr	r3, [r3, #16]
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4610      	mov	r0, r2
 800fa8c:	f000 f844 	bl	800fb18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fa90:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fa94:	f7ff fea2 	bl	800f7dc <FLASH_WaitForLastOperation>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800fa9c:	4b1d      	ldr	r3, [pc, #116]	; (800fb14 <HAL_FLASHEx_Erase+0xdc>)
 800fa9e:	691b      	ldr	r3, [r3, #16]
 800faa0:	4a1c      	ldr	r2, [pc, #112]	; (800fb14 <HAL_FLASHEx_Erase+0xdc>)
 800faa2:	f023 0304 	bic.w	r3, r3, #4
 800faa6:	6113      	str	r3, [r2, #16]
 800faa8:	e028      	b.n	800fafc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	689b      	ldr	r3, [r3, #8]
 800faae:	60bb      	str	r3, [r7, #8]
 800fab0:	e01c      	b.n	800faec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	691b      	ldr	r3, [r3, #16]
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	4619      	mov	r1, r3
 800faba:	68b8      	ldr	r0, [r7, #8]
 800fabc:	f000 f850 	bl	800fb60 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fac0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fac4:	f7ff fe8a 	bl	800f7dc <FLASH_WaitForLastOperation>
 800fac8:	4603      	mov	r3, r0
 800faca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800facc:	4b11      	ldr	r3, [pc, #68]	; (800fb14 <HAL_FLASHEx_Erase+0xdc>)
 800face:	691b      	ldr	r3, [r3, #16]
 800fad0:	4a10      	ldr	r2, [pc, #64]	; (800fb14 <HAL_FLASHEx_Erase+0xdc>)
 800fad2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800fad6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800fad8:	7bfb      	ldrb	r3, [r7, #15]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d003      	beq.n	800fae6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	601a      	str	r2, [r3, #0]
          break;
 800fae4:	e00a      	b.n	800fafc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	3301      	adds	r3, #1
 800faea:	60bb      	str	r3, [r7, #8]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	68da      	ldr	r2, [r3, #12]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	4413      	add	r3, r2
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d3da      	bcc.n	800fab2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800fafc:	f000 f878 	bl	800fbf0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fb00:	4b03      	ldr	r3, [pc, #12]	; (800fb10 <HAL_FLASHEx_Erase+0xd8>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	761a      	strb	r2, [r3, #24]

  return status;
 800fb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	20014688 	.word	0x20014688
 800fb14:	40023c00 	.word	0x40023c00

0800fb18 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	6039      	str	r1, [r7, #0]
 800fb22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fb24:	4b0d      	ldr	r3, [pc, #52]	; (800fb5c <FLASH_MassErase+0x44>)
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	4a0c      	ldr	r2, [pc, #48]	; (800fb5c <FLASH_MassErase+0x44>)
 800fb2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800fb30:	4b0a      	ldr	r3, [pc, #40]	; (800fb5c <FLASH_MassErase+0x44>)
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	4a09      	ldr	r2, [pc, #36]	; (800fb5c <FLASH_MassErase+0x44>)
 800fb36:	f043 0304 	orr.w	r3, r3, #4
 800fb3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800fb3c:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <FLASH_MassErase+0x44>)
 800fb3e:	691a      	ldr	r2, [r3, #16]
 800fb40:	79fb      	ldrb	r3, [r7, #7]
 800fb42:	021b      	lsls	r3, r3, #8
 800fb44:	4313      	orrs	r3, r2
 800fb46:	4a05      	ldr	r2, [pc, #20]	; (800fb5c <FLASH_MassErase+0x44>)
 800fb48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb4c:	6113      	str	r3, [r2, #16]
}
 800fb4e:	bf00      	nop
 800fb50:	370c      	adds	r7, #12
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	40023c00 	.word	0x40023c00

0800fb60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	460b      	mov	r3, r1
 800fb6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800fb70:	78fb      	ldrb	r3, [r7, #3]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d102      	bne.n	800fb7c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800fb76:	2300      	movs	r3, #0
 800fb78:	60fb      	str	r3, [r7, #12]
 800fb7a:	e010      	b.n	800fb9e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800fb7c:	78fb      	ldrb	r3, [r7, #3]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d103      	bne.n	800fb8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800fb82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb86:	60fb      	str	r3, [r7, #12]
 800fb88:	e009      	b.n	800fb9e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800fb8a:	78fb      	ldrb	r3, [r7, #3]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d103      	bne.n	800fb98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800fb90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	e002      	b.n	800fb9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800fb98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fb9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fb9e:	4b13      	ldr	r3, [pc, #76]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	4a12      	ldr	r2, [pc, #72]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fba8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800fbaa:	4b10      	ldr	r3, [pc, #64]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbac:	691a      	ldr	r2, [r3, #16]
 800fbae:	490f      	ldr	r1, [pc, #60]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800fbb6:	4b0d      	ldr	r3, [pc, #52]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbb8:	691b      	ldr	r3, [r3, #16]
 800fbba:	4a0c      	ldr	r2, [pc, #48]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fbc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800fbc2:	4b0a      	ldr	r3, [pc, #40]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbc4:	691a      	ldr	r2, [r3, #16]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	00db      	lsls	r3, r3, #3
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	4a07      	ldr	r2, [pc, #28]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbce:	f043 0302 	orr.w	r3, r3, #2
 800fbd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800fbd4:	4b05      	ldr	r3, [pc, #20]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbd6:	691b      	ldr	r3, [r3, #16]
 800fbd8:	4a04      	ldr	r2, [pc, #16]	; (800fbec <FLASH_Erase_Sector+0x8c>)
 800fbda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fbde:	6113      	str	r3, [r2, #16]
}
 800fbe0:	bf00      	nop
 800fbe2:	3714      	adds	r7, #20
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	40023c00 	.word	0x40023c00

0800fbf0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800fbf4:	4b20      	ldr	r3, [pc, #128]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d017      	beq.n	800fc30 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800fc00:	4b1d      	ldr	r3, [pc, #116]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a1c      	ldr	r2, [pc, #112]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800fc0c:	4b1a      	ldr	r3, [pc, #104]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a19      	ldr	r2, [pc, #100]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	4b17      	ldr	r3, [pc, #92]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a16      	ldr	r2, [pc, #88]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fc24:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a13      	ldr	r2, [pc, #76]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc2e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800fc30:	4b11      	ldr	r3, [pc, #68]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d017      	beq.n	800fc6c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800fc3c:	4b0e      	ldr	r3, [pc, #56]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a0d      	ldr	r2, [pc, #52]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc46:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800fc48:	4b0b      	ldr	r3, [pc, #44]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4a0a      	ldr	r2, [pc, #40]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fc52:	6013      	str	r3, [r2, #0]
 800fc54:	4b08      	ldr	r3, [pc, #32]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a07      	ldr	r2, [pc, #28]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800fc60:	4b05      	ldr	r3, [pc, #20]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a04      	ldr	r2, [pc, #16]	; (800fc78 <FLASH_FlushCaches+0x88>)
 800fc66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fc6a:	6013      	str	r3, [r2, #0]
  }
}
 800fc6c:	bf00      	nop
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	40023c00 	.word	0x40023c00

0800fc7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b089      	sub	sp, #36	; 0x24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fc86:	2300      	movs	r3, #0
 800fc88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fc92:	2300      	movs	r3, #0
 800fc94:	61fb      	str	r3, [r7, #28]
 800fc96:	e16b      	b.n	800ff70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fc98:	2201      	movs	r2, #1
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	697a      	ldr	r2, [r7, #20]
 800fca8:	4013      	ands	r3, r2
 800fcaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fcac:	693a      	ldr	r2, [r7, #16]
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	f040 815a 	bne.w	800ff6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d00b      	beq.n	800fcd6 <HAL_GPIO_Init+0x5a>
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d007      	beq.n	800fcd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fcca:	2b11      	cmp	r3, #17
 800fccc:	d003      	beq.n	800fcd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	2b12      	cmp	r3, #18
 800fcd4:	d130      	bne.n	800fd38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	2203      	movs	r2, #3
 800fce2:	fa02 f303 	lsl.w	r3, r2, r3
 800fce6:	43db      	mvns	r3, r3
 800fce8:	69ba      	ldr	r2, [r7, #24]
 800fcea:	4013      	ands	r3, r2
 800fcec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	68da      	ldr	r2, [r3, #12]
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	005b      	lsls	r3, r3, #1
 800fcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800fcfa:	69ba      	ldr	r2, [r7, #24]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	69ba      	ldr	r2, [r7, #24]
 800fd04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	fa02 f303 	lsl.w	r3, r2, r3
 800fd14:	43db      	mvns	r3, r3
 800fd16:	69ba      	ldr	r2, [r7, #24]
 800fd18:	4013      	ands	r3, r2
 800fd1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	091b      	lsrs	r3, r3, #4
 800fd22:	f003 0201 	and.w	r2, r3, #1
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	fa02 f303 	lsl.w	r3, r2, r3
 800fd2c:	69ba      	ldr	r2, [r7, #24]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	69ba      	ldr	r2, [r7, #24]
 800fd36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	2203      	movs	r2, #3
 800fd44:	fa02 f303 	lsl.w	r3, r2, r3
 800fd48:	43db      	mvns	r3, r3
 800fd4a:	69ba      	ldr	r2, [r7, #24]
 800fd4c:	4013      	ands	r3, r2
 800fd4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	689a      	ldr	r2, [r3, #8]
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	005b      	lsls	r3, r3, #1
 800fd58:	fa02 f303 	lsl.w	r3, r2, r3
 800fd5c:	69ba      	ldr	r2, [r7, #24]
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	69ba      	ldr	r2, [r7, #24]
 800fd66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d003      	beq.n	800fd78 <HAL_GPIO_Init+0xfc>
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	2b12      	cmp	r3, #18
 800fd76:	d123      	bne.n	800fdc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	08da      	lsrs	r2, r3, #3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	3208      	adds	r2, #8
 800fd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fd86:	69fb      	ldr	r3, [r7, #28]
 800fd88:	f003 0307 	and.w	r3, r3, #7
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	220f      	movs	r2, #15
 800fd90:	fa02 f303 	lsl.w	r3, r2, r3
 800fd94:	43db      	mvns	r3, r3
 800fd96:	69ba      	ldr	r2, [r7, #24]
 800fd98:	4013      	ands	r3, r2
 800fd9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	691a      	ldr	r2, [r3, #16]
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	f003 0307 	and.w	r3, r3, #7
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	08da      	lsrs	r2, r3, #3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	3208      	adds	r2, #8
 800fdba:	69b9      	ldr	r1, [r7, #24]
 800fdbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	2203      	movs	r2, #3
 800fdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800fdd0:	43db      	mvns	r3, r3
 800fdd2:	69ba      	ldr	r2, [r7, #24]
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	f003 0203 	and.w	r2, r3, #3
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	fa02 f303 	lsl.w	r3, r2, r3
 800fde8:	69ba      	ldr	r2, [r7, #24]
 800fdea:	4313      	orrs	r3, r2
 800fdec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	69ba      	ldr	r2, [r7, #24]
 800fdf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 80b4 	beq.w	800ff6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe02:	2300      	movs	r3, #0
 800fe04:	60fb      	str	r3, [r7, #12]
 800fe06:	4b5f      	ldr	r3, [pc, #380]	; (800ff84 <HAL_GPIO_Init+0x308>)
 800fe08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe0a:	4a5e      	ldr	r2, [pc, #376]	; (800ff84 <HAL_GPIO_Init+0x308>)
 800fe0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe10:	6453      	str	r3, [r2, #68]	; 0x44
 800fe12:	4b5c      	ldr	r3, [pc, #368]	; (800ff84 <HAL_GPIO_Init+0x308>)
 800fe14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe1a:	60fb      	str	r3, [r7, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fe1e:	4a5a      	ldr	r2, [pc, #360]	; (800ff88 <HAL_GPIO_Init+0x30c>)
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	089b      	lsrs	r3, r3, #2
 800fe24:	3302      	adds	r3, #2
 800fe26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	f003 0303 	and.w	r3, r3, #3
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	220f      	movs	r2, #15
 800fe36:	fa02 f303 	lsl.w	r3, r2, r3
 800fe3a:	43db      	mvns	r3, r3
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4a51      	ldr	r2, [pc, #324]	; (800ff8c <HAL_GPIO_Init+0x310>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d02b      	beq.n	800fea2 <HAL_GPIO_Init+0x226>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4a50      	ldr	r2, [pc, #320]	; (800ff90 <HAL_GPIO_Init+0x314>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d025      	beq.n	800fe9e <HAL_GPIO_Init+0x222>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a4f      	ldr	r2, [pc, #316]	; (800ff94 <HAL_GPIO_Init+0x318>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d01f      	beq.n	800fe9a <HAL_GPIO_Init+0x21e>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a4e      	ldr	r2, [pc, #312]	; (800ff98 <HAL_GPIO_Init+0x31c>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d019      	beq.n	800fe96 <HAL_GPIO_Init+0x21a>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a4d      	ldr	r2, [pc, #308]	; (800ff9c <HAL_GPIO_Init+0x320>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d013      	beq.n	800fe92 <HAL_GPIO_Init+0x216>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a4c      	ldr	r2, [pc, #304]	; (800ffa0 <HAL_GPIO_Init+0x324>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d00d      	beq.n	800fe8e <HAL_GPIO_Init+0x212>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a4b      	ldr	r2, [pc, #300]	; (800ffa4 <HAL_GPIO_Init+0x328>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d007      	beq.n	800fe8a <HAL_GPIO_Init+0x20e>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4a4a      	ldr	r2, [pc, #296]	; (800ffa8 <HAL_GPIO_Init+0x32c>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d101      	bne.n	800fe86 <HAL_GPIO_Init+0x20a>
 800fe82:	2307      	movs	r3, #7
 800fe84:	e00e      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe86:	2308      	movs	r3, #8
 800fe88:	e00c      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe8a:	2306      	movs	r3, #6
 800fe8c:	e00a      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe8e:	2305      	movs	r3, #5
 800fe90:	e008      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe92:	2304      	movs	r3, #4
 800fe94:	e006      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe96:	2303      	movs	r3, #3
 800fe98:	e004      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	e002      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e000      	b.n	800fea4 <HAL_GPIO_Init+0x228>
 800fea2:	2300      	movs	r3, #0
 800fea4:	69fa      	ldr	r2, [r7, #28]
 800fea6:	f002 0203 	and.w	r2, r2, #3
 800feaa:	0092      	lsls	r2, r2, #2
 800feac:	4093      	lsls	r3, r2
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	4313      	orrs	r3, r2
 800feb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800feb4:	4934      	ldr	r1, [pc, #208]	; (800ff88 <HAL_GPIO_Init+0x30c>)
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	089b      	lsrs	r3, r3, #2
 800feba:	3302      	adds	r3, #2
 800febc:	69ba      	ldr	r2, [r7, #24]
 800febe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fec2:	4b3a      	ldr	r3, [pc, #232]	; (800ffac <HAL_GPIO_Init+0x330>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	43db      	mvns	r3, r3
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	4013      	ands	r3, r2
 800fed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800fede:	69ba      	ldr	r2, [r7, #24]
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fee6:	4a31      	ldr	r2, [pc, #196]	; (800ffac <HAL_GPIO_Init+0x330>)
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800feec:	4b2f      	ldr	r3, [pc, #188]	; (800ffac <HAL_GPIO_Init+0x330>)
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	43db      	mvns	r3, r3
 800fef6:	69ba      	ldr	r2, [r7, #24]
 800fef8:	4013      	ands	r3, r2
 800fefa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d003      	beq.n	800ff10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ff10:	4a26      	ldr	r2, [pc, #152]	; (800ffac <HAL_GPIO_Init+0x330>)
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ff16:	4b25      	ldr	r3, [pc, #148]	; (800ffac <HAL_GPIO_Init+0x330>)
 800ff18:	689b      	ldr	r3, [r3, #8]
 800ff1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	43db      	mvns	r3, r3
 800ff20:	69ba      	ldr	r2, [r7, #24]
 800ff22:	4013      	ands	r3, r2
 800ff24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d003      	beq.n	800ff3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ff32:	69ba      	ldr	r2, [r7, #24]
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	4313      	orrs	r3, r2
 800ff38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ff3a:	4a1c      	ldr	r2, [pc, #112]	; (800ffac <HAL_GPIO_Init+0x330>)
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ff40:	4b1a      	ldr	r3, [pc, #104]	; (800ffac <HAL_GPIO_Init+0x330>)
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	43db      	mvns	r3, r3
 800ff4a:	69ba      	ldr	r2, [r7, #24]
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d003      	beq.n	800ff64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ff5c:	69ba      	ldr	r2, [r7, #24]
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	4313      	orrs	r3, r2
 800ff62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ff64:	4a11      	ldr	r2, [pc, #68]	; (800ffac <HAL_GPIO_Init+0x330>)
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	61fb      	str	r3, [r7, #28]
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	2b0f      	cmp	r3, #15
 800ff74:	f67f ae90 	bls.w	800fc98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ff78:	bf00      	nop
 800ff7a:	3724      	adds	r7, #36	; 0x24
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	40023800 	.word	0x40023800
 800ff88:	40013800 	.word	0x40013800
 800ff8c:	40020000 	.word	0x40020000
 800ff90:	40020400 	.word	0x40020400
 800ff94:	40020800 	.word	0x40020800
 800ff98:	40020c00 	.word	0x40020c00
 800ff9c:	40021000 	.word	0x40021000
 800ffa0:	40021400 	.word	0x40021400
 800ffa4:	40021800 	.word	0x40021800
 800ffa8:	40021c00 	.word	0x40021c00
 800ffac:	40013c00 	.word	0x40013c00

0800ffb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	691a      	ldr	r2, [r3, #16]
 800ffc0:	887b      	ldrh	r3, [r7, #2]
 800ffc2:	4013      	ands	r3, r2
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d002      	beq.n	800ffce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	73fb      	strb	r3, [r7, #15]
 800ffcc:	e001      	b.n	800ffd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ffd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	807b      	strh	r3, [r7, #2]
 800ffec:	4613      	mov	r3, r2
 800ffee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fff0:	787b      	ldrb	r3, [r7, #1]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d003      	beq.n	800fffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fff6:	887a      	ldrh	r2, [r7, #2]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800fffc:	e003      	b.n	8010006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fffe:	887b      	ldrh	r3, [r7, #2]
 8010000:	041a      	lsls	r2, r3, #16
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	619a      	str	r2, [r3, #24]
}
 8010006:	bf00      	nop
 8010008:	370c      	adds	r7, #12
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
	...

08010014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010022:	2301      	movs	r3, #1
 8010024:	e11f      	b.n	8010266 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7fd fea0 	bl	800dd80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2224      	movs	r2, #36	; 0x24
 8010044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f022 0201 	bic.w	r2, r2, #1
 8010056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8010078:	f001 f820 	bl	80110bc <HAL_RCC_GetPCLK1Freq>
 801007c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	4a7b      	ldr	r2, [pc, #492]	; (8010270 <HAL_I2C_Init+0x25c>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d807      	bhi.n	8010098 <HAL_I2C_Init+0x84>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	4a7a      	ldr	r2, [pc, #488]	; (8010274 <HAL_I2C_Init+0x260>)
 801008c:	4293      	cmp	r3, r2
 801008e:	bf94      	ite	ls
 8010090:	2301      	movls	r3, #1
 8010092:	2300      	movhi	r3, #0
 8010094:	b2db      	uxtb	r3, r3
 8010096:	e006      	b.n	80100a6 <HAL_I2C_Init+0x92>
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	4a77      	ldr	r2, [pc, #476]	; (8010278 <HAL_I2C_Init+0x264>)
 801009c:	4293      	cmp	r3, r2
 801009e:	bf94      	ite	ls
 80100a0:	2301      	movls	r3, #1
 80100a2:	2300      	movhi	r3, #0
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80100aa:	2301      	movs	r3, #1
 80100ac:	e0db      	b.n	8010266 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	4a72      	ldr	r2, [pc, #456]	; (801027c <HAL_I2C_Init+0x268>)
 80100b2:	fba2 2303 	umull	r2, r3, r2, r3
 80100b6:	0c9b      	lsrs	r3, r3, #18
 80100b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	430a      	orrs	r2, r1
 80100cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	6a1b      	ldr	r3, [r3, #32]
 80100d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	4a64      	ldr	r2, [pc, #400]	; (8010270 <HAL_I2C_Init+0x25c>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d802      	bhi.n	80100e8 <HAL_I2C_Init+0xd4>
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	3301      	adds	r3, #1
 80100e6:	e009      	b.n	80100fc <HAL_I2C_Init+0xe8>
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80100ee:	fb02 f303 	mul.w	r3, r2, r3
 80100f2:	4a63      	ldr	r2, [pc, #396]	; (8010280 <HAL_I2C_Init+0x26c>)
 80100f4:	fba2 2303 	umull	r2, r3, r2, r3
 80100f8:	099b      	lsrs	r3, r3, #6
 80100fa:	3301      	adds	r3, #1
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	6812      	ldr	r2, [r2, #0]
 8010100:	430b      	orrs	r3, r1
 8010102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	69db      	ldr	r3, [r3, #28]
 801010a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801010e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	4956      	ldr	r1, [pc, #344]	; (8010270 <HAL_I2C_Init+0x25c>)
 8010118:	428b      	cmp	r3, r1
 801011a:	d80d      	bhi.n	8010138 <HAL_I2C_Init+0x124>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	1e59      	subs	r1, r3, #1
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	fbb1 f3f3 	udiv	r3, r1, r3
 801012a:	3301      	adds	r3, #1
 801012c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010130:	2b04      	cmp	r3, #4
 8010132:	bf38      	it	cc
 8010134:	2304      	movcc	r3, #4
 8010136:	e04f      	b.n	80101d8 <HAL_I2C_Init+0x1c4>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	689b      	ldr	r3, [r3, #8]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d111      	bne.n	8010164 <HAL_I2C_Init+0x150>
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	1e58      	subs	r0, r3, #1
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6859      	ldr	r1, [r3, #4]
 8010148:	460b      	mov	r3, r1
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	440b      	add	r3, r1
 801014e:	fbb0 f3f3 	udiv	r3, r0, r3
 8010152:	3301      	adds	r3, #1
 8010154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010158:	2b00      	cmp	r3, #0
 801015a:	bf0c      	ite	eq
 801015c:	2301      	moveq	r3, #1
 801015e:	2300      	movne	r3, #0
 8010160:	b2db      	uxtb	r3, r3
 8010162:	e012      	b.n	801018a <HAL_I2C_Init+0x176>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	1e58      	subs	r0, r3, #1
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6859      	ldr	r1, [r3, #4]
 801016c:	460b      	mov	r3, r1
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	440b      	add	r3, r1
 8010172:	0099      	lsls	r1, r3, #2
 8010174:	440b      	add	r3, r1
 8010176:	fbb0 f3f3 	udiv	r3, r0, r3
 801017a:	3301      	adds	r3, #1
 801017c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010180:	2b00      	cmp	r3, #0
 8010182:	bf0c      	ite	eq
 8010184:	2301      	moveq	r3, #1
 8010186:	2300      	movne	r3, #0
 8010188:	b2db      	uxtb	r3, r3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <HAL_I2C_Init+0x17e>
 801018e:	2301      	movs	r3, #1
 8010190:	e022      	b.n	80101d8 <HAL_I2C_Init+0x1c4>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d10e      	bne.n	80101b8 <HAL_I2C_Init+0x1a4>
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	1e58      	subs	r0, r3, #1
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6859      	ldr	r1, [r3, #4]
 80101a2:	460b      	mov	r3, r1
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	440b      	add	r3, r1
 80101a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80101ac:	3301      	adds	r3, #1
 80101ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101b6:	e00f      	b.n	80101d8 <HAL_I2C_Init+0x1c4>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	1e58      	subs	r0, r3, #1
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6859      	ldr	r1, [r3, #4]
 80101c0:	460b      	mov	r3, r1
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	440b      	add	r3, r1
 80101c6:	0099      	lsls	r1, r3, #2
 80101c8:	440b      	add	r3, r1
 80101ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80101ce:	3301      	adds	r3, #1
 80101d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	6809      	ldr	r1, [r1, #0]
 80101dc:	4313      	orrs	r3, r2
 80101de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	69da      	ldr	r2, [r3, #28]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	431a      	orrs	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	430a      	orrs	r2, r1
 80101fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8010206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	6911      	ldr	r1, [r2, #16]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	68d2      	ldr	r2, [r2, #12]
 8010212:	4311      	orrs	r1, r2
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	6812      	ldr	r2, [r2, #0]
 8010218:	430b      	orrs	r3, r1
 801021a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	695a      	ldr	r2, [r3, #20]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	699b      	ldr	r3, [r3, #24]
 801022e:	431a      	orrs	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	430a      	orrs	r2, r1
 8010236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f042 0201 	orr.w	r2, r2, #1
 8010246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2220      	movs	r2, #32
 8010252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	000186a0 	.word	0x000186a0
 8010274:	001e847f 	.word	0x001e847f
 8010278:	003d08ff 	.word	0x003d08ff
 801027c:	431bde83 	.word	0x431bde83
 8010280:	10624dd3 	.word	0x10624dd3

08010284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b088      	sub	sp, #32
 8010288:	af02      	add	r7, sp, #8
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	461a      	mov	r2, r3
 8010290:	460b      	mov	r3, r1
 8010292:	817b      	strh	r3, [r7, #10]
 8010294:	4613      	mov	r3, r2
 8010296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010298:	f7fe f960 	bl	800e55c <HAL_GetTick>
 801029c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	2b20      	cmp	r3, #32
 80102a8:	f040 80e0 	bne.w	801046c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	9300      	str	r3, [sp, #0]
 80102b0:	2319      	movs	r3, #25
 80102b2:	2201      	movs	r2, #1
 80102b4:	4970      	ldr	r1, [pc, #448]	; (8010478 <HAL_I2C_Master_Transmit+0x1f4>)
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f000 f964 	bl	8010584 <I2C_WaitOnFlagUntilTimeout>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80102c2:	2302      	movs	r3, #2
 80102c4:	e0d3      	b.n	801046e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d101      	bne.n	80102d4 <HAL_I2C_Master_Transmit+0x50>
 80102d0:	2302      	movs	r3, #2
 80102d2:	e0cc      	b.n	801046e <HAL_I2C_Master_Transmit+0x1ea>
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f003 0301 	and.w	r3, r3, #1
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	d007      	beq.n	80102fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f042 0201 	orr.w	r2, r2, #1
 80102f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2221      	movs	r2, #33	; 0x21
 801030e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2210      	movs	r2, #16
 8010316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2200      	movs	r2, #0
 801031e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	893a      	ldrh	r2, [r7, #8]
 801032a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010330:	b29a      	uxth	r2, r3
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	4a50      	ldr	r2, [pc, #320]	; (801047c <HAL_I2C_Master_Transmit+0x1f8>)
 801033a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801033c:	8979      	ldrh	r1, [r7, #10]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	6a3a      	ldr	r2, [r7, #32]
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f000 f89c 	bl	8010480 <I2C_MasterRequestWrite>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801034e:	2301      	movs	r3, #1
 8010350:	e08d      	b.n	801046e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010352:	2300      	movs	r3, #0
 8010354:	613b      	str	r3, [r7, #16]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	695b      	ldr	r3, [r3, #20]
 801035c:	613b      	str	r3, [r7, #16]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	699b      	ldr	r3, [r3, #24]
 8010364:	613b      	str	r3, [r7, #16]
 8010366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8010368:	e066      	b.n	8010438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801036a:	697a      	ldr	r2, [r7, #20]
 801036c:	6a39      	ldr	r1, [r7, #32]
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f000 f9de 	bl	8010730 <I2C_WaitOnTXEFlagUntilTimeout>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00d      	beq.n	8010396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801037e:	2b04      	cmp	r3, #4
 8010380:	d107      	bne.n	8010392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8010392:	2301      	movs	r3, #1
 8010394:	e06b      	b.n	801046e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039a:	781a      	ldrb	r2, [r3, #0]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a6:	1c5a      	adds	r2, r3, #1
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	3b01      	subs	r3, #1
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103be:	3b01      	subs	r3, #1
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	695b      	ldr	r3, [r3, #20]
 80103cc:	f003 0304 	and.w	r3, r3, #4
 80103d0:	2b04      	cmp	r3, #4
 80103d2:	d11b      	bne.n	801040c <HAL_I2C_Master_Transmit+0x188>
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d017      	beq.n	801040c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e0:	781a      	ldrb	r2, [r3, #0]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ec:	1c5a      	adds	r2, r3, #1
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	3b01      	subs	r3, #1
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010404:	3b01      	subs	r3, #1
 8010406:	b29a      	uxth	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801040c:	697a      	ldr	r2, [r7, #20]
 801040e:	6a39      	ldr	r1, [r7, #32]
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f000 f9ce 	bl	80107b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00d      	beq.n	8010438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010420:	2b04      	cmp	r3, #4
 8010422:	d107      	bne.n	8010434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8010434:	2301      	movs	r3, #1
 8010436:	e01a      	b.n	801046e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801043c:	2b00      	cmp	r3, #0
 801043e:	d194      	bne.n	801036a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801044e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2220      	movs	r2, #32
 8010454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2200      	movs	r2, #0
 8010464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010468:	2300      	movs	r3, #0
 801046a:	e000      	b.n	801046e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801046c:	2302      	movs	r3, #2
  }
}
 801046e:	4618      	mov	r0, r3
 8010470:	3718      	adds	r7, #24
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	00100002 	.word	0x00100002
 801047c:	ffff0000 	.word	0xffff0000

08010480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af02      	add	r7, sp, #8
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	607a      	str	r2, [r7, #4]
 801048a:	603b      	str	r3, [r7, #0]
 801048c:	460b      	mov	r3, r1
 801048e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	2b08      	cmp	r3, #8
 801049a:	d006      	beq.n	80104aa <I2C_MasterRequestWrite+0x2a>
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d003      	beq.n	80104aa <I2C_MasterRequestWrite+0x2a>
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80104a8:	d108      	bne.n	80104bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104b8:	601a      	str	r2, [r3, #0]
 80104ba:	e00b      	b.n	80104d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c0:	2b12      	cmp	r3, #18
 80104c2:	d107      	bne.n	80104d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	9300      	str	r3, [sp, #0]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f000 f84f 	bl	8010584 <I2C_WaitOnFlagUntilTimeout>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00d      	beq.n	8010508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104fa:	d103      	bne.n	8010504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010504:	2303      	movs	r3, #3
 8010506:	e035      	b.n	8010574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	691b      	ldr	r3, [r3, #16]
 801050c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010510:	d108      	bne.n	8010524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010512:	897b      	ldrh	r3, [r7, #10]
 8010514:	b2db      	uxtb	r3, r3
 8010516:	461a      	mov	r2, r3
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010520:	611a      	str	r2, [r3, #16]
 8010522:	e01b      	b.n	801055c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010524:	897b      	ldrh	r3, [r7, #10]
 8010526:	11db      	asrs	r3, r3, #7
 8010528:	b2db      	uxtb	r3, r3
 801052a:	f003 0306 	and.w	r3, r3, #6
 801052e:	b2db      	uxtb	r3, r3
 8010530:	f063 030f 	orn	r3, r3, #15
 8010534:	b2da      	uxtb	r2, r3
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	490e      	ldr	r1, [pc, #56]	; (801057c <I2C_MasterRequestWrite+0xfc>)
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f000 f875 	bl	8010632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801054e:	2301      	movs	r3, #1
 8010550:	e010      	b.n	8010574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010552:	897b      	ldrh	r3, [r7, #10]
 8010554:	b2da      	uxtb	r2, r3
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	4907      	ldr	r1, [pc, #28]	; (8010580 <I2C_MasterRequestWrite+0x100>)
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f000 f865 	bl	8010632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d001      	beq.n	8010572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801056e:	2301      	movs	r3, #1
 8010570:	e000      	b.n	8010574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010572:	2300      	movs	r3, #0
}
 8010574:	4618      	mov	r0, r3
 8010576:	3718      	adds	r7, #24
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	00010008 	.word	0x00010008
 8010580:	00010002 	.word	0x00010002

08010584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	603b      	str	r3, [r7, #0]
 8010590:	4613      	mov	r3, r2
 8010592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010594:	e025      	b.n	80105e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059c:	d021      	beq.n	80105e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801059e:	f7fd ffdd 	bl	800e55c <HAL_GetTick>
 80105a2:	4602      	mov	r2, r0
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d302      	bcc.n	80105b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d116      	bne.n	80105e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2200      	movs	r2, #0
 80105b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2220      	movs	r2, #32
 80105be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2200      	movs	r2, #0
 80105c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ce:	f043 0220 	orr.w	r2, r3, #32
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	e023      	b.n	801062a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	0c1b      	lsrs	r3, r3, #16
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d10d      	bne.n	8010608 <I2C_WaitOnFlagUntilTimeout+0x84>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	695b      	ldr	r3, [r3, #20]
 80105f2:	43da      	mvns	r2, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	4013      	ands	r3, r2
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	bf0c      	ite	eq
 80105fe:	2301      	moveq	r3, #1
 8010600:	2300      	movne	r3, #0
 8010602:	b2db      	uxtb	r3, r3
 8010604:	461a      	mov	r2, r3
 8010606:	e00c      	b.n	8010622 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	43da      	mvns	r2, r3
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	4013      	ands	r3, r2
 8010614:	b29b      	uxth	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	bf0c      	ite	eq
 801061a:	2301      	moveq	r3, #1
 801061c:	2300      	movne	r3, #0
 801061e:	b2db      	uxtb	r3, r3
 8010620:	461a      	mov	r2, r3
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	429a      	cmp	r2, r3
 8010626:	d0b6      	beq.n	8010596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010628:	2300      	movs	r3, #0
}
 801062a:	4618      	mov	r0, r3
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b084      	sub	sp, #16
 8010636:	af00      	add	r7, sp, #0
 8010638:	60f8      	str	r0, [r7, #12]
 801063a:	60b9      	str	r1, [r7, #8]
 801063c:	607a      	str	r2, [r7, #4]
 801063e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010640:	e051      	b.n	80106e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	695b      	ldr	r3, [r3, #20]
 8010648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801064c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010650:	d123      	bne.n	801069a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	681a      	ldr	r2, [r3, #0]
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010660:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801066a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2220      	movs	r2, #32
 8010676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010686:	f043 0204 	orr.w	r2, r3, #4
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010696:	2301      	movs	r3, #1
 8010698:	e046      	b.n	8010728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a0:	d021      	beq.n	80106e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106a2:	f7fd ff5b 	bl	800e55c <HAL_GetTick>
 80106a6:	4602      	mov	r2, r0
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d302      	bcc.n	80106b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d116      	bne.n	80106e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2200      	movs	r2, #0
 80106bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2220      	movs	r2, #32
 80106c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2200      	movs	r2, #0
 80106ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d2:	f043 0220 	orr.w	r2, r3, #32
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80106e2:	2301      	movs	r3, #1
 80106e4:	e020      	b.n	8010728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	0c1b      	lsrs	r3, r3, #16
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d10c      	bne.n	801070a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	43da      	mvns	r2, r3
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	4013      	ands	r3, r2
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	2b00      	cmp	r3, #0
 8010700:	bf14      	ite	ne
 8010702:	2301      	movne	r3, #1
 8010704:	2300      	moveq	r3, #0
 8010706:	b2db      	uxtb	r3, r3
 8010708:	e00b      	b.n	8010722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	43da      	mvns	r2, r3
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	4013      	ands	r3, r2
 8010716:	b29b      	uxth	r3, r3
 8010718:	2b00      	cmp	r3, #0
 801071a:	bf14      	ite	ne
 801071c:	2301      	movne	r3, #1
 801071e:	2300      	moveq	r3, #0
 8010720:	b2db      	uxtb	r3, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	d18d      	bne.n	8010642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3710      	adds	r7, #16
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801073c:	e02d      	b.n	801079a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	f000 f878 	bl	8010834 <I2C_IsAcknowledgeFailed>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	e02d      	b.n	80107aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010754:	d021      	beq.n	801079a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010756:	f7fd ff01 	bl	800e55c <HAL_GetTick>
 801075a:	4602      	mov	r2, r0
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	429a      	cmp	r2, r3
 8010764:	d302      	bcc.n	801076c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d116      	bne.n	801079a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2220      	movs	r2, #32
 8010776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	f043 0220 	orr.w	r2, r3, #32
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2200      	movs	r2, #0
 8010792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010796:	2301      	movs	r3, #1
 8010798:	e007      	b.n	80107aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	695b      	ldr	r3, [r3, #20]
 80107a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107a4:	2b80      	cmp	r3, #128	; 0x80
 80107a6:	d1ca      	bne.n	801073e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3710      	adds	r7, #16
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80107b2:	b580      	push	{r7, lr}
 80107b4:	b084      	sub	sp, #16
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	60f8      	str	r0, [r7, #12]
 80107ba:	60b9      	str	r1, [r7, #8]
 80107bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80107be:	e02d      	b.n	801081c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f000 f837 	bl	8010834 <I2C_IsAcknowledgeFailed>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d001      	beq.n	80107d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80107cc:	2301      	movs	r3, #1
 80107ce:	e02d      	b.n	801082c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107d6:	d021      	beq.n	801081c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107d8:	f7fd fec0 	bl	800e55c <HAL_GetTick>
 80107dc:	4602      	mov	r2, r0
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d302      	bcc.n	80107ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d116      	bne.n	801081c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2200      	movs	r2, #0
 80107f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2220      	movs	r2, #32
 80107f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2200      	movs	r2, #0
 8010800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010808:	f043 0220 	orr.w	r2, r3, #32
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010818:	2301      	movs	r3, #1
 801081a:	e007      	b.n	801082c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	695b      	ldr	r3, [r3, #20]
 8010822:	f003 0304 	and.w	r3, r3, #4
 8010826:	2b04      	cmp	r3, #4
 8010828:	d1ca      	bne.n	80107c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	695b      	ldr	r3, [r3, #20]
 8010842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801084a:	d11b      	bne.n	8010884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2200      	movs	r2, #0
 801085a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2220      	movs	r2, #32
 8010860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010870:	f043 0204 	orr.w	r2, r3, #4
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2200      	movs	r2, #0
 801087c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	e000      	b.n	8010886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	370c      	adds	r7, #12
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
	...

08010894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	e25b      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f003 0301 	and.w	r3, r3, #1
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d075      	beq.n	801099e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80108b2:	4ba3      	ldr	r3, [pc, #652]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	f003 030c 	and.w	r3, r3, #12
 80108ba:	2b04      	cmp	r3, #4
 80108bc:	d00c      	beq.n	80108d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80108be:	4ba0      	ldr	r3, [pc, #640]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80108c6:	2b08      	cmp	r3, #8
 80108c8:	d112      	bne.n	80108f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80108ca:	4b9d      	ldr	r3, [pc, #628]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80108d6:	d10b      	bne.n	80108f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80108d8:	4b99      	ldr	r3, [pc, #612]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d05b      	beq.n	801099c <HAL_RCC_OscConfig+0x108>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d157      	bne.n	801099c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80108ec:	2301      	movs	r3, #1
 80108ee:	e236      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108f8:	d106      	bne.n	8010908 <HAL_RCC_OscConfig+0x74>
 80108fa:	4b91      	ldr	r3, [pc, #580]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4a90      	ldr	r2, [pc, #576]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010904:	6013      	str	r3, [r2, #0]
 8010906:	e01d      	b.n	8010944 <HAL_RCC_OscConfig+0xb0>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010910:	d10c      	bne.n	801092c <HAL_RCC_OscConfig+0x98>
 8010912:	4b8b      	ldr	r3, [pc, #556]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a8a      	ldr	r2, [pc, #552]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801091c:	6013      	str	r3, [r2, #0]
 801091e:	4b88      	ldr	r3, [pc, #544]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4a87      	ldr	r2, [pc, #540]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010928:	6013      	str	r3, [r2, #0]
 801092a:	e00b      	b.n	8010944 <HAL_RCC_OscConfig+0xb0>
 801092c:	4b84      	ldr	r3, [pc, #528]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a83      	ldr	r2, [pc, #524]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	4b81      	ldr	r3, [pc, #516]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	4a80      	ldr	r2, [pc, #512]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 801093e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d013      	beq.n	8010974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801094c:	f7fd fe06 	bl	800e55c <HAL_GetTick>
 8010950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010952:	e008      	b.n	8010966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010954:	f7fd fe02 	bl	800e55c <HAL_GetTick>
 8010958:	4602      	mov	r2, r0
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b64      	cmp	r3, #100	; 0x64
 8010960:	d901      	bls.n	8010966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010962:	2303      	movs	r3, #3
 8010964:	e1fb      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010966:	4b76      	ldr	r3, [pc, #472]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801096e:	2b00      	cmp	r3, #0
 8010970:	d0f0      	beq.n	8010954 <HAL_RCC_OscConfig+0xc0>
 8010972:	e014      	b.n	801099e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010974:	f7fd fdf2 	bl	800e55c <HAL_GetTick>
 8010978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801097a:	e008      	b.n	801098e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801097c:	f7fd fdee 	bl	800e55c <HAL_GetTick>
 8010980:	4602      	mov	r2, r0
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	2b64      	cmp	r3, #100	; 0x64
 8010988:	d901      	bls.n	801098e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801098a:	2303      	movs	r3, #3
 801098c:	e1e7      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801098e:	4b6c      	ldr	r3, [pc, #432]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1f0      	bne.n	801097c <HAL_RCC_OscConfig+0xe8>
 801099a:	e000      	b.n	801099e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801099c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f003 0302 	and.w	r3, r3, #2
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d063      	beq.n	8010a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80109aa:	4b65      	ldr	r3, [pc, #404]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	f003 030c 	and.w	r3, r3, #12
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00b      	beq.n	80109ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80109b6:	4b62      	ldr	r3, [pc, #392]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80109b8:	689b      	ldr	r3, [r3, #8]
 80109ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80109be:	2b08      	cmp	r3, #8
 80109c0:	d11c      	bne.n	80109fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80109c2:	4b5f      	ldr	r3, [pc, #380]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d116      	bne.n	80109fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80109ce:	4b5c      	ldr	r3, [pc, #368]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f003 0302 	and.w	r3, r3, #2
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d005      	beq.n	80109e6 <HAL_RCC_OscConfig+0x152>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d001      	beq.n	80109e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	e1bb      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109e6:	4b56      	ldr	r3, [pc, #344]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	00db      	lsls	r3, r3, #3
 80109f4:	4952      	ldr	r1, [pc, #328]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 80109f6:	4313      	orrs	r3, r2
 80109f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80109fa:	e03a      	b.n	8010a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d020      	beq.n	8010a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010a04:	4b4f      	ldr	r3, [pc, #316]	; (8010b44 <HAL_RCC_OscConfig+0x2b0>)
 8010a06:	2201      	movs	r2, #1
 8010a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a0a:	f7fd fda7 	bl	800e55c <HAL_GetTick>
 8010a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010a10:	e008      	b.n	8010a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010a12:	f7fd fda3 	bl	800e55c <HAL_GetTick>
 8010a16:	4602      	mov	r2, r0
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	2b02      	cmp	r3, #2
 8010a1e:	d901      	bls.n	8010a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010a20:	2303      	movs	r3, #3
 8010a22:	e19c      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010a24:	4b46      	ldr	r3, [pc, #280]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 0302 	and.w	r3, r3, #2
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d0f0      	beq.n	8010a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a30:	4b43      	ldr	r3, [pc, #268]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	691b      	ldr	r3, [r3, #16]
 8010a3c:	00db      	lsls	r3, r3, #3
 8010a3e:	4940      	ldr	r1, [pc, #256]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010a40:	4313      	orrs	r3, r2
 8010a42:	600b      	str	r3, [r1, #0]
 8010a44:	e015      	b.n	8010a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010a46:	4b3f      	ldr	r3, [pc, #252]	; (8010b44 <HAL_RCC_OscConfig+0x2b0>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a4c:	f7fd fd86 	bl	800e55c <HAL_GetTick>
 8010a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010a52:	e008      	b.n	8010a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010a54:	f7fd fd82 	bl	800e55c <HAL_GetTick>
 8010a58:	4602      	mov	r2, r0
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d901      	bls.n	8010a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010a62:	2303      	movs	r3, #3
 8010a64:	e17b      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010a66:	4b36      	ldr	r3, [pc, #216]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f003 0302 	and.w	r3, r3, #2
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1f0      	bne.n	8010a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f003 0308 	and.w	r3, r3, #8
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d030      	beq.n	8010ae0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d016      	beq.n	8010ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010a86:	4b30      	ldr	r3, [pc, #192]	; (8010b48 <HAL_RCC_OscConfig+0x2b4>)
 8010a88:	2201      	movs	r2, #1
 8010a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a8c:	f7fd fd66 	bl	800e55c <HAL_GetTick>
 8010a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a92:	e008      	b.n	8010aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010a94:	f7fd fd62 	bl	800e55c <HAL_GetTick>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d901      	bls.n	8010aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010aa2:	2303      	movs	r3, #3
 8010aa4:	e15b      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010aa6:	4b26      	ldr	r3, [pc, #152]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010aaa:	f003 0302 	and.w	r3, r3, #2
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d0f0      	beq.n	8010a94 <HAL_RCC_OscConfig+0x200>
 8010ab2:	e015      	b.n	8010ae0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010ab4:	4b24      	ldr	r3, [pc, #144]	; (8010b48 <HAL_RCC_OscConfig+0x2b4>)
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010aba:	f7fd fd4f 	bl	800e55c <HAL_GetTick>
 8010abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ac0:	e008      	b.n	8010ad4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010ac2:	f7fd fd4b 	bl	800e55c <HAL_GetTick>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	2b02      	cmp	r3, #2
 8010ace:	d901      	bls.n	8010ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010ad0:	2303      	movs	r3, #3
 8010ad2:	e144      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ad4:	4b1a      	ldr	r3, [pc, #104]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ad8:	f003 0302 	and.w	r3, r3, #2
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d1f0      	bne.n	8010ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f003 0304 	and.w	r3, r3, #4
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f000 80a0 	beq.w	8010c2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010aee:	2300      	movs	r3, #0
 8010af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010af2:	4b13      	ldr	r3, [pc, #76]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d10f      	bne.n	8010b1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010afe:	2300      	movs	r3, #0
 8010b00:	60bb      	str	r3, [r7, #8]
 8010b02:	4b0f      	ldr	r3, [pc, #60]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b06:	4a0e      	ldr	r2, [pc, #56]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8010b0e:	4b0c      	ldr	r3, [pc, #48]	; (8010b40 <HAL_RCC_OscConfig+0x2ac>)
 8010b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b16:	60bb      	str	r3, [r7, #8]
 8010b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b1e:	4b0b      	ldr	r3, [pc, #44]	; (8010b4c <HAL_RCC_OscConfig+0x2b8>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d121      	bne.n	8010b6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010b2a:	4b08      	ldr	r3, [pc, #32]	; (8010b4c <HAL_RCC_OscConfig+0x2b8>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a07      	ldr	r2, [pc, #28]	; (8010b4c <HAL_RCC_OscConfig+0x2b8>)
 8010b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010b36:	f7fd fd11 	bl	800e55c <HAL_GetTick>
 8010b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b3c:	e011      	b.n	8010b62 <HAL_RCC_OscConfig+0x2ce>
 8010b3e:	bf00      	nop
 8010b40:	40023800 	.word	0x40023800
 8010b44:	42470000 	.word	0x42470000
 8010b48:	42470e80 	.word	0x42470e80
 8010b4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010b50:	f7fd fd04 	bl	800e55c <HAL_GetTick>
 8010b54:	4602      	mov	r2, r0
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d901      	bls.n	8010b62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	e0fd      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b62:	4b81      	ldr	r3, [pc, #516]	; (8010d68 <HAL_RCC_OscConfig+0x4d4>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d0f0      	beq.n	8010b50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	689b      	ldr	r3, [r3, #8]
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d106      	bne.n	8010b84 <HAL_RCC_OscConfig+0x2f0>
 8010b76:	4b7d      	ldr	r3, [pc, #500]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b7a:	4a7c      	ldr	r2, [pc, #496]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010b7c:	f043 0301 	orr.w	r3, r3, #1
 8010b80:	6713      	str	r3, [r2, #112]	; 0x70
 8010b82:	e01c      	b.n	8010bbe <HAL_RCC_OscConfig+0x32a>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	2b05      	cmp	r3, #5
 8010b8a:	d10c      	bne.n	8010ba6 <HAL_RCC_OscConfig+0x312>
 8010b8c:	4b77      	ldr	r3, [pc, #476]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b90:	4a76      	ldr	r2, [pc, #472]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010b92:	f043 0304 	orr.w	r3, r3, #4
 8010b96:	6713      	str	r3, [r2, #112]	; 0x70
 8010b98:	4b74      	ldr	r3, [pc, #464]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b9c:	4a73      	ldr	r2, [pc, #460]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010b9e:	f043 0301 	orr.w	r3, r3, #1
 8010ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8010ba4:	e00b      	b.n	8010bbe <HAL_RCC_OscConfig+0x32a>
 8010ba6:	4b71      	ldr	r3, [pc, #452]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010baa:	4a70      	ldr	r2, [pc, #448]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010bac:	f023 0301 	bic.w	r3, r3, #1
 8010bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8010bb2:	4b6e      	ldr	r3, [pc, #440]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bb6:	4a6d      	ldr	r2, [pc, #436]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010bb8:	f023 0304 	bic.w	r3, r3, #4
 8010bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d015      	beq.n	8010bf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010bc6:	f7fd fcc9 	bl	800e55c <HAL_GetTick>
 8010bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010bcc:	e00a      	b.n	8010be4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010bce:	f7fd fcc5 	bl	800e55c <HAL_GetTick>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d901      	bls.n	8010be4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010be0:	2303      	movs	r3, #3
 8010be2:	e0bc      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010be4:	4b61      	ldr	r3, [pc, #388]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010be8:	f003 0302 	and.w	r3, r3, #2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d0ee      	beq.n	8010bce <HAL_RCC_OscConfig+0x33a>
 8010bf0:	e014      	b.n	8010c1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010bf2:	f7fd fcb3 	bl	800e55c <HAL_GetTick>
 8010bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010bf8:	e00a      	b.n	8010c10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010bfa:	f7fd fcaf 	bl	800e55c <HAL_GetTick>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d901      	bls.n	8010c10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010c0c:	2303      	movs	r3, #3
 8010c0e:	e0a6      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010c10:	4b56      	ldr	r3, [pc, #344]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c14:	f003 0302 	and.w	r3, r3, #2
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d1ee      	bne.n	8010bfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010c1c:	7dfb      	ldrb	r3, [r7, #23]
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d105      	bne.n	8010c2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c22:	4b52      	ldr	r3, [pc, #328]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c26:	4a51      	ldr	r2, [pc, #324]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	699b      	ldr	r3, [r3, #24]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 8092 	beq.w	8010d5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010c38:	4b4c      	ldr	r3, [pc, #304]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	f003 030c 	and.w	r3, r3, #12
 8010c40:	2b08      	cmp	r3, #8
 8010c42:	d05c      	beq.n	8010cfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	699b      	ldr	r3, [r3, #24]
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d141      	bne.n	8010cd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010c4c:	4b48      	ldr	r3, [pc, #288]	; (8010d70 <HAL_RCC_OscConfig+0x4dc>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010c52:	f7fd fc83 	bl	800e55c <HAL_GetTick>
 8010c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c58:	e008      	b.n	8010c6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c5a:	f7fd fc7f 	bl	800e55c <HAL_GetTick>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	d901      	bls.n	8010c6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010c68:	2303      	movs	r3, #3
 8010c6a:	e078      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c6c:	4b3f      	ldr	r3, [pc, #252]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d1f0      	bne.n	8010c5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	69da      	ldr	r2, [r3, #28]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a1b      	ldr	r3, [r3, #32]
 8010c80:	431a      	orrs	r2, r3
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c86:	019b      	lsls	r3, r3, #6
 8010c88:	431a      	orrs	r2, r3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c8e:	085b      	lsrs	r3, r3, #1
 8010c90:	3b01      	subs	r3, #1
 8010c92:	041b      	lsls	r3, r3, #16
 8010c94:	431a      	orrs	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c9a:	061b      	lsls	r3, r3, #24
 8010c9c:	4933      	ldr	r1, [pc, #204]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010ca2:	4b33      	ldr	r3, [pc, #204]	; (8010d70 <HAL_RCC_OscConfig+0x4dc>)
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010ca8:	f7fd fc58 	bl	800e55c <HAL_GetTick>
 8010cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010cae:	e008      	b.n	8010cc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010cb0:	f7fd fc54 	bl	800e55c <HAL_GetTick>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d901      	bls.n	8010cc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	e04d      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010cc2:	4b2a      	ldr	r3, [pc, #168]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d0f0      	beq.n	8010cb0 <HAL_RCC_OscConfig+0x41c>
 8010cce:	e045      	b.n	8010d5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010cd0:	4b27      	ldr	r3, [pc, #156]	; (8010d70 <HAL_RCC_OscConfig+0x4dc>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010cd6:	f7fd fc41 	bl	800e55c <HAL_GetTick>
 8010cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010cdc:	e008      	b.n	8010cf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010cde:	f7fd fc3d 	bl	800e55c <HAL_GetTick>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	2b02      	cmp	r3, #2
 8010cea:	d901      	bls.n	8010cf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010cec:	2303      	movs	r3, #3
 8010cee:	e036      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010cf0:	4b1e      	ldr	r3, [pc, #120]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1f0      	bne.n	8010cde <HAL_RCC_OscConfig+0x44a>
 8010cfc:	e02e      	b.n	8010d5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	2b01      	cmp	r3, #1
 8010d04:	d101      	bne.n	8010d0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	e029      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010d0a:	4b18      	ldr	r3, [pc, #96]	; (8010d6c <HAL_RCC_OscConfig+0x4d8>)
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	69db      	ldr	r3, [r3, #28]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d11c      	bne.n	8010d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d115      	bne.n	8010d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010d32:	4013      	ands	r3, r2
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d10d      	bne.n	8010d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d106      	bne.n	8010d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d001      	beq.n	8010d5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e000      	b.n	8010d5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010d5c:	2300      	movs	r3, #0
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	40007000 	.word	0x40007000
 8010d6c:	40023800 	.word	0x40023800
 8010d70:	42470060 	.word	0x42470060

08010d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d101      	bne.n	8010d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010d84:	2301      	movs	r3, #1
 8010d86:	e0cc      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010d88:	4b68      	ldr	r3, [pc, #416]	; (8010f2c <HAL_RCC_ClockConfig+0x1b8>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f003 030f 	and.w	r3, r3, #15
 8010d90:	683a      	ldr	r2, [r7, #0]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d90c      	bls.n	8010db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d96:	4b65      	ldr	r3, [pc, #404]	; (8010f2c <HAL_RCC_ClockConfig+0x1b8>)
 8010d98:	683a      	ldr	r2, [r7, #0]
 8010d9a:	b2d2      	uxtb	r2, r2
 8010d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010d9e:	4b63      	ldr	r3, [pc, #396]	; (8010f2c <HAL_RCC_ClockConfig+0x1b8>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f003 030f 	and.w	r3, r3, #15
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d001      	beq.n	8010db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e0b8      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f003 0302 	and.w	r3, r3, #2
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d020      	beq.n	8010dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f003 0304 	and.w	r3, r3, #4
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010dc8:	4b59      	ldr	r3, [pc, #356]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	4a58      	ldr	r2, [pc, #352]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f003 0308 	and.w	r3, r3, #8
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d005      	beq.n	8010dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010de0:	4b53      	ldr	r3, [pc, #332]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010de2:	689b      	ldr	r3, [r3, #8]
 8010de4:	4a52      	ldr	r2, [pc, #328]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010dec:	4b50      	ldr	r3, [pc, #320]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	494d      	ldr	r1, [pc, #308]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d044      	beq.n	8010e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d107      	bne.n	8010e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e12:	4b47      	ldr	r3, [pc, #284]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d119      	bne.n	8010e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e07f      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	d003      	beq.n	8010e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010e2e:	2b03      	cmp	r3, #3
 8010e30:	d107      	bne.n	8010e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010e32:	4b3f      	ldr	r3, [pc, #252]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d109      	bne.n	8010e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	e06f      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e42:	4b3b      	ldr	r3, [pc, #236]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f003 0302 	and.w	r3, r3, #2
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e067      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010e52:	4b37      	ldr	r3, [pc, #220]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	f023 0203 	bic.w	r2, r3, #3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	4934      	ldr	r1, [pc, #208]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010e60:	4313      	orrs	r3, r2
 8010e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010e64:	f7fd fb7a 	bl	800e55c <HAL_GetTick>
 8010e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e6a:	e00a      	b.n	8010e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010e6c:	f7fd fb76 	bl	800e55c <HAL_GetTick>
 8010e70:	4602      	mov	r2, r0
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d901      	bls.n	8010e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	e04f      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010e82:	4b2b      	ldr	r3, [pc, #172]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	f003 020c 	and.w	r2, r3, #12
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d1eb      	bne.n	8010e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010e94:	4b25      	ldr	r3, [pc, #148]	; (8010f2c <HAL_RCC_ClockConfig+0x1b8>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f003 030f 	and.w	r3, r3, #15
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d20c      	bcs.n	8010ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010ea2:	4b22      	ldr	r3, [pc, #136]	; (8010f2c <HAL_RCC_ClockConfig+0x1b8>)
 8010ea4:	683a      	ldr	r2, [r7, #0]
 8010ea6:	b2d2      	uxtb	r2, r2
 8010ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010eaa:	4b20      	ldr	r3, [pc, #128]	; (8010f2c <HAL_RCC_ClockConfig+0x1b8>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f003 030f 	and.w	r3, r3, #15
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d001      	beq.n	8010ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e032      	b.n	8010f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f003 0304 	and.w	r3, r3, #4
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d008      	beq.n	8010eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010ec8:	4b19      	ldr	r3, [pc, #100]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	4916      	ldr	r1, [pc, #88]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f003 0308 	and.w	r3, r3, #8
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d009      	beq.n	8010efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010ee6:	4b12      	ldr	r3, [pc, #72]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010ee8:	689b      	ldr	r3, [r3, #8]
 8010eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	490e      	ldr	r1, [pc, #56]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010efa:	f000 f821 	bl	8010f40 <HAL_RCC_GetSysClockFreq>
 8010efe:	4601      	mov	r1, r0
 8010f00:	4b0b      	ldr	r3, [pc, #44]	; (8010f30 <HAL_RCC_ClockConfig+0x1bc>)
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	091b      	lsrs	r3, r3, #4
 8010f06:	f003 030f 	and.w	r3, r3, #15
 8010f0a:	4a0a      	ldr	r2, [pc, #40]	; (8010f34 <HAL_RCC_ClockConfig+0x1c0>)
 8010f0c:	5cd3      	ldrb	r3, [r2, r3]
 8010f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8010f12:	4a09      	ldr	r2, [pc, #36]	; (8010f38 <HAL_RCC_ClockConfig+0x1c4>)
 8010f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010f16:	4b09      	ldr	r3, [pc, #36]	; (8010f3c <HAL_RCC_ClockConfig+0x1c8>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fd fada 	bl	800e4d4 <HAL_InitTick>

  return HAL_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	40023c00 	.word	0x40023c00
 8010f30:	40023800 	.word	0x40023800
 8010f34:	080162b4 	.word	0x080162b4
 8010f38:	2000000c 	.word	0x2000000c
 8010f3c:	20000010 	.word	0x20000010

08010f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010f46:	2300      	movs	r3, #0
 8010f48:	607b      	str	r3, [r7, #4]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60fb      	str	r3, [r7, #12]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010f52:	2300      	movs	r3, #0
 8010f54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010f56:	4b50      	ldr	r3, [pc, #320]	; (8011098 <HAL_RCC_GetSysClockFreq+0x158>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	f003 030c 	and.w	r3, r3, #12
 8010f5e:	2b04      	cmp	r3, #4
 8010f60:	d007      	beq.n	8010f72 <HAL_RCC_GetSysClockFreq+0x32>
 8010f62:	2b08      	cmp	r3, #8
 8010f64:	d008      	beq.n	8010f78 <HAL_RCC_GetSysClockFreq+0x38>
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f040 808d 	bne.w	8011086 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010f6c:	4b4b      	ldr	r3, [pc, #300]	; (801109c <HAL_RCC_GetSysClockFreq+0x15c>)
 8010f6e:	60bb      	str	r3, [r7, #8]
       break;
 8010f70:	e08c      	b.n	801108c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010f72:	4b4b      	ldr	r3, [pc, #300]	; (80110a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8010f74:	60bb      	str	r3, [r7, #8]
      break;
 8010f76:	e089      	b.n	801108c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010f78:	4b47      	ldr	r3, [pc, #284]	; (8011098 <HAL_RCC_GetSysClockFreq+0x158>)
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010f82:	4b45      	ldr	r3, [pc, #276]	; (8011098 <HAL_RCC_GetSysClockFreq+0x158>)
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d023      	beq.n	8010fd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010f8e:	4b42      	ldr	r3, [pc, #264]	; (8011098 <HAL_RCC_GetSysClockFreq+0x158>)
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	099b      	lsrs	r3, r3, #6
 8010f94:	f04f 0400 	mov.w	r4, #0
 8010f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010f9c:	f04f 0200 	mov.w	r2, #0
 8010fa0:	ea03 0501 	and.w	r5, r3, r1
 8010fa4:	ea04 0602 	and.w	r6, r4, r2
 8010fa8:	4a3d      	ldr	r2, [pc, #244]	; (80110a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8010faa:	fb02 f106 	mul.w	r1, r2, r6
 8010fae:	2200      	movs	r2, #0
 8010fb0:	fb02 f205 	mul.w	r2, r2, r5
 8010fb4:	440a      	add	r2, r1
 8010fb6:	493a      	ldr	r1, [pc, #232]	; (80110a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8010fb8:	fba5 0101 	umull	r0, r1, r5, r1
 8010fbc:	1853      	adds	r3, r2, r1
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f04f 0400 	mov.w	r4, #0
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4623      	mov	r3, r4
 8010fca:	f7f7 fd75 	bl	8008ab8 <__aeabi_uldivmod>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	e049      	b.n	801106a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010fd6:	4b30      	ldr	r3, [pc, #192]	; (8011098 <HAL_RCC_GetSysClockFreq+0x158>)
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	099b      	lsrs	r3, r3, #6
 8010fdc:	f04f 0400 	mov.w	r4, #0
 8010fe0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010fe4:	f04f 0200 	mov.w	r2, #0
 8010fe8:	ea03 0501 	and.w	r5, r3, r1
 8010fec:	ea04 0602 	and.w	r6, r4, r2
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	4632      	mov	r2, r6
 8010ff4:	f04f 0300 	mov.w	r3, #0
 8010ff8:	f04f 0400 	mov.w	r4, #0
 8010ffc:	0154      	lsls	r4, r2, #5
 8010ffe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011002:	014b      	lsls	r3, r1, #5
 8011004:	4619      	mov	r1, r3
 8011006:	4622      	mov	r2, r4
 8011008:	1b49      	subs	r1, r1, r5
 801100a:	eb62 0206 	sbc.w	r2, r2, r6
 801100e:	f04f 0300 	mov.w	r3, #0
 8011012:	f04f 0400 	mov.w	r4, #0
 8011016:	0194      	lsls	r4, r2, #6
 8011018:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801101c:	018b      	lsls	r3, r1, #6
 801101e:	1a5b      	subs	r3, r3, r1
 8011020:	eb64 0402 	sbc.w	r4, r4, r2
 8011024:	f04f 0100 	mov.w	r1, #0
 8011028:	f04f 0200 	mov.w	r2, #0
 801102c:	00e2      	lsls	r2, r4, #3
 801102e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011032:	00d9      	lsls	r1, r3, #3
 8011034:	460b      	mov	r3, r1
 8011036:	4614      	mov	r4, r2
 8011038:	195b      	adds	r3, r3, r5
 801103a:	eb44 0406 	adc.w	r4, r4, r6
 801103e:	f04f 0100 	mov.w	r1, #0
 8011042:	f04f 0200 	mov.w	r2, #0
 8011046:	02a2      	lsls	r2, r4, #10
 8011048:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801104c:	0299      	lsls	r1, r3, #10
 801104e:	460b      	mov	r3, r1
 8011050:	4614      	mov	r4, r2
 8011052:	4618      	mov	r0, r3
 8011054:	4621      	mov	r1, r4
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f04f 0400 	mov.w	r4, #0
 801105c:	461a      	mov	r2, r3
 801105e:	4623      	mov	r3, r4
 8011060:	f7f7 fd2a 	bl	8008ab8 <__aeabi_uldivmod>
 8011064:	4603      	mov	r3, r0
 8011066:	460c      	mov	r4, r1
 8011068:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801106a:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <HAL_RCC_GetSysClockFreq+0x158>)
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	0c1b      	lsrs	r3, r3, #16
 8011070:	f003 0303 	and.w	r3, r3, #3
 8011074:	3301      	adds	r3, #1
 8011076:	005b      	lsls	r3, r3, #1
 8011078:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011082:	60bb      	str	r3, [r7, #8]
      break;
 8011084:	e002      	b.n	801108c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011086:	4b05      	ldr	r3, [pc, #20]	; (801109c <HAL_RCC_GetSysClockFreq+0x15c>)
 8011088:	60bb      	str	r3, [r7, #8]
      break;
 801108a:	bf00      	nop
    }
  }
  return sysclockfreq;
 801108c:	68bb      	ldr	r3, [r7, #8]
}
 801108e:	4618      	mov	r0, r3
 8011090:	3714      	adds	r7, #20
 8011092:	46bd      	mov	sp, r7
 8011094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011096:	bf00      	nop
 8011098:	40023800 	.word	0x40023800
 801109c:	00f42400 	.word	0x00f42400
 80110a0:	00b71b00 	.word	0x00b71b00

080110a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80110a4:	b480      	push	{r7}
 80110a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80110a8:	4b03      	ldr	r3, [pc, #12]	; (80110b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80110aa:	681b      	ldr	r3, [r3, #0]
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	2000000c 	.word	0x2000000c

080110bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80110c0:	f7ff fff0 	bl	80110a4 <HAL_RCC_GetHCLKFreq>
 80110c4:	4601      	mov	r1, r0
 80110c6:	4b05      	ldr	r3, [pc, #20]	; (80110dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	0a9b      	lsrs	r3, r3, #10
 80110cc:	f003 0307 	and.w	r3, r3, #7
 80110d0:	4a03      	ldr	r2, [pc, #12]	; (80110e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80110d2:	5cd3      	ldrb	r3, [r2, r3]
 80110d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80110d8:	4618      	mov	r0, r3
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	40023800 	.word	0x40023800
 80110e0:	080162c4 	.word	0x080162c4

080110e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80110e8:	f7ff ffdc 	bl	80110a4 <HAL_RCC_GetHCLKFreq>
 80110ec:	4601      	mov	r1, r0
 80110ee:	4b05      	ldr	r3, [pc, #20]	; (8011104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80110f0:	689b      	ldr	r3, [r3, #8]
 80110f2:	0b5b      	lsrs	r3, r3, #13
 80110f4:	f003 0307 	and.w	r3, r3, #7
 80110f8:	4a03      	ldr	r2, [pc, #12]	; (8011108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80110fa:	5cd3      	ldrb	r3, [r2, r3]
 80110fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011100:	4618      	mov	r0, r3
 8011102:	bd80      	pop	{r7, pc}
 8011104:	40023800 	.word	0x40023800
 8011108:	080162c4 	.word	0x080162c4

0801110c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801111a:	2301      	movs	r3, #1
 801111c:	e056      	b.n	80111cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d106      	bne.n	801113e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7fc fe69 	bl	800de10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2202      	movs	r2, #2
 8011142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011154:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	685a      	ldr	r2, [r3, #4]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	689b      	ldr	r3, [r3, #8]
 801115e:	431a      	orrs	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	431a      	orrs	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	691b      	ldr	r3, [r3, #16]
 801116a:	431a      	orrs	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	695b      	ldr	r3, [r3, #20]
 8011170:	431a      	orrs	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801117a:	431a      	orrs	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	69db      	ldr	r3, [r3, #28]
 8011180:	431a      	orrs	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a1b      	ldr	r3, [r3, #32]
 8011186:	ea42 0103 	orr.w	r1, r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	430a      	orrs	r2, r1
 8011194:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	699b      	ldr	r3, [r3, #24]
 801119a:	0c1b      	lsrs	r3, r3, #16
 801119c:	f003 0104 	and.w	r1, r3, #4
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	430a      	orrs	r2, r1
 80111aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	69da      	ldr	r2, [r3, #28]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80111ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2200      	movs	r2, #0
 80111c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2201      	movs	r2, #1
 80111c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b088      	sub	sp, #32
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	603b      	str	r3, [r7, #0]
 80111e0:	4613      	mov	r3, r2
 80111e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d101      	bne.n	80111f6 <HAL_SPI_Transmit+0x22>
 80111f2:	2302      	movs	r3, #2
 80111f4:	e11e      	b.n	8011434 <HAL_SPI_Transmit+0x260>
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2201      	movs	r2, #1
 80111fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80111fe:	f7fd f9ad 	bl	800e55c <HAL_GetTick>
 8011202:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011204:	88fb      	ldrh	r3, [r7, #6]
 8011206:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801120e:	b2db      	uxtb	r3, r3
 8011210:	2b01      	cmp	r3, #1
 8011212:	d002      	beq.n	801121a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011214:	2302      	movs	r3, #2
 8011216:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011218:	e103      	b.n	8011422 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <HAL_SPI_Transmit+0x52>
 8011220:	88fb      	ldrh	r3, [r7, #6]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d102      	bne.n	801122c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011226:	2301      	movs	r3, #1
 8011228:	77fb      	strb	r3, [r7, #31]
    goto error;
 801122a:	e0fa      	b.n	8011422 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2203      	movs	r2, #3
 8011230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2200      	movs	r2, #0
 8011238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	68ba      	ldr	r2, [r7, #8]
 801123e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	88fa      	ldrh	r2, [r7, #6]
 8011244:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	88fa      	ldrh	r2, [r7, #6]
 801124a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2200      	movs	r2, #0
 8011250:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2200      	movs	r2, #0
 8011256:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2200      	movs	r2, #0
 801125c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2200      	movs	r2, #0
 8011262:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2200      	movs	r2, #0
 8011268:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	689b      	ldr	r3, [r3, #8]
 801126e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011272:	d107      	bne.n	8011284 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011282:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801128e:	2b40      	cmp	r3, #64	; 0x40
 8011290:	d007      	beq.n	80112a2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80112aa:	d14b      	bne.n	8011344 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d002      	beq.n	80112ba <HAL_SPI_Transmit+0xe6>
 80112b4:	8afb      	ldrh	r3, [r7, #22]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d13e      	bne.n	8011338 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112be:	881a      	ldrh	r2, [r3, #0]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ca:	1c9a      	adds	r2, r3, #2
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	3b01      	subs	r3, #1
 80112d8:	b29a      	uxth	r2, r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80112de:	e02b      	b.n	8011338 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	f003 0302 	and.w	r3, r3, #2
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d112      	bne.n	8011314 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f2:	881a      	ldrh	r2, [r3, #0]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fe:	1c9a      	adds	r2, r3, #2
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011308:	b29b      	uxth	r3, r3
 801130a:	3b01      	subs	r3, #1
 801130c:	b29a      	uxth	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	86da      	strh	r2, [r3, #54]	; 0x36
 8011312:	e011      	b.n	8011338 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011314:	f7fd f922 	bl	800e55c <HAL_GetTick>
 8011318:	4602      	mov	r2, r0
 801131a:	69bb      	ldr	r3, [r7, #24]
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	683a      	ldr	r2, [r7, #0]
 8011320:	429a      	cmp	r2, r3
 8011322:	d803      	bhi.n	801132c <HAL_SPI_Transmit+0x158>
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132a:	d102      	bne.n	8011332 <HAL_SPI_Transmit+0x15e>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d102      	bne.n	8011338 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8011332:	2303      	movs	r3, #3
 8011334:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011336:	e074      	b.n	8011422 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801133c:	b29b      	uxth	r3, r3
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1ce      	bne.n	80112e0 <HAL_SPI_Transmit+0x10c>
 8011342:	e04c      	b.n	80113de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d002      	beq.n	8011352 <HAL_SPI_Transmit+0x17e>
 801134c:	8afb      	ldrh	r3, [r7, #22]
 801134e:	2b01      	cmp	r3, #1
 8011350:	d140      	bne.n	80113d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	330c      	adds	r3, #12
 801135c:	7812      	ldrb	r2, [r2, #0]
 801135e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011364:	1c5a      	adds	r2, r3, #1
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801136e:	b29b      	uxth	r3, r3
 8011370:	3b01      	subs	r3, #1
 8011372:	b29a      	uxth	r2, r3
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8011378:	e02c      	b.n	80113d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	f003 0302 	and.w	r3, r3, #2
 8011384:	2b02      	cmp	r3, #2
 8011386:	d113      	bne.n	80113b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	330c      	adds	r3, #12
 8011392:	7812      	ldrb	r2, [r2, #0]
 8011394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801139a:	1c5a      	adds	r2, r3, #1
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	3b01      	subs	r3, #1
 80113a8:	b29a      	uxth	r2, r3
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80113ae:	e011      	b.n	80113d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80113b0:	f7fd f8d4 	bl	800e55c <HAL_GetTick>
 80113b4:	4602      	mov	r2, r0
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d803      	bhi.n	80113c8 <HAL_SPI_Transmit+0x1f4>
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c6:	d102      	bne.n	80113ce <HAL_SPI_Transmit+0x1fa>
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d102      	bne.n	80113d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80113ce:	2303      	movs	r3, #3
 80113d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80113d2:	e026      	b.n	8011422 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113d8:	b29b      	uxth	r3, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d1cd      	bne.n	801137a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80113de:	69ba      	ldr	r2, [r7, #24]
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	f000 fba4 	bl	8011b30 <SPI_EndRxTxTransaction>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2220      	movs	r2, #32
 80113f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	689b      	ldr	r3, [r3, #8]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10a      	bne.n	8011412 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80113fc:	2300      	movs	r3, #0
 80113fe:	613b      	str	r3, [r7, #16]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	613b      	str	r3, [r7, #16]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	689b      	ldr	r3, [r3, #8]
 801140e:	613b      	str	r3, [r7, #16]
 8011410:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011416:	2b00      	cmp	r3, #0
 8011418:	d002      	beq.n	8011420 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	77fb      	strb	r3, [r7, #31]
 801141e:	e000      	b.n	8011422 <HAL_SPI_Transmit+0x24e>
  }

error:
 8011420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2201      	movs	r2, #1
 8011426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2200      	movs	r2, #0
 801142e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011432:	7ffb      	ldrb	r3, [r7, #31]
}
 8011434:	4618      	mov	r0, r3
 8011436:	3720      	adds	r7, #32
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b088      	sub	sp, #32
 8011440:	af02      	add	r7, sp, #8
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	603b      	str	r3, [r7, #0]
 8011448:	4613      	mov	r3, r2
 801144a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011458:	d112      	bne.n	8011480 <HAL_SPI_Receive+0x44>
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d10e      	bne.n	8011480 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2204      	movs	r2, #4
 8011466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801146a:	88fa      	ldrh	r2, [r7, #6]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	4613      	mov	r3, r2
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	68b9      	ldr	r1, [r7, #8]
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f000 f8e9 	bl	801164e <HAL_SPI_TransmitReceive>
 801147c:	4603      	mov	r3, r0
 801147e:	e0e2      	b.n	8011646 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011486:	2b01      	cmp	r3, #1
 8011488:	d101      	bne.n	801148e <HAL_SPI_Receive+0x52>
 801148a:	2302      	movs	r3, #2
 801148c:	e0db      	b.n	8011646 <HAL_SPI_Receive+0x20a>
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2201      	movs	r2, #1
 8011492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011496:	f7fd f861 	bl	800e55c <HAL_GetTick>
 801149a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d002      	beq.n	80114ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80114a8:	2302      	movs	r3, #2
 80114aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80114ac:	e0c2      	b.n	8011634 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d002      	beq.n	80114ba <HAL_SPI_Receive+0x7e>
 80114b4:	88fb      	ldrh	r3, [r7, #6]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d102      	bne.n	80114c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80114ba:	2301      	movs	r3, #1
 80114bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80114be:	e0b9      	b.n	8011634 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	2204      	movs	r2, #4
 80114c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2200      	movs	r2, #0
 80114cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	68ba      	ldr	r2, [r7, #8]
 80114d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	88fa      	ldrh	r2, [r7, #6]
 80114d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	88fa      	ldrh	r2, [r7, #6]
 80114de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2200      	movs	r2, #0
 80114e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2200      	movs	r2, #0
 80114ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2200      	movs	r2, #0
 80114f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011506:	d107      	bne.n	8011518 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	681a      	ldr	r2, [r3, #0]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011516:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011522:	2b40      	cmp	r3, #64	; 0x40
 8011524:	d007      	beq.n	8011536 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011534:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d162      	bne.n	8011604 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801153e:	e02e      	b.n	801159e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	f003 0301 	and.w	r3, r3, #1
 801154a:	2b01      	cmp	r3, #1
 801154c:	d115      	bne.n	801157a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f103 020c 	add.w	r2, r3, #12
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155a:	7812      	ldrb	r2, [r2, #0]
 801155c:	b2d2      	uxtb	r2, r2
 801155e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011564:	1c5a      	adds	r2, r3, #1
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801156e:	b29b      	uxth	r3, r3
 8011570:	3b01      	subs	r3, #1
 8011572:	b29a      	uxth	r2, r3
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011578:	e011      	b.n	801159e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801157a:	f7fc ffef 	bl	800e55c <HAL_GetTick>
 801157e:	4602      	mov	r2, r0
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	429a      	cmp	r2, r3
 8011588:	d803      	bhi.n	8011592 <HAL_SPI_Receive+0x156>
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011590:	d102      	bne.n	8011598 <HAL_SPI_Receive+0x15c>
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d102      	bne.n	801159e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8011598:	2303      	movs	r3, #3
 801159a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801159c:	e04a      	b.n	8011634 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d1cb      	bne.n	8011540 <HAL_SPI_Receive+0x104>
 80115a8:	e031      	b.n	801160e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	f003 0301 	and.w	r3, r3, #1
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d113      	bne.n	80115e0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	68da      	ldr	r2, [r3, #12]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115c2:	b292      	uxth	r2, r2
 80115c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ca:	1c9a      	adds	r2, r3, #2
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	3b01      	subs	r3, #1
 80115d8:	b29a      	uxth	r2, r3
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80115de:	e011      	b.n	8011604 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115e0:	f7fc ffbc 	bl	800e55c <HAL_GetTick>
 80115e4:	4602      	mov	r2, r0
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	1ad3      	subs	r3, r2, r3
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d803      	bhi.n	80115f8 <HAL_SPI_Receive+0x1bc>
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f6:	d102      	bne.n	80115fe <HAL_SPI_Receive+0x1c2>
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d102      	bne.n	8011604 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80115fe:	2303      	movs	r3, #3
 8011600:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011602:	e017      	b.n	8011634 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011608:	b29b      	uxth	r3, r3
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1cd      	bne.n	80115aa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801160e:	693a      	ldr	r2, [r7, #16]
 8011610:	6839      	ldr	r1, [r7, #0]
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f000 fa27 	bl	8011a66 <SPI_EndRxTransaction>
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d002      	beq.n	8011624 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2220      	movs	r2, #32
 8011622:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011628:	2b00      	cmp	r3, #0
 801162a:	d002      	beq.n	8011632 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 801162c:	2301      	movs	r3, #1
 801162e:	75fb      	strb	r3, [r7, #23]
 8011630:	e000      	b.n	8011634 <HAL_SPI_Receive+0x1f8>
  }

error :
 8011632:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2201      	movs	r2, #1
 8011638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2200      	movs	r2, #0
 8011640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011644:	7dfb      	ldrb	r3, [r7, #23]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3718      	adds	r7, #24
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801164e:	b580      	push	{r7, lr}
 8011650:	b08c      	sub	sp, #48	; 0x30
 8011652:	af00      	add	r7, sp, #0
 8011654:	60f8      	str	r0, [r7, #12]
 8011656:	60b9      	str	r1, [r7, #8]
 8011658:	607a      	str	r2, [r7, #4]
 801165a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801165c:	2301      	movs	r3, #1
 801165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801166c:	2b01      	cmp	r3, #1
 801166e:	d101      	bne.n	8011674 <HAL_SPI_TransmitReceive+0x26>
 8011670:	2302      	movs	r3, #2
 8011672:	e18a      	b.n	801198a <HAL_SPI_TransmitReceive+0x33c>
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2201      	movs	r2, #1
 8011678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801167c:	f7fc ff6e 	bl	800e55c <HAL_GetTick>
 8011680:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011692:	887b      	ldrh	r3, [r7, #2]
 8011694:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801169a:	2b01      	cmp	r3, #1
 801169c:	d00f      	beq.n	80116be <HAL_SPI_TransmitReceive+0x70>
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80116a4:	d107      	bne.n	80116b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	689b      	ldr	r3, [r3, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d103      	bne.n	80116b6 <HAL_SPI_TransmitReceive+0x68>
 80116ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80116b2:	2b04      	cmp	r3, #4
 80116b4:	d003      	beq.n	80116be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80116b6:	2302      	movs	r3, #2
 80116b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80116bc:	e15b      	b.n	8011976 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d005      	beq.n	80116d0 <HAL_SPI_TransmitReceive+0x82>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d002      	beq.n	80116d0 <HAL_SPI_TransmitReceive+0x82>
 80116ca:	887b      	ldrh	r3, [r7, #2]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d103      	bne.n	80116d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80116d0:	2301      	movs	r3, #1
 80116d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80116d6:	e14e      	b.n	8011976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	2b04      	cmp	r3, #4
 80116e2:	d003      	beq.n	80116ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2205      	movs	r2, #5
 80116e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	887a      	ldrh	r2, [r7, #2]
 80116fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	887a      	ldrh	r2, [r7, #2]
 8011702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	887a      	ldrh	r2, [r7, #2]
 801170e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	887a      	ldrh	r2, [r7, #2]
 8011714:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2200      	movs	r2, #0
 801171a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2200      	movs	r2, #0
 8011720:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801172c:	2b40      	cmp	r3, #64	; 0x40
 801172e:	d007      	beq.n	8011740 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801173e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011748:	d178      	bne.n	801183c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d002      	beq.n	8011758 <HAL_SPI_TransmitReceive+0x10a>
 8011752:	8b7b      	ldrh	r3, [r7, #26]
 8011754:	2b01      	cmp	r3, #1
 8011756:	d166      	bne.n	8011826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801175c:	881a      	ldrh	r2, [r3, #0]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011768:	1c9a      	adds	r2, r3, #2
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011772:	b29b      	uxth	r3, r3
 8011774:	3b01      	subs	r3, #1
 8011776:	b29a      	uxth	r2, r3
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801177c:	e053      	b.n	8011826 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	f003 0302 	and.w	r3, r3, #2
 8011788:	2b02      	cmp	r3, #2
 801178a:	d11b      	bne.n	80117c4 <HAL_SPI_TransmitReceive+0x176>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011790:	b29b      	uxth	r3, r3
 8011792:	2b00      	cmp	r3, #0
 8011794:	d016      	beq.n	80117c4 <HAL_SPI_TransmitReceive+0x176>
 8011796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011798:	2b01      	cmp	r3, #1
 801179a:	d113      	bne.n	80117c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117a0:	881a      	ldrh	r2, [r3, #0]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ac:	1c9a      	adds	r2, r3, #2
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	3b01      	subs	r3, #1
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80117c0:	2300      	movs	r3, #0
 80117c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d119      	bne.n	8011806 <HAL_SPI_TransmitReceive+0x1b8>
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d014      	beq.n	8011806 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68da      	ldr	r2, [r3, #12]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117e6:	b292      	uxth	r2, r2
 80117e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ee:	1c9a      	adds	r2, r3, #2
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	3b01      	subs	r3, #1
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011802:	2301      	movs	r3, #1
 8011804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011806:	f7fc fea9 	bl	800e55c <HAL_GetTick>
 801180a:	4602      	mov	r2, r0
 801180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011812:	429a      	cmp	r2, r3
 8011814:	d807      	bhi.n	8011826 <HAL_SPI_TransmitReceive+0x1d8>
 8011816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181c:	d003      	beq.n	8011826 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801181e:	2303      	movs	r3, #3
 8011820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011824:	e0a7      	b.n	8011976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801182a:	b29b      	uxth	r3, r3
 801182c:	2b00      	cmp	r3, #0
 801182e:	d1a6      	bne.n	801177e <HAL_SPI_TransmitReceive+0x130>
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011834:	b29b      	uxth	r3, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1a1      	bne.n	801177e <HAL_SPI_TransmitReceive+0x130>
 801183a:	e07c      	b.n	8011936 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d002      	beq.n	801184a <HAL_SPI_TransmitReceive+0x1fc>
 8011844:	8b7b      	ldrh	r3, [r7, #26]
 8011846:	2b01      	cmp	r3, #1
 8011848:	d16b      	bne.n	8011922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	330c      	adds	r3, #12
 8011854:	7812      	ldrb	r2, [r2, #0]
 8011856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011866:	b29b      	uxth	r3, r3
 8011868:	3b01      	subs	r3, #1
 801186a:	b29a      	uxth	r2, r3
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011870:	e057      	b.n	8011922 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	689b      	ldr	r3, [r3, #8]
 8011878:	f003 0302 	and.w	r3, r3, #2
 801187c:	2b02      	cmp	r3, #2
 801187e:	d11c      	bne.n	80118ba <HAL_SPI_TransmitReceive+0x26c>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011884:	b29b      	uxth	r3, r3
 8011886:	2b00      	cmp	r3, #0
 8011888:	d017      	beq.n	80118ba <HAL_SPI_TransmitReceive+0x26c>
 801188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188c:	2b01      	cmp	r3, #1
 801188e:	d114      	bne.n	80118ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	330c      	adds	r3, #12
 801189a:	7812      	ldrb	r2, [r2, #0]
 801189c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a2:	1c5a      	adds	r2, r3, #1
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	3b01      	subs	r3, #1
 80118b0:	b29a      	uxth	r2, r3
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80118b6:	2300      	movs	r3, #0
 80118b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	f003 0301 	and.w	r3, r3, #1
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d119      	bne.n	80118fc <HAL_SPI_TransmitReceive+0x2ae>
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d014      	beq.n	80118fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68da      	ldr	r2, [r3, #12]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118dc:	b2d2      	uxtb	r2, r2
 80118de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118e4:	1c5a      	adds	r2, r3, #1
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	3b01      	subs	r3, #1
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80118f8:	2301      	movs	r3, #1
 80118fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80118fc:	f7fc fe2e 	bl	800e55c <HAL_GetTick>
 8011900:	4602      	mov	r2, r0
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011908:	429a      	cmp	r2, r3
 801190a:	d803      	bhi.n	8011914 <HAL_SPI_TransmitReceive+0x2c6>
 801190c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011912:	d102      	bne.n	801191a <HAL_SPI_TransmitReceive+0x2cc>
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	2b00      	cmp	r3, #0
 8011918:	d103      	bne.n	8011922 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801191a:	2303      	movs	r3, #3
 801191c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011920:	e029      	b.n	8011976 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011926:	b29b      	uxth	r3, r3
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1a2      	bne.n	8011872 <HAL_SPI_TransmitReceive+0x224>
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011930:	b29b      	uxth	r3, r3
 8011932:	2b00      	cmp	r3, #0
 8011934:	d19d      	bne.n	8011872 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801193a:	68f8      	ldr	r0, [r7, #12]
 801193c:	f000 f8f8 	bl	8011b30 <SPI_EndRxTxTransaction>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d006      	beq.n	8011954 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011946:	2301      	movs	r3, #1
 8011948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2220      	movs	r2, #32
 8011950:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011952:	e010      	b.n	8011976 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d10b      	bne.n	8011974 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801195c:	2300      	movs	r3, #0
 801195e:	617b      	str	r3, [r7, #20]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	68db      	ldr	r3, [r3, #12]
 8011966:	617b      	str	r3, [r7, #20]
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	617b      	str	r3, [r7, #20]
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	e000      	b.n	8011976 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2201      	movs	r2, #1
 801197a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2200      	movs	r2, #0
 8011982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801198a:	4618      	mov	r0, r3
 801198c:	3730      	adds	r7, #48	; 0x30
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b084      	sub	sp, #16
 8011996:	af00      	add	r7, sp, #0
 8011998:	60f8      	str	r0, [r7, #12]
 801199a:	60b9      	str	r1, [r7, #8]
 801199c:	603b      	str	r3, [r7, #0]
 801199e:	4613      	mov	r3, r2
 80119a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80119a2:	e04c      	b.n	8011a3e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119aa:	d048      	beq.n	8011a3e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80119ac:	f7fc fdd6 	bl	800e55c <HAL_GetTick>
 80119b0:	4602      	mov	r2, r0
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	683a      	ldr	r2, [r7, #0]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d902      	bls.n	80119c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d13d      	bne.n	8011a3e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	685a      	ldr	r2, [r3, #4]
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80119d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80119da:	d111      	bne.n	8011a00 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	689b      	ldr	r3, [r3, #8]
 80119e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119e4:	d004      	beq.n	80119f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119ee:	d107      	bne.n	8011a00 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80119fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a08:	d10f      	bne.n	8011a2a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a18:	601a      	str	r2, [r3, #0]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	e00f      	b.n	8011a5e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	689a      	ldr	r2, [r3, #8]
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	4013      	ands	r3, r2
 8011a48:	68ba      	ldr	r2, [r7, #8]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	bf0c      	ite	eq
 8011a4e:	2301      	moveq	r3, #1
 8011a50:	2300      	movne	r3, #0
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	461a      	mov	r2, r3
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d1a3      	bne.n	80119a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b086      	sub	sp, #24
 8011a6a:	af02      	add	r7, sp, #8
 8011a6c:	60f8      	str	r0, [r7, #12]
 8011a6e:	60b9      	str	r1, [r7, #8]
 8011a70:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011a7a:	d111      	bne.n	8011aa0 <SPI_EndRxTransaction+0x3a>
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a84:	d004      	beq.n	8011a90 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	689b      	ldr	r3, [r3, #8]
 8011a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a8e:	d107      	bne.n	8011aa0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	681a      	ldr	r2, [r3, #0]
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a9e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011aa8:	d12a      	bne.n	8011b00 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ab2:	d012      	beq.n	8011ada <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2200      	movs	r2, #0
 8011abc:	2180      	movs	r1, #128	; 0x80
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f7ff ff67 	bl	8011992 <SPI_WaitFlagStateUntilTimeout>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d02d      	beq.n	8011b26 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ace:	f043 0220 	orr.w	r2, r3, #32
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	e026      	b.n	8011b28 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f7ff ff54 	bl	8011992 <SPI_WaitFlagStateUntilTimeout>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d01a      	beq.n	8011b26 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011af4:	f043 0220 	orr.w	r2, r3, #32
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011afc:	2303      	movs	r3, #3
 8011afe:	e013      	b.n	8011b28 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	9300      	str	r3, [sp, #0]
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2200      	movs	r2, #0
 8011b08:	2101      	movs	r1, #1
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f7ff ff41 	bl	8011992 <SPI_WaitFlagStateUntilTimeout>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d007      	beq.n	8011b26 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b1a:	f043 0220 	orr.w	r2, r3, #32
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011b22:	2303      	movs	r3, #3
 8011b24:	e000      	b.n	8011b28 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b088      	sub	sp, #32
 8011b34:	af02      	add	r7, sp, #8
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011b3c:	4b1b      	ldr	r3, [pc, #108]	; (8011bac <SPI_EndRxTxTransaction+0x7c>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a1b      	ldr	r2, [pc, #108]	; (8011bb0 <SPI_EndRxTxTransaction+0x80>)
 8011b42:	fba2 2303 	umull	r2, r3, r2, r3
 8011b46:	0d5b      	lsrs	r3, r3, #21
 8011b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011b4c:	fb02 f303 	mul.w	r3, r2, r3
 8011b50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b5a:	d112      	bne.n	8011b82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	2200      	movs	r2, #0
 8011b64:	2180      	movs	r1, #128	; 0x80
 8011b66:	68f8      	ldr	r0, [r7, #12]
 8011b68:	f7ff ff13 	bl	8011992 <SPI_WaitFlagStateUntilTimeout>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d016      	beq.n	8011ba0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b76:	f043 0220 	orr.w	r2, r3, #32
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011b7e:	2303      	movs	r3, #3
 8011b80:	e00f      	b.n	8011ba2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00a      	beq.n	8011b9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	3b01      	subs	r3, #1
 8011b8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b98:	2b80      	cmp	r3, #128	; 0x80
 8011b9a:	d0f2      	beq.n	8011b82 <SPI_EndRxTxTransaction+0x52>
 8011b9c:	e000      	b.n	8011ba0 <SPI_EndRxTxTransaction+0x70>
        break;
 8011b9e:	bf00      	nop
  }

  return HAL_OK;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3718      	adds	r7, #24
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	2000000c 	.word	0x2000000c
 8011bb0:	165e9f81 	.word	0x165e9f81

08011bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e01d      	b.n	8011c02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d106      	bne.n	8011be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7fc fa2a 	bl	800e034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2202      	movs	r2, #2
 8011be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	f000 fb82 	bl	80122fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011c00:	2300      	movs	r3, #0
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3708      	adds	r7, #8
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	b085      	sub	sp, #20
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	68da      	ldr	r2, [r3, #12]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f042 0201 	orr.w	r2, r2, #1
 8011c20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	f003 0307 	and.w	r3, r3, #7
 8011c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2b06      	cmp	r3, #6
 8011c32:	d007      	beq.n	8011c44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f042 0201 	orr.w	r2, r2, #1
 8011c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr

08011c52 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011c52:	b480      	push	{r7}
 8011c54:	b083      	sub	sp, #12
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	68da      	ldr	r2, [r3, #12]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f022 0201 	bic.w	r2, r2, #1
 8011c68:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	6a1a      	ldr	r2, [r3, #32]
 8011c70:	f241 1311 	movw	r3, #4369	; 0x1111
 8011c74:	4013      	ands	r3, r2
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d10f      	bne.n	8011c9a <HAL_TIM_Base_Stop_IT+0x48>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	6a1a      	ldr	r2, [r3, #32]
 8011c80:	f240 4344 	movw	r3, #1092	; 0x444
 8011c84:	4013      	ands	r3, r2
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d107      	bne.n	8011c9a <HAL_TIM_Base_Stop_IT+0x48>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f022 0201 	bic.w	r2, r2, #1
 8011c98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011c9a:	2300      	movs	r3, #0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d101      	bne.n	8011cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e01d      	b.n	8011cf6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d106      	bne.n	8011cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7fc f8e6 	bl	800dea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2202      	movs	r2, #2
 8011cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	3304      	adds	r3, #4
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4610      	mov	r0, r2
 8011ce8:	f000 fb08 	bl	80122fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2201      	movs	r2, #1
 8011cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011cf4:	2300      	movs	r3, #0
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3708      	adds	r7, #8
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
	...

08011d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2201      	movs	r2, #1
 8011d10:	6839      	ldr	r1, [r7, #0]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f000 fd42 	bl	801279c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4a15      	ldr	r2, [pc, #84]	; (8011d74 <HAL_TIM_PWM_Start+0x74>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d004      	beq.n	8011d2c <HAL_TIM_PWM_Start+0x2c>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	4a14      	ldr	r2, [pc, #80]	; (8011d78 <HAL_TIM_PWM_Start+0x78>)
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d101      	bne.n	8011d30 <HAL_TIM_PWM_Start+0x30>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e000      	b.n	8011d32 <HAL_TIM_PWM_Start+0x32>
 8011d30:	2300      	movs	r3, #0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d007      	beq.n	8011d46 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	f003 0307 	and.w	r3, r3, #7
 8011d50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2b06      	cmp	r3, #6
 8011d56:	d007      	beq.n	8011d68 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f042 0201 	orr.w	r2, r2, #1
 8011d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011d68:	2300      	movs	r3, #0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3710      	adds	r7, #16
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	40010000 	.word	0x40010000
 8011d78:	40010400 	.word	0x40010400

08011d7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d101      	bne.n	8011d90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e083      	b.n	8011e98 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d106      	bne.n	8011daa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7fc f8c7 	bl	800df38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2202      	movs	r2, #2
 8011dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	689b      	ldr	r3, [r3, #8]
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	6812      	ldr	r2, [r2, #0]
 8011dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011dc0:	f023 0307 	bic.w	r3, r3, #7
 8011dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	3304      	adds	r3, #4
 8011dce:	4619      	mov	r1, r3
 8011dd0:	4610      	mov	r0, r2
 8011dd2:	f000 fa93 	bl	80122fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	699b      	ldr	r3, [r3, #24]
 8011de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	6a1b      	ldr	r3, [r3, #32]
 8011dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011dfe:	f023 0303 	bic.w	r3, r3, #3
 8011e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	689a      	ldr	r2, [r3, #8]
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	699b      	ldr	r3, [r3, #24]
 8011e0c:	021b      	lsls	r3, r3, #8
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	693a      	ldr	r2, [r7, #16]
 8011e12:	4313      	orrs	r3, r2
 8011e14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011e1c:	f023 030c 	bic.w	r3, r3, #12
 8011e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	68da      	ldr	r2, [r3, #12]
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	69db      	ldr	r3, [r3, #28]
 8011e36:	021b      	lsls	r3, r3, #8
 8011e38:	4313      	orrs	r3, r2
 8011e3a:	693a      	ldr	r2, [r7, #16]
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	691b      	ldr	r3, [r3, #16]
 8011e44:	011a      	lsls	r2, r3, #4
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	6a1b      	ldr	r3, [r3, #32]
 8011e4a:	031b      	lsls	r3, r3, #12
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	4313      	orrs	r3, r2
 8011e52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011e5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011e62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	685a      	ldr	r2, [r3, #4]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	011b      	lsls	r3, r3, #4
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	4313      	orrs	r3, r2
 8011e74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	697a      	ldr	r2, [r7, #20]
 8011e7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	68fa      	ldr	r2, [r7, #12]
 8011e8c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2201      	movs	r2, #1
 8011e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e96:	2300      	movs	r3, #0
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d002      	beq.n	8011eb6 <HAL_TIM_Encoder_Start+0x16>
 8011eb0:	2b04      	cmp	r3, #4
 8011eb2:	d008      	beq.n	8011ec6 <HAL_TIM_Encoder_Start+0x26>
 8011eb4:	e00f      	b.n	8011ed6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	2100      	movs	r1, #0
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f000 fc6c 	bl	801279c <TIM_CCxChannelCmd>
      break;
 8011ec4:	e016      	b.n	8011ef4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	2104      	movs	r1, #4
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f000 fc64 	bl	801279c <TIM_CCxChannelCmd>
      break;
 8011ed4:	e00e      	b.n	8011ef4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2201      	movs	r2, #1
 8011edc:	2100      	movs	r1, #0
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 fc5c 	bl	801279c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	2104      	movs	r1, #4
 8011eec:	4618      	mov	r0, r3
 8011eee:	f000 fc55 	bl	801279c <TIM_CCxChannelCmd>
      break;
 8011ef2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f042 0201 	orr.w	r2, r2, #1
 8011f02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3708      	adds	r7, #8
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b082      	sub	sp, #8
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	f003 0302 	and.w	r3, r3, #2
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d122      	bne.n	8011f6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	68db      	ldr	r3, [r3, #12]
 8011f2a:	f003 0302 	and.w	r3, r3, #2
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d11b      	bne.n	8011f6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f06f 0202 	mvn.w	r2, #2
 8011f3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	699b      	ldr	r3, [r3, #24]
 8011f48:	f003 0303 	and.w	r3, r3, #3
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d003      	beq.n	8011f58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f9b5 	bl	80122c0 <HAL_TIM_IC_CaptureCallback>
 8011f56:	e005      	b.n	8011f64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 f9a7 	bl	80122ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f9b8 	bl	80122d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2200      	movs	r2, #0
 8011f68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	f003 0304 	and.w	r3, r3, #4
 8011f74:	2b04      	cmp	r3, #4
 8011f76:	d122      	bne.n	8011fbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	f003 0304 	and.w	r3, r3, #4
 8011f82:	2b04      	cmp	r3, #4
 8011f84:	d11b      	bne.n	8011fbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f06f 0204 	mvn.w	r2, #4
 8011f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2202      	movs	r2, #2
 8011f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	699b      	ldr	r3, [r3, #24]
 8011f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d003      	beq.n	8011fac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f000 f98b 	bl	80122c0 <HAL_TIM_IC_CaptureCallback>
 8011faa:	e005      	b.n	8011fb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f000 f97d 	bl	80122ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f98e 	bl	80122d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	691b      	ldr	r3, [r3, #16]
 8011fc4:	f003 0308 	and.w	r3, r3, #8
 8011fc8:	2b08      	cmp	r3, #8
 8011fca:	d122      	bne.n	8012012 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	f003 0308 	and.w	r3, r3, #8
 8011fd6:	2b08      	cmp	r3, #8
 8011fd8:	d11b      	bne.n	8012012 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f06f 0208 	mvn.w	r2, #8
 8011fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2204      	movs	r2, #4
 8011fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	69db      	ldr	r3, [r3, #28]
 8011ff0:	f003 0303 	and.w	r3, r3, #3
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d003      	beq.n	8012000 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f961 	bl	80122c0 <HAL_TIM_IC_CaptureCallback>
 8011ffe:	e005      	b.n	801200c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 f953 	bl	80122ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 f964 	bl	80122d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	f003 0310 	and.w	r3, r3, #16
 801201c:	2b10      	cmp	r3, #16
 801201e:	d122      	bne.n	8012066 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	f003 0310 	and.w	r3, r3, #16
 801202a:	2b10      	cmp	r3, #16
 801202c:	d11b      	bne.n	8012066 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f06f 0210 	mvn.w	r2, #16
 8012036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2208      	movs	r2, #8
 801203c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	69db      	ldr	r3, [r3, #28]
 8012044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012048:	2b00      	cmp	r3, #0
 801204a:	d003      	beq.n	8012054 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f000 f937 	bl	80122c0 <HAL_TIM_IC_CaptureCallback>
 8012052:	e005      	b.n	8012060 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f929 	bl	80122ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f000 f93a 	bl	80122d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	691b      	ldr	r3, [r3, #16]
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b01      	cmp	r3, #1
 8012072:	d10e      	bne.n	8012092 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	2b01      	cmp	r3, #1
 8012080:	d107      	bne.n	8012092 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	f06f 0201 	mvn.w	r2, #1
 801208a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7fa fb33 	bl	800c6f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801209c:	2b80      	cmp	r3, #128	; 0x80
 801209e:	d10e      	bne.n	80120be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	68db      	ldr	r3, [r3, #12]
 80120a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120aa:	2b80      	cmp	r3, #128	; 0x80
 80120ac:	d107      	bne.n	80120be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80120b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fc6d 	bl	8012998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	691b      	ldr	r3, [r3, #16]
 80120c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120c8:	2b40      	cmp	r3, #64	; 0x40
 80120ca:	d10e      	bne.n	80120ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120d6:	2b40      	cmp	r3, #64	; 0x40
 80120d8:	d107      	bne.n	80120ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80120e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 f8ff 	bl	80122e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	f003 0320 	and.w	r3, r3, #32
 80120f4:	2b20      	cmp	r3, #32
 80120f6:	d10e      	bne.n	8012116 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	f003 0320 	and.w	r3, r3, #32
 8012102:	2b20      	cmp	r3, #32
 8012104:	d107      	bne.n	8012116 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f06f 0220 	mvn.w	r2, #32
 801210e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 fc37 	bl	8012984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012116:	bf00      	nop
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012132:	2b01      	cmp	r3, #1
 8012134:	d101      	bne.n	801213a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8012136:	2302      	movs	r3, #2
 8012138:	e0b4      	b.n	80122a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2201      	movs	r2, #1
 801213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2202      	movs	r2, #2
 8012146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2b0c      	cmp	r3, #12
 801214e:	f200 809f 	bhi.w	8012290 <HAL_TIM_PWM_ConfigChannel+0x170>
 8012152:	a201      	add	r2, pc, #4	; (adr r2, 8012158 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012158:	0801218d 	.word	0x0801218d
 801215c:	08012291 	.word	0x08012291
 8012160:	08012291 	.word	0x08012291
 8012164:	08012291 	.word	0x08012291
 8012168:	080121cd 	.word	0x080121cd
 801216c:	08012291 	.word	0x08012291
 8012170:	08012291 	.word	0x08012291
 8012174:	08012291 	.word	0x08012291
 8012178:	0801220f 	.word	0x0801220f
 801217c:	08012291 	.word	0x08012291
 8012180:	08012291 	.word	0x08012291
 8012184:	08012291 	.word	0x08012291
 8012188:	0801224f 	.word	0x0801224f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	68b9      	ldr	r1, [r7, #8]
 8012192:	4618      	mov	r0, r3
 8012194:	f000 f952 	bl	801243c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	699a      	ldr	r2, [r3, #24]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f042 0208 	orr.w	r2, r2, #8
 80121a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	699a      	ldr	r2, [r3, #24]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f022 0204 	bic.w	r2, r2, #4
 80121b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	6999      	ldr	r1, [r3, #24]
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	691a      	ldr	r2, [r3, #16]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	430a      	orrs	r2, r1
 80121c8:	619a      	str	r2, [r3, #24]
      break;
 80121ca:	e062      	b.n	8012292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	68b9      	ldr	r1, [r7, #8]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f000 f9a2 	bl	801251c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	699a      	ldr	r2, [r3, #24]
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80121e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	699a      	ldr	r2, [r3, #24]
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80121f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	6999      	ldr	r1, [r3, #24]
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	021a      	lsls	r2, r3, #8
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	430a      	orrs	r2, r1
 801220a:	619a      	str	r2, [r3, #24]
      break;
 801220c:	e041      	b.n	8012292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	68b9      	ldr	r1, [r7, #8]
 8012214:	4618      	mov	r0, r3
 8012216:	f000 f9f7 	bl	8012608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	69da      	ldr	r2, [r3, #28]
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	f042 0208 	orr.w	r2, r2, #8
 8012228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	69da      	ldr	r2, [r3, #28]
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f022 0204 	bic.w	r2, r2, #4
 8012238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	69d9      	ldr	r1, [r3, #28]
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	691a      	ldr	r2, [r3, #16]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	430a      	orrs	r2, r1
 801224a:	61da      	str	r2, [r3, #28]
      break;
 801224c:	e021      	b.n	8012292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	68b9      	ldr	r1, [r7, #8]
 8012254:	4618      	mov	r0, r3
 8012256:	f000 fa4b 	bl	80126f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	69da      	ldr	r2, [r3, #28]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	69da      	ldr	r2, [r3, #28]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	69d9      	ldr	r1, [r3, #28]
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	021a      	lsls	r2, r3, #8
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	430a      	orrs	r2, r1
 801228c:	61da      	str	r2, [r3, #28]
      break;
 801228e:	e000      	b.n	8012292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012290:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2201      	movs	r2, #1
 8012296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2200      	movs	r2, #0
 801229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80122a2:	2300      	movs	r3, #0
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b083      	sub	sp, #12
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80122b4:	bf00      	nop
 80122b6:	370c      	adds	r7, #12
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr

080122c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b083      	sub	sp, #12
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80122c8:	bf00      	nop
 80122ca:	370c      	adds	r7, #12
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr

080122d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80122dc:	bf00      	nop
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr

080122e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4a40      	ldr	r2, [pc, #256]	; (8012410 <TIM_Base_SetConfig+0x114>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d013      	beq.n	801233c <TIM_Base_SetConfig+0x40>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801231a:	d00f      	beq.n	801233c <TIM_Base_SetConfig+0x40>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4a3d      	ldr	r2, [pc, #244]	; (8012414 <TIM_Base_SetConfig+0x118>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d00b      	beq.n	801233c <TIM_Base_SetConfig+0x40>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	4a3c      	ldr	r2, [pc, #240]	; (8012418 <TIM_Base_SetConfig+0x11c>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d007      	beq.n	801233c <TIM_Base_SetConfig+0x40>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	4a3b      	ldr	r2, [pc, #236]	; (801241c <TIM_Base_SetConfig+0x120>)
 8012330:	4293      	cmp	r3, r2
 8012332:	d003      	beq.n	801233c <TIM_Base_SetConfig+0x40>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	4a3a      	ldr	r2, [pc, #232]	; (8012420 <TIM_Base_SetConfig+0x124>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d108      	bne.n	801234e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	4313      	orrs	r3, r2
 801234c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4a2f      	ldr	r2, [pc, #188]	; (8012410 <TIM_Base_SetConfig+0x114>)
 8012352:	4293      	cmp	r3, r2
 8012354:	d02b      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801235c:	d027      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4a2c      	ldr	r2, [pc, #176]	; (8012414 <TIM_Base_SetConfig+0x118>)
 8012362:	4293      	cmp	r3, r2
 8012364:	d023      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	4a2b      	ldr	r2, [pc, #172]	; (8012418 <TIM_Base_SetConfig+0x11c>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d01f      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4a2a      	ldr	r2, [pc, #168]	; (801241c <TIM_Base_SetConfig+0x120>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d01b      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4a29      	ldr	r2, [pc, #164]	; (8012420 <TIM_Base_SetConfig+0x124>)
 801237a:	4293      	cmp	r3, r2
 801237c:	d017      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4a28      	ldr	r2, [pc, #160]	; (8012424 <TIM_Base_SetConfig+0x128>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d013      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4a27      	ldr	r2, [pc, #156]	; (8012428 <TIM_Base_SetConfig+0x12c>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d00f      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4a26      	ldr	r2, [pc, #152]	; (801242c <TIM_Base_SetConfig+0x130>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d00b      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4a25      	ldr	r2, [pc, #148]	; (8012430 <TIM_Base_SetConfig+0x134>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d007      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4a24      	ldr	r2, [pc, #144]	; (8012434 <TIM_Base_SetConfig+0x138>)
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d003      	beq.n	80123ae <TIM_Base_SetConfig+0xb2>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4a23      	ldr	r2, [pc, #140]	; (8012438 <TIM_Base_SetConfig+0x13c>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d108      	bne.n	80123c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	4313      	orrs	r3, r2
 80123be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	695b      	ldr	r3, [r3, #20]
 80123ca:	4313      	orrs	r3, r2
 80123cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	689a      	ldr	r2, [r3, #8]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	681a      	ldr	r2, [r3, #0]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	4a0a      	ldr	r2, [pc, #40]	; (8012410 <TIM_Base_SetConfig+0x114>)
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d003      	beq.n	80123f4 <TIM_Base_SetConfig+0xf8>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4a0c      	ldr	r2, [pc, #48]	; (8012420 <TIM_Base_SetConfig+0x124>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d103      	bne.n	80123fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	691a      	ldr	r2, [r3, #16]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2201      	movs	r2, #1
 8012400:	615a      	str	r2, [r3, #20]
}
 8012402:	bf00      	nop
 8012404:	3714      	adds	r7, #20
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop
 8012410:	40010000 	.word	0x40010000
 8012414:	40000400 	.word	0x40000400
 8012418:	40000800 	.word	0x40000800
 801241c:	40000c00 	.word	0x40000c00
 8012420:	40010400 	.word	0x40010400
 8012424:	40014000 	.word	0x40014000
 8012428:	40014400 	.word	0x40014400
 801242c:	40014800 	.word	0x40014800
 8012430:	40001800 	.word	0x40001800
 8012434:	40001c00 	.word	0x40001c00
 8012438:	40002000 	.word	0x40002000

0801243c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801243c:	b480      	push	{r7}
 801243e:	b087      	sub	sp, #28
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a1b      	ldr	r3, [r3, #32]
 801244a:	f023 0201 	bic.w	r2, r3, #1
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6a1b      	ldr	r3, [r3, #32]
 8012456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	699b      	ldr	r3, [r3, #24]
 8012462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801246a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f023 0303 	bic.w	r3, r3, #3
 8012472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	68fa      	ldr	r2, [r7, #12]
 801247a:	4313      	orrs	r3, r2
 801247c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	f023 0302 	bic.w	r3, r3, #2
 8012484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	689b      	ldr	r3, [r3, #8]
 801248a:	697a      	ldr	r2, [r7, #20]
 801248c:	4313      	orrs	r3, r2
 801248e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	4a20      	ldr	r2, [pc, #128]	; (8012514 <TIM_OC1_SetConfig+0xd8>)
 8012494:	4293      	cmp	r3, r2
 8012496:	d003      	beq.n	80124a0 <TIM_OC1_SetConfig+0x64>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	4a1f      	ldr	r2, [pc, #124]	; (8012518 <TIM_OC1_SetConfig+0xdc>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d10c      	bne.n	80124ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	f023 0308 	bic.w	r3, r3, #8
 80124a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	697a      	ldr	r2, [r7, #20]
 80124ae:	4313      	orrs	r3, r2
 80124b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	f023 0304 	bic.w	r3, r3, #4
 80124b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a15      	ldr	r2, [pc, #84]	; (8012514 <TIM_OC1_SetConfig+0xd8>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d003      	beq.n	80124ca <TIM_OC1_SetConfig+0x8e>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a14      	ldr	r2, [pc, #80]	; (8012518 <TIM_OC1_SetConfig+0xdc>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d111      	bne.n	80124ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80124d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	695b      	ldr	r3, [r3, #20]
 80124de:	693a      	ldr	r2, [r7, #16]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	699b      	ldr	r3, [r3, #24]
 80124e8:	693a      	ldr	r2, [r7, #16]
 80124ea:	4313      	orrs	r3, r2
 80124ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	693a      	ldr	r2, [r7, #16]
 80124f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	68fa      	ldr	r2, [r7, #12]
 80124f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	685a      	ldr	r2, [r3, #4]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	621a      	str	r2, [r3, #32]
}
 8012508:	bf00      	nop
 801250a:	371c      	adds	r7, #28
 801250c:	46bd      	mov	sp, r7
 801250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012512:	4770      	bx	lr
 8012514:	40010000 	.word	0x40010000
 8012518:	40010400 	.word	0x40010400

0801251c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801251c:	b480      	push	{r7}
 801251e:	b087      	sub	sp, #28
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6a1b      	ldr	r3, [r3, #32]
 801252a:	f023 0210 	bic.w	r2, r3, #16
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6a1b      	ldr	r3, [r3, #32]
 8012536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	699b      	ldr	r3, [r3, #24]
 8012542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	021b      	lsls	r3, r3, #8
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	4313      	orrs	r3, r2
 801255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	f023 0320 	bic.w	r3, r3, #32
 8012566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	011b      	lsls	r3, r3, #4
 801256e:	697a      	ldr	r2, [r7, #20]
 8012570:	4313      	orrs	r3, r2
 8012572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4a22      	ldr	r2, [pc, #136]	; (8012600 <TIM_OC2_SetConfig+0xe4>)
 8012578:	4293      	cmp	r3, r2
 801257a:	d003      	beq.n	8012584 <TIM_OC2_SetConfig+0x68>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4a21      	ldr	r2, [pc, #132]	; (8012604 <TIM_OC2_SetConfig+0xe8>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d10d      	bne.n	80125a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801258a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	68db      	ldr	r3, [r3, #12]
 8012590:	011b      	lsls	r3, r3, #4
 8012592:	697a      	ldr	r2, [r7, #20]
 8012594:	4313      	orrs	r3, r2
 8012596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801259e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a17      	ldr	r2, [pc, #92]	; (8012600 <TIM_OC2_SetConfig+0xe4>)
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d003      	beq.n	80125b0 <TIM_OC2_SetConfig+0x94>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	4a16      	ldr	r2, [pc, #88]	; (8012604 <TIM_OC2_SetConfig+0xe8>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d113      	bne.n	80125d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80125b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80125be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	695b      	ldr	r3, [r3, #20]
 80125c4:	009b      	lsls	r3, r3, #2
 80125c6:	693a      	ldr	r2, [r7, #16]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	699b      	ldr	r3, [r3, #24]
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	693a      	ldr	r2, [r7, #16]
 80125d4:	4313      	orrs	r3, r2
 80125d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	693a      	ldr	r2, [r7, #16]
 80125dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	685a      	ldr	r2, [r3, #4]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	697a      	ldr	r2, [r7, #20]
 80125f0:	621a      	str	r2, [r3, #32]
}
 80125f2:	bf00      	nop
 80125f4:	371c      	adds	r7, #28
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	40010000 	.word	0x40010000
 8012604:	40010400 	.word	0x40010400

08012608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012608:	b480      	push	{r7}
 801260a:	b087      	sub	sp, #28
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6a1b      	ldr	r3, [r3, #32]
 8012616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6a1b      	ldr	r3, [r3, #32]
 8012622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	69db      	ldr	r3, [r3, #28]
 801262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	f023 0303 	bic.w	r3, r3, #3
 801263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	4313      	orrs	r3, r2
 8012648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	021b      	lsls	r3, r3, #8
 8012658:	697a      	ldr	r2, [r7, #20]
 801265a:	4313      	orrs	r3, r2
 801265c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4a21      	ldr	r2, [pc, #132]	; (80126e8 <TIM_OC3_SetConfig+0xe0>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d003      	beq.n	801266e <TIM_OC3_SetConfig+0x66>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	4a20      	ldr	r2, [pc, #128]	; (80126ec <TIM_OC3_SetConfig+0xe4>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d10d      	bne.n	801268a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	021b      	lsls	r3, r3, #8
 801267c:	697a      	ldr	r2, [r7, #20]
 801267e:	4313      	orrs	r3, r2
 8012680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	4a16      	ldr	r2, [pc, #88]	; (80126e8 <TIM_OC3_SetConfig+0xe0>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d003      	beq.n	801269a <TIM_OC3_SetConfig+0x92>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	4a15      	ldr	r2, [pc, #84]	; (80126ec <TIM_OC3_SetConfig+0xe4>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d113      	bne.n	80126c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80126a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	695b      	ldr	r3, [r3, #20]
 80126ae:	011b      	lsls	r3, r3, #4
 80126b0:	693a      	ldr	r2, [r7, #16]
 80126b2:	4313      	orrs	r3, r2
 80126b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	699b      	ldr	r3, [r3, #24]
 80126ba:	011b      	lsls	r3, r3, #4
 80126bc:	693a      	ldr	r2, [r7, #16]
 80126be:	4313      	orrs	r3, r2
 80126c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	693a      	ldr	r2, [r7, #16]
 80126c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68fa      	ldr	r2, [r7, #12]
 80126cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	685a      	ldr	r2, [r3, #4]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	697a      	ldr	r2, [r7, #20]
 80126da:	621a      	str	r2, [r3, #32]
}
 80126dc:	bf00      	nop
 80126de:	371c      	adds	r7, #28
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr
 80126e8:	40010000 	.word	0x40010000
 80126ec:	40010400 	.word	0x40010400

080126f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b087      	sub	sp, #28
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6a1b      	ldr	r3, [r3, #32]
 80126fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6a1b      	ldr	r3, [r3, #32]
 801270a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	69db      	ldr	r3, [r3, #28]
 8012716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	021b      	lsls	r3, r3, #8
 801272e:	68fa      	ldr	r2, [r7, #12]
 8012730:	4313      	orrs	r3, r2
 8012732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801273a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	689b      	ldr	r3, [r3, #8]
 8012740:	031b      	lsls	r3, r3, #12
 8012742:	693a      	ldr	r2, [r7, #16]
 8012744:	4313      	orrs	r3, r2
 8012746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4a12      	ldr	r2, [pc, #72]	; (8012794 <TIM_OC4_SetConfig+0xa4>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d003      	beq.n	8012758 <TIM_OC4_SetConfig+0x68>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4a11      	ldr	r2, [pc, #68]	; (8012798 <TIM_OC4_SetConfig+0xa8>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d109      	bne.n	801276c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801275e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	695b      	ldr	r3, [r3, #20]
 8012764:	019b      	lsls	r3, r3, #6
 8012766:	697a      	ldr	r2, [r7, #20]
 8012768:	4313      	orrs	r3, r2
 801276a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	697a      	ldr	r2, [r7, #20]
 8012770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	685a      	ldr	r2, [r3, #4]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	693a      	ldr	r2, [r7, #16]
 8012784:	621a      	str	r2, [r3, #32]
}
 8012786:	bf00      	nop
 8012788:	371c      	adds	r7, #28
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	40010000 	.word	0x40010000
 8012798:	40010400 	.word	0x40010400

0801279c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801279c:	b480      	push	{r7}
 801279e:	b087      	sub	sp, #28
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	f003 031f 	and.w	r3, r3, #31
 80127ae:	2201      	movs	r2, #1
 80127b0:	fa02 f303 	lsl.w	r3, r2, r3
 80127b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6a1a      	ldr	r2, [r3, #32]
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	43db      	mvns	r3, r3
 80127be:	401a      	ands	r2, r3
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	6a1a      	ldr	r2, [r3, #32]
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	f003 031f 	and.w	r3, r3, #31
 80127ce:	6879      	ldr	r1, [r7, #4]
 80127d0:	fa01 f303 	lsl.w	r3, r1, r3
 80127d4:	431a      	orrs	r2, r3
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	621a      	str	r2, [r3, #32]
}
 80127da:	bf00      	nop
 80127dc:	371c      	adds	r7, #28
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr
	...

080127e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d101      	bne.n	8012800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80127fc:	2302      	movs	r3, #2
 80127fe:	e05a      	b.n	80128b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2201      	movs	r2, #1
 8012804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2202      	movs	r2, #2
 801280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	68fa      	ldr	r2, [r7, #12]
 801282e:	4313      	orrs	r3, r2
 8012830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a21      	ldr	r2, [pc, #132]	; (80128c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d022      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801284c:	d01d      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4a1d      	ldr	r2, [pc, #116]	; (80128c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d018      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4a1b      	ldr	r2, [pc, #108]	; (80128cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d013      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a1a      	ldr	r2, [pc, #104]	; (80128d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d00e      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4a18      	ldr	r2, [pc, #96]	; (80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d009      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a17      	ldr	r2, [pc, #92]	; (80128d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d004      	beq.n	801288a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4a15      	ldr	r2, [pc, #84]	; (80128dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d10c      	bne.n	80128a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	4313      	orrs	r3, r2
 801289a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	68ba      	ldr	r2, [r7, #8]
 80128a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2201      	movs	r2, #1
 80128a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3714      	adds	r7, #20
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	40010000 	.word	0x40010000
 80128c8:	40000400 	.word	0x40000400
 80128cc:	40000800 	.word	0x40000800
 80128d0:	40000c00 	.word	0x40000c00
 80128d4:	40010400 	.word	0x40010400
 80128d8:	40014000 	.word	0x40014000
 80128dc:	40001800 	.word	0x40001800

080128e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80128e0:	b480      	push	{r7}
 80128e2:	b085      	sub	sp, #20
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80128ea:	2300      	movs	r3, #0
 80128ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d101      	bne.n	80128fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80128f8:	2302      	movs	r3, #2
 80128fa:	e03d      	b.n	8012978 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2201      	movs	r2, #1
 8012900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	4313      	orrs	r3, r2
 8012910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	689b      	ldr	r3, [r3, #8]
 801291c:	4313      	orrs	r3, r2
 801291e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	4313      	orrs	r3, r2
 801292c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4313      	orrs	r3, r2
 801293a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	691b      	ldr	r3, [r3, #16]
 8012946:	4313      	orrs	r3, r2
 8012948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	695b      	ldr	r3, [r3, #20]
 8012954:	4313      	orrs	r3, r2
 8012956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	69db      	ldr	r3, [r3, #28]
 8012962:	4313      	orrs	r3, r2
 8012964:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	68fa      	ldr	r2, [r7, #12]
 801296c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012976:	2300      	movs	r3, #0
}
 8012978:	4618      	mov	r0, r3
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801298c:	bf00      	nop
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80129a0:	bf00      	nop
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr

080129ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d101      	bne.n	80129be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80129ba:	2301      	movs	r3, #1
 80129bc:	e03f      	b.n	8012a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d106      	bne.n	80129d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7fb fbe0 	bl	800e198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2224      	movs	r2, #36	; 0x24
 80129dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	68da      	ldr	r2, [r3, #12]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80129ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 fb4b 	bl	801308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	691a      	ldr	r2, [r3, #16]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	695a      	ldr	r2, [r3, #20]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	68da      	ldr	r2, [r3, #12]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2220      	movs	r2, #32
 8012a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2220      	movs	r2, #32
 8012a38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8012a3c:	2300      	movs	r3, #0
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3708      	adds	r7, #8
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}

08012a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b088      	sub	sp, #32
 8012a4a:	af02      	add	r7, sp, #8
 8012a4c:	60f8      	str	r0, [r7, #12]
 8012a4e:	60b9      	str	r1, [r7, #8]
 8012a50:	603b      	str	r3, [r7, #0]
 8012a52:	4613      	mov	r3, r2
 8012a54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8012a56:	2300      	movs	r3, #0
 8012a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	2b20      	cmp	r3, #32
 8012a64:	f040 8083 	bne.w	8012b6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <HAL_UART_Transmit+0x2e>
 8012a6e:	88fb      	ldrh	r3, [r7, #6]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d101      	bne.n	8012a78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8012a74:	2301      	movs	r3, #1
 8012a76:	e07b      	b.n	8012b70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d101      	bne.n	8012a86 <HAL_UART_Transmit+0x40>
 8012a82:	2302      	movs	r3, #2
 8012a84:	e074      	b.n	8012b70 <HAL_UART_Transmit+0x12a>
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2201      	movs	r2, #1
 8012a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2200      	movs	r2, #0
 8012a92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2221      	movs	r2, #33	; 0x21
 8012a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8012a9c:	f7fb fd5e 	bl	800e55c <HAL_GetTick>
 8012aa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	88fa      	ldrh	r2, [r7, #6]
 8012aa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	88fa      	ldrh	r2, [r7, #6]
 8012aac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8012ab6:	e042      	b.n	8012b3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	3b01      	subs	r3, #1
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	689b      	ldr	r3, [r3, #8]
 8012aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ace:	d122      	bne.n	8012b16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	9300      	str	r3, [sp, #0]
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	2180      	movs	r1, #128	; 0x80
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f000 f96a 	bl	8012db4 <UART_WaitOnFlagUntilTimeout>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d001      	beq.n	8012aea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8012ae6:	2303      	movs	r3, #3
 8012ae8:	e042      	b.n	8012b70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	881b      	ldrh	r3, [r3, #0]
 8012af2:	461a      	mov	r2, r3
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012afc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	691b      	ldr	r3, [r3, #16]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d103      	bne.n	8012b0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	3302      	adds	r3, #2
 8012b0a:	60bb      	str	r3, [r7, #8]
 8012b0c:	e017      	b.n	8012b3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	3301      	adds	r3, #1
 8012b12:	60bb      	str	r3, [r7, #8]
 8012b14:	e013      	b.n	8012b3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	2180      	movs	r1, #128	; 0x80
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f000 f947 	bl	8012db4 <UART_WaitOnFlagUntilTimeout>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d001      	beq.n	8012b30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8012b2c:	2303      	movs	r3, #3
 8012b2e:	e01f      	b.n	8012b70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	1c5a      	adds	r2, r3, #1
 8012b34:	60ba      	str	r2, [r7, #8]
 8012b36:	781a      	ldrb	r2, [r3, #0]
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1b7      	bne.n	8012ab8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2140      	movs	r1, #64	; 0x40
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f000 f92e 	bl	8012db4 <UART_WaitOnFlagUntilTimeout>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d001      	beq.n	8012b62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8012b5e:	2303      	movs	r3, #3
 8012b60:	e006      	b.n	8012b70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2220      	movs	r2, #32
 8012b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	e000      	b.n	8012b70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8012b6e:	2302      	movs	r3, #2
  }
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3718      	adds	r7, #24
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b088      	sub	sp, #32
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	695b      	ldr	r3, [r3, #20]
 8012b96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	f003 030f 	and.w	r3, r3, #15
 8012ba6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10d      	bne.n	8012bca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012bae:	69fb      	ldr	r3, [r7, #28]
 8012bb0:	f003 0320 	and.w	r3, r3, #32
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d008      	beq.n	8012bca <HAL_UART_IRQHandler+0x52>
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	f003 0320 	and.w	r3, r3, #32
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d003      	beq.n	8012bca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 f9e0 	bl	8012f88 <UART_Receive_IT>
      return;
 8012bc8:	e0d1      	b.n	8012d6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f000 80b0 	beq.w	8012d32 <HAL_UART_IRQHandler+0x1ba>
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d105      	bne.n	8012be8 <HAL_UART_IRQHandler+0x70>
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f000 80a5 	beq.w	8012d32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	f003 0301 	and.w	r3, r3, #1
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d00a      	beq.n	8012c08 <HAL_UART_IRQHandler+0x90>
 8012bf2:	69bb      	ldr	r3, [r7, #24]
 8012bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d005      	beq.n	8012c08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c00:	f043 0201 	orr.w	r2, r3, #1
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	f003 0304 	and.w	r3, r3, #4
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00a      	beq.n	8012c28 <HAL_UART_IRQHandler+0xb0>
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	f003 0301 	and.w	r3, r3, #1
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d005      	beq.n	8012c28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c20:	f043 0202 	orr.w	r2, r3, #2
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	f003 0302 	and.w	r3, r3, #2
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d00a      	beq.n	8012c48 <HAL_UART_IRQHandler+0xd0>
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d005      	beq.n	8012c48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c40:	f043 0204 	orr.w	r2, r3, #4
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	f003 0308 	and.w	r3, r3, #8
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00f      	beq.n	8012c72 <HAL_UART_IRQHandler+0xfa>
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	f003 0320 	and.w	r3, r3, #32
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d104      	bne.n	8012c66 <HAL_UART_IRQHandler+0xee>
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d005      	beq.n	8012c72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c6a:	f043 0208 	orr.w	r2, r3, #8
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d078      	beq.n	8012d6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	f003 0320 	and.w	r3, r3, #32
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d007      	beq.n	8012c94 <HAL_UART_IRQHandler+0x11c>
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	f003 0320 	and.w	r3, r3, #32
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d002      	beq.n	8012c94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 f97a 	bl	8012f88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	695b      	ldr	r3, [r3, #20]
 8012c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c9e:	2b40      	cmp	r3, #64	; 0x40
 8012ca0:	bf0c      	ite	eq
 8012ca2:	2301      	moveq	r3, #1
 8012ca4:	2300      	movne	r3, #0
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cae:	f003 0308 	and.w	r3, r3, #8
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d102      	bne.n	8012cbc <HAL_UART_IRQHandler+0x144>
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d031      	beq.n	8012d20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 f8c3 	bl	8012e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	695b      	ldr	r3, [r3, #20]
 8012cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ccc:	2b40      	cmp	r3, #64	; 0x40
 8012cce:	d123      	bne.n	8012d18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	695a      	ldr	r2, [r3, #20]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012cde:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d013      	beq.n	8012d10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cec:	4a21      	ldr	r2, [pc, #132]	; (8012d74 <HAL_UART_IRQHandler+0x1fc>)
 8012cee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fc fa61 	bl	800f1bc <HAL_DMA_Abort_IT>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d016      	beq.n	8012d2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012d0a:	4610      	mov	r0, r2
 8012d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d0e:	e00e      	b.n	8012d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 f845 	bl	8012da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d16:	e00a      	b.n	8012d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 f841 	bl	8012da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d1e:	e006      	b.n	8012d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f83d 	bl	8012da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8012d2c:	e01e      	b.n	8012d6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d2e:	bf00      	nop
    return;
 8012d30:	e01c      	b.n	8012d6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d008      	beq.n	8012d4e <HAL_UART_IRQHandler+0x1d6>
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d003      	beq.n	8012d4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 f8b0 	bl	8012eac <UART_Transmit_IT>
    return;
 8012d4c:	e00f      	b.n	8012d6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00a      	beq.n	8012d6e <HAL_UART_IRQHandler+0x1f6>
 8012d58:	69bb      	ldr	r3, [r7, #24]
 8012d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d005      	beq.n	8012d6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f000 f8f8 	bl	8012f58 <UART_EndTransmit_IT>
    return;
 8012d68:	bf00      	nop
 8012d6a:	e000      	b.n	8012d6e <HAL_UART_IRQHandler+0x1f6>
    return;
 8012d6c:	bf00      	nop
  }
}
 8012d6e:	3720      	adds	r7, #32
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	08012e85 	.word	0x08012e85

08012d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012d80:	bf00      	nop
 8012d82:	370c      	adds	r7, #12
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8012d94:	bf00      	nop
 8012d96:	370c      	adds	r7, #12
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012da8:	bf00      	nop
 8012daa:	370c      	adds	r7, #12
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr

08012db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	603b      	str	r3, [r7, #0]
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012dc4:	e02c      	b.n	8012e20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dcc:	d028      	beq.n	8012e20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d007      	beq.n	8012de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8012dd4:	f7fb fbc2 	bl	800e55c <HAL_GetTick>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	1ad3      	subs	r3, r2, r3
 8012dde:	69ba      	ldr	r2, [r7, #24]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d21d      	bcs.n	8012e20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	68da      	ldr	r2, [r3, #12]
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012df2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	695a      	ldr	r2, [r3, #20]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f022 0201 	bic.w	r2, r2, #1
 8012e02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2220      	movs	r2, #32
 8012e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2220      	movs	r2, #32
 8012e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2200      	movs	r2, #0
 8012e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8012e1c:	2303      	movs	r3, #3
 8012e1e:	e00f      	b.n	8012e40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	4013      	ands	r3, r2
 8012e2a:	68ba      	ldr	r2, [r7, #8]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	bf0c      	ite	eq
 8012e30:	2301      	moveq	r3, #1
 8012e32:	2300      	movne	r3, #0
 8012e34:	b2db      	uxtb	r3, r3
 8012e36:	461a      	mov	r2, r3
 8012e38:	79fb      	ldrb	r3, [r7, #7]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d0c3      	beq.n	8012dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3710      	adds	r7, #16
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b083      	sub	sp, #12
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68da      	ldr	r2, [r3, #12]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012e5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	695a      	ldr	r2, [r3, #20]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f022 0201 	bic.w	r2, r2, #1
 8012e6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2220      	movs	r2, #32
 8012e74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8012e78:	bf00      	nop
 8012e7a:	370c      	adds	r7, #12
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f7ff ff7e 	bl	8012da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ea4:	bf00      	nop
 8012ea6:	3710      	adds	r7, #16
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	2b21      	cmp	r3, #33	; 0x21
 8012ebe:	d144      	bne.n	8012f4a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ec8:	d11a      	bne.n	8012f00 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a1b      	ldr	r3, [r3, #32]
 8012ece:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012ede:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	691b      	ldr	r3, [r3, #16]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d105      	bne.n	8012ef4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6a1b      	ldr	r3, [r3, #32]
 8012eec:	1c9a      	adds	r2, r3, #2
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	621a      	str	r2, [r3, #32]
 8012ef2:	e00e      	b.n	8012f12 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6a1b      	ldr	r3, [r3, #32]
 8012ef8:	1c5a      	adds	r2, r3, #1
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	621a      	str	r2, [r3, #32]
 8012efe:	e008      	b.n	8012f12 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6a1b      	ldr	r3, [r3, #32]
 8012f04:	1c59      	adds	r1, r3, #1
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	6211      	str	r1, [r2, #32]
 8012f0a:	781a      	ldrb	r2, [r3, #0]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	3b01      	subs	r3, #1
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10f      	bne.n	8012f46 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	68da      	ldr	r2, [r3, #12]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012f34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	68da      	ldr	r2, [r3, #12]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8012f46:	2300      	movs	r3, #0
 8012f48:	e000      	b.n	8012f4c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8012f4a:	2302      	movs	r3, #2
  }
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3714      	adds	r7, #20
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr

08012f58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	68da      	ldr	r2, [r3, #12]
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2220      	movs	r2, #32
 8012f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7ff fefd 	bl	8012d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3708      	adds	r7, #8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	2b22      	cmp	r3, #34	; 0x22
 8012f9a:	d171      	bne.n	8013080 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	689b      	ldr	r3, [r3, #8]
 8012fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fa4:	d123      	bne.n	8012fee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012faa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d10e      	bne.n	8012fd2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fca:	1c9a      	adds	r2, r3, #2
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	629a      	str	r2, [r3, #40]	; 0x28
 8012fd0:	e029      	b.n	8013026 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	629a      	str	r2, [r3, #40]	; 0x28
 8012fec:	e01b      	b.n	8013026 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	691b      	ldr	r3, [r3, #16]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d10a      	bne.n	801300c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	6858      	ldr	r0, [r3, #4]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013000:	1c59      	adds	r1, r3, #1
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	6291      	str	r1, [r2, #40]	; 0x28
 8013006:	b2c2      	uxtb	r2, r0
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	e00c      	b.n	8013026 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	b2da      	uxtb	r2, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013018:	1c58      	adds	r0, r3, #1
 801301a:	6879      	ldr	r1, [r7, #4]
 801301c:	6288      	str	r0, [r1, #40]	; 0x28
 801301e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013022:	b2d2      	uxtb	r2, r2
 8013024:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801302a:	b29b      	uxth	r3, r3
 801302c:	3b01      	subs	r3, #1
 801302e:	b29b      	uxth	r3, r3
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	4619      	mov	r1, r3
 8013034:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8013036:	2b00      	cmp	r3, #0
 8013038:	d120      	bne.n	801307c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	68da      	ldr	r2, [r3, #12]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f022 0220 	bic.w	r2, r2, #32
 8013048:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	68da      	ldr	r2, [r3, #12]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013058:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	695a      	ldr	r2, [r3, #20]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	f022 0201 	bic.w	r2, r2, #1
 8013068:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2220      	movs	r2, #32
 801306e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff fe8a 	bl	8012d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8013078:	2300      	movs	r3, #0
 801307a:	e002      	b.n	8013082 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801307c:	2300      	movs	r3, #0
 801307e:	e000      	b.n	8013082 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8013080:	2302      	movs	r3, #2
  }
}
 8013082:	4618      	mov	r0, r3
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
	...

0801308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	b085      	sub	sp, #20
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	691b      	ldr	r3, [r3, #16]
 801309c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	68da      	ldr	r2, [r3, #12]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	430a      	orrs	r2, r1
 80130aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	689a      	ldr	r2, [r3, #8]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	691b      	ldr	r3, [r3, #16]
 80130b4:	431a      	orrs	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	695b      	ldr	r3, [r3, #20]
 80130ba:	431a      	orrs	r2, r3
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	69db      	ldr	r3, [r3, #28]
 80130c0:	4313      	orrs	r3, r2
 80130c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80130ce:	f023 030c 	bic.w	r3, r3, #12
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	6812      	ldr	r2, [r2, #0]
 80130d6:	68f9      	ldr	r1, [r7, #12]
 80130d8:	430b      	orrs	r3, r1
 80130da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	695b      	ldr	r3, [r3, #20]
 80130e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	699a      	ldr	r2, [r3, #24]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	430a      	orrs	r2, r1
 80130f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	69db      	ldr	r3, [r3, #28]
 80130f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130fa:	f040 818b 	bne.w	8013414 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4ac1      	ldr	r2, [pc, #772]	; (8013408 <UART_SetConfig+0x37c>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d005      	beq.n	8013114 <UART_SetConfig+0x88>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4abf      	ldr	r2, [pc, #764]	; (801340c <UART_SetConfig+0x380>)
 801310e:	4293      	cmp	r3, r2
 8013110:	f040 80bd 	bne.w	801328e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013114:	f7fd ffe6 	bl	80110e4 <HAL_RCC_GetPCLK2Freq>
 8013118:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	461d      	mov	r5, r3
 801311e:	f04f 0600 	mov.w	r6, #0
 8013122:	46a8      	mov	r8, r5
 8013124:	46b1      	mov	r9, r6
 8013126:	eb18 0308 	adds.w	r3, r8, r8
 801312a:	eb49 0409 	adc.w	r4, r9, r9
 801312e:	4698      	mov	r8, r3
 8013130:	46a1      	mov	r9, r4
 8013132:	eb18 0805 	adds.w	r8, r8, r5
 8013136:	eb49 0906 	adc.w	r9, r9, r6
 801313a:	f04f 0100 	mov.w	r1, #0
 801313e:	f04f 0200 	mov.w	r2, #0
 8013142:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013146:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801314a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801314e:	4688      	mov	r8, r1
 8013150:	4691      	mov	r9, r2
 8013152:	eb18 0005 	adds.w	r0, r8, r5
 8013156:	eb49 0106 	adc.w	r1, r9, r6
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	461d      	mov	r5, r3
 8013160:	f04f 0600 	mov.w	r6, #0
 8013164:	196b      	adds	r3, r5, r5
 8013166:	eb46 0406 	adc.w	r4, r6, r6
 801316a:	461a      	mov	r2, r3
 801316c:	4623      	mov	r3, r4
 801316e:	f7f5 fca3 	bl	8008ab8 <__aeabi_uldivmod>
 8013172:	4603      	mov	r3, r0
 8013174:	460c      	mov	r4, r1
 8013176:	461a      	mov	r2, r3
 8013178:	4ba5      	ldr	r3, [pc, #660]	; (8013410 <UART_SetConfig+0x384>)
 801317a:	fba3 2302 	umull	r2, r3, r3, r2
 801317e:	095b      	lsrs	r3, r3, #5
 8013180:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	461d      	mov	r5, r3
 8013188:	f04f 0600 	mov.w	r6, #0
 801318c:	46a9      	mov	r9, r5
 801318e:	46b2      	mov	sl, r6
 8013190:	eb19 0309 	adds.w	r3, r9, r9
 8013194:	eb4a 040a 	adc.w	r4, sl, sl
 8013198:	4699      	mov	r9, r3
 801319a:	46a2      	mov	sl, r4
 801319c:	eb19 0905 	adds.w	r9, r9, r5
 80131a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80131a4:	f04f 0100 	mov.w	r1, #0
 80131a8:	f04f 0200 	mov.w	r2, #0
 80131ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80131b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80131b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80131b8:	4689      	mov	r9, r1
 80131ba:	4692      	mov	sl, r2
 80131bc:	eb19 0005 	adds.w	r0, r9, r5
 80131c0:	eb4a 0106 	adc.w	r1, sl, r6
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	461d      	mov	r5, r3
 80131ca:	f04f 0600 	mov.w	r6, #0
 80131ce:	196b      	adds	r3, r5, r5
 80131d0:	eb46 0406 	adc.w	r4, r6, r6
 80131d4:	461a      	mov	r2, r3
 80131d6:	4623      	mov	r3, r4
 80131d8:	f7f5 fc6e 	bl	8008ab8 <__aeabi_uldivmod>
 80131dc:	4603      	mov	r3, r0
 80131de:	460c      	mov	r4, r1
 80131e0:	461a      	mov	r2, r3
 80131e2:	4b8b      	ldr	r3, [pc, #556]	; (8013410 <UART_SetConfig+0x384>)
 80131e4:	fba3 1302 	umull	r1, r3, r3, r2
 80131e8:	095b      	lsrs	r3, r3, #5
 80131ea:	2164      	movs	r1, #100	; 0x64
 80131ec:	fb01 f303 	mul.w	r3, r1, r3
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	00db      	lsls	r3, r3, #3
 80131f4:	3332      	adds	r3, #50	; 0x32
 80131f6:	4a86      	ldr	r2, [pc, #536]	; (8013410 <UART_SetConfig+0x384>)
 80131f8:	fba2 2303 	umull	r2, r3, r2, r3
 80131fc:	095b      	lsrs	r3, r3, #5
 80131fe:	005b      	lsls	r3, r3, #1
 8013200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013204:	4498      	add	r8, r3
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	461d      	mov	r5, r3
 801320a:	f04f 0600 	mov.w	r6, #0
 801320e:	46a9      	mov	r9, r5
 8013210:	46b2      	mov	sl, r6
 8013212:	eb19 0309 	adds.w	r3, r9, r9
 8013216:	eb4a 040a 	adc.w	r4, sl, sl
 801321a:	4699      	mov	r9, r3
 801321c:	46a2      	mov	sl, r4
 801321e:	eb19 0905 	adds.w	r9, r9, r5
 8013222:	eb4a 0a06 	adc.w	sl, sl, r6
 8013226:	f04f 0100 	mov.w	r1, #0
 801322a:	f04f 0200 	mov.w	r2, #0
 801322e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013232:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013236:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801323a:	4689      	mov	r9, r1
 801323c:	4692      	mov	sl, r2
 801323e:	eb19 0005 	adds.w	r0, r9, r5
 8013242:	eb4a 0106 	adc.w	r1, sl, r6
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	461d      	mov	r5, r3
 801324c:	f04f 0600 	mov.w	r6, #0
 8013250:	196b      	adds	r3, r5, r5
 8013252:	eb46 0406 	adc.w	r4, r6, r6
 8013256:	461a      	mov	r2, r3
 8013258:	4623      	mov	r3, r4
 801325a:	f7f5 fc2d 	bl	8008ab8 <__aeabi_uldivmod>
 801325e:	4603      	mov	r3, r0
 8013260:	460c      	mov	r4, r1
 8013262:	461a      	mov	r2, r3
 8013264:	4b6a      	ldr	r3, [pc, #424]	; (8013410 <UART_SetConfig+0x384>)
 8013266:	fba3 1302 	umull	r1, r3, r3, r2
 801326a:	095b      	lsrs	r3, r3, #5
 801326c:	2164      	movs	r1, #100	; 0x64
 801326e:	fb01 f303 	mul.w	r3, r1, r3
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	00db      	lsls	r3, r3, #3
 8013276:	3332      	adds	r3, #50	; 0x32
 8013278:	4a65      	ldr	r2, [pc, #404]	; (8013410 <UART_SetConfig+0x384>)
 801327a:	fba2 2303 	umull	r2, r3, r2, r3
 801327e:	095b      	lsrs	r3, r3, #5
 8013280:	f003 0207 	and.w	r2, r3, #7
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4442      	add	r2, r8
 801328a:	609a      	str	r2, [r3, #8]
 801328c:	e26f      	b.n	801376e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801328e:	f7fd ff15 	bl	80110bc <HAL_RCC_GetPCLK1Freq>
 8013292:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	461d      	mov	r5, r3
 8013298:	f04f 0600 	mov.w	r6, #0
 801329c:	46a8      	mov	r8, r5
 801329e:	46b1      	mov	r9, r6
 80132a0:	eb18 0308 	adds.w	r3, r8, r8
 80132a4:	eb49 0409 	adc.w	r4, r9, r9
 80132a8:	4698      	mov	r8, r3
 80132aa:	46a1      	mov	r9, r4
 80132ac:	eb18 0805 	adds.w	r8, r8, r5
 80132b0:	eb49 0906 	adc.w	r9, r9, r6
 80132b4:	f04f 0100 	mov.w	r1, #0
 80132b8:	f04f 0200 	mov.w	r2, #0
 80132bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80132c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80132c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80132c8:	4688      	mov	r8, r1
 80132ca:	4691      	mov	r9, r2
 80132cc:	eb18 0005 	adds.w	r0, r8, r5
 80132d0:	eb49 0106 	adc.w	r1, r9, r6
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	461d      	mov	r5, r3
 80132da:	f04f 0600 	mov.w	r6, #0
 80132de:	196b      	adds	r3, r5, r5
 80132e0:	eb46 0406 	adc.w	r4, r6, r6
 80132e4:	461a      	mov	r2, r3
 80132e6:	4623      	mov	r3, r4
 80132e8:	f7f5 fbe6 	bl	8008ab8 <__aeabi_uldivmod>
 80132ec:	4603      	mov	r3, r0
 80132ee:	460c      	mov	r4, r1
 80132f0:	461a      	mov	r2, r3
 80132f2:	4b47      	ldr	r3, [pc, #284]	; (8013410 <UART_SetConfig+0x384>)
 80132f4:	fba3 2302 	umull	r2, r3, r3, r2
 80132f8:	095b      	lsrs	r3, r3, #5
 80132fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	461d      	mov	r5, r3
 8013302:	f04f 0600 	mov.w	r6, #0
 8013306:	46a9      	mov	r9, r5
 8013308:	46b2      	mov	sl, r6
 801330a:	eb19 0309 	adds.w	r3, r9, r9
 801330e:	eb4a 040a 	adc.w	r4, sl, sl
 8013312:	4699      	mov	r9, r3
 8013314:	46a2      	mov	sl, r4
 8013316:	eb19 0905 	adds.w	r9, r9, r5
 801331a:	eb4a 0a06 	adc.w	sl, sl, r6
 801331e:	f04f 0100 	mov.w	r1, #0
 8013322:	f04f 0200 	mov.w	r2, #0
 8013326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801332a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801332e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013332:	4689      	mov	r9, r1
 8013334:	4692      	mov	sl, r2
 8013336:	eb19 0005 	adds.w	r0, r9, r5
 801333a:	eb4a 0106 	adc.w	r1, sl, r6
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	461d      	mov	r5, r3
 8013344:	f04f 0600 	mov.w	r6, #0
 8013348:	196b      	adds	r3, r5, r5
 801334a:	eb46 0406 	adc.w	r4, r6, r6
 801334e:	461a      	mov	r2, r3
 8013350:	4623      	mov	r3, r4
 8013352:	f7f5 fbb1 	bl	8008ab8 <__aeabi_uldivmod>
 8013356:	4603      	mov	r3, r0
 8013358:	460c      	mov	r4, r1
 801335a:	461a      	mov	r2, r3
 801335c:	4b2c      	ldr	r3, [pc, #176]	; (8013410 <UART_SetConfig+0x384>)
 801335e:	fba3 1302 	umull	r1, r3, r3, r2
 8013362:	095b      	lsrs	r3, r3, #5
 8013364:	2164      	movs	r1, #100	; 0x64
 8013366:	fb01 f303 	mul.w	r3, r1, r3
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	3332      	adds	r3, #50	; 0x32
 8013370:	4a27      	ldr	r2, [pc, #156]	; (8013410 <UART_SetConfig+0x384>)
 8013372:	fba2 2303 	umull	r2, r3, r2, r3
 8013376:	095b      	lsrs	r3, r3, #5
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801337e:	4498      	add	r8, r3
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	461d      	mov	r5, r3
 8013384:	f04f 0600 	mov.w	r6, #0
 8013388:	46a9      	mov	r9, r5
 801338a:	46b2      	mov	sl, r6
 801338c:	eb19 0309 	adds.w	r3, r9, r9
 8013390:	eb4a 040a 	adc.w	r4, sl, sl
 8013394:	4699      	mov	r9, r3
 8013396:	46a2      	mov	sl, r4
 8013398:	eb19 0905 	adds.w	r9, r9, r5
 801339c:	eb4a 0a06 	adc.w	sl, sl, r6
 80133a0:	f04f 0100 	mov.w	r1, #0
 80133a4:	f04f 0200 	mov.w	r2, #0
 80133a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80133ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80133b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80133b4:	4689      	mov	r9, r1
 80133b6:	4692      	mov	sl, r2
 80133b8:	eb19 0005 	adds.w	r0, r9, r5
 80133bc:	eb4a 0106 	adc.w	r1, sl, r6
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	461d      	mov	r5, r3
 80133c6:	f04f 0600 	mov.w	r6, #0
 80133ca:	196b      	adds	r3, r5, r5
 80133cc:	eb46 0406 	adc.w	r4, r6, r6
 80133d0:	461a      	mov	r2, r3
 80133d2:	4623      	mov	r3, r4
 80133d4:	f7f5 fb70 	bl	8008ab8 <__aeabi_uldivmod>
 80133d8:	4603      	mov	r3, r0
 80133da:	460c      	mov	r4, r1
 80133dc:	461a      	mov	r2, r3
 80133de:	4b0c      	ldr	r3, [pc, #48]	; (8013410 <UART_SetConfig+0x384>)
 80133e0:	fba3 1302 	umull	r1, r3, r3, r2
 80133e4:	095b      	lsrs	r3, r3, #5
 80133e6:	2164      	movs	r1, #100	; 0x64
 80133e8:	fb01 f303 	mul.w	r3, r1, r3
 80133ec:	1ad3      	subs	r3, r2, r3
 80133ee:	00db      	lsls	r3, r3, #3
 80133f0:	3332      	adds	r3, #50	; 0x32
 80133f2:	4a07      	ldr	r2, [pc, #28]	; (8013410 <UART_SetConfig+0x384>)
 80133f4:	fba2 2303 	umull	r2, r3, r2, r3
 80133f8:	095b      	lsrs	r3, r3, #5
 80133fa:	f003 0207 	and.w	r2, r3, #7
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	4442      	add	r2, r8
 8013404:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8013406:	e1b2      	b.n	801376e <UART_SetConfig+0x6e2>
 8013408:	40011000 	.word	0x40011000
 801340c:	40011400 	.word	0x40011400
 8013410:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4ad7      	ldr	r2, [pc, #860]	; (8013778 <UART_SetConfig+0x6ec>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d005      	beq.n	801342a <UART_SetConfig+0x39e>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4ad6      	ldr	r2, [pc, #856]	; (801377c <UART_SetConfig+0x6f0>)
 8013424:	4293      	cmp	r3, r2
 8013426:	f040 80d1 	bne.w	80135cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801342a:	f7fd fe5b 	bl	80110e4 <HAL_RCC_GetPCLK2Freq>
 801342e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	469a      	mov	sl, r3
 8013434:	f04f 0b00 	mov.w	fp, #0
 8013438:	46d0      	mov	r8, sl
 801343a:	46d9      	mov	r9, fp
 801343c:	eb18 0308 	adds.w	r3, r8, r8
 8013440:	eb49 0409 	adc.w	r4, r9, r9
 8013444:	4698      	mov	r8, r3
 8013446:	46a1      	mov	r9, r4
 8013448:	eb18 080a 	adds.w	r8, r8, sl
 801344c:	eb49 090b 	adc.w	r9, r9, fp
 8013450:	f04f 0100 	mov.w	r1, #0
 8013454:	f04f 0200 	mov.w	r2, #0
 8013458:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801345c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013460:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013464:	4688      	mov	r8, r1
 8013466:	4691      	mov	r9, r2
 8013468:	eb1a 0508 	adds.w	r5, sl, r8
 801346c:	eb4b 0609 	adc.w	r6, fp, r9
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	685b      	ldr	r3, [r3, #4]
 8013474:	4619      	mov	r1, r3
 8013476:	f04f 0200 	mov.w	r2, #0
 801347a:	f04f 0300 	mov.w	r3, #0
 801347e:	f04f 0400 	mov.w	r4, #0
 8013482:	0094      	lsls	r4, r2, #2
 8013484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013488:	008b      	lsls	r3, r1, #2
 801348a:	461a      	mov	r2, r3
 801348c:	4623      	mov	r3, r4
 801348e:	4628      	mov	r0, r5
 8013490:	4631      	mov	r1, r6
 8013492:	f7f5 fb11 	bl	8008ab8 <__aeabi_uldivmod>
 8013496:	4603      	mov	r3, r0
 8013498:	460c      	mov	r4, r1
 801349a:	461a      	mov	r2, r3
 801349c:	4bb8      	ldr	r3, [pc, #736]	; (8013780 <UART_SetConfig+0x6f4>)
 801349e:	fba3 2302 	umull	r2, r3, r3, r2
 80134a2:	095b      	lsrs	r3, r3, #5
 80134a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	469b      	mov	fp, r3
 80134ac:	f04f 0c00 	mov.w	ip, #0
 80134b0:	46d9      	mov	r9, fp
 80134b2:	46e2      	mov	sl, ip
 80134b4:	eb19 0309 	adds.w	r3, r9, r9
 80134b8:	eb4a 040a 	adc.w	r4, sl, sl
 80134bc:	4699      	mov	r9, r3
 80134be:	46a2      	mov	sl, r4
 80134c0:	eb19 090b 	adds.w	r9, r9, fp
 80134c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80134c8:	f04f 0100 	mov.w	r1, #0
 80134cc:	f04f 0200 	mov.w	r2, #0
 80134d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80134d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80134d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80134dc:	4689      	mov	r9, r1
 80134de:	4692      	mov	sl, r2
 80134e0:	eb1b 0509 	adds.w	r5, fp, r9
 80134e4:	eb4c 060a 	adc.w	r6, ip, sl
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	4619      	mov	r1, r3
 80134ee:	f04f 0200 	mov.w	r2, #0
 80134f2:	f04f 0300 	mov.w	r3, #0
 80134f6:	f04f 0400 	mov.w	r4, #0
 80134fa:	0094      	lsls	r4, r2, #2
 80134fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013500:	008b      	lsls	r3, r1, #2
 8013502:	461a      	mov	r2, r3
 8013504:	4623      	mov	r3, r4
 8013506:	4628      	mov	r0, r5
 8013508:	4631      	mov	r1, r6
 801350a:	f7f5 fad5 	bl	8008ab8 <__aeabi_uldivmod>
 801350e:	4603      	mov	r3, r0
 8013510:	460c      	mov	r4, r1
 8013512:	461a      	mov	r2, r3
 8013514:	4b9a      	ldr	r3, [pc, #616]	; (8013780 <UART_SetConfig+0x6f4>)
 8013516:	fba3 1302 	umull	r1, r3, r3, r2
 801351a:	095b      	lsrs	r3, r3, #5
 801351c:	2164      	movs	r1, #100	; 0x64
 801351e:	fb01 f303 	mul.w	r3, r1, r3
 8013522:	1ad3      	subs	r3, r2, r3
 8013524:	011b      	lsls	r3, r3, #4
 8013526:	3332      	adds	r3, #50	; 0x32
 8013528:	4a95      	ldr	r2, [pc, #596]	; (8013780 <UART_SetConfig+0x6f4>)
 801352a:	fba2 2303 	umull	r2, r3, r2, r3
 801352e:	095b      	lsrs	r3, r3, #5
 8013530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013534:	4498      	add	r8, r3
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	469b      	mov	fp, r3
 801353a:	f04f 0c00 	mov.w	ip, #0
 801353e:	46d9      	mov	r9, fp
 8013540:	46e2      	mov	sl, ip
 8013542:	eb19 0309 	adds.w	r3, r9, r9
 8013546:	eb4a 040a 	adc.w	r4, sl, sl
 801354a:	4699      	mov	r9, r3
 801354c:	46a2      	mov	sl, r4
 801354e:	eb19 090b 	adds.w	r9, r9, fp
 8013552:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013556:	f04f 0100 	mov.w	r1, #0
 801355a:	f04f 0200 	mov.w	r2, #0
 801355e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013562:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013566:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801356a:	4689      	mov	r9, r1
 801356c:	4692      	mov	sl, r2
 801356e:	eb1b 0509 	adds.w	r5, fp, r9
 8013572:	eb4c 060a 	adc.w	r6, ip, sl
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	4619      	mov	r1, r3
 801357c:	f04f 0200 	mov.w	r2, #0
 8013580:	f04f 0300 	mov.w	r3, #0
 8013584:	f04f 0400 	mov.w	r4, #0
 8013588:	0094      	lsls	r4, r2, #2
 801358a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801358e:	008b      	lsls	r3, r1, #2
 8013590:	461a      	mov	r2, r3
 8013592:	4623      	mov	r3, r4
 8013594:	4628      	mov	r0, r5
 8013596:	4631      	mov	r1, r6
 8013598:	f7f5 fa8e 	bl	8008ab8 <__aeabi_uldivmod>
 801359c:	4603      	mov	r3, r0
 801359e:	460c      	mov	r4, r1
 80135a0:	461a      	mov	r2, r3
 80135a2:	4b77      	ldr	r3, [pc, #476]	; (8013780 <UART_SetConfig+0x6f4>)
 80135a4:	fba3 1302 	umull	r1, r3, r3, r2
 80135a8:	095b      	lsrs	r3, r3, #5
 80135aa:	2164      	movs	r1, #100	; 0x64
 80135ac:	fb01 f303 	mul.w	r3, r1, r3
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	011b      	lsls	r3, r3, #4
 80135b4:	3332      	adds	r3, #50	; 0x32
 80135b6:	4a72      	ldr	r2, [pc, #456]	; (8013780 <UART_SetConfig+0x6f4>)
 80135b8:	fba2 2303 	umull	r2, r3, r2, r3
 80135bc:	095b      	lsrs	r3, r3, #5
 80135be:	f003 020f 	and.w	r2, r3, #15
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	4442      	add	r2, r8
 80135c8:	609a      	str	r2, [r3, #8]
 80135ca:	e0d0      	b.n	801376e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80135cc:	f7fd fd76 	bl	80110bc <HAL_RCC_GetPCLK1Freq>
 80135d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	469a      	mov	sl, r3
 80135d6:	f04f 0b00 	mov.w	fp, #0
 80135da:	46d0      	mov	r8, sl
 80135dc:	46d9      	mov	r9, fp
 80135de:	eb18 0308 	adds.w	r3, r8, r8
 80135e2:	eb49 0409 	adc.w	r4, r9, r9
 80135e6:	4698      	mov	r8, r3
 80135e8:	46a1      	mov	r9, r4
 80135ea:	eb18 080a 	adds.w	r8, r8, sl
 80135ee:	eb49 090b 	adc.w	r9, r9, fp
 80135f2:	f04f 0100 	mov.w	r1, #0
 80135f6:	f04f 0200 	mov.w	r2, #0
 80135fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80135fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013602:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013606:	4688      	mov	r8, r1
 8013608:	4691      	mov	r9, r2
 801360a:	eb1a 0508 	adds.w	r5, sl, r8
 801360e:	eb4b 0609 	adc.w	r6, fp, r9
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	4619      	mov	r1, r3
 8013618:	f04f 0200 	mov.w	r2, #0
 801361c:	f04f 0300 	mov.w	r3, #0
 8013620:	f04f 0400 	mov.w	r4, #0
 8013624:	0094      	lsls	r4, r2, #2
 8013626:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801362a:	008b      	lsls	r3, r1, #2
 801362c:	461a      	mov	r2, r3
 801362e:	4623      	mov	r3, r4
 8013630:	4628      	mov	r0, r5
 8013632:	4631      	mov	r1, r6
 8013634:	f7f5 fa40 	bl	8008ab8 <__aeabi_uldivmod>
 8013638:	4603      	mov	r3, r0
 801363a:	460c      	mov	r4, r1
 801363c:	461a      	mov	r2, r3
 801363e:	4b50      	ldr	r3, [pc, #320]	; (8013780 <UART_SetConfig+0x6f4>)
 8013640:	fba3 2302 	umull	r2, r3, r3, r2
 8013644:	095b      	lsrs	r3, r3, #5
 8013646:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	469b      	mov	fp, r3
 801364e:	f04f 0c00 	mov.w	ip, #0
 8013652:	46d9      	mov	r9, fp
 8013654:	46e2      	mov	sl, ip
 8013656:	eb19 0309 	adds.w	r3, r9, r9
 801365a:	eb4a 040a 	adc.w	r4, sl, sl
 801365e:	4699      	mov	r9, r3
 8013660:	46a2      	mov	sl, r4
 8013662:	eb19 090b 	adds.w	r9, r9, fp
 8013666:	eb4a 0a0c 	adc.w	sl, sl, ip
 801366a:	f04f 0100 	mov.w	r1, #0
 801366e:	f04f 0200 	mov.w	r2, #0
 8013672:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013676:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801367a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801367e:	4689      	mov	r9, r1
 8013680:	4692      	mov	sl, r2
 8013682:	eb1b 0509 	adds.w	r5, fp, r9
 8013686:	eb4c 060a 	adc.w	r6, ip, sl
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	4619      	mov	r1, r3
 8013690:	f04f 0200 	mov.w	r2, #0
 8013694:	f04f 0300 	mov.w	r3, #0
 8013698:	f04f 0400 	mov.w	r4, #0
 801369c:	0094      	lsls	r4, r2, #2
 801369e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80136a2:	008b      	lsls	r3, r1, #2
 80136a4:	461a      	mov	r2, r3
 80136a6:	4623      	mov	r3, r4
 80136a8:	4628      	mov	r0, r5
 80136aa:	4631      	mov	r1, r6
 80136ac:	f7f5 fa04 	bl	8008ab8 <__aeabi_uldivmod>
 80136b0:	4603      	mov	r3, r0
 80136b2:	460c      	mov	r4, r1
 80136b4:	461a      	mov	r2, r3
 80136b6:	4b32      	ldr	r3, [pc, #200]	; (8013780 <UART_SetConfig+0x6f4>)
 80136b8:	fba3 1302 	umull	r1, r3, r3, r2
 80136bc:	095b      	lsrs	r3, r3, #5
 80136be:	2164      	movs	r1, #100	; 0x64
 80136c0:	fb01 f303 	mul.w	r3, r1, r3
 80136c4:	1ad3      	subs	r3, r2, r3
 80136c6:	011b      	lsls	r3, r3, #4
 80136c8:	3332      	adds	r3, #50	; 0x32
 80136ca:	4a2d      	ldr	r2, [pc, #180]	; (8013780 <UART_SetConfig+0x6f4>)
 80136cc:	fba2 2303 	umull	r2, r3, r2, r3
 80136d0:	095b      	lsrs	r3, r3, #5
 80136d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136d6:	4498      	add	r8, r3
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	469b      	mov	fp, r3
 80136dc:	f04f 0c00 	mov.w	ip, #0
 80136e0:	46d9      	mov	r9, fp
 80136e2:	46e2      	mov	sl, ip
 80136e4:	eb19 0309 	adds.w	r3, r9, r9
 80136e8:	eb4a 040a 	adc.w	r4, sl, sl
 80136ec:	4699      	mov	r9, r3
 80136ee:	46a2      	mov	sl, r4
 80136f0:	eb19 090b 	adds.w	r9, r9, fp
 80136f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80136f8:	f04f 0100 	mov.w	r1, #0
 80136fc:	f04f 0200 	mov.w	r2, #0
 8013700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013704:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013708:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801370c:	4689      	mov	r9, r1
 801370e:	4692      	mov	sl, r2
 8013710:	eb1b 0509 	adds.w	r5, fp, r9
 8013714:	eb4c 060a 	adc.w	r6, ip, sl
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	4619      	mov	r1, r3
 801371e:	f04f 0200 	mov.w	r2, #0
 8013722:	f04f 0300 	mov.w	r3, #0
 8013726:	f04f 0400 	mov.w	r4, #0
 801372a:	0094      	lsls	r4, r2, #2
 801372c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013730:	008b      	lsls	r3, r1, #2
 8013732:	461a      	mov	r2, r3
 8013734:	4623      	mov	r3, r4
 8013736:	4628      	mov	r0, r5
 8013738:	4631      	mov	r1, r6
 801373a:	f7f5 f9bd 	bl	8008ab8 <__aeabi_uldivmod>
 801373e:	4603      	mov	r3, r0
 8013740:	460c      	mov	r4, r1
 8013742:	461a      	mov	r2, r3
 8013744:	4b0e      	ldr	r3, [pc, #56]	; (8013780 <UART_SetConfig+0x6f4>)
 8013746:	fba3 1302 	umull	r1, r3, r3, r2
 801374a:	095b      	lsrs	r3, r3, #5
 801374c:	2164      	movs	r1, #100	; 0x64
 801374e:	fb01 f303 	mul.w	r3, r1, r3
 8013752:	1ad3      	subs	r3, r2, r3
 8013754:	011b      	lsls	r3, r3, #4
 8013756:	3332      	adds	r3, #50	; 0x32
 8013758:	4a09      	ldr	r2, [pc, #36]	; (8013780 <UART_SetConfig+0x6f4>)
 801375a:	fba2 2303 	umull	r2, r3, r2, r3
 801375e:	095b      	lsrs	r3, r3, #5
 8013760:	f003 020f 	and.w	r2, r3, #15
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	4442      	add	r2, r8
 801376a:	609a      	str	r2, [r3, #8]
}
 801376c:	e7ff      	b.n	801376e <UART_SetConfig+0x6e2>
 801376e:	bf00      	nop
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013778:	40011000 	.word	0x40011000
 801377c:	40011400 	.word	0x40011400
 8013780:	51eb851f 	.word	0x51eb851f

08013784 <__errno>:
 8013784:	4b01      	ldr	r3, [pc, #4]	; (801378c <__errno+0x8>)
 8013786:	6818      	ldr	r0, [r3, #0]
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	20000018 	.word	0x20000018

08013790 <__libc_init_array>:
 8013790:	b570      	push	{r4, r5, r6, lr}
 8013792:	4e0d      	ldr	r6, [pc, #52]	; (80137c8 <__libc_init_array+0x38>)
 8013794:	4c0d      	ldr	r4, [pc, #52]	; (80137cc <__libc_init_array+0x3c>)
 8013796:	1ba4      	subs	r4, r4, r6
 8013798:	10a4      	asrs	r4, r4, #2
 801379a:	2500      	movs	r5, #0
 801379c:	42a5      	cmp	r5, r4
 801379e:	d109      	bne.n	80137b4 <__libc_init_array+0x24>
 80137a0:	4e0b      	ldr	r6, [pc, #44]	; (80137d0 <__libc_init_array+0x40>)
 80137a2:	4c0c      	ldr	r4, [pc, #48]	; (80137d4 <__libc_init_array+0x44>)
 80137a4:	f002 fd28 	bl	80161f8 <_init>
 80137a8:	1ba4      	subs	r4, r4, r6
 80137aa:	10a4      	asrs	r4, r4, #2
 80137ac:	2500      	movs	r5, #0
 80137ae:	42a5      	cmp	r5, r4
 80137b0:	d105      	bne.n	80137be <__libc_init_array+0x2e>
 80137b2:	bd70      	pop	{r4, r5, r6, pc}
 80137b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80137b8:	4798      	blx	r3
 80137ba:	3501      	adds	r5, #1
 80137bc:	e7ee      	b.n	801379c <__libc_init_array+0xc>
 80137be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80137c2:	4798      	blx	r3
 80137c4:	3501      	adds	r5, #1
 80137c6:	e7f2      	b.n	80137ae <__libc_init_array+0x1e>
 80137c8:	080165a0 	.word	0x080165a0
 80137cc:	080165a0 	.word	0x080165a0
 80137d0:	080165a0 	.word	0x080165a0
 80137d4:	080165a4 	.word	0x080165a4

080137d8 <memcpy>:
 80137d8:	b510      	push	{r4, lr}
 80137da:	1e43      	subs	r3, r0, #1
 80137dc:	440a      	add	r2, r1
 80137de:	4291      	cmp	r1, r2
 80137e0:	d100      	bne.n	80137e4 <memcpy+0xc>
 80137e2:	bd10      	pop	{r4, pc}
 80137e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137ec:	e7f7      	b.n	80137de <memcpy+0x6>

080137ee <memset>:
 80137ee:	4402      	add	r2, r0
 80137f0:	4603      	mov	r3, r0
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d100      	bne.n	80137f8 <memset+0xa>
 80137f6:	4770      	bx	lr
 80137f8:	f803 1b01 	strb.w	r1, [r3], #1
 80137fc:	e7f9      	b.n	80137f2 <memset+0x4>

080137fe <__cvt>:
 80137fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013802:	ec55 4b10 	vmov	r4, r5, d0
 8013806:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801380c:	2d00      	cmp	r5, #0
 801380e:	460e      	mov	r6, r1
 8013810:	4691      	mov	r9, r2
 8013812:	4619      	mov	r1, r3
 8013814:	bfb8      	it	lt
 8013816:	4622      	movlt	r2, r4
 8013818:	462b      	mov	r3, r5
 801381a:	f027 0720 	bic.w	r7, r7, #32
 801381e:	bfbb      	ittet	lt
 8013820:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013824:	461d      	movlt	r5, r3
 8013826:	2300      	movge	r3, #0
 8013828:	232d      	movlt	r3, #45	; 0x2d
 801382a:	bfb8      	it	lt
 801382c:	4614      	movlt	r4, r2
 801382e:	2f46      	cmp	r7, #70	; 0x46
 8013830:	700b      	strb	r3, [r1, #0]
 8013832:	d004      	beq.n	801383e <__cvt+0x40>
 8013834:	2f45      	cmp	r7, #69	; 0x45
 8013836:	d100      	bne.n	801383a <__cvt+0x3c>
 8013838:	3601      	adds	r6, #1
 801383a:	2102      	movs	r1, #2
 801383c:	e000      	b.n	8013840 <__cvt+0x42>
 801383e:	2103      	movs	r1, #3
 8013840:	ab03      	add	r3, sp, #12
 8013842:	9301      	str	r3, [sp, #4]
 8013844:	ab02      	add	r3, sp, #8
 8013846:	9300      	str	r3, [sp, #0]
 8013848:	4632      	mov	r2, r6
 801384a:	4653      	mov	r3, sl
 801384c:	ec45 4b10 	vmov	d0, r4, r5
 8013850:	f000 fcf6 	bl	8014240 <_dtoa_r>
 8013854:	2f47      	cmp	r7, #71	; 0x47
 8013856:	4680      	mov	r8, r0
 8013858:	d102      	bne.n	8013860 <__cvt+0x62>
 801385a:	f019 0f01 	tst.w	r9, #1
 801385e:	d026      	beq.n	80138ae <__cvt+0xb0>
 8013860:	2f46      	cmp	r7, #70	; 0x46
 8013862:	eb08 0906 	add.w	r9, r8, r6
 8013866:	d111      	bne.n	801388c <__cvt+0x8e>
 8013868:	f898 3000 	ldrb.w	r3, [r8]
 801386c:	2b30      	cmp	r3, #48	; 0x30
 801386e:	d10a      	bne.n	8013886 <__cvt+0x88>
 8013870:	2200      	movs	r2, #0
 8013872:	2300      	movs	r3, #0
 8013874:	4620      	mov	r0, r4
 8013876:	4629      	mov	r1, r5
 8013878:	f7f5 f85e 	bl	8008938 <__aeabi_dcmpeq>
 801387c:	b918      	cbnz	r0, 8013886 <__cvt+0x88>
 801387e:	f1c6 0601 	rsb	r6, r6, #1
 8013882:	f8ca 6000 	str.w	r6, [sl]
 8013886:	f8da 3000 	ldr.w	r3, [sl]
 801388a:	4499      	add	r9, r3
 801388c:	2200      	movs	r2, #0
 801388e:	2300      	movs	r3, #0
 8013890:	4620      	mov	r0, r4
 8013892:	4629      	mov	r1, r5
 8013894:	f7f5 f850 	bl	8008938 <__aeabi_dcmpeq>
 8013898:	b938      	cbnz	r0, 80138aa <__cvt+0xac>
 801389a:	2230      	movs	r2, #48	; 0x30
 801389c:	9b03      	ldr	r3, [sp, #12]
 801389e:	454b      	cmp	r3, r9
 80138a0:	d205      	bcs.n	80138ae <__cvt+0xb0>
 80138a2:	1c59      	adds	r1, r3, #1
 80138a4:	9103      	str	r1, [sp, #12]
 80138a6:	701a      	strb	r2, [r3, #0]
 80138a8:	e7f8      	b.n	801389c <__cvt+0x9e>
 80138aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80138ae:	9b03      	ldr	r3, [sp, #12]
 80138b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138b2:	eba3 0308 	sub.w	r3, r3, r8
 80138b6:	4640      	mov	r0, r8
 80138b8:	6013      	str	r3, [r2, #0]
 80138ba:	b004      	add	sp, #16
 80138bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080138c0 <__exponent>:
 80138c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138c2:	2900      	cmp	r1, #0
 80138c4:	4604      	mov	r4, r0
 80138c6:	bfba      	itte	lt
 80138c8:	4249      	neglt	r1, r1
 80138ca:	232d      	movlt	r3, #45	; 0x2d
 80138cc:	232b      	movge	r3, #43	; 0x2b
 80138ce:	2909      	cmp	r1, #9
 80138d0:	f804 2b02 	strb.w	r2, [r4], #2
 80138d4:	7043      	strb	r3, [r0, #1]
 80138d6:	dd20      	ble.n	801391a <__exponent+0x5a>
 80138d8:	f10d 0307 	add.w	r3, sp, #7
 80138dc:	461f      	mov	r7, r3
 80138de:	260a      	movs	r6, #10
 80138e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80138e4:	fb06 1115 	mls	r1, r6, r5, r1
 80138e8:	3130      	adds	r1, #48	; 0x30
 80138ea:	2d09      	cmp	r5, #9
 80138ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80138f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80138f4:	4629      	mov	r1, r5
 80138f6:	dc09      	bgt.n	801390c <__exponent+0x4c>
 80138f8:	3130      	adds	r1, #48	; 0x30
 80138fa:	3b02      	subs	r3, #2
 80138fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013900:	42bb      	cmp	r3, r7
 8013902:	4622      	mov	r2, r4
 8013904:	d304      	bcc.n	8013910 <__exponent+0x50>
 8013906:	1a10      	subs	r0, r2, r0
 8013908:	b003      	add	sp, #12
 801390a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801390c:	4613      	mov	r3, r2
 801390e:	e7e7      	b.n	80138e0 <__exponent+0x20>
 8013910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013914:	f804 2b01 	strb.w	r2, [r4], #1
 8013918:	e7f2      	b.n	8013900 <__exponent+0x40>
 801391a:	2330      	movs	r3, #48	; 0x30
 801391c:	4419      	add	r1, r3
 801391e:	7083      	strb	r3, [r0, #2]
 8013920:	1d02      	adds	r2, r0, #4
 8013922:	70c1      	strb	r1, [r0, #3]
 8013924:	e7ef      	b.n	8013906 <__exponent+0x46>
	...

08013928 <_printf_float>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	b08d      	sub	sp, #52	; 0x34
 801392e:	460c      	mov	r4, r1
 8013930:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013934:	4616      	mov	r6, r2
 8013936:	461f      	mov	r7, r3
 8013938:	4605      	mov	r5, r0
 801393a:	f001 fb03 	bl	8014f44 <_localeconv_r>
 801393e:	6803      	ldr	r3, [r0, #0]
 8013940:	9304      	str	r3, [sp, #16]
 8013942:	4618      	mov	r0, r3
 8013944:	f7f4 fb7c 	bl	8008040 <strlen>
 8013948:	2300      	movs	r3, #0
 801394a:	930a      	str	r3, [sp, #40]	; 0x28
 801394c:	f8d8 3000 	ldr.w	r3, [r8]
 8013950:	9005      	str	r0, [sp, #20]
 8013952:	3307      	adds	r3, #7
 8013954:	f023 0307 	bic.w	r3, r3, #7
 8013958:	f103 0208 	add.w	r2, r3, #8
 801395c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013960:	f8d4 b000 	ldr.w	fp, [r4]
 8013964:	f8c8 2000 	str.w	r2, [r8]
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013970:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013974:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013978:	9307      	str	r3, [sp, #28]
 801397a:	f8cd 8018 	str.w	r8, [sp, #24]
 801397e:	f04f 32ff 	mov.w	r2, #4294967295
 8013982:	4ba7      	ldr	r3, [pc, #668]	; (8013c20 <_printf_float+0x2f8>)
 8013984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013988:	f7f5 f808 	bl	800899c <__aeabi_dcmpun>
 801398c:	bb70      	cbnz	r0, 80139ec <_printf_float+0xc4>
 801398e:	f04f 32ff 	mov.w	r2, #4294967295
 8013992:	4ba3      	ldr	r3, [pc, #652]	; (8013c20 <_printf_float+0x2f8>)
 8013994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013998:	f7f4 ffe2 	bl	8008960 <__aeabi_dcmple>
 801399c:	bb30      	cbnz	r0, 80139ec <_printf_float+0xc4>
 801399e:	2200      	movs	r2, #0
 80139a0:	2300      	movs	r3, #0
 80139a2:	4640      	mov	r0, r8
 80139a4:	4649      	mov	r1, r9
 80139a6:	f7f4 ffd1 	bl	800894c <__aeabi_dcmplt>
 80139aa:	b110      	cbz	r0, 80139b2 <_printf_float+0x8a>
 80139ac:	232d      	movs	r3, #45	; 0x2d
 80139ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139b2:	4a9c      	ldr	r2, [pc, #624]	; (8013c24 <_printf_float+0x2fc>)
 80139b4:	4b9c      	ldr	r3, [pc, #624]	; (8013c28 <_printf_float+0x300>)
 80139b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80139ba:	bf8c      	ite	hi
 80139bc:	4690      	movhi	r8, r2
 80139be:	4698      	movls	r8, r3
 80139c0:	2303      	movs	r3, #3
 80139c2:	f02b 0204 	bic.w	r2, fp, #4
 80139c6:	6123      	str	r3, [r4, #16]
 80139c8:	6022      	str	r2, [r4, #0]
 80139ca:	f04f 0900 	mov.w	r9, #0
 80139ce:	9700      	str	r7, [sp, #0]
 80139d0:	4633      	mov	r3, r6
 80139d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80139d4:	4621      	mov	r1, r4
 80139d6:	4628      	mov	r0, r5
 80139d8:	f000 f9e6 	bl	8013da8 <_printf_common>
 80139dc:	3001      	adds	r0, #1
 80139de:	f040 808d 	bne.w	8013afc <_printf_float+0x1d4>
 80139e2:	f04f 30ff 	mov.w	r0, #4294967295
 80139e6:	b00d      	add	sp, #52	; 0x34
 80139e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ec:	4642      	mov	r2, r8
 80139ee:	464b      	mov	r3, r9
 80139f0:	4640      	mov	r0, r8
 80139f2:	4649      	mov	r1, r9
 80139f4:	f7f4 ffd2 	bl	800899c <__aeabi_dcmpun>
 80139f8:	b110      	cbz	r0, 8013a00 <_printf_float+0xd8>
 80139fa:	4a8c      	ldr	r2, [pc, #560]	; (8013c2c <_printf_float+0x304>)
 80139fc:	4b8c      	ldr	r3, [pc, #560]	; (8013c30 <_printf_float+0x308>)
 80139fe:	e7da      	b.n	80139b6 <_printf_float+0x8e>
 8013a00:	6861      	ldr	r1, [r4, #4]
 8013a02:	1c4b      	adds	r3, r1, #1
 8013a04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013a08:	a80a      	add	r0, sp, #40	; 0x28
 8013a0a:	d13e      	bne.n	8013a8a <_printf_float+0x162>
 8013a0c:	2306      	movs	r3, #6
 8013a0e:	6063      	str	r3, [r4, #4]
 8013a10:	2300      	movs	r3, #0
 8013a12:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013a16:	ab09      	add	r3, sp, #36	; 0x24
 8013a18:	9300      	str	r3, [sp, #0]
 8013a1a:	ec49 8b10 	vmov	d0, r8, r9
 8013a1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013a22:	6022      	str	r2, [r4, #0]
 8013a24:	f8cd a004 	str.w	sl, [sp, #4]
 8013a28:	6861      	ldr	r1, [r4, #4]
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f7ff fee7 	bl	80137fe <__cvt>
 8013a30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013a34:	2b47      	cmp	r3, #71	; 0x47
 8013a36:	4680      	mov	r8, r0
 8013a38:	d109      	bne.n	8013a4e <_printf_float+0x126>
 8013a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a3c:	1cd8      	adds	r0, r3, #3
 8013a3e:	db02      	blt.n	8013a46 <_printf_float+0x11e>
 8013a40:	6862      	ldr	r2, [r4, #4]
 8013a42:	4293      	cmp	r3, r2
 8013a44:	dd47      	ble.n	8013ad6 <_printf_float+0x1ae>
 8013a46:	f1aa 0a02 	sub.w	sl, sl, #2
 8013a4a:	fa5f fa8a 	uxtb.w	sl, sl
 8013a4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a54:	d824      	bhi.n	8013aa0 <_printf_float+0x178>
 8013a56:	3901      	subs	r1, #1
 8013a58:	4652      	mov	r2, sl
 8013a5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8013a60:	f7ff ff2e 	bl	80138c0 <__exponent>
 8013a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a66:	1813      	adds	r3, r2, r0
 8013a68:	2a01      	cmp	r2, #1
 8013a6a:	4681      	mov	r9, r0
 8013a6c:	6123      	str	r3, [r4, #16]
 8013a6e:	dc02      	bgt.n	8013a76 <_printf_float+0x14e>
 8013a70:	6822      	ldr	r2, [r4, #0]
 8013a72:	07d1      	lsls	r1, r2, #31
 8013a74:	d501      	bpl.n	8013a7a <_printf_float+0x152>
 8013a76:	3301      	adds	r3, #1
 8013a78:	6123      	str	r3, [r4, #16]
 8013a7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d0a5      	beq.n	80139ce <_printf_float+0xa6>
 8013a82:	232d      	movs	r3, #45	; 0x2d
 8013a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a88:	e7a1      	b.n	80139ce <_printf_float+0xa6>
 8013a8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013a8e:	f000 8177 	beq.w	8013d80 <_printf_float+0x458>
 8013a92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013a96:	d1bb      	bne.n	8013a10 <_printf_float+0xe8>
 8013a98:	2900      	cmp	r1, #0
 8013a9a:	d1b9      	bne.n	8013a10 <_printf_float+0xe8>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	e7b6      	b.n	8013a0e <_printf_float+0xe6>
 8013aa0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013aa4:	d119      	bne.n	8013ada <_printf_float+0x1b2>
 8013aa6:	2900      	cmp	r1, #0
 8013aa8:	6863      	ldr	r3, [r4, #4]
 8013aaa:	dd0c      	ble.n	8013ac6 <_printf_float+0x19e>
 8013aac:	6121      	str	r1, [r4, #16]
 8013aae:	b913      	cbnz	r3, 8013ab6 <_printf_float+0x18e>
 8013ab0:	6822      	ldr	r2, [r4, #0]
 8013ab2:	07d2      	lsls	r2, r2, #31
 8013ab4:	d502      	bpl.n	8013abc <_printf_float+0x194>
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	440b      	add	r3, r1
 8013aba:	6123      	str	r3, [r4, #16]
 8013abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013abe:	65a3      	str	r3, [r4, #88]	; 0x58
 8013ac0:	f04f 0900 	mov.w	r9, #0
 8013ac4:	e7d9      	b.n	8013a7a <_printf_float+0x152>
 8013ac6:	b913      	cbnz	r3, 8013ace <_printf_float+0x1a6>
 8013ac8:	6822      	ldr	r2, [r4, #0]
 8013aca:	07d0      	lsls	r0, r2, #31
 8013acc:	d501      	bpl.n	8013ad2 <_printf_float+0x1aa>
 8013ace:	3302      	adds	r3, #2
 8013ad0:	e7f3      	b.n	8013aba <_printf_float+0x192>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e7f1      	b.n	8013aba <_printf_float+0x192>
 8013ad6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013ada:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013ade:	4293      	cmp	r3, r2
 8013ae0:	db05      	blt.n	8013aee <_printf_float+0x1c6>
 8013ae2:	6822      	ldr	r2, [r4, #0]
 8013ae4:	6123      	str	r3, [r4, #16]
 8013ae6:	07d1      	lsls	r1, r2, #31
 8013ae8:	d5e8      	bpl.n	8013abc <_printf_float+0x194>
 8013aea:	3301      	adds	r3, #1
 8013aec:	e7e5      	b.n	8013aba <_printf_float+0x192>
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	bfd4      	ite	le
 8013af2:	f1c3 0302 	rsble	r3, r3, #2
 8013af6:	2301      	movgt	r3, #1
 8013af8:	4413      	add	r3, r2
 8013afa:	e7de      	b.n	8013aba <_printf_float+0x192>
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	055a      	lsls	r2, r3, #21
 8013b00:	d407      	bmi.n	8013b12 <_printf_float+0x1ea>
 8013b02:	6923      	ldr	r3, [r4, #16]
 8013b04:	4642      	mov	r2, r8
 8013b06:	4631      	mov	r1, r6
 8013b08:	4628      	mov	r0, r5
 8013b0a:	47b8      	blx	r7
 8013b0c:	3001      	adds	r0, #1
 8013b0e:	d12b      	bne.n	8013b68 <_printf_float+0x240>
 8013b10:	e767      	b.n	80139e2 <_printf_float+0xba>
 8013b12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013b16:	f240 80dc 	bls.w	8013cd2 <_printf_float+0x3aa>
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013b22:	f7f4 ff09 	bl	8008938 <__aeabi_dcmpeq>
 8013b26:	2800      	cmp	r0, #0
 8013b28:	d033      	beq.n	8013b92 <_printf_float+0x26a>
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	4a41      	ldr	r2, [pc, #260]	; (8013c34 <_printf_float+0x30c>)
 8013b2e:	4631      	mov	r1, r6
 8013b30:	4628      	mov	r0, r5
 8013b32:	47b8      	blx	r7
 8013b34:	3001      	adds	r0, #1
 8013b36:	f43f af54 	beq.w	80139e2 <_printf_float+0xba>
 8013b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	db02      	blt.n	8013b48 <_printf_float+0x220>
 8013b42:	6823      	ldr	r3, [r4, #0]
 8013b44:	07d8      	lsls	r0, r3, #31
 8013b46:	d50f      	bpl.n	8013b68 <_printf_float+0x240>
 8013b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b4c:	4631      	mov	r1, r6
 8013b4e:	4628      	mov	r0, r5
 8013b50:	47b8      	blx	r7
 8013b52:	3001      	adds	r0, #1
 8013b54:	f43f af45 	beq.w	80139e2 <_printf_float+0xba>
 8013b58:	f04f 0800 	mov.w	r8, #0
 8013b5c:	f104 091a 	add.w	r9, r4, #26
 8013b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b62:	3b01      	subs	r3, #1
 8013b64:	4543      	cmp	r3, r8
 8013b66:	dc09      	bgt.n	8013b7c <_printf_float+0x254>
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	079b      	lsls	r3, r3, #30
 8013b6c:	f100 8103 	bmi.w	8013d76 <_printf_float+0x44e>
 8013b70:	68e0      	ldr	r0, [r4, #12]
 8013b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b74:	4298      	cmp	r0, r3
 8013b76:	bfb8      	it	lt
 8013b78:	4618      	movlt	r0, r3
 8013b7a:	e734      	b.n	80139e6 <_printf_float+0xbe>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	464a      	mov	r2, r9
 8013b80:	4631      	mov	r1, r6
 8013b82:	4628      	mov	r0, r5
 8013b84:	47b8      	blx	r7
 8013b86:	3001      	adds	r0, #1
 8013b88:	f43f af2b 	beq.w	80139e2 <_printf_float+0xba>
 8013b8c:	f108 0801 	add.w	r8, r8, #1
 8013b90:	e7e6      	b.n	8013b60 <_printf_float+0x238>
 8013b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	dc2b      	bgt.n	8013bf0 <_printf_float+0x2c8>
 8013b98:	2301      	movs	r3, #1
 8013b9a:	4a26      	ldr	r2, [pc, #152]	; (8013c34 <_printf_float+0x30c>)
 8013b9c:	4631      	mov	r1, r6
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	47b8      	blx	r7
 8013ba2:	3001      	adds	r0, #1
 8013ba4:	f43f af1d 	beq.w	80139e2 <_printf_float+0xba>
 8013ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013baa:	b923      	cbnz	r3, 8013bb6 <_printf_float+0x28e>
 8013bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bae:	b913      	cbnz	r3, 8013bb6 <_printf_float+0x28e>
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	07d9      	lsls	r1, r3, #31
 8013bb4:	d5d8      	bpl.n	8013b68 <_printf_float+0x240>
 8013bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013bba:	4631      	mov	r1, r6
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	47b8      	blx	r7
 8013bc0:	3001      	adds	r0, #1
 8013bc2:	f43f af0e 	beq.w	80139e2 <_printf_float+0xba>
 8013bc6:	f04f 0900 	mov.w	r9, #0
 8013bca:	f104 0a1a 	add.w	sl, r4, #26
 8013bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bd0:	425b      	negs	r3, r3
 8013bd2:	454b      	cmp	r3, r9
 8013bd4:	dc01      	bgt.n	8013bda <_printf_float+0x2b2>
 8013bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bd8:	e794      	b.n	8013b04 <_printf_float+0x1dc>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	4652      	mov	r2, sl
 8013bde:	4631      	mov	r1, r6
 8013be0:	4628      	mov	r0, r5
 8013be2:	47b8      	blx	r7
 8013be4:	3001      	adds	r0, #1
 8013be6:	f43f aefc 	beq.w	80139e2 <_printf_float+0xba>
 8013bea:	f109 0901 	add.w	r9, r9, #1
 8013bee:	e7ee      	b.n	8013bce <_printf_float+0x2a6>
 8013bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	bfa8      	it	ge
 8013bf8:	461a      	movge	r2, r3
 8013bfa:	2a00      	cmp	r2, #0
 8013bfc:	4691      	mov	r9, r2
 8013bfe:	dd07      	ble.n	8013c10 <_printf_float+0x2e8>
 8013c00:	4613      	mov	r3, r2
 8013c02:	4631      	mov	r1, r6
 8013c04:	4642      	mov	r2, r8
 8013c06:	4628      	mov	r0, r5
 8013c08:	47b8      	blx	r7
 8013c0a:	3001      	adds	r0, #1
 8013c0c:	f43f aee9 	beq.w	80139e2 <_printf_float+0xba>
 8013c10:	f104 031a 	add.w	r3, r4, #26
 8013c14:	f04f 0b00 	mov.w	fp, #0
 8013c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013c1c:	9306      	str	r3, [sp, #24]
 8013c1e:	e015      	b.n	8013c4c <_printf_float+0x324>
 8013c20:	7fefffff 	.word	0x7fefffff
 8013c24:	080162dc 	.word	0x080162dc
 8013c28:	080162d8 	.word	0x080162d8
 8013c2c:	080162e4 	.word	0x080162e4
 8013c30:	080162e0 	.word	0x080162e0
 8013c34:	080162e8 	.word	0x080162e8
 8013c38:	2301      	movs	r3, #1
 8013c3a:	9a06      	ldr	r2, [sp, #24]
 8013c3c:	4631      	mov	r1, r6
 8013c3e:	4628      	mov	r0, r5
 8013c40:	47b8      	blx	r7
 8013c42:	3001      	adds	r0, #1
 8013c44:	f43f aecd 	beq.w	80139e2 <_printf_float+0xba>
 8013c48:	f10b 0b01 	add.w	fp, fp, #1
 8013c4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013c50:	ebaa 0309 	sub.w	r3, sl, r9
 8013c54:	455b      	cmp	r3, fp
 8013c56:	dcef      	bgt.n	8013c38 <_printf_float+0x310>
 8013c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	44d0      	add	r8, sl
 8013c60:	db15      	blt.n	8013c8e <_printf_float+0x366>
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	07da      	lsls	r2, r3, #31
 8013c66:	d412      	bmi.n	8013c8e <_printf_float+0x366>
 8013c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c6c:	eba3 020a 	sub.w	r2, r3, sl
 8013c70:	eba3 0a01 	sub.w	sl, r3, r1
 8013c74:	4592      	cmp	sl, r2
 8013c76:	bfa8      	it	ge
 8013c78:	4692      	movge	sl, r2
 8013c7a:	f1ba 0f00 	cmp.w	sl, #0
 8013c7e:	dc0e      	bgt.n	8013c9e <_printf_float+0x376>
 8013c80:	f04f 0800 	mov.w	r8, #0
 8013c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c88:	f104 091a 	add.w	r9, r4, #26
 8013c8c:	e019      	b.n	8013cc2 <_printf_float+0x39a>
 8013c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c92:	4631      	mov	r1, r6
 8013c94:	4628      	mov	r0, r5
 8013c96:	47b8      	blx	r7
 8013c98:	3001      	adds	r0, #1
 8013c9a:	d1e5      	bne.n	8013c68 <_printf_float+0x340>
 8013c9c:	e6a1      	b.n	80139e2 <_printf_float+0xba>
 8013c9e:	4653      	mov	r3, sl
 8013ca0:	4642      	mov	r2, r8
 8013ca2:	4631      	mov	r1, r6
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	47b8      	blx	r7
 8013ca8:	3001      	adds	r0, #1
 8013caa:	d1e9      	bne.n	8013c80 <_printf_float+0x358>
 8013cac:	e699      	b.n	80139e2 <_printf_float+0xba>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	464a      	mov	r2, r9
 8013cb2:	4631      	mov	r1, r6
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	47b8      	blx	r7
 8013cb8:	3001      	adds	r0, #1
 8013cba:	f43f ae92 	beq.w	80139e2 <_printf_float+0xba>
 8013cbe:	f108 0801 	add.w	r8, r8, #1
 8013cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cc6:	1a9b      	subs	r3, r3, r2
 8013cc8:	eba3 030a 	sub.w	r3, r3, sl
 8013ccc:	4543      	cmp	r3, r8
 8013cce:	dcee      	bgt.n	8013cae <_printf_float+0x386>
 8013cd0:	e74a      	b.n	8013b68 <_printf_float+0x240>
 8013cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cd4:	2a01      	cmp	r2, #1
 8013cd6:	dc01      	bgt.n	8013cdc <_printf_float+0x3b4>
 8013cd8:	07db      	lsls	r3, r3, #31
 8013cda:	d53a      	bpl.n	8013d52 <_printf_float+0x42a>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	4642      	mov	r2, r8
 8013ce0:	4631      	mov	r1, r6
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	47b8      	blx	r7
 8013ce6:	3001      	adds	r0, #1
 8013ce8:	f43f ae7b 	beq.w	80139e2 <_printf_float+0xba>
 8013cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013cf0:	4631      	mov	r1, r6
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	47b8      	blx	r7
 8013cf6:	3001      	adds	r0, #1
 8013cf8:	f108 0801 	add.w	r8, r8, #1
 8013cfc:	f43f ae71 	beq.w	80139e2 <_printf_float+0xba>
 8013d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d02:	2200      	movs	r2, #0
 8013d04:	f103 3aff 	add.w	sl, r3, #4294967295
 8013d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	f7f4 fe13 	bl	8008938 <__aeabi_dcmpeq>
 8013d12:	b9c8      	cbnz	r0, 8013d48 <_printf_float+0x420>
 8013d14:	4653      	mov	r3, sl
 8013d16:	4642      	mov	r2, r8
 8013d18:	4631      	mov	r1, r6
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	47b8      	blx	r7
 8013d1e:	3001      	adds	r0, #1
 8013d20:	d10e      	bne.n	8013d40 <_printf_float+0x418>
 8013d22:	e65e      	b.n	80139e2 <_printf_float+0xba>
 8013d24:	2301      	movs	r3, #1
 8013d26:	4652      	mov	r2, sl
 8013d28:	4631      	mov	r1, r6
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	47b8      	blx	r7
 8013d2e:	3001      	adds	r0, #1
 8013d30:	f43f ae57 	beq.w	80139e2 <_printf_float+0xba>
 8013d34:	f108 0801 	add.w	r8, r8, #1
 8013d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	4543      	cmp	r3, r8
 8013d3e:	dcf1      	bgt.n	8013d24 <_printf_float+0x3fc>
 8013d40:	464b      	mov	r3, r9
 8013d42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013d46:	e6de      	b.n	8013b06 <_printf_float+0x1de>
 8013d48:	f04f 0800 	mov.w	r8, #0
 8013d4c:	f104 0a1a 	add.w	sl, r4, #26
 8013d50:	e7f2      	b.n	8013d38 <_printf_float+0x410>
 8013d52:	2301      	movs	r3, #1
 8013d54:	e7df      	b.n	8013d16 <_printf_float+0x3ee>
 8013d56:	2301      	movs	r3, #1
 8013d58:	464a      	mov	r2, r9
 8013d5a:	4631      	mov	r1, r6
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	47b8      	blx	r7
 8013d60:	3001      	adds	r0, #1
 8013d62:	f43f ae3e 	beq.w	80139e2 <_printf_float+0xba>
 8013d66:	f108 0801 	add.w	r8, r8, #1
 8013d6a:	68e3      	ldr	r3, [r4, #12]
 8013d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d6e:	1a9b      	subs	r3, r3, r2
 8013d70:	4543      	cmp	r3, r8
 8013d72:	dcf0      	bgt.n	8013d56 <_printf_float+0x42e>
 8013d74:	e6fc      	b.n	8013b70 <_printf_float+0x248>
 8013d76:	f04f 0800 	mov.w	r8, #0
 8013d7a:	f104 0919 	add.w	r9, r4, #25
 8013d7e:	e7f4      	b.n	8013d6a <_printf_float+0x442>
 8013d80:	2900      	cmp	r1, #0
 8013d82:	f43f ae8b 	beq.w	8013a9c <_printf_float+0x174>
 8013d86:	2300      	movs	r3, #0
 8013d88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013d8c:	ab09      	add	r3, sp, #36	; 0x24
 8013d8e:	9300      	str	r3, [sp, #0]
 8013d90:	ec49 8b10 	vmov	d0, r8, r9
 8013d94:	6022      	str	r2, [r4, #0]
 8013d96:	f8cd a004 	str.w	sl, [sp, #4]
 8013d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f7ff fd2d 	bl	80137fe <__cvt>
 8013da4:	4680      	mov	r8, r0
 8013da6:	e648      	b.n	8013a3a <_printf_float+0x112>

08013da8 <_printf_common>:
 8013da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dac:	4691      	mov	r9, r2
 8013dae:	461f      	mov	r7, r3
 8013db0:	688a      	ldr	r2, [r1, #8]
 8013db2:	690b      	ldr	r3, [r1, #16]
 8013db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013db8:	4293      	cmp	r3, r2
 8013dba:	bfb8      	it	lt
 8013dbc:	4613      	movlt	r3, r2
 8013dbe:	f8c9 3000 	str.w	r3, [r9]
 8013dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	460c      	mov	r4, r1
 8013dca:	b112      	cbz	r2, 8013dd2 <_printf_common+0x2a>
 8013dcc:	3301      	adds	r3, #1
 8013dce:	f8c9 3000 	str.w	r3, [r9]
 8013dd2:	6823      	ldr	r3, [r4, #0]
 8013dd4:	0699      	lsls	r1, r3, #26
 8013dd6:	bf42      	ittt	mi
 8013dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013ddc:	3302      	addmi	r3, #2
 8013dde:	f8c9 3000 	strmi.w	r3, [r9]
 8013de2:	6825      	ldr	r5, [r4, #0]
 8013de4:	f015 0506 	ands.w	r5, r5, #6
 8013de8:	d107      	bne.n	8013dfa <_printf_common+0x52>
 8013dea:	f104 0a19 	add.w	sl, r4, #25
 8013dee:	68e3      	ldr	r3, [r4, #12]
 8013df0:	f8d9 2000 	ldr.w	r2, [r9]
 8013df4:	1a9b      	subs	r3, r3, r2
 8013df6:	42ab      	cmp	r3, r5
 8013df8:	dc28      	bgt.n	8013e4c <_printf_common+0xa4>
 8013dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013dfe:	6822      	ldr	r2, [r4, #0]
 8013e00:	3300      	adds	r3, #0
 8013e02:	bf18      	it	ne
 8013e04:	2301      	movne	r3, #1
 8013e06:	0692      	lsls	r2, r2, #26
 8013e08:	d42d      	bmi.n	8013e66 <_printf_common+0xbe>
 8013e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e0e:	4639      	mov	r1, r7
 8013e10:	4630      	mov	r0, r6
 8013e12:	47c0      	blx	r8
 8013e14:	3001      	adds	r0, #1
 8013e16:	d020      	beq.n	8013e5a <_printf_common+0xb2>
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	68e5      	ldr	r5, [r4, #12]
 8013e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8013e20:	f003 0306 	and.w	r3, r3, #6
 8013e24:	2b04      	cmp	r3, #4
 8013e26:	bf08      	it	eq
 8013e28:	1aad      	subeq	r5, r5, r2
 8013e2a:	68a3      	ldr	r3, [r4, #8]
 8013e2c:	6922      	ldr	r2, [r4, #16]
 8013e2e:	bf0c      	ite	eq
 8013e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e34:	2500      	movne	r5, #0
 8013e36:	4293      	cmp	r3, r2
 8013e38:	bfc4      	itt	gt
 8013e3a:	1a9b      	subgt	r3, r3, r2
 8013e3c:	18ed      	addgt	r5, r5, r3
 8013e3e:	f04f 0900 	mov.w	r9, #0
 8013e42:	341a      	adds	r4, #26
 8013e44:	454d      	cmp	r5, r9
 8013e46:	d11a      	bne.n	8013e7e <_printf_common+0xd6>
 8013e48:	2000      	movs	r0, #0
 8013e4a:	e008      	b.n	8013e5e <_printf_common+0xb6>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	4652      	mov	r2, sl
 8013e50:	4639      	mov	r1, r7
 8013e52:	4630      	mov	r0, r6
 8013e54:	47c0      	blx	r8
 8013e56:	3001      	adds	r0, #1
 8013e58:	d103      	bne.n	8013e62 <_printf_common+0xba>
 8013e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e62:	3501      	adds	r5, #1
 8013e64:	e7c3      	b.n	8013dee <_printf_common+0x46>
 8013e66:	18e1      	adds	r1, r4, r3
 8013e68:	1c5a      	adds	r2, r3, #1
 8013e6a:	2030      	movs	r0, #48	; 0x30
 8013e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e70:	4422      	add	r2, r4
 8013e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e7a:	3302      	adds	r3, #2
 8013e7c:	e7c5      	b.n	8013e0a <_printf_common+0x62>
 8013e7e:	2301      	movs	r3, #1
 8013e80:	4622      	mov	r2, r4
 8013e82:	4639      	mov	r1, r7
 8013e84:	4630      	mov	r0, r6
 8013e86:	47c0      	blx	r8
 8013e88:	3001      	adds	r0, #1
 8013e8a:	d0e6      	beq.n	8013e5a <_printf_common+0xb2>
 8013e8c:	f109 0901 	add.w	r9, r9, #1
 8013e90:	e7d8      	b.n	8013e44 <_printf_common+0x9c>
	...

08013e94 <_printf_i>:
 8013e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013e9c:	460c      	mov	r4, r1
 8013e9e:	7e09      	ldrb	r1, [r1, #24]
 8013ea0:	b085      	sub	sp, #20
 8013ea2:	296e      	cmp	r1, #110	; 0x6e
 8013ea4:	4617      	mov	r7, r2
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	4698      	mov	r8, r3
 8013eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013eac:	f000 80b3 	beq.w	8014016 <_printf_i+0x182>
 8013eb0:	d822      	bhi.n	8013ef8 <_printf_i+0x64>
 8013eb2:	2963      	cmp	r1, #99	; 0x63
 8013eb4:	d036      	beq.n	8013f24 <_printf_i+0x90>
 8013eb6:	d80a      	bhi.n	8013ece <_printf_i+0x3a>
 8013eb8:	2900      	cmp	r1, #0
 8013eba:	f000 80b9 	beq.w	8014030 <_printf_i+0x19c>
 8013ebe:	2958      	cmp	r1, #88	; 0x58
 8013ec0:	f000 8083 	beq.w	8013fca <_printf_i+0x136>
 8013ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ec8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013ecc:	e032      	b.n	8013f34 <_printf_i+0xa0>
 8013ece:	2964      	cmp	r1, #100	; 0x64
 8013ed0:	d001      	beq.n	8013ed6 <_printf_i+0x42>
 8013ed2:	2969      	cmp	r1, #105	; 0x69
 8013ed4:	d1f6      	bne.n	8013ec4 <_printf_i+0x30>
 8013ed6:	6820      	ldr	r0, [r4, #0]
 8013ed8:	6813      	ldr	r3, [r2, #0]
 8013eda:	0605      	lsls	r5, r0, #24
 8013edc:	f103 0104 	add.w	r1, r3, #4
 8013ee0:	d52a      	bpl.n	8013f38 <_printf_i+0xa4>
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	6011      	str	r1, [r2, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	da03      	bge.n	8013ef2 <_printf_i+0x5e>
 8013eea:	222d      	movs	r2, #45	; 0x2d
 8013eec:	425b      	negs	r3, r3
 8013eee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013ef2:	486f      	ldr	r0, [pc, #444]	; (80140b0 <_printf_i+0x21c>)
 8013ef4:	220a      	movs	r2, #10
 8013ef6:	e039      	b.n	8013f6c <_printf_i+0xd8>
 8013ef8:	2973      	cmp	r1, #115	; 0x73
 8013efa:	f000 809d 	beq.w	8014038 <_printf_i+0x1a4>
 8013efe:	d808      	bhi.n	8013f12 <_printf_i+0x7e>
 8013f00:	296f      	cmp	r1, #111	; 0x6f
 8013f02:	d020      	beq.n	8013f46 <_printf_i+0xb2>
 8013f04:	2970      	cmp	r1, #112	; 0x70
 8013f06:	d1dd      	bne.n	8013ec4 <_printf_i+0x30>
 8013f08:	6823      	ldr	r3, [r4, #0]
 8013f0a:	f043 0320 	orr.w	r3, r3, #32
 8013f0e:	6023      	str	r3, [r4, #0]
 8013f10:	e003      	b.n	8013f1a <_printf_i+0x86>
 8013f12:	2975      	cmp	r1, #117	; 0x75
 8013f14:	d017      	beq.n	8013f46 <_printf_i+0xb2>
 8013f16:	2978      	cmp	r1, #120	; 0x78
 8013f18:	d1d4      	bne.n	8013ec4 <_printf_i+0x30>
 8013f1a:	2378      	movs	r3, #120	; 0x78
 8013f1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f20:	4864      	ldr	r0, [pc, #400]	; (80140b4 <_printf_i+0x220>)
 8013f22:	e055      	b.n	8013fd0 <_printf_i+0x13c>
 8013f24:	6813      	ldr	r3, [r2, #0]
 8013f26:	1d19      	adds	r1, r3, #4
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	6011      	str	r1, [r2, #0]
 8013f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f34:	2301      	movs	r3, #1
 8013f36:	e08c      	b.n	8014052 <_printf_i+0x1be>
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	6011      	str	r1, [r2, #0]
 8013f3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013f40:	bf18      	it	ne
 8013f42:	b21b      	sxthne	r3, r3
 8013f44:	e7cf      	b.n	8013ee6 <_printf_i+0x52>
 8013f46:	6813      	ldr	r3, [r2, #0]
 8013f48:	6825      	ldr	r5, [r4, #0]
 8013f4a:	1d18      	adds	r0, r3, #4
 8013f4c:	6010      	str	r0, [r2, #0]
 8013f4e:	0628      	lsls	r0, r5, #24
 8013f50:	d501      	bpl.n	8013f56 <_printf_i+0xc2>
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	e002      	b.n	8013f5c <_printf_i+0xc8>
 8013f56:	0668      	lsls	r0, r5, #25
 8013f58:	d5fb      	bpl.n	8013f52 <_printf_i+0xbe>
 8013f5a:	881b      	ldrh	r3, [r3, #0]
 8013f5c:	4854      	ldr	r0, [pc, #336]	; (80140b0 <_printf_i+0x21c>)
 8013f5e:	296f      	cmp	r1, #111	; 0x6f
 8013f60:	bf14      	ite	ne
 8013f62:	220a      	movne	r2, #10
 8013f64:	2208      	moveq	r2, #8
 8013f66:	2100      	movs	r1, #0
 8013f68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f6c:	6865      	ldr	r5, [r4, #4]
 8013f6e:	60a5      	str	r5, [r4, #8]
 8013f70:	2d00      	cmp	r5, #0
 8013f72:	f2c0 8095 	blt.w	80140a0 <_printf_i+0x20c>
 8013f76:	6821      	ldr	r1, [r4, #0]
 8013f78:	f021 0104 	bic.w	r1, r1, #4
 8013f7c:	6021      	str	r1, [r4, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d13d      	bne.n	8013ffe <_printf_i+0x16a>
 8013f82:	2d00      	cmp	r5, #0
 8013f84:	f040 808e 	bne.w	80140a4 <_printf_i+0x210>
 8013f88:	4665      	mov	r5, ip
 8013f8a:	2a08      	cmp	r2, #8
 8013f8c:	d10b      	bne.n	8013fa6 <_printf_i+0x112>
 8013f8e:	6823      	ldr	r3, [r4, #0]
 8013f90:	07db      	lsls	r3, r3, #31
 8013f92:	d508      	bpl.n	8013fa6 <_printf_i+0x112>
 8013f94:	6923      	ldr	r3, [r4, #16]
 8013f96:	6862      	ldr	r2, [r4, #4]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	bfde      	ittt	le
 8013f9c:	2330      	movle	r3, #48	; 0x30
 8013f9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013fa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013fa6:	ebac 0305 	sub.w	r3, ip, r5
 8013faa:	6123      	str	r3, [r4, #16]
 8013fac:	f8cd 8000 	str.w	r8, [sp]
 8013fb0:	463b      	mov	r3, r7
 8013fb2:	aa03      	add	r2, sp, #12
 8013fb4:	4621      	mov	r1, r4
 8013fb6:	4630      	mov	r0, r6
 8013fb8:	f7ff fef6 	bl	8013da8 <_printf_common>
 8013fbc:	3001      	adds	r0, #1
 8013fbe:	d14d      	bne.n	801405c <_printf_i+0x1c8>
 8013fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc4:	b005      	add	sp, #20
 8013fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fca:	4839      	ldr	r0, [pc, #228]	; (80140b0 <_printf_i+0x21c>)
 8013fcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013fd0:	6813      	ldr	r3, [r2, #0]
 8013fd2:	6821      	ldr	r1, [r4, #0]
 8013fd4:	1d1d      	adds	r5, r3, #4
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	6015      	str	r5, [r2, #0]
 8013fda:	060a      	lsls	r2, r1, #24
 8013fdc:	d50b      	bpl.n	8013ff6 <_printf_i+0x162>
 8013fde:	07ca      	lsls	r2, r1, #31
 8013fe0:	bf44      	itt	mi
 8013fe2:	f041 0120 	orrmi.w	r1, r1, #32
 8013fe6:	6021      	strmi	r1, [r4, #0]
 8013fe8:	b91b      	cbnz	r3, 8013ff2 <_printf_i+0x15e>
 8013fea:	6822      	ldr	r2, [r4, #0]
 8013fec:	f022 0220 	bic.w	r2, r2, #32
 8013ff0:	6022      	str	r2, [r4, #0]
 8013ff2:	2210      	movs	r2, #16
 8013ff4:	e7b7      	b.n	8013f66 <_printf_i+0xd2>
 8013ff6:	064d      	lsls	r5, r1, #25
 8013ff8:	bf48      	it	mi
 8013ffa:	b29b      	uxthmi	r3, r3
 8013ffc:	e7ef      	b.n	8013fde <_printf_i+0x14a>
 8013ffe:	4665      	mov	r5, ip
 8014000:	fbb3 f1f2 	udiv	r1, r3, r2
 8014004:	fb02 3311 	mls	r3, r2, r1, r3
 8014008:	5cc3      	ldrb	r3, [r0, r3]
 801400a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801400e:	460b      	mov	r3, r1
 8014010:	2900      	cmp	r1, #0
 8014012:	d1f5      	bne.n	8014000 <_printf_i+0x16c>
 8014014:	e7b9      	b.n	8013f8a <_printf_i+0xf6>
 8014016:	6813      	ldr	r3, [r2, #0]
 8014018:	6825      	ldr	r5, [r4, #0]
 801401a:	6961      	ldr	r1, [r4, #20]
 801401c:	1d18      	adds	r0, r3, #4
 801401e:	6010      	str	r0, [r2, #0]
 8014020:	0628      	lsls	r0, r5, #24
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	d501      	bpl.n	801402a <_printf_i+0x196>
 8014026:	6019      	str	r1, [r3, #0]
 8014028:	e002      	b.n	8014030 <_printf_i+0x19c>
 801402a:	066a      	lsls	r2, r5, #25
 801402c:	d5fb      	bpl.n	8014026 <_printf_i+0x192>
 801402e:	8019      	strh	r1, [r3, #0]
 8014030:	2300      	movs	r3, #0
 8014032:	6123      	str	r3, [r4, #16]
 8014034:	4665      	mov	r5, ip
 8014036:	e7b9      	b.n	8013fac <_printf_i+0x118>
 8014038:	6813      	ldr	r3, [r2, #0]
 801403a:	1d19      	adds	r1, r3, #4
 801403c:	6011      	str	r1, [r2, #0]
 801403e:	681d      	ldr	r5, [r3, #0]
 8014040:	6862      	ldr	r2, [r4, #4]
 8014042:	2100      	movs	r1, #0
 8014044:	4628      	mov	r0, r5
 8014046:	f7f4 f803 	bl	8008050 <memchr>
 801404a:	b108      	cbz	r0, 8014050 <_printf_i+0x1bc>
 801404c:	1b40      	subs	r0, r0, r5
 801404e:	6060      	str	r0, [r4, #4]
 8014050:	6863      	ldr	r3, [r4, #4]
 8014052:	6123      	str	r3, [r4, #16]
 8014054:	2300      	movs	r3, #0
 8014056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801405a:	e7a7      	b.n	8013fac <_printf_i+0x118>
 801405c:	6923      	ldr	r3, [r4, #16]
 801405e:	462a      	mov	r2, r5
 8014060:	4639      	mov	r1, r7
 8014062:	4630      	mov	r0, r6
 8014064:	47c0      	blx	r8
 8014066:	3001      	adds	r0, #1
 8014068:	d0aa      	beq.n	8013fc0 <_printf_i+0x12c>
 801406a:	6823      	ldr	r3, [r4, #0]
 801406c:	079b      	lsls	r3, r3, #30
 801406e:	d413      	bmi.n	8014098 <_printf_i+0x204>
 8014070:	68e0      	ldr	r0, [r4, #12]
 8014072:	9b03      	ldr	r3, [sp, #12]
 8014074:	4298      	cmp	r0, r3
 8014076:	bfb8      	it	lt
 8014078:	4618      	movlt	r0, r3
 801407a:	e7a3      	b.n	8013fc4 <_printf_i+0x130>
 801407c:	2301      	movs	r3, #1
 801407e:	464a      	mov	r2, r9
 8014080:	4639      	mov	r1, r7
 8014082:	4630      	mov	r0, r6
 8014084:	47c0      	blx	r8
 8014086:	3001      	adds	r0, #1
 8014088:	d09a      	beq.n	8013fc0 <_printf_i+0x12c>
 801408a:	3501      	adds	r5, #1
 801408c:	68e3      	ldr	r3, [r4, #12]
 801408e:	9a03      	ldr	r2, [sp, #12]
 8014090:	1a9b      	subs	r3, r3, r2
 8014092:	42ab      	cmp	r3, r5
 8014094:	dcf2      	bgt.n	801407c <_printf_i+0x1e8>
 8014096:	e7eb      	b.n	8014070 <_printf_i+0x1dc>
 8014098:	2500      	movs	r5, #0
 801409a:	f104 0919 	add.w	r9, r4, #25
 801409e:	e7f5      	b.n	801408c <_printf_i+0x1f8>
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d1ac      	bne.n	8013ffe <_printf_i+0x16a>
 80140a4:	7803      	ldrb	r3, [r0, #0]
 80140a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80140aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140ae:	e76c      	b.n	8013f8a <_printf_i+0xf6>
 80140b0:	080162ea 	.word	0x080162ea
 80140b4:	080162fb 	.word	0x080162fb

080140b8 <iprintf>:
 80140b8:	b40f      	push	{r0, r1, r2, r3}
 80140ba:	4b0a      	ldr	r3, [pc, #40]	; (80140e4 <iprintf+0x2c>)
 80140bc:	b513      	push	{r0, r1, r4, lr}
 80140be:	681c      	ldr	r4, [r3, #0]
 80140c0:	b124      	cbz	r4, 80140cc <iprintf+0x14>
 80140c2:	69a3      	ldr	r3, [r4, #24]
 80140c4:	b913      	cbnz	r3, 80140cc <iprintf+0x14>
 80140c6:	4620      	mov	r0, r4
 80140c8:	f000 feb2 	bl	8014e30 <__sinit>
 80140cc:	ab05      	add	r3, sp, #20
 80140ce:	9a04      	ldr	r2, [sp, #16]
 80140d0:	68a1      	ldr	r1, [r4, #8]
 80140d2:	9301      	str	r3, [sp, #4]
 80140d4:	4620      	mov	r0, r4
 80140d6:	f001 fc59 	bl	801598c <_vfiprintf_r>
 80140da:	b002      	add	sp, #8
 80140dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140e0:	b004      	add	sp, #16
 80140e2:	4770      	bx	lr
 80140e4:	20000018 	.word	0x20000018

080140e8 <_vsiprintf_r>:
 80140e8:	b500      	push	{lr}
 80140ea:	b09b      	sub	sp, #108	; 0x6c
 80140ec:	9100      	str	r1, [sp, #0]
 80140ee:	9104      	str	r1, [sp, #16]
 80140f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80140f4:	9105      	str	r1, [sp, #20]
 80140f6:	9102      	str	r1, [sp, #8]
 80140f8:	4905      	ldr	r1, [pc, #20]	; (8014110 <_vsiprintf_r+0x28>)
 80140fa:	9103      	str	r1, [sp, #12]
 80140fc:	4669      	mov	r1, sp
 80140fe:	f001 fb23 	bl	8015748 <_svfiprintf_r>
 8014102:	9b00      	ldr	r3, [sp, #0]
 8014104:	2200      	movs	r2, #0
 8014106:	701a      	strb	r2, [r3, #0]
 8014108:	b01b      	add	sp, #108	; 0x6c
 801410a:	f85d fb04 	ldr.w	pc, [sp], #4
 801410e:	bf00      	nop
 8014110:	ffff0208 	.word	0xffff0208

08014114 <vsiprintf>:
 8014114:	4613      	mov	r3, r2
 8014116:	460a      	mov	r2, r1
 8014118:	4601      	mov	r1, r0
 801411a:	4802      	ldr	r0, [pc, #8]	; (8014124 <vsiprintf+0x10>)
 801411c:	6800      	ldr	r0, [r0, #0]
 801411e:	f7ff bfe3 	b.w	80140e8 <_vsiprintf_r>
 8014122:	bf00      	nop
 8014124:	20000018 	.word	0x20000018

08014128 <quorem>:
 8014128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412c:	6903      	ldr	r3, [r0, #16]
 801412e:	690c      	ldr	r4, [r1, #16]
 8014130:	42a3      	cmp	r3, r4
 8014132:	4680      	mov	r8, r0
 8014134:	f2c0 8082 	blt.w	801423c <quorem+0x114>
 8014138:	3c01      	subs	r4, #1
 801413a:	f101 0714 	add.w	r7, r1, #20
 801413e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014142:	f100 0614 	add.w	r6, r0, #20
 8014146:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801414a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801414e:	eb06 030c 	add.w	r3, r6, ip
 8014152:	3501      	adds	r5, #1
 8014154:	eb07 090c 	add.w	r9, r7, ip
 8014158:	9301      	str	r3, [sp, #4]
 801415a:	fbb0 f5f5 	udiv	r5, r0, r5
 801415e:	b395      	cbz	r5, 80141c6 <quorem+0x9e>
 8014160:	f04f 0a00 	mov.w	sl, #0
 8014164:	4638      	mov	r0, r7
 8014166:	46b6      	mov	lr, r6
 8014168:	46d3      	mov	fp, sl
 801416a:	f850 2b04 	ldr.w	r2, [r0], #4
 801416e:	b293      	uxth	r3, r2
 8014170:	fb05 a303 	mla	r3, r5, r3, sl
 8014174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014178:	b29b      	uxth	r3, r3
 801417a:	ebab 0303 	sub.w	r3, fp, r3
 801417e:	0c12      	lsrs	r2, r2, #16
 8014180:	f8de b000 	ldr.w	fp, [lr]
 8014184:	fb05 a202 	mla	r2, r5, r2, sl
 8014188:	fa13 f38b 	uxtah	r3, r3, fp
 801418c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014190:	fa1f fb82 	uxth.w	fp, r2
 8014194:	f8de 2000 	ldr.w	r2, [lr]
 8014198:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801419c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141a6:	4581      	cmp	r9, r0
 80141a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80141ac:	f84e 3b04 	str.w	r3, [lr], #4
 80141b0:	d2db      	bcs.n	801416a <quorem+0x42>
 80141b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80141b6:	b933      	cbnz	r3, 80141c6 <quorem+0x9e>
 80141b8:	9b01      	ldr	r3, [sp, #4]
 80141ba:	3b04      	subs	r3, #4
 80141bc:	429e      	cmp	r6, r3
 80141be:	461a      	mov	r2, r3
 80141c0:	d330      	bcc.n	8014224 <quorem+0xfc>
 80141c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80141c6:	4640      	mov	r0, r8
 80141c8:	f001 f8e8 	bl	801539c <__mcmp>
 80141cc:	2800      	cmp	r0, #0
 80141ce:	db25      	blt.n	801421c <quorem+0xf4>
 80141d0:	3501      	adds	r5, #1
 80141d2:	4630      	mov	r0, r6
 80141d4:	f04f 0c00 	mov.w	ip, #0
 80141d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80141dc:	f8d0 e000 	ldr.w	lr, [r0]
 80141e0:	b293      	uxth	r3, r2
 80141e2:	ebac 0303 	sub.w	r3, ip, r3
 80141e6:	0c12      	lsrs	r2, r2, #16
 80141e8:	fa13 f38e 	uxtah	r3, r3, lr
 80141ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80141f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141fa:	45b9      	cmp	r9, r7
 80141fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014200:	f840 3b04 	str.w	r3, [r0], #4
 8014204:	d2e8      	bcs.n	80141d8 <quorem+0xb0>
 8014206:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801420a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801420e:	b92a      	cbnz	r2, 801421c <quorem+0xf4>
 8014210:	3b04      	subs	r3, #4
 8014212:	429e      	cmp	r6, r3
 8014214:	461a      	mov	r2, r3
 8014216:	d30b      	bcc.n	8014230 <quorem+0x108>
 8014218:	f8c8 4010 	str.w	r4, [r8, #16]
 801421c:	4628      	mov	r0, r5
 801421e:	b003      	add	sp, #12
 8014220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014224:	6812      	ldr	r2, [r2, #0]
 8014226:	3b04      	subs	r3, #4
 8014228:	2a00      	cmp	r2, #0
 801422a:	d1ca      	bne.n	80141c2 <quorem+0x9a>
 801422c:	3c01      	subs	r4, #1
 801422e:	e7c5      	b.n	80141bc <quorem+0x94>
 8014230:	6812      	ldr	r2, [r2, #0]
 8014232:	3b04      	subs	r3, #4
 8014234:	2a00      	cmp	r2, #0
 8014236:	d1ef      	bne.n	8014218 <quorem+0xf0>
 8014238:	3c01      	subs	r4, #1
 801423a:	e7ea      	b.n	8014212 <quorem+0xea>
 801423c:	2000      	movs	r0, #0
 801423e:	e7ee      	b.n	801421e <quorem+0xf6>

08014240 <_dtoa_r>:
 8014240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014244:	ec57 6b10 	vmov	r6, r7, d0
 8014248:	b097      	sub	sp, #92	; 0x5c
 801424a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801424c:	9106      	str	r1, [sp, #24]
 801424e:	4604      	mov	r4, r0
 8014250:	920b      	str	r2, [sp, #44]	; 0x2c
 8014252:	9312      	str	r3, [sp, #72]	; 0x48
 8014254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014258:	e9cd 6700 	strd	r6, r7, [sp]
 801425c:	b93d      	cbnz	r5, 801426e <_dtoa_r+0x2e>
 801425e:	2010      	movs	r0, #16
 8014260:	f000 fe7e 	bl	8014f60 <malloc>
 8014264:	6260      	str	r0, [r4, #36]	; 0x24
 8014266:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801426a:	6005      	str	r5, [r0, #0]
 801426c:	60c5      	str	r5, [r0, #12]
 801426e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014270:	6819      	ldr	r1, [r3, #0]
 8014272:	b151      	cbz	r1, 801428a <_dtoa_r+0x4a>
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	604a      	str	r2, [r1, #4]
 8014278:	2301      	movs	r3, #1
 801427a:	4093      	lsls	r3, r2
 801427c:	608b      	str	r3, [r1, #8]
 801427e:	4620      	mov	r0, r4
 8014280:	f000 feaa 	bl	8014fd8 <_Bfree>
 8014284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014286:	2200      	movs	r2, #0
 8014288:	601a      	str	r2, [r3, #0]
 801428a:	1e3b      	subs	r3, r7, #0
 801428c:	bfbb      	ittet	lt
 801428e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014292:	9301      	strlt	r3, [sp, #4]
 8014294:	2300      	movge	r3, #0
 8014296:	2201      	movlt	r2, #1
 8014298:	bfac      	ite	ge
 801429a:	f8c8 3000 	strge.w	r3, [r8]
 801429e:	f8c8 2000 	strlt.w	r2, [r8]
 80142a2:	4baf      	ldr	r3, [pc, #700]	; (8014560 <_dtoa_r+0x320>)
 80142a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80142a8:	ea33 0308 	bics.w	r3, r3, r8
 80142ac:	d114      	bne.n	80142d8 <_dtoa_r+0x98>
 80142ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80142b4:	6013      	str	r3, [r2, #0]
 80142b6:	9b00      	ldr	r3, [sp, #0]
 80142b8:	b923      	cbnz	r3, 80142c4 <_dtoa_r+0x84>
 80142ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80142be:	2800      	cmp	r0, #0
 80142c0:	f000 8542 	beq.w	8014d48 <_dtoa_r+0xb08>
 80142c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014574 <_dtoa_r+0x334>
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f000 8544 	beq.w	8014d58 <_dtoa_r+0xb18>
 80142d0:	f10b 0303 	add.w	r3, fp, #3
 80142d4:	f000 bd3e 	b.w	8014d54 <_dtoa_r+0xb14>
 80142d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80142dc:	2200      	movs	r2, #0
 80142de:	2300      	movs	r3, #0
 80142e0:	4630      	mov	r0, r6
 80142e2:	4639      	mov	r1, r7
 80142e4:	f7f4 fb28 	bl	8008938 <__aeabi_dcmpeq>
 80142e8:	4681      	mov	r9, r0
 80142ea:	b168      	cbz	r0, 8014308 <_dtoa_r+0xc8>
 80142ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142ee:	2301      	movs	r3, #1
 80142f0:	6013      	str	r3, [r2, #0]
 80142f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f000 8524 	beq.w	8014d42 <_dtoa_r+0xb02>
 80142fa:	4b9a      	ldr	r3, [pc, #616]	; (8014564 <_dtoa_r+0x324>)
 80142fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8014302:	6013      	str	r3, [r2, #0]
 8014304:	f000 bd28 	b.w	8014d58 <_dtoa_r+0xb18>
 8014308:	aa14      	add	r2, sp, #80	; 0x50
 801430a:	a915      	add	r1, sp, #84	; 0x54
 801430c:	ec47 6b10 	vmov	d0, r6, r7
 8014310:	4620      	mov	r0, r4
 8014312:	f001 f8ba 	bl	801548a <__d2b>
 8014316:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801431a:	9004      	str	r0, [sp, #16]
 801431c:	2d00      	cmp	r5, #0
 801431e:	d07c      	beq.n	801441a <_dtoa_r+0x1da>
 8014320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014324:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014328:	46b2      	mov	sl, r6
 801432a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801432e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014332:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014336:	2200      	movs	r2, #0
 8014338:	4b8b      	ldr	r3, [pc, #556]	; (8014568 <_dtoa_r+0x328>)
 801433a:	4650      	mov	r0, sl
 801433c:	4659      	mov	r1, fp
 801433e:	f7f3 fedb 	bl	80080f8 <__aeabi_dsub>
 8014342:	a381      	add	r3, pc, #516	; (adr r3, 8014548 <_dtoa_r+0x308>)
 8014344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014348:	f7f4 f88e 	bl	8008468 <__aeabi_dmul>
 801434c:	a380      	add	r3, pc, #512	; (adr r3, 8014550 <_dtoa_r+0x310>)
 801434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014352:	f7f3 fed3 	bl	80080fc <__adddf3>
 8014356:	4606      	mov	r6, r0
 8014358:	4628      	mov	r0, r5
 801435a:	460f      	mov	r7, r1
 801435c:	f7f4 f81a 	bl	8008394 <__aeabi_i2d>
 8014360:	a37d      	add	r3, pc, #500	; (adr r3, 8014558 <_dtoa_r+0x318>)
 8014362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014366:	f7f4 f87f 	bl	8008468 <__aeabi_dmul>
 801436a:	4602      	mov	r2, r0
 801436c:	460b      	mov	r3, r1
 801436e:	4630      	mov	r0, r6
 8014370:	4639      	mov	r1, r7
 8014372:	f7f3 fec3 	bl	80080fc <__adddf3>
 8014376:	4606      	mov	r6, r0
 8014378:	460f      	mov	r7, r1
 801437a:	f7f4 fb25 	bl	80089c8 <__aeabi_d2iz>
 801437e:	2200      	movs	r2, #0
 8014380:	4682      	mov	sl, r0
 8014382:	2300      	movs	r3, #0
 8014384:	4630      	mov	r0, r6
 8014386:	4639      	mov	r1, r7
 8014388:	f7f4 fae0 	bl	800894c <__aeabi_dcmplt>
 801438c:	b148      	cbz	r0, 80143a2 <_dtoa_r+0x162>
 801438e:	4650      	mov	r0, sl
 8014390:	f7f4 f800 	bl	8008394 <__aeabi_i2d>
 8014394:	4632      	mov	r2, r6
 8014396:	463b      	mov	r3, r7
 8014398:	f7f4 face 	bl	8008938 <__aeabi_dcmpeq>
 801439c:	b908      	cbnz	r0, 80143a2 <_dtoa_r+0x162>
 801439e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143a2:	f1ba 0f16 	cmp.w	sl, #22
 80143a6:	d859      	bhi.n	801445c <_dtoa_r+0x21c>
 80143a8:	4970      	ldr	r1, [pc, #448]	; (801456c <_dtoa_r+0x32c>)
 80143aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80143ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143b6:	f7f4 fae7 	bl	8008988 <__aeabi_dcmpgt>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d050      	beq.n	8014460 <_dtoa_r+0x220>
 80143be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143c2:	2300      	movs	r3, #0
 80143c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80143c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80143c8:	1b5d      	subs	r5, r3, r5
 80143ca:	f1b5 0801 	subs.w	r8, r5, #1
 80143ce:	bf49      	itett	mi
 80143d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80143d4:	2300      	movpl	r3, #0
 80143d6:	9305      	strmi	r3, [sp, #20]
 80143d8:	f04f 0800 	movmi.w	r8, #0
 80143dc:	bf58      	it	pl
 80143de:	9305      	strpl	r3, [sp, #20]
 80143e0:	f1ba 0f00 	cmp.w	sl, #0
 80143e4:	db3e      	blt.n	8014464 <_dtoa_r+0x224>
 80143e6:	2300      	movs	r3, #0
 80143e8:	44d0      	add	r8, sl
 80143ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80143ee:	9307      	str	r3, [sp, #28]
 80143f0:	9b06      	ldr	r3, [sp, #24]
 80143f2:	2b09      	cmp	r3, #9
 80143f4:	f200 8090 	bhi.w	8014518 <_dtoa_r+0x2d8>
 80143f8:	2b05      	cmp	r3, #5
 80143fa:	bfc4      	itt	gt
 80143fc:	3b04      	subgt	r3, #4
 80143fe:	9306      	strgt	r3, [sp, #24]
 8014400:	9b06      	ldr	r3, [sp, #24]
 8014402:	f1a3 0302 	sub.w	r3, r3, #2
 8014406:	bfcc      	ite	gt
 8014408:	2500      	movgt	r5, #0
 801440a:	2501      	movle	r5, #1
 801440c:	2b03      	cmp	r3, #3
 801440e:	f200 808f 	bhi.w	8014530 <_dtoa_r+0x2f0>
 8014412:	e8df f003 	tbb	[pc, r3]
 8014416:	7f7d      	.short	0x7f7d
 8014418:	7131      	.short	0x7131
 801441a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801441e:	441d      	add	r5, r3
 8014420:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014424:	2820      	cmp	r0, #32
 8014426:	dd13      	ble.n	8014450 <_dtoa_r+0x210>
 8014428:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801442c:	9b00      	ldr	r3, [sp, #0]
 801442e:	fa08 f800 	lsl.w	r8, r8, r0
 8014432:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014436:	fa23 f000 	lsr.w	r0, r3, r0
 801443a:	ea48 0000 	orr.w	r0, r8, r0
 801443e:	f7f3 ff99 	bl	8008374 <__aeabi_ui2d>
 8014442:	2301      	movs	r3, #1
 8014444:	4682      	mov	sl, r0
 8014446:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801444a:	3d01      	subs	r5, #1
 801444c:	9313      	str	r3, [sp, #76]	; 0x4c
 801444e:	e772      	b.n	8014336 <_dtoa_r+0xf6>
 8014450:	9b00      	ldr	r3, [sp, #0]
 8014452:	f1c0 0020 	rsb	r0, r0, #32
 8014456:	fa03 f000 	lsl.w	r0, r3, r0
 801445a:	e7f0      	b.n	801443e <_dtoa_r+0x1fe>
 801445c:	2301      	movs	r3, #1
 801445e:	e7b1      	b.n	80143c4 <_dtoa_r+0x184>
 8014460:	900f      	str	r0, [sp, #60]	; 0x3c
 8014462:	e7b0      	b.n	80143c6 <_dtoa_r+0x186>
 8014464:	9b05      	ldr	r3, [sp, #20]
 8014466:	eba3 030a 	sub.w	r3, r3, sl
 801446a:	9305      	str	r3, [sp, #20]
 801446c:	f1ca 0300 	rsb	r3, sl, #0
 8014470:	9307      	str	r3, [sp, #28]
 8014472:	2300      	movs	r3, #0
 8014474:	930e      	str	r3, [sp, #56]	; 0x38
 8014476:	e7bb      	b.n	80143f0 <_dtoa_r+0x1b0>
 8014478:	2301      	movs	r3, #1
 801447a:	930a      	str	r3, [sp, #40]	; 0x28
 801447c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801447e:	2b00      	cmp	r3, #0
 8014480:	dd59      	ble.n	8014536 <_dtoa_r+0x2f6>
 8014482:	9302      	str	r3, [sp, #8]
 8014484:	4699      	mov	r9, r3
 8014486:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014488:	2200      	movs	r2, #0
 801448a:	6072      	str	r2, [r6, #4]
 801448c:	2204      	movs	r2, #4
 801448e:	f102 0014 	add.w	r0, r2, #20
 8014492:	4298      	cmp	r0, r3
 8014494:	6871      	ldr	r1, [r6, #4]
 8014496:	d953      	bls.n	8014540 <_dtoa_r+0x300>
 8014498:	4620      	mov	r0, r4
 801449a:	f000 fd69 	bl	8014f70 <_Balloc>
 801449e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144a0:	6030      	str	r0, [r6, #0]
 80144a2:	f1b9 0f0e 	cmp.w	r9, #14
 80144a6:	f8d3 b000 	ldr.w	fp, [r3]
 80144aa:	f200 80e6 	bhi.w	801467a <_dtoa_r+0x43a>
 80144ae:	2d00      	cmp	r5, #0
 80144b0:	f000 80e3 	beq.w	801467a <_dtoa_r+0x43a>
 80144b4:	ed9d 7b00 	vldr	d7, [sp]
 80144b8:	f1ba 0f00 	cmp.w	sl, #0
 80144bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80144c0:	dd74      	ble.n	80145ac <_dtoa_r+0x36c>
 80144c2:	4a2a      	ldr	r2, [pc, #168]	; (801456c <_dtoa_r+0x32c>)
 80144c4:	f00a 030f 	and.w	r3, sl, #15
 80144c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80144cc:	ed93 7b00 	vldr	d7, [r3]
 80144d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80144d4:	06f0      	lsls	r0, r6, #27
 80144d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80144da:	d565      	bpl.n	80145a8 <_dtoa_r+0x368>
 80144dc:	4b24      	ldr	r3, [pc, #144]	; (8014570 <_dtoa_r+0x330>)
 80144de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80144e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80144e6:	f7f4 f8e9 	bl	80086bc <__aeabi_ddiv>
 80144ea:	e9cd 0100 	strd	r0, r1, [sp]
 80144ee:	f006 060f 	and.w	r6, r6, #15
 80144f2:	2503      	movs	r5, #3
 80144f4:	4f1e      	ldr	r7, [pc, #120]	; (8014570 <_dtoa_r+0x330>)
 80144f6:	e04c      	b.n	8014592 <_dtoa_r+0x352>
 80144f8:	2301      	movs	r3, #1
 80144fa:	930a      	str	r3, [sp, #40]	; 0x28
 80144fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144fe:	4453      	add	r3, sl
 8014500:	f103 0901 	add.w	r9, r3, #1
 8014504:	9302      	str	r3, [sp, #8]
 8014506:	464b      	mov	r3, r9
 8014508:	2b01      	cmp	r3, #1
 801450a:	bfb8      	it	lt
 801450c:	2301      	movlt	r3, #1
 801450e:	e7ba      	b.n	8014486 <_dtoa_r+0x246>
 8014510:	2300      	movs	r3, #0
 8014512:	e7b2      	b.n	801447a <_dtoa_r+0x23a>
 8014514:	2300      	movs	r3, #0
 8014516:	e7f0      	b.n	80144fa <_dtoa_r+0x2ba>
 8014518:	2501      	movs	r5, #1
 801451a:	2300      	movs	r3, #0
 801451c:	9306      	str	r3, [sp, #24]
 801451e:	950a      	str	r5, [sp, #40]	; 0x28
 8014520:	f04f 33ff 	mov.w	r3, #4294967295
 8014524:	9302      	str	r3, [sp, #8]
 8014526:	4699      	mov	r9, r3
 8014528:	2200      	movs	r2, #0
 801452a:	2312      	movs	r3, #18
 801452c:	920b      	str	r2, [sp, #44]	; 0x2c
 801452e:	e7aa      	b.n	8014486 <_dtoa_r+0x246>
 8014530:	2301      	movs	r3, #1
 8014532:	930a      	str	r3, [sp, #40]	; 0x28
 8014534:	e7f4      	b.n	8014520 <_dtoa_r+0x2e0>
 8014536:	2301      	movs	r3, #1
 8014538:	9302      	str	r3, [sp, #8]
 801453a:	4699      	mov	r9, r3
 801453c:	461a      	mov	r2, r3
 801453e:	e7f5      	b.n	801452c <_dtoa_r+0x2ec>
 8014540:	3101      	adds	r1, #1
 8014542:	6071      	str	r1, [r6, #4]
 8014544:	0052      	lsls	r2, r2, #1
 8014546:	e7a2      	b.n	801448e <_dtoa_r+0x24e>
 8014548:	636f4361 	.word	0x636f4361
 801454c:	3fd287a7 	.word	0x3fd287a7
 8014550:	8b60c8b3 	.word	0x8b60c8b3
 8014554:	3fc68a28 	.word	0x3fc68a28
 8014558:	509f79fb 	.word	0x509f79fb
 801455c:	3fd34413 	.word	0x3fd34413
 8014560:	7ff00000 	.word	0x7ff00000
 8014564:	080162e9 	.word	0x080162e9
 8014568:	3ff80000 	.word	0x3ff80000
 801456c:	080163a8 	.word	0x080163a8
 8014570:	08016380 	.word	0x08016380
 8014574:	08016315 	.word	0x08016315
 8014578:	07f1      	lsls	r1, r6, #31
 801457a:	d508      	bpl.n	801458e <_dtoa_r+0x34e>
 801457c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014584:	f7f3 ff70 	bl	8008468 <__aeabi_dmul>
 8014588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801458c:	3501      	adds	r5, #1
 801458e:	1076      	asrs	r6, r6, #1
 8014590:	3708      	adds	r7, #8
 8014592:	2e00      	cmp	r6, #0
 8014594:	d1f0      	bne.n	8014578 <_dtoa_r+0x338>
 8014596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801459a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801459e:	f7f4 f88d 	bl	80086bc <__aeabi_ddiv>
 80145a2:	e9cd 0100 	strd	r0, r1, [sp]
 80145a6:	e01a      	b.n	80145de <_dtoa_r+0x39e>
 80145a8:	2502      	movs	r5, #2
 80145aa:	e7a3      	b.n	80144f4 <_dtoa_r+0x2b4>
 80145ac:	f000 80a0 	beq.w	80146f0 <_dtoa_r+0x4b0>
 80145b0:	f1ca 0600 	rsb	r6, sl, #0
 80145b4:	4b9f      	ldr	r3, [pc, #636]	; (8014834 <_dtoa_r+0x5f4>)
 80145b6:	4fa0      	ldr	r7, [pc, #640]	; (8014838 <_dtoa_r+0x5f8>)
 80145b8:	f006 020f 	and.w	r2, r6, #15
 80145bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80145c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80145c8:	f7f3 ff4e 	bl	8008468 <__aeabi_dmul>
 80145cc:	e9cd 0100 	strd	r0, r1, [sp]
 80145d0:	1136      	asrs	r6, r6, #4
 80145d2:	2300      	movs	r3, #0
 80145d4:	2502      	movs	r5, #2
 80145d6:	2e00      	cmp	r6, #0
 80145d8:	d17f      	bne.n	80146da <_dtoa_r+0x49a>
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d1e1      	bne.n	80145a2 <_dtoa_r+0x362>
 80145de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	f000 8087 	beq.w	80146f4 <_dtoa_r+0x4b4>
 80145e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80145ea:	2200      	movs	r2, #0
 80145ec:	4b93      	ldr	r3, [pc, #588]	; (801483c <_dtoa_r+0x5fc>)
 80145ee:	4630      	mov	r0, r6
 80145f0:	4639      	mov	r1, r7
 80145f2:	f7f4 f9ab 	bl	800894c <__aeabi_dcmplt>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	d07c      	beq.n	80146f4 <_dtoa_r+0x4b4>
 80145fa:	f1b9 0f00 	cmp.w	r9, #0
 80145fe:	d079      	beq.n	80146f4 <_dtoa_r+0x4b4>
 8014600:	9b02      	ldr	r3, [sp, #8]
 8014602:	2b00      	cmp	r3, #0
 8014604:	dd35      	ble.n	8014672 <_dtoa_r+0x432>
 8014606:	f10a 33ff 	add.w	r3, sl, #4294967295
 801460a:	9308      	str	r3, [sp, #32]
 801460c:	4639      	mov	r1, r7
 801460e:	2200      	movs	r2, #0
 8014610:	4b8b      	ldr	r3, [pc, #556]	; (8014840 <_dtoa_r+0x600>)
 8014612:	4630      	mov	r0, r6
 8014614:	f7f3 ff28 	bl	8008468 <__aeabi_dmul>
 8014618:	e9cd 0100 	strd	r0, r1, [sp]
 801461c:	9f02      	ldr	r7, [sp, #8]
 801461e:	3501      	adds	r5, #1
 8014620:	4628      	mov	r0, r5
 8014622:	f7f3 feb7 	bl	8008394 <__aeabi_i2d>
 8014626:	e9dd 2300 	ldrd	r2, r3, [sp]
 801462a:	f7f3 ff1d 	bl	8008468 <__aeabi_dmul>
 801462e:	2200      	movs	r2, #0
 8014630:	4b84      	ldr	r3, [pc, #528]	; (8014844 <_dtoa_r+0x604>)
 8014632:	f7f3 fd63 	bl	80080fc <__adddf3>
 8014636:	4605      	mov	r5, r0
 8014638:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801463c:	2f00      	cmp	r7, #0
 801463e:	d15d      	bne.n	80146fc <_dtoa_r+0x4bc>
 8014640:	2200      	movs	r2, #0
 8014642:	4b81      	ldr	r3, [pc, #516]	; (8014848 <_dtoa_r+0x608>)
 8014644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014648:	f7f3 fd56 	bl	80080f8 <__aeabi_dsub>
 801464c:	462a      	mov	r2, r5
 801464e:	4633      	mov	r3, r6
 8014650:	e9cd 0100 	strd	r0, r1, [sp]
 8014654:	f7f4 f998 	bl	8008988 <__aeabi_dcmpgt>
 8014658:	2800      	cmp	r0, #0
 801465a:	f040 8288 	bne.w	8014b6e <_dtoa_r+0x92e>
 801465e:	462a      	mov	r2, r5
 8014660:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014668:	f7f4 f970 	bl	800894c <__aeabi_dcmplt>
 801466c:	2800      	cmp	r0, #0
 801466e:	f040 827c 	bne.w	8014b6a <_dtoa_r+0x92a>
 8014672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014676:	e9cd 2300 	strd	r2, r3, [sp]
 801467a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801467c:	2b00      	cmp	r3, #0
 801467e:	f2c0 8150 	blt.w	8014922 <_dtoa_r+0x6e2>
 8014682:	f1ba 0f0e 	cmp.w	sl, #14
 8014686:	f300 814c 	bgt.w	8014922 <_dtoa_r+0x6e2>
 801468a:	4b6a      	ldr	r3, [pc, #424]	; (8014834 <_dtoa_r+0x5f4>)
 801468c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014690:	ed93 7b00 	vldr	d7, [r3]
 8014694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014696:	2b00      	cmp	r3, #0
 8014698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801469c:	f280 80d8 	bge.w	8014850 <_dtoa_r+0x610>
 80146a0:	f1b9 0f00 	cmp.w	r9, #0
 80146a4:	f300 80d4 	bgt.w	8014850 <_dtoa_r+0x610>
 80146a8:	f040 825e 	bne.w	8014b68 <_dtoa_r+0x928>
 80146ac:	2200      	movs	r2, #0
 80146ae:	4b66      	ldr	r3, [pc, #408]	; (8014848 <_dtoa_r+0x608>)
 80146b0:	ec51 0b17 	vmov	r0, r1, d7
 80146b4:	f7f3 fed8 	bl	8008468 <__aeabi_dmul>
 80146b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146bc:	f7f4 f95a 	bl	8008974 <__aeabi_dcmpge>
 80146c0:	464f      	mov	r7, r9
 80146c2:	464e      	mov	r6, r9
 80146c4:	2800      	cmp	r0, #0
 80146c6:	f040 8234 	bne.w	8014b32 <_dtoa_r+0x8f2>
 80146ca:	2331      	movs	r3, #49	; 0x31
 80146cc:	f10b 0501 	add.w	r5, fp, #1
 80146d0:	f88b 3000 	strb.w	r3, [fp]
 80146d4:	f10a 0a01 	add.w	sl, sl, #1
 80146d8:	e22f      	b.n	8014b3a <_dtoa_r+0x8fa>
 80146da:	07f2      	lsls	r2, r6, #31
 80146dc:	d505      	bpl.n	80146ea <_dtoa_r+0x4aa>
 80146de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146e2:	f7f3 fec1 	bl	8008468 <__aeabi_dmul>
 80146e6:	3501      	adds	r5, #1
 80146e8:	2301      	movs	r3, #1
 80146ea:	1076      	asrs	r6, r6, #1
 80146ec:	3708      	adds	r7, #8
 80146ee:	e772      	b.n	80145d6 <_dtoa_r+0x396>
 80146f0:	2502      	movs	r5, #2
 80146f2:	e774      	b.n	80145de <_dtoa_r+0x39e>
 80146f4:	f8cd a020 	str.w	sl, [sp, #32]
 80146f8:	464f      	mov	r7, r9
 80146fa:	e791      	b.n	8014620 <_dtoa_r+0x3e0>
 80146fc:	4b4d      	ldr	r3, [pc, #308]	; (8014834 <_dtoa_r+0x5f4>)
 80146fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014702:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014708:	2b00      	cmp	r3, #0
 801470a:	d047      	beq.n	801479c <_dtoa_r+0x55c>
 801470c:	4602      	mov	r2, r0
 801470e:	460b      	mov	r3, r1
 8014710:	2000      	movs	r0, #0
 8014712:	494e      	ldr	r1, [pc, #312]	; (801484c <_dtoa_r+0x60c>)
 8014714:	f7f3 ffd2 	bl	80086bc <__aeabi_ddiv>
 8014718:	462a      	mov	r2, r5
 801471a:	4633      	mov	r3, r6
 801471c:	f7f3 fcec 	bl	80080f8 <__aeabi_dsub>
 8014720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014724:	465d      	mov	r5, fp
 8014726:	e9dd 0100 	ldrd	r0, r1, [sp]
 801472a:	f7f4 f94d 	bl	80089c8 <__aeabi_d2iz>
 801472e:	4606      	mov	r6, r0
 8014730:	f7f3 fe30 	bl	8008394 <__aeabi_i2d>
 8014734:	4602      	mov	r2, r0
 8014736:	460b      	mov	r3, r1
 8014738:	e9dd 0100 	ldrd	r0, r1, [sp]
 801473c:	f7f3 fcdc 	bl	80080f8 <__aeabi_dsub>
 8014740:	3630      	adds	r6, #48	; 0x30
 8014742:	f805 6b01 	strb.w	r6, [r5], #1
 8014746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801474a:	e9cd 0100 	strd	r0, r1, [sp]
 801474e:	f7f4 f8fd 	bl	800894c <__aeabi_dcmplt>
 8014752:	2800      	cmp	r0, #0
 8014754:	d163      	bne.n	801481e <_dtoa_r+0x5de>
 8014756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801475a:	2000      	movs	r0, #0
 801475c:	4937      	ldr	r1, [pc, #220]	; (801483c <_dtoa_r+0x5fc>)
 801475e:	f7f3 fccb 	bl	80080f8 <__aeabi_dsub>
 8014762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014766:	f7f4 f8f1 	bl	800894c <__aeabi_dcmplt>
 801476a:	2800      	cmp	r0, #0
 801476c:	f040 80b7 	bne.w	80148de <_dtoa_r+0x69e>
 8014770:	eba5 030b 	sub.w	r3, r5, fp
 8014774:	429f      	cmp	r7, r3
 8014776:	f77f af7c 	ble.w	8014672 <_dtoa_r+0x432>
 801477a:	2200      	movs	r2, #0
 801477c:	4b30      	ldr	r3, [pc, #192]	; (8014840 <_dtoa_r+0x600>)
 801477e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014782:	f7f3 fe71 	bl	8008468 <__aeabi_dmul>
 8014786:	2200      	movs	r2, #0
 8014788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801478c:	4b2c      	ldr	r3, [pc, #176]	; (8014840 <_dtoa_r+0x600>)
 801478e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014792:	f7f3 fe69 	bl	8008468 <__aeabi_dmul>
 8014796:	e9cd 0100 	strd	r0, r1, [sp]
 801479a:	e7c4      	b.n	8014726 <_dtoa_r+0x4e6>
 801479c:	462a      	mov	r2, r5
 801479e:	4633      	mov	r3, r6
 80147a0:	f7f3 fe62 	bl	8008468 <__aeabi_dmul>
 80147a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80147a8:	eb0b 0507 	add.w	r5, fp, r7
 80147ac:	465e      	mov	r6, fp
 80147ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147b2:	f7f4 f909 	bl	80089c8 <__aeabi_d2iz>
 80147b6:	4607      	mov	r7, r0
 80147b8:	f7f3 fdec 	bl	8008394 <__aeabi_i2d>
 80147bc:	3730      	adds	r7, #48	; 0x30
 80147be:	4602      	mov	r2, r0
 80147c0:	460b      	mov	r3, r1
 80147c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147c6:	f7f3 fc97 	bl	80080f8 <__aeabi_dsub>
 80147ca:	f806 7b01 	strb.w	r7, [r6], #1
 80147ce:	42ae      	cmp	r6, r5
 80147d0:	e9cd 0100 	strd	r0, r1, [sp]
 80147d4:	f04f 0200 	mov.w	r2, #0
 80147d8:	d126      	bne.n	8014828 <_dtoa_r+0x5e8>
 80147da:	4b1c      	ldr	r3, [pc, #112]	; (801484c <_dtoa_r+0x60c>)
 80147dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80147e0:	f7f3 fc8c 	bl	80080fc <__adddf3>
 80147e4:	4602      	mov	r2, r0
 80147e6:	460b      	mov	r3, r1
 80147e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147ec:	f7f4 f8cc 	bl	8008988 <__aeabi_dcmpgt>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d174      	bne.n	80148de <_dtoa_r+0x69e>
 80147f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147f8:	2000      	movs	r0, #0
 80147fa:	4914      	ldr	r1, [pc, #80]	; (801484c <_dtoa_r+0x60c>)
 80147fc:	f7f3 fc7c 	bl	80080f8 <__aeabi_dsub>
 8014800:	4602      	mov	r2, r0
 8014802:	460b      	mov	r3, r1
 8014804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014808:	f7f4 f8a0 	bl	800894c <__aeabi_dcmplt>
 801480c:	2800      	cmp	r0, #0
 801480e:	f43f af30 	beq.w	8014672 <_dtoa_r+0x432>
 8014812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014816:	2b30      	cmp	r3, #48	; 0x30
 8014818:	f105 32ff 	add.w	r2, r5, #4294967295
 801481c:	d002      	beq.n	8014824 <_dtoa_r+0x5e4>
 801481e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014822:	e04a      	b.n	80148ba <_dtoa_r+0x67a>
 8014824:	4615      	mov	r5, r2
 8014826:	e7f4      	b.n	8014812 <_dtoa_r+0x5d2>
 8014828:	4b05      	ldr	r3, [pc, #20]	; (8014840 <_dtoa_r+0x600>)
 801482a:	f7f3 fe1d 	bl	8008468 <__aeabi_dmul>
 801482e:	e9cd 0100 	strd	r0, r1, [sp]
 8014832:	e7bc      	b.n	80147ae <_dtoa_r+0x56e>
 8014834:	080163a8 	.word	0x080163a8
 8014838:	08016380 	.word	0x08016380
 801483c:	3ff00000 	.word	0x3ff00000
 8014840:	40240000 	.word	0x40240000
 8014844:	401c0000 	.word	0x401c0000
 8014848:	40140000 	.word	0x40140000
 801484c:	3fe00000 	.word	0x3fe00000
 8014850:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014854:	465d      	mov	r5, fp
 8014856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801485a:	4630      	mov	r0, r6
 801485c:	4639      	mov	r1, r7
 801485e:	f7f3 ff2d 	bl	80086bc <__aeabi_ddiv>
 8014862:	f7f4 f8b1 	bl	80089c8 <__aeabi_d2iz>
 8014866:	4680      	mov	r8, r0
 8014868:	f7f3 fd94 	bl	8008394 <__aeabi_i2d>
 801486c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014870:	f7f3 fdfa 	bl	8008468 <__aeabi_dmul>
 8014874:	4602      	mov	r2, r0
 8014876:	460b      	mov	r3, r1
 8014878:	4630      	mov	r0, r6
 801487a:	4639      	mov	r1, r7
 801487c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014880:	f7f3 fc3a 	bl	80080f8 <__aeabi_dsub>
 8014884:	f805 6b01 	strb.w	r6, [r5], #1
 8014888:	eba5 060b 	sub.w	r6, r5, fp
 801488c:	45b1      	cmp	r9, r6
 801488e:	4602      	mov	r2, r0
 8014890:	460b      	mov	r3, r1
 8014892:	d139      	bne.n	8014908 <_dtoa_r+0x6c8>
 8014894:	f7f3 fc32 	bl	80080fc <__adddf3>
 8014898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801489c:	4606      	mov	r6, r0
 801489e:	460f      	mov	r7, r1
 80148a0:	f7f4 f872 	bl	8008988 <__aeabi_dcmpgt>
 80148a4:	b9c8      	cbnz	r0, 80148da <_dtoa_r+0x69a>
 80148a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148aa:	4630      	mov	r0, r6
 80148ac:	4639      	mov	r1, r7
 80148ae:	f7f4 f843 	bl	8008938 <__aeabi_dcmpeq>
 80148b2:	b110      	cbz	r0, 80148ba <_dtoa_r+0x67a>
 80148b4:	f018 0f01 	tst.w	r8, #1
 80148b8:	d10f      	bne.n	80148da <_dtoa_r+0x69a>
 80148ba:	9904      	ldr	r1, [sp, #16]
 80148bc:	4620      	mov	r0, r4
 80148be:	f000 fb8b 	bl	8014fd8 <_Bfree>
 80148c2:	2300      	movs	r3, #0
 80148c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80148c6:	702b      	strb	r3, [r5, #0]
 80148c8:	f10a 0301 	add.w	r3, sl, #1
 80148cc:	6013      	str	r3, [r2, #0]
 80148ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	f000 8241 	beq.w	8014d58 <_dtoa_r+0xb18>
 80148d6:	601d      	str	r5, [r3, #0]
 80148d8:	e23e      	b.n	8014d58 <_dtoa_r+0xb18>
 80148da:	f8cd a020 	str.w	sl, [sp, #32]
 80148de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80148e2:	2a39      	cmp	r2, #57	; 0x39
 80148e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80148e8:	d108      	bne.n	80148fc <_dtoa_r+0x6bc>
 80148ea:	459b      	cmp	fp, r3
 80148ec:	d10a      	bne.n	8014904 <_dtoa_r+0x6c4>
 80148ee:	9b08      	ldr	r3, [sp, #32]
 80148f0:	3301      	adds	r3, #1
 80148f2:	9308      	str	r3, [sp, #32]
 80148f4:	2330      	movs	r3, #48	; 0x30
 80148f6:	f88b 3000 	strb.w	r3, [fp]
 80148fa:	465b      	mov	r3, fp
 80148fc:	781a      	ldrb	r2, [r3, #0]
 80148fe:	3201      	adds	r2, #1
 8014900:	701a      	strb	r2, [r3, #0]
 8014902:	e78c      	b.n	801481e <_dtoa_r+0x5de>
 8014904:	461d      	mov	r5, r3
 8014906:	e7ea      	b.n	80148de <_dtoa_r+0x69e>
 8014908:	2200      	movs	r2, #0
 801490a:	4b9b      	ldr	r3, [pc, #620]	; (8014b78 <_dtoa_r+0x938>)
 801490c:	f7f3 fdac 	bl	8008468 <__aeabi_dmul>
 8014910:	2200      	movs	r2, #0
 8014912:	2300      	movs	r3, #0
 8014914:	4606      	mov	r6, r0
 8014916:	460f      	mov	r7, r1
 8014918:	f7f4 f80e 	bl	8008938 <__aeabi_dcmpeq>
 801491c:	2800      	cmp	r0, #0
 801491e:	d09a      	beq.n	8014856 <_dtoa_r+0x616>
 8014920:	e7cb      	b.n	80148ba <_dtoa_r+0x67a>
 8014922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014924:	2a00      	cmp	r2, #0
 8014926:	f000 808b 	beq.w	8014a40 <_dtoa_r+0x800>
 801492a:	9a06      	ldr	r2, [sp, #24]
 801492c:	2a01      	cmp	r2, #1
 801492e:	dc6e      	bgt.n	8014a0e <_dtoa_r+0x7ce>
 8014930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014932:	2a00      	cmp	r2, #0
 8014934:	d067      	beq.n	8014a06 <_dtoa_r+0x7c6>
 8014936:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801493a:	9f07      	ldr	r7, [sp, #28]
 801493c:	9d05      	ldr	r5, [sp, #20]
 801493e:	9a05      	ldr	r2, [sp, #20]
 8014940:	2101      	movs	r1, #1
 8014942:	441a      	add	r2, r3
 8014944:	4620      	mov	r0, r4
 8014946:	9205      	str	r2, [sp, #20]
 8014948:	4498      	add	r8, r3
 801494a:	f000 fbe5 	bl	8015118 <__i2b>
 801494e:	4606      	mov	r6, r0
 8014950:	2d00      	cmp	r5, #0
 8014952:	dd0c      	ble.n	801496e <_dtoa_r+0x72e>
 8014954:	f1b8 0f00 	cmp.w	r8, #0
 8014958:	dd09      	ble.n	801496e <_dtoa_r+0x72e>
 801495a:	4545      	cmp	r5, r8
 801495c:	9a05      	ldr	r2, [sp, #20]
 801495e:	462b      	mov	r3, r5
 8014960:	bfa8      	it	ge
 8014962:	4643      	movge	r3, r8
 8014964:	1ad2      	subs	r2, r2, r3
 8014966:	9205      	str	r2, [sp, #20]
 8014968:	1aed      	subs	r5, r5, r3
 801496a:	eba8 0803 	sub.w	r8, r8, r3
 801496e:	9b07      	ldr	r3, [sp, #28]
 8014970:	b1eb      	cbz	r3, 80149ae <_dtoa_r+0x76e>
 8014972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014974:	2b00      	cmp	r3, #0
 8014976:	d067      	beq.n	8014a48 <_dtoa_r+0x808>
 8014978:	b18f      	cbz	r7, 801499e <_dtoa_r+0x75e>
 801497a:	4631      	mov	r1, r6
 801497c:	463a      	mov	r2, r7
 801497e:	4620      	mov	r0, r4
 8014980:	f000 fc6a 	bl	8015258 <__pow5mult>
 8014984:	9a04      	ldr	r2, [sp, #16]
 8014986:	4601      	mov	r1, r0
 8014988:	4606      	mov	r6, r0
 801498a:	4620      	mov	r0, r4
 801498c:	f000 fbcd 	bl	801512a <__multiply>
 8014990:	9904      	ldr	r1, [sp, #16]
 8014992:	9008      	str	r0, [sp, #32]
 8014994:	4620      	mov	r0, r4
 8014996:	f000 fb1f 	bl	8014fd8 <_Bfree>
 801499a:	9b08      	ldr	r3, [sp, #32]
 801499c:	9304      	str	r3, [sp, #16]
 801499e:	9b07      	ldr	r3, [sp, #28]
 80149a0:	1bda      	subs	r2, r3, r7
 80149a2:	d004      	beq.n	80149ae <_dtoa_r+0x76e>
 80149a4:	9904      	ldr	r1, [sp, #16]
 80149a6:	4620      	mov	r0, r4
 80149a8:	f000 fc56 	bl	8015258 <__pow5mult>
 80149ac:	9004      	str	r0, [sp, #16]
 80149ae:	2101      	movs	r1, #1
 80149b0:	4620      	mov	r0, r4
 80149b2:	f000 fbb1 	bl	8015118 <__i2b>
 80149b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149b8:	4607      	mov	r7, r0
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f000 81d0 	beq.w	8014d60 <_dtoa_r+0xb20>
 80149c0:	461a      	mov	r2, r3
 80149c2:	4601      	mov	r1, r0
 80149c4:	4620      	mov	r0, r4
 80149c6:	f000 fc47 	bl	8015258 <__pow5mult>
 80149ca:	9b06      	ldr	r3, [sp, #24]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	4607      	mov	r7, r0
 80149d0:	dc40      	bgt.n	8014a54 <_dtoa_r+0x814>
 80149d2:	9b00      	ldr	r3, [sp, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d139      	bne.n	8014a4c <_dtoa_r+0x80c>
 80149d8:	9b01      	ldr	r3, [sp, #4]
 80149da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d136      	bne.n	8014a50 <_dtoa_r+0x810>
 80149e2:	9b01      	ldr	r3, [sp, #4]
 80149e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80149e8:	0d1b      	lsrs	r3, r3, #20
 80149ea:	051b      	lsls	r3, r3, #20
 80149ec:	b12b      	cbz	r3, 80149fa <_dtoa_r+0x7ba>
 80149ee:	9b05      	ldr	r3, [sp, #20]
 80149f0:	3301      	adds	r3, #1
 80149f2:	9305      	str	r3, [sp, #20]
 80149f4:	f108 0801 	add.w	r8, r8, #1
 80149f8:	2301      	movs	r3, #1
 80149fa:	9307      	str	r3, [sp, #28]
 80149fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d12a      	bne.n	8014a58 <_dtoa_r+0x818>
 8014a02:	2001      	movs	r0, #1
 8014a04:	e030      	b.n	8014a68 <_dtoa_r+0x828>
 8014a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014a0c:	e795      	b.n	801493a <_dtoa_r+0x6fa>
 8014a0e:	9b07      	ldr	r3, [sp, #28]
 8014a10:	f109 37ff 	add.w	r7, r9, #4294967295
 8014a14:	42bb      	cmp	r3, r7
 8014a16:	bfbf      	itttt	lt
 8014a18:	9b07      	ldrlt	r3, [sp, #28]
 8014a1a:	9707      	strlt	r7, [sp, #28]
 8014a1c:	1afa      	sublt	r2, r7, r3
 8014a1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014a20:	bfbb      	ittet	lt
 8014a22:	189b      	addlt	r3, r3, r2
 8014a24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014a26:	1bdf      	subge	r7, r3, r7
 8014a28:	2700      	movlt	r7, #0
 8014a2a:	f1b9 0f00 	cmp.w	r9, #0
 8014a2e:	bfb5      	itete	lt
 8014a30:	9b05      	ldrlt	r3, [sp, #20]
 8014a32:	9d05      	ldrge	r5, [sp, #20]
 8014a34:	eba3 0509 	sublt.w	r5, r3, r9
 8014a38:	464b      	movge	r3, r9
 8014a3a:	bfb8      	it	lt
 8014a3c:	2300      	movlt	r3, #0
 8014a3e:	e77e      	b.n	801493e <_dtoa_r+0x6fe>
 8014a40:	9f07      	ldr	r7, [sp, #28]
 8014a42:	9d05      	ldr	r5, [sp, #20]
 8014a44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014a46:	e783      	b.n	8014950 <_dtoa_r+0x710>
 8014a48:	9a07      	ldr	r2, [sp, #28]
 8014a4a:	e7ab      	b.n	80149a4 <_dtoa_r+0x764>
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	e7d4      	b.n	80149fa <_dtoa_r+0x7ba>
 8014a50:	9b00      	ldr	r3, [sp, #0]
 8014a52:	e7d2      	b.n	80149fa <_dtoa_r+0x7ba>
 8014a54:	2300      	movs	r3, #0
 8014a56:	9307      	str	r3, [sp, #28]
 8014a58:	693b      	ldr	r3, [r7, #16]
 8014a5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014a5e:	6918      	ldr	r0, [r3, #16]
 8014a60:	f000 fb0c 	bl	801507c <__hi0bits>
 8014a64:	f1c0 0020 	rsb	r0, r0, #32
 8014a68:	4440      	add	r0, r8
 8014a6a:	f010 001f 	ands.w	r0, r0, #31
 8014a6e:	d047      	beq.n	8014b00 <_dtoa_r+0x8c0>
 8014a70:	f1c0 0320 	rsb	r3, r0, #32
 8014a74:	2b04      	cmp	r3, #4
 8014a76:	dd3b      	ble.n	8014af0 <_dtoa_r+0x8b0>
 8014a78:	9b05      	ldr	r3, [sp, #20]
 8014a7a:	f1c0 001c 	rsb	r0, r0, #28
 8014a7e:	4403      	add	r3, r0
 8014a80:	9305      	str	r3, [sp, #20]
 8014a82:	4405      	add	r5, r0
 8014a84:	4480      	add	r8, r0
 8014a86:	9b05      	ldr	r3, [sp, #20]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	dd05      	ble.n	8014a98 <_dtoa_r+0x858>
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	9904      	ldr	r1, [sp, #16]
 8014a90:	4620      	mov	r0, r4
 8014a92:	f000 fc2f 	bl	80152f4 <__lshift>
 8014a96:	9004      	str	r0, [sp, #16]
 8014a98:	f1b8 0f00 	cmp.w	r8, #0
 8014a9c:	dd05      	ble.n	8014aaa <_dtoa_r+0x86a>
 8014a9e:	4639      	mov	r1, r7
 8014aa0:	4642      	mov	r2, r8
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	f000 fc26 	bl	80152f4 <__lshift>
 8014aa8:	4607      	mov	r7, r0
 8014aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aac:	b353      	cbz	r3, 8014b04 <_dtoa_r+0x8c4>
 8014aae:	4639      	mov	r1, r7
 8014ab0:	9804      	ldr	r0, [sp, #16]
 8014ab2:	f000 fc73 	bl	801539c <__mcmp>
 8014ab6:	2800      	cmp	r0, #0
 8014ab8:	da24      	bge.n	8014b04 <_dtoa_r+0x8c4>
 8014aba:	2300      	movs	r3, #0
 8014abc:	220a      	movs	r2, #10
 8014abe:	9904      	ldr	r1, [sp, #16]
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	f000 faa0 	bl	8015006 <__multadd>
 8014ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ac8:	9004      	str	r0, [sp, #16]
 8014aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	f000 814d 	beq.w	8014d6e <_dtoa_r+0xb2e>
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	4631      	mov	r1, r6
 8014ad8:	220a      	movs	r2, #10
 8014ada:	4620      	mov	r0, r4
 8014adc:	f000 fa93 	bl	8015006 <__multadd>
 8014ae0:	9b02      	ldr	r3, [sp, #8]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	4606      	mov	r6, r0
 8014ae6:	dc4f      	bgt.n	8014b88 <_dtoa_r+0x948>
 8014ae8:	9b06      	ldr	r3, [sp, #24]
 8014aea:	2b02      	cmp	r3, #2
 8014aec:	dd4c      	ble.n	8014b88 <_dtoa_r+0x948>
 8014aee:	e011      	b.n	8014b14 <_dtoa_r+0x8d4>
 8014af0:	d0c9      	beq.n	8014a86 <_dtoa_r+0x846>
 8014af2:	9a05      	ldr	r2, [sp, #20]
 8014af4:	331c      	adds	r3, #28
 8014af6:	441a      	add	r2, r3
 8014af8:	9205      	str	r2, [sp, #20]
 8014afa:	441d      	add	r5, r3
 8014afc:	4498      	add	r8, r3
 8014afe:	e7c2      	b.n	8014a86 <_dtoa_r+0x846>
 8014b00:	4603      	mov	r3, r0
 8014b02:	e7f6      	b.n	8014af2 <_dtoa_r+0x8b2>
 8014b04:	f1b9 0f00 	cmp.w	r9, #0
 8014b08:	dc38      	bgt.n	8014b7c <_dtoa_r+0x93c>
 8014b0a:	9b06      	ldr	r3, [sp, #24]
 8014b0c:	2b02      	cmp	r3, #2
 8014b0e:	dd35      	ble.n	8014b7c <_dtoa_r+0x93c>
 8014b10:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b14:	9b02      	ldr	r3, [sp, #8]
 8014b16:	b963      	cbnz	r3, 8014b32 <_dtoa_r+0x8f2>
 8014b18:	4639      	mov	r1, r7
 8014b1a:	2205      	movs	r2, #5
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f000 fa72 	bl	8015006 <__multadd>
 8014b22:	4601      	mov	r1, r0
 8014b24:	4607      	mov	r7, r0
 8014b26:	9804      	ldr	r0, [sp, #16]
 8014b28:	f000 fc38 	bl	801539c <__mcmp>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	f73f adcc 	bgt.w	80146ca <_dtoa_r+0x48a>
 8014b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b34:	465d      	mov	r5, fp
 8014b36:	ea6f 0a03 	mvn.w	sl, r3
 8014b3a:	f04f 0900 	mov.w	r9, #0
 8014b3e:	4639      	mov	r1, r7
 8014b40:	4620      	mov	r0, r4
 8014b42:	f000 fa49 	bl	8014fd8 <_Bfree>
 8014b46:	2e00      	cmp	r6, #0
 8014b48:	f43f aeb7 	beq.w	80148ba <_dtoa_r+0x67a>
 8014b4c:	f1b9 0f00 	cmp.w	r9, #0
 8014b50:	d005      	beq.n	8014b5e <_dtoa_r+0x91e>
 8014b52:	45b1      	cmp	r9, r6
 8014b54:	d003      	beq.n	8014b5e <_dtoa_r+0x91e>
 8014b56:	4649      	mov	r1, r9
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f000 fa3d 	bl	8014fd8 <_Bfree>
 8014b5e:	4631      	mov	r1, r6
 8014b60:	4620      	mov	r0, r4
 8014b62:	f000 fa39 	bl	8014fd8 <_Bfree>
 8014b66:	e6a8      	b.n	80148ba <_dtoa_r+0x67a>
 8014b68:	2700      	movs	r7, #0
 8014b6a:	463e      	mov	r6, r7
 8014b6c:	e7e1      	b.n	8014b32 <_dtoa_r+0x8f2>
 8014b6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014b72:	463e      	mov	r6, r7
 8014b74:	e5a9      	b.n	80146ca <_dtoa_r+0x48a>
 8014b76:	bf00      	nop
 8014b78:	40240000 	.word	0x40240000
 8014b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	f000 80fa 	beq.w	8014d7c <_dtoa_r+0xb3c>
 8014b88:	2d00      	cmp	r5, #0
 8014b8a:	dd05      	ble.n	8014b98 <_dtoa_r+0x958>
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	462a      	mov	r2, r5
 8014b90:	4620      	mov	r0, r4
 8014b92:	f000 fbaf 	bl	80152f4 <__lshift>
 8014b96:	4606      	mov	r6, r0
 8014b98:	9b07      	ldr	r3, [sp, #28]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d04c      	beq.n	8014c38 <_dtoa_r+0x9f8>
 8014b9e:	6871      	ldr	r1, [r6, #4]
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f000 f9e5 	bl	8014f70 <_Balloc>
 8014ba6:	6932      	ldr	r2, [r6, #16]
 8014ba8:	3202      	adds	r2, #2
 8014baa:	4605      	mov	r5, r0
 8014bac:	0092      	lsls	r2, r2, #2
 8014bae:	f106 010c 	add.w	r1, r6, #12
 8014bb2:	300c      	adds	r0, #12
 8014bb4:	f7fe fe10 	bl	80137d8 <memcpy>
 8014bb8:	2201      	movs	r2, #1
 8014bba:	4629      	mov	r1, r5
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f000 fb99 	bl	80152f4 <__lshift>
 8014bc2:	9b00      	ldr	r3, [sp, #0]
 8014bc4:	f8cd b014 	str.w	fp, [sp, #20]
 8014bc8:	f003 0301 	and.w	r3, r3, #1
 8014bcc:	46b1      	mov	r9, r6
 8014bce:	9307      	str	r3, [sp, #28]
 8014bd0:	4606      	mov	r6, r0
 8014bd2:	4639      	mov	r1, r7
 8014bd4:	9804      	ldr	r0, [sp, #16]
 8014bd6:	f7ff faa7 	bl	8014128 <quorem>
 8014bda:	4649      	mov	r1, r9
 8014bdc:	4605      	mov	r5, r0
 8014bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014be2:	9804      	ldr	r0, [sp, #16]
 8014be4:	f000 fbda 	bl	801539c <__mcmp>
 8014be8:	4632      	mov	r2, r6
 8014bea:	9000      	str	r0, [sp, #0]
 8014bec:	4639      	mov	r1, r7
 8014bee:	4620      	mov	r0, r4
 8014bf0:	f000 fbee 	bl	80153d0 <__mdiff>
 8014bf4:	68c3      	ldr	r3, [r0, #12]
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	bb03      	cbnz	r3, 8014c3c <_dtoa_r+0x9fc>
 8014bfa:	4601      	mov	r1, r0
 8014bfc:	9008      	str	r0, [sp, #32]
 8014bfe:	9804      	ldr	r0, [sp, #16]
 8014c00:	f000 fbcc 	bl	801539c <__mcmp>
 8014c04:	9a08      	ldr	r2, [sp, #32]
 8014c06:	4603      	mov	r3, r0
 8014c08:	4611      	mov	r1, r2
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	9308      	str	r3, [sp, #32]
 8014c0e:	f000 f9e3 	bl	8014fd8 <_Bfree>
 8014c12:	9b08      	ldr	r3, [sp, #32]
 8014c14:	b9a3      	cbnz	r3, 8014c40 <_dtoa_r+0xa00>
 8014c16:	9a06      	ldr	r2, [sp, #24]
 8014c18:	b992      	cbnz	r2, 8014c40 <_dtoa_r+0xa00>
 8014c1a:	9a07      	ldr	r2, [sp, #28]
 8014c1c:	b982      	cbnz	r2, 8014c40 <_dtoa_r+0xa00>
 8014c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c22:	d029      	beq.n	8014c78 <_dtoa_r+0xa38>
 8014c24:	9b00      	ldr	r3, [sp, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	dd01      	ble.n	8014c2e <_dtoa_r+0x9ee>
 8014c2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014c2e:	9b05      	ldr	r3, [sp, #20]
 8014c30:	1c5d      	adds	r5, r3, #1
 8014c32:	f883 8000 	strb.w	r8, [r3]
 8014c36:	e782      	b.n	8014b3e <_dtoa_r+0x8fe>
 8014c38:	4630      	mov	r0, r6
 8014c3a:	e7c2      	b.n	8014bc2 <_dtoa_r+0x982>
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e7e3      	b.n	8014c08 <_dtoa_r+0x9c8>
 8014c40:	9a00      	ldr	r2, [sp, #0]
 8014c42:	2a00      	cmp	r2, #0
 8014c44:	db04      	blt.n	8014c50 <_dtoa_r+0xa10>
 8014c46:	d125      	bne.n	8014c94 <_dtoa_r+0xa54>
 8014c48:	9a06      	ldr	r2, [sp, #24]
 8014c4a:	bb1a      	cbnz	r2, 8014c94 <_dtoa_r+0xa54>
 8014c4c:	9a07      	ldr	r2, [sp, #28]
 8014c4e:	bb0a      	cbnz	r2, 8014c94 <_dtoa_r+0xa54>
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	ddec      	ble.n	8014c2e <_dtoa_r+0x9ee>
 8014c54:	2201      	movs	r2, #1
 8014c56:	9904      	ldr	r1, [sp, #16]
 8014c58:	4620      	mov	r0, r4
 8014c5a:	f000 fb4b 	bl	80152f4 <__lshift>
 8014c5e:	4639      	mov	r1, r7
 8014c60:	9004      	str	r0, [sp, #16]
 8014c62:	f000 fb9b 	bl	801539c <__mcmp>
 8014c66:	2800      	cmp	r0, #0
 8014c68:	dc03      	bgt.n	8014c72 <_dtoa_r+0xa32>
 8014c6a:	d1e0      	bne.n	8014c2e <_dtoa_r+0x9ee>
 8014c6c:	f018 0f01 	tst.w	r8, #1
 8014c70:	d0dd      	beq.n	8014c2e <_dtoa_r+0x9ee>
 8014c72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c76:	d1d8      	bne.n	8014c2a <_dtoa_r+0x9ea>
 8014c78:	9b05      	ldr	r3, [sp, #20]
 8014c7a:	9a05      	ldr	r2, [sp, #20]
 8014c7c:	1c5d      	adds	r5, r3, #1
 8014c7e:	2339      	movs	r3, #57	; 0x39
 8014c80:	7013      	strb	r3, [r2, #0]
 8014c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014c86:	2b39      	cmp	r3, #57	; 0x39
 8014c88:	f105 32ff 	add.w	r2, r5, #4294967295
 8014c8c:	d04f      	beq.n	8014d2e <_dtoa_r+0xaee>
 8014c8e:	3301      	adds	r3, #1
 8014c90:	7013      	strb	r3, [r2, #0]
 8014c92:	e754      	b.n	8014b3e <_dtoa_r+0x8fe>
 8014c94:	9a05      	ldr	r2, [sp, #20]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f102 0501 	add.w	r5, r2, #1
 8014c9c:	dd06      	ble.n	8014cac <_dtoa_r+0xa6c>
 8014c9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014ca2:	d0e9      	beq.n	8014c78 <_dtoa_r+0xa38>
 8014ca4:	f108 0801 	add.w	r8, r8, #1
 8014ca8:	9b05      	ldr	r3, [sp, #20]
 8014caa:	e7c2      	b.n	8014c32 <_dtoa_r+0x9f2>
 8014cac:	9a02      	ldr	r2, [sp, #8]
 8014cae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014cb2:	eba5 030b 	sub.w	r3, r5, fp
 8014cb6:	4293      	cmp	r3, r2
 8014cb8:	d021      	beq.n	8014cfe <_dtoa_r+0xabe>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	9904      	ldr	r1, [sp, #16]
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f000 f9a0 	bl	8015006 <__multadd>
 8014cc6:	45b1      	cmp	r9, r6
 8014cc8:	9004      	str	r0, [sp, #16]
 8014cca:	f04f 0300 	mov.w	r3, #0
 8014cce:	f04f 020a 	mov.w	r2, #10
 8014cd2:	4649      	mov	r1, r9
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	d105      	bne.n	8014ce4 <_dtoa_r+0xaa4>
 8014cd8:	f000 f995 	bl	8015006 <__multadd>
 8014cdc:	4681      	mov	r9, r0
 8014cde:	4606      	mov	r6, r0
 8014ce0:	9505      	str	r5, [sp, #20]
 8014ce2:	e776      	b.n	8014bd2 <_dtoa_r+0x992>
 8014ce4:	f000 f98f 	bl	8015006 <__multadd>
 8014ce8:	4631      	mov	r1, r6
 8014cea:	4681      	mov	r9, r0
 8014cec:	2300      	movs	r3, #0
 8014cee:	220a      	movs	r2, #10
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f000 f988 	bl	8015006 <__multadd>
 8014cf6:	4606      	mov	r6, r0
 8014cf8:	e7f2      	b.n	8014ce0 <_dtoa_r+0xaa0>
 8014cfa:	f04f 0900 	mov.w	r9, #0
 8014cfe:	2201      	movs	r2, #1
 8014d00:	9904      	ldr	r1, [sp, #16]
 8014d02:	4620      	mov	r0, r4
 8014d04:	f000 faf6 	bl	80152f4 <__lshift>
 8014d08:	4639      	mov	r1, r7
 8014d0a:	9004      	str	r0, [sp, #16]
 8014d0c:	f000 fb46 	bl	801539c <__mcmp>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	dcb6      	bgt.n	8014c82 <_dtoa_r+0xa42>
 8014d14:	d102      	bne.n	8014d1c <_dtoa_r+0xadc>
 8014d16:	f018 0f01 	tst.w	r8, #1
 8014d1a:	d1b2      	bne.n	8014c82 <_dtoa_r+0xa42>
 8014d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d20:	2b30      	cmp	r3, #48	; 0x30
 8014d22:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d26:	f47f af0a 	bne.w	8014b3e <_dtoa_r+0x8fe>
 8014d2a:	4615      	mov	r5, r2
 8014d2c:	e7f6      	b.n	8014d1c <_dtoa_r+0xadc>
 8014d2e:	4593      	cmp	fp, r2
 8014d30:	d105      	bne.n	8014d3e <_dtoa_r+0xafe>
 8014d32:	2331      	movs	r3, #49	; 0x31
 8014d34:	f10a 0a01 	add.w	sl, sl, #1
 8014d38:	f88b 3000 	strb.w	r3, [fp]
 8014d3c:	e6ff      	b.n	8014b3e <_dtoa_r+0x8fe>
 8014d3e:	4615      	mov	r5, r2
 8014d40:	e79f      	b.n	8014c82 <_dtoa_r+0xa42>
 8014d42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014da8 <_dtoa_r+0xb68>
 8014d46:	e007      	b.n	8014d58 <_dtoa_r+0xb18>
 8014d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014dac <_dtoa_r+0xb6c>
 8014d4e:	b11b      	cbz	r3, 8014d58 <_dtoa_r+0xb18>
 8014d50:	f10b 0308 	add.w	r3, fp, #8
 8014d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d56:	6013      	str	r3, [r2, #0]
 8014d58:	4658      	mov	r0, fp
 8014d5a:	b017      	add	sp, #92	; 0x5c
 8014d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d60:	9b06      	ldr	r3, [sp, #24]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	f77f ae35 	ble.w	80149d2 <_dtoa_r+0x792>
 8014d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d6a:	9307      	str	r3, [sp, #28]
 8014d6c:	e649      	b.n	8014a02 <_dtoa_r+0x7c2>
 8014d6e:	9b02      	ldr	r3, [sp, #8]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	dc03      	bgt.n	8014d7c <_dtoa_r+0xb3c>
 8014d74:	9b06      	ldr	r3, [sp, #24]
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	f73f aecc 	bgt.w	8014b14 <_dtoa_r+0x8d4>
 8014d7c:	465d      	mov	r5, fp
 8014d7e:	4639      	mov	r1, r7
 8014d80:	9804      	ldr	r0, [sp, #16]
 8014d82:	f7ff f9d1 	bl	8014128 <quorem>
 8014d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014d8a:	f805 8b01 	strb.w	r8, [r5], #1
 8014d8e:	9a02      	ldr	r2, [sp, #8]
 8014d90:	eba5 030b 	sub.w	r3, r5, fp
 8014d94:	429a      	cmp	r2, r3
 8014d96:	ddb0      	ble.n	8014cfa <_dtoa_r+0xaba>
 8014d98:	2300      	movs	r3, #0
 8014d9a:	220a      	movs	r2, #10
 8014d9c:	9904      	ldr	r1, [sp, #16]
 8014d9e:	4620      	mov	r0, r4
 8014da0:	f000 f931 	bl	8015006 <__multadd>
 8014da4:	9004      	str	r0, [sp, #16]
 8014da6:	e7ea      	b.n	8014d7e <_dtoa_r+0xb3e>
 8014da8:	080162e8 	.word	0x080162e8
 8014dac:	0801630c 	.word	0x0801630c

08014db0 <std>:
 8014db0:	2300      	movs	r3, #0
 8014db2:	b510      	push	{r4, lr}
 8014db4:	4604      	mov	r4, r0
 8014db6:	e9c0 3300 	strd	r3, r3, [r0]
 8014dba:	6083      	str	r3, [r0, #8]
 8014dbc:	8181      	strh	r1, [r0, #12]
 8014dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8014dc0:	81c2      	strh	r2, [r0, #14]
 8014dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dc6:	6183      	str	r3, [r0, #24]
 8014dc8:	4619      	mov	r1, r3
 8014dca:	2208      	movs	r2, #8
 8014dcc:	305c      	adds	r0, #92	; 0x5c
 8014dce:	f7fe fd0e 	bl	80137ee <memset>
 8014dd2:	4b05      	ldr	r3, [pc, #20]	; (8014de8 <std+0x38>)
 8014dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8014dd6:	4b05      	ldr	r3, [pc, #20]	; (8014dec <std+0x3c>)
 8014dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8014dda:	4b05      	ldr	r3, [pc, #20]	; (8014df0 <std+0x40>)
 8014ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014dde:	4b05      	ldr	r3, [pc, #20]	; (8014df4 <std+0x44>)
 8014de0:	6224      	str	r4, [r4, #32]
 8014de2:	6323      	str	r3, [r4, #48]	; 0x30
 8014de4:	bd10      	pop	{r4, pc}
 8014de6:	bf00      	nop
 8014de8:	08015bd9 	.word	0x08015bd9
 8014dec:	08015bfb 	.word	0x08015bfb
 8014df0:	08015c33 	.word	0x08015c33
 8014df4:	08015c57 	.word	0x08015c57

08014df8 <_cleanup_r>:
 8014df8:	4901      	ldr	r1, [pc, #4]	; (8014e00 <_cleanup_r+0x8>)
 8014dfa:	f000 b885 	b.w	8014f08 <_fwalk_reent>
 8014dfe:	bf00      	nop
 8014e00:	08015f31 	.word	0x08015f31

08014e04 <__sfmoreglue>:
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	1e4a      	subs	r2, r1, #1
 8014e08:	2568      	movs	r5, #104	; 0x68
 8014e0a:	4355      	muls	r5, r2
 8014e0c:	460e      	mov	r6, r1
 8014e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e12:	f000 fbe5 	bl	80155e0 <_malloc_r>
 8014e16:	4604      	mov	r4, r0
 8014e18:	b140      	cbz	r0, 8014e2c <__sfmoreglue+0x28>
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8014e20:	300c      	adds	r0, #12
 8014e22:	60a0      	str	r0, [r4, #8]
 8014e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e28:	f7fe fce1 	bl	80137ee <memset>
 8014e2c:	4620      	mov	r0, r4
 8014e2e:	bd70      	pop	{r4, r5, r6, pc}

08014e30 <__sinit>:
 8014e30:	6983      	ldr	r3, [r0, #24]
 8014e32:	b510      	push	{r4, lr}
 8014e34:	4604      	mov	r4, r0
 8014e36:	bb33      	cbnz	r3, 8014e86 <__sinit+0x56>
 8014e38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014e3c:	6503      	str	r3, [r0, #80]	; 0x50
 8014e3e:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <__sinit+0x58>)
 8014e40:	4a12      	ldr	r2, [pc, #72]	; (8014e8c <__sinit+0x5c>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	6282      	str	r2, [r0, #40]	; 0x28
 8014e46:	4298      	cmp	r0, r3
 8014e48:	bf04      	itt	eq
 8014e4a:	2301      	moveq	r3, #1
 8014e4c:	6183      	streq	r3, [r0, #24]
 8014e4e:	f000 f81f 	bl	8014e90 <__sfp>
 8014e52:	6060      	str	r0, [r4, #4]
 8014e54:	4620      	mov	r0, r4
 8014e56:	f000 f81b 	bl	8014e90 <__sfp>
 8014e5a:	60a0      	str	r0, [r4, #8]
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f000 f817 	bl	8014e90 <__sfp>
 8014e62:	2200      	movs	r2, #0
 8014e64:	60e0      	str	r0, [r4, #12]
 8014e66:	2104      	movs	r1, #4
 8014e68:	6860      	ldr	r0, [r4, #4]
 8014e6a:	f7ff ffa1 	bl	8014db0 <std>
 8014e6e:	2201      	movs	r2, #1
 8014e70:	2109      	movs	r1, #9
 8014e72:	68a0      	ldr	r0, [r4, #8]
 8014e74:	f7ff ff9c 	bl	8014db0 <std>
 8014e78:	2202      	movs	r2, #2
 8014e7a:	2112      	movs	r1, #18
 8014e7c:	68e0      	ldr	r0, [r4, #12]
 8014e7e:	f7ff ff97 	bl	8014db0 <std>
 8014e82:	2301      	movs	r3, #1
 8014e84:	61a3      	str	r3, [r4, #24]
 8014e86:	bd10      	pop	{r4, pc}
 8014e88:	080162d4 	.word	0x080162d4
 8014e8c:	08014df9 	.word	0x08014df9

08014e90 <__sfp>:
 8014e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e92:	4b1b      	ldr	r3, [pc, #108]	; (8014f00 <__sfp+0x70>)
 8014e94:	681e      	ldr	r6, [r3, #0]
 8014e96:	69b3      	ldr	r3, [r6, #24]
 8014e98:	4607      	mov	r7, r0
 8014e9a:	b913      	cbnz	r3, 8014ea2 <__sfp+0x12>
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f7ff ffc7 	bl	8014e30 <__sinit>
 8014ea2:	3648      	adds	r6, #72	; 0x48
 8014ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	d503      	bpl.n	8014eb4 <__sfp+0x24>
 8014eac:	6833      	ldr	r3, [r6, #0]
 8014eae:	b133      	cbz	r3, 8014ebe <__sfp+0x2e>
 8014eb0:	6836      	ldr	r6, [r6, #0]
 8014eb2:	e7f7      	b.n	8014ea4 <__sfp+0x14>
 8014eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014eb8:	b16d      	cbz	r5, 8014ed6 <__sfp+0x46>
 8014eba:	3468      	adds	r4, #104	; 0x68
 8014ebc:	e7f4      	b.n	8014ea8 <__sfp+0x18>
 8014ebe:	2104      	movs	r1, #4
 8014ec0:	4638      	mov	r0, r7
 8014ec2:	f7ff ff9f 	bl	8014e04 <__sfmoreglue>
 8014ec6:	6030      	str	r0, [r6, #0]
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d1f1      	bne.n	8014eb0 <__sfp+0x20>
 8014ecc:	230c      	movs	r3, #12
 8014ece:	603b      	str	r3, [r7, #0]
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ed6:	4b0b      	ldr	r3, [pc, #44]	; (8014f04 <__sfp+0x74>)
 8014ed8:	6665      	str	r5, [r4, #100]	; 0x64
 8014eda:	e9c4 5500 	strd	r5, r5, [r4]
 8014ede:	60a5      	str	r5, [r4, #8]
 8014ee0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014ee4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014ee8:	2208      	movs	r2, #8
 8014eea:	4629      	mov	r1, r5
 8014eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014ef0:	f7fe fc7d 	bl	80137ee <memset>
 8014ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014efc:	e7e9      	b.n	8014ed2 <__sfp+0x42>
 8014efe:	bf00      	nop
 8014f00:	080162d4 	.word	0x080162d4
 8014f04:	ffff0001 	.word	0xffff0001

08014f08 <_fwalk_reent>:
 8014f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f0c:	4680      	mov	r8, r0
 8014f0e:	4689      	mov	r9, r1
 8014f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f14:	2600      	movs	r6, #0
 8014f16:	b914      	cbnz	r4, 8014f1e <_fwalk_reent+0x16>
 8014f18:	4630      	mov	r0, r6
 8014f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014f22:	3f01      	subs	r7, #1
 8014f24:	d501      	bpl.n	8014f2a <_fwalk_reent+0x22>
 8014f26:	6824      	ldr	r4, [r4, #0]
 8014f28:	e7f5      	b.n	8014f16 <_fwalk_reent+0xe>
 8014f2a:	89ab      	ldrh	r3, [r5, #12]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d907      	bls.n	8014f40 <_fwalk_reent+0x38>
 8014f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f34:	3301      	adds	r3, #1
 8014f36:	d003      	beq.n	8014f40 <_fwalk_reent+0x38>
 8014f38:	4629      	mov	r1, r5
 8014f3a:	4640      	mov	r0, r8
 8014f3c:	47c8      	blx	r9
 8014f3e:	4306      	orrs	r6, r0
 8014f40:	3568      	adds	r5, #104	; 0x68
 8014f42:	e7ee      	b.n	8014f22 <_fwalk_reent+0x1a>

08014f44 <_localeconv_r>:
 8014f44:	4b04      	ldr	r3, [pc, #16]	; (8014f58 <_localeconv_r+0x14>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	6a18      	ldr	r0, [r3, #32]
 8014f4a:	4b04      	ldr	r3, [pc, #16]	; (8014f5c <_localeconv_r+0x18>)
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	bf08      	it	eq
 8014f50:	4618      	moveq	r0, r3
 8014f52:	30f0      	adds	r0, #240	; 0xf0
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	20000018 	.word	0x20000018
 8014f5c:	2000007c 	.word	0x2000007c

08014f60 <malloc>:
 8014f60:	4b02      	ldr	r3, [pc, #8]	; (8014f6c <malloc+0xc>)
 8014f62:	4601      	mov	r1, r0
 8014f64:	6818      	ldr	r0, [r3, #0]
 8014f66:	f000 bb3b 	b.w	80155e0 <_malloc_r>
 8014f6a:	bf00      	nop
 8014f6c:	20000018 	.word	0x20000018

08014f70 <_Balloc>:
 8014f70:	b570      	push	{r4, r5, r6, lr}
 8014f72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014f74:	4604      	mov	r4, r0
 8014f76:	460e      	mov	r6, r1
 8014f78:	b93d      	cbnz	r5, 8014f8a <_Balloc+0x1a>
 8014f7a:	2010      	movs	r0, #16
 8014f7c:	f7ff fff0 	bl	8014f60 <malloc>
 8014f80:	6260      	str	r0, [r4, #36]	; 0x24
 8014f82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014f86:	6005      	str	r5, [r0, #0]
 8014f88:	60c5      	str	r5, [r0, #12]
 8014f8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014f8c:	68eb      	ldr	r3, [r5, #12]
 8014f8e:	b183      	cbz	r3, 8014fb2 <_Balloc+0x42>
 8014f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014f98:	b9b8      	cbnz	r0, 8014fca <_Balloc+0x5a>
 8014f9a:	2101      	movs	r1, #1
 8014f9c:	fa01 f506 	lsl.w	r5, r1, r6
 8014fa0:	1d6a      	adds	r2, r5, #5
 8014fa2:	0092      	lsls	r2, r2, #2
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f000 fabf 	bl	8015528 <_calloc_r>
 8014faa:	b160      	cbz	r0, 8014fc6 <_Balloc+0x56>
 8014fac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014fb0:	e00e      	b.n	8014fd0 <_Balloc+0x60>
 8014fb2:	2221      	movs	r2, #33	; 0x21
 8014fb4:	2104      	movs	r1, #4
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f000 fab6 	bl	8015528 <_calloc_r>
 8014fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fbe:	60e8      	str	r0, [r5, #12]
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d1e4      	bne.n	8014f90 <_Balloc+0x20>
 8014fc6:	2000      	movs	r0, #0
 8014fc8:	bd70      	pop	{r4, r5, r6, pc}
 8014fca:	6802      	ldr	r2, [r0, #0]
 8014fcc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014fd6:	e7f7      	b.n	8014fc8 <_Balloc+0x58>

08014fd8 <_Bfree>:
 8014fd8:	b570      	push	{r4, r5, r6, lr}
 8014fda:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014fdc:	4606      	mov	r6, r0
 8014fde:	460d      	mov	r5, r1
 8014fe0:	b93c      	cbnz	r4, 8014ff2 <_Bfree+0x1a>
 8014fe2:	2010      	movs	r0, #16
 8014fe4:	f7ff ffbc 	bl	8014f60 <malloc>
 8014fe8:	6270      	str	r0, [r6, #36]	; 0x24
 8014fea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014fee:	6004      	str	r4, [r0, #0]
 8014ff0:	60c4      	str	r4, [r0, #12]
 8014ff2:	b13d      	cbz	r5, 8015004 <_Bfree+0x2c>
 8014ff4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014ff6:	686a      	ldr	r2, [r5, #4]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014ffe:	6029      	str	r1, [r5, #0]
 8015000:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015004:	bd70      	pop	{r4, r5, r6, pc}

08015006 <__multadd>:
 8015006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801500a:	690d      	ldr	r5, [r1, #16]
 801500c:	461f      	mov	r7, r3
 801500e:	4606      	mov	r6, r0
 8015010:	460c      	mov	r4, r1
 8015012:	f101 0c14 	add.w	ip, r1, #20
 8015016:	2300      	movs	r3, #0
 8015018:	f8dc 0000 	ldr.w	r0, [ip]
 801501c:	b281      	uxth	r1, r0
 801501e:	fb02 7101 	mla	r1, r2, r1, r7
 8015022:	0c0f      	lsrs	r7, r1, #16
 8015024:	0c00      	lsrs	r0, r0, #16
 8015026:	fb02 7000 	mla	r0, r2, r0, r7
 801502a:	b289      	uxth	r1, r1
 801502c:	3301      	adds	r3, #1
 801502e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015032:	429d      	cmp	r5, r3
 8015034:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015038:	f84c 1b04 	str.w	r1, [ip], #4
 801503c:	dcec      	bgt.n	8015018 <__multadd+0x12>
 801503e:	b1d7      	cbz	r7, 8015076 <__multadd+0x70>
 8015040:	68a3      	ldr	r3, [r4, #8]
 8015042:	42ab      	cmp	r3, r5
 8015044:	dc12      	bgt.n	801506c <__multadd+0x66>
 8015046:	6861      	ldr	r1, [r4, #4]
 8015048:	4630      	mov	r0, r6
 801504a:	3101      	adds	r1, #1
 801504c:	f7ff ff90 	bl	8014f70 <_Balloc>
 8015050:	6922      	ldr	r2, [r4, #16]
 8015052:	3202      	adds	r2, #2
 8015054:	f104 010c 	add.w	r1, r4, #12
 8015058:	4680      	mov	r8, r0
 801505a:	0092      	lsls	r2, r2, #2
 801505c:	300c      	adds	r0, #12
 801505e:	f7fe fbbb 	bl	80137d8 <memcpy>
 8015062:	4621      	mov	r1, r4
 8015064:	4630      	mov	r0, r6
 8015066:	f7ff ffb7 	bl	8014fd8 <_Bfree>
 801506a:	4644      	mov	r4, r8
 801506c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015070:	3501      	adds	r5, #1
 8015072:	615f      	str	r7, [r3, #20]
 8015074:	6125      	str	r5, [r4, #16]
 8015076:	4620      	mov	r0, r4
 8015078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801507c <__hi0bits>:
 801507c:	0c02      	lsrs	r2, r0, #16
 801507e:	0412      	lsls	r2, r2, #16
 8015080:	4603      	mov	r3, r0
 8015082:	b9b2      	cbnz	r2, 80150b2 <__hi0bits+0x36>
 8015084:	0403      	lsls	r3, r0, #16
 8015086:	2010      	movs	r0, #16
 8015088:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801508c:	bf04      	itt	eq
 801508e:	021b      	lsleq	r3, r3, #8
 8015090:	3008      	addeq	r0, #8
 8015092:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015096:	bf04      	itt	eq
 8015098:	011b      	lsleq	r3, r3, #4
 801509a:	3004      	addeq	r0, #4
 801509c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80150a0:	bf04      	itt	eq
 80150a2:	009b      	lsleq	r3, r3, #2
 80150a4:	3002      	addeq	r0, #2
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	db06      	blt.n	80150b8 <__hi0bits+0x3c>
 80150aa:	005b      	lsls	r3, r3, #1
 80150ac:	d503      	bpl.n	80150b6 <__hi0bits+0x3a>
 80150ae:	3001      	adds	r0, #1
 80150b0:	4770      	bx	lr
 80150b2:	2000      	movs	r0, #0
 80150b4:	e7e8      	b.n	8015088 <__hi0bits+0xc>
 80150b6:	2020      	movs	r0, #32
 80150b8:	4770      	bx	lr

080150ba <__lo0bits>:
 80150ba:	6803      	ldr	r3, [r0, #0]
 80150bc:	f013 0207 	ands.w	r2, r3, #7
 80150c0:	4601      	mov	r1, r0
 80150c2:	d00b      	beq.n	80150dc <__lo0bits+0x22>
 80150c4:	07da      	lsls	r2, r3, #31
 80150c6:	d423      	bmi.n	8015110 <__lo0bits+0x56>
 80150c8:	0798      	lsls	r0, r3, #30
 80150ca:	bf49      	itett	mi
 80150cc:	085b      	lsrmi	r3, r3, #1
 80150ce:	089b      	lsrpl	r3, r3, #2
 80150d0:	2001      	movmi	r0, #1
 80150d2:	600b      	strmi	r3, [r1, #0]
 80150d4:	bf5c      	itt	pl
 80150d6:	600b      	strpl	r3, [r1, #0]
 80150d8:	2002      	movpl	r0, #2
 80150da:	4770      	bx	lr
 80150dc:	b298      	uxth	r0, r3
 80150de:	b9a8      	cbnz	r0, 801510c <__lo0bits+0x52>
 80150e0:	0c1b      	lsrs	r3, r3, #16
 80150e2:	2010      	movs	r0, #16
 80150e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80150e8:	bf04      	itt	eq
 80150ea:	0a1b      	lsreq	r3, r3, #8
 80150ec:	3008      	addeq	r0, #8
 80150ee:	071a      	lsls	r2, r3, #28
 80150f0:	bf04      	itt	eq
 80150f2:	091b      	lsreq	r3, r3, #4
 80150f4:	3004      	addeq	r0, #4
 80150f6:	079a      	lsls	r2, r3, #30
 80150f8:	bf04      	itt	eq
 80150fa:	089b      	lsreq	r3, r3, #2
 80150fc:	3002      	addeq	r0, #2
 80150fe:	07da      	lsls	r2, r3, #31
 8015100:	d402      	bmi.n	8015108 <__lo0bits+0x4e>
 8015102:	085b      	lsrs	r3, r3, #1
 8015104:	d006      	beq.n	8015114 <__lo0bits+0x5a>
 8015106:	3001      	adds	r0, #1
 8015108:	600b      	str	r3, [r1, #0]
 801510a:	4770      	bx	lr
 801510c:	4610      	mov	r0, r2
 801510e:	e7e9      	b.n	80150e4 <__lo0bits+0x2a>
 8015110:	2000      	movs	r0, #0
 8015112:	4770      	bx	lr
 8015114:	2020      	movs	r0, #32
 8015116:	4770      	bx	lr

08015118 <__i2b>:
 8015118:	b510      	push	{r4, lr}
 801511a:	460c      	mov	r4, r1
 801511c:	2101      	movs	r1, #1
 801511e:	f7ff ff27 	bl	8014f70 <_Balloc>
 8015122:	2201      	movs	r2, #1
 8015124:	6144      	str	r4, [r0, #20]
 8015126:	6102      	str	r2, [r0, #16]
 8015128:	bd10      	pop	{r4, pc}

0801512a <__multiply>:
 801512a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801512e:	4614      	mov	r4, r2
 8015130:	690a      	ldr	r2, [r1, #16]
 8015132:	6923      	ldr	r3, [r4, #16]
 8015134:	429a      	cmp	r2, r3
 8015136:	bfb8      	it	lt
 8015138:	460b      	movlt	r3, r1
 801513a:	4688      	mov	r8, r1
 801513c:	bfbc      	itt	lt
 801513e:	46a0      	movlt	r8, r4
 8015140:	461c      	movlt	r4, r3
 8015142:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015146:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801514a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801514e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015152:	eb07 0609 	add.w	r6, r7, r9
 8015156:	42b3      	cmp	r3, r6
 8015158:	bfb8      	it	lt
 801515a:	3101      	addlt	r1, #1
 801515c:	f7ff ff08 	bl	8014f70 <_Balloc>
 8015160:	f100 0514 	add.w	r5, r0, #20
 8015164:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015168:	462b      	mov	r3, r5
 801516a:	2200      	movs	r2, #0
 801516c:	4573      	cmp	r3, lr
 801516e:	d316      	bcc.n	801519e <__multiply+0x74>
 8015170:	f104 0214 	add.w	r2, r4, #20
 8015174:	f108 0114 	add.w	r1, r8, #20
 8015178:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801517c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	9b00      	ldr	r3, [sp, #0]
 8015184:	9201      	str	r2, [sp, #4]
 8015186:	4293      	cmp	r3, r2
 8015188:	d80c      	bhi.n	80151a4 <__multiply+0x7a>
 801518a:	2e00      	cmp	r6, #0
 801518c:	dd03      	ble.n	8015196 <__multiply+0x6c>
 801518e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015192:	2b00      	cmp	r3, #0
 8015194:	d05d      	beq.n	8015252 <__multiply+0x128>
 8015196:	6106      	str	r6, [r0, #16]
 8015198:	b003      	add	sp, #12
 801519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801519e:	f843 2b04 	str.w	r2, [r3], #4
 80151a2:	e7e3      	b.n	801516c <__multiply+0x42>
 80151a4:	f8b2 b000 	ldrh.w	fp, [r2]
 80151a8:	f1bb 0f00 	cmp.w	fp, #0
 80151ac:	d023      	beq.n	80151f6 <__multiply+0xcc>
 80151ae:	4689      	mov	r9, r1
 80151b0:	46ac      	mov	ip, r5
 80151b2:	f04f 0800 	mov.w	r8, #0
 80151b6:	f859 4b04 	ldr.w	r4, [r9], #4
 80151ba:	f8dc a000 	ldr.w	sl, [ip]
 80151be:	b2a3      	uxth	r3, r4
 80151c0:	fa1f fa8a 	uxth.w	sl, sl
 80151c4:	fb0b a303 	mla	r3, fp, r3, sl
 80151c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80151cc:	f8dc 4000 	ldr.w	r4, [ip]
 80151d0:	4443      	add	r3, r8
 80151d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80151d6:	fb0b 840a 	mla	r4, fp, sl, r8
 80151da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80151de:	46e2      	mov	sl, ip
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80151e6:	454f      	cmp	r7, r9
 80151e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80151ec:	f84a 3b04 	str.w	r3, [sl], #4
 80151f0:	d82b      	bhi.n	801524a <__multiply+0x120>
 80151f2:	f8cc 8004 	str.w	r8, [ip, #4]
 80151f6:	9b01      	ldr	r3, [sp, #4]
 80151f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80151fc:	3204      	adds	r2, #4
 80151fe:	f1ba 0f00 	cmp.w	sl, #0
 8015202:	d020      	beq.n	8015246 <__multiply+0x11c>
 8015204:	682b      	ldr	r3, [r5, #0]
 8015206:	4689      	mov	r9, r1
 8015208:	46a8      	mov	r8, r5
 801520a:	f04f 0b00 	mov.w	fp, #0
 801520e:	f8b9 c000 	ldrh.w	ip, [r9]
 8015212:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015216:	fb0a 440c 	mla	r4, sl, ip, r4
 801521a:	445c      	add	r4, fp
 801521c:	46c4      	mov	ip, r8
 801521e:	b29b      	uxth	r3, r3
 8015220:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015224:	f84c 3b04 	str.w	r3, [ip], #4
 8015228:	f859 3b04 	ldr.w	r3, [r9], #4
 801522c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015230:	0c1b      	lsrs	r3, r3, #16
 8015232:	fb0a b303 	mla	r3, sl, r3, fp
 8015236:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801523a:	454f      	cmp	r7, r9
 801523c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015240:	d805      	bhi.n	801524e <__multiply+0x124>
 8015242:	f8c8 3004 	str.w	r3, [r8, #4]
 8015246:	3504      	adds	r5, #4
 8015248:	e79b      	b.n	8015182 <__multiply+0x58>
 801524a:	46d4      	mov	ip, sl
 801524c:	e7b3      	b.n	80151b6 <__multiply+0x8c>
 801524e:	46e0      	mov	r8, ip
 8015250:	e7dd      	b.n	801520e <__multiply+0xe4>
 8015252:	3e01      	subs	r6, #1
 8015254:	e799      	b.n	801518a <__multiply+0x60>
	...

08015258 <__pow5mult>:
 8015258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801525c:	4615      	mov	r5, r2
 801525e:	f012 0203 	ands.w	r2, r2, #3
 8015262:	4606      	mov	r6, r0
 8015264:	460f      	mov	r7, r1
 8015266:	d007      	beq.n	8015278 <__pow5mult+0x20>
 8015268:	3a01      	subs	r2, #1
 801526a:	4c21      	ldr	r4, [pc, #132]	; (80152f0 <__pow5mult+0x98>)
 801526c:	2300      	movs	r3, #0
 801526e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015272:	f7ff fec8 	bl	8015006 <__multadd>
 8015276:	4607      	mov	r7, r0
 8015278:	10ad      	asrs	r5, r5, #2
 801527a:	d035      	beq.n	80152e8 <__pow5mult+0x90>
 801527c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801527e:	b93c      	cbnz	r4, 8015290 <__pow5mult+0x38>
 8015280:	2010      	movs	r0, #16
 8015282:	f7ff fe6d 	bl	8014f60 <malloc>
 8015286:	6270      	str	r0, [r6, #36]	; 0x24
 8015288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801528c:	6004      	str	r4, [r0, #0]
 801528e:	60c4      	str	r4, [r0, #12]
 8015290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015298:	b94c      	cbnz	r4, 80152ae <__pow5mult+0x56>
 801529a:	f240 2171 	movw	r1, #625	; 0x271
 801529e:	4630      	mov	r0, r6
 80152a0:	f7ff ff3a 	bl	8015118 <__i2b>
 80152a4:	2300      	movs	r3, #0
 80152a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80152aa:	4604      	mov	r4, r0
 80152ac:	6003      	str	r3, [r0, #0]
 80152ae:	f04f 0800 	mov.w	r8, #0
 80152b2:	07eb      	lsls	r3, r5, #31
 80152b4:	d50a      	bpl.n	80152cc <__pow5mult+0x74>
 80152b6:	4639      	mov	r1, r7
 80152b8:	4622      	mov	r2, r4
 80152ba:	4630      	mov	r0, r6
 80152bc:	f7ff ff35 	bl	801512a <__multiply>
 80152c0:	4639      	mov	r1, r7
 80152c2:	4681      	mov	r9, r0
 80152c4:	4630      	mov	r0, r6
 80152c6:	f7ff fe87 	bl	8014fd8 <_Bfree>
 80152ca:	464f      	mov	r7, r9
 80152cc:	106d      	asrs	r5, r5, #1
 80152ce:	d00b      	beq.n	80152e8 <__pow5mult+0x90>
 80152d0:	6820      	ldr	r0, [r4, #0]
 80152d2:	b938      	cbnz	r0, 80152e4 <__pow5mult+0x8c>
 80152d4:	4622      	mov	r2, r4
 80152d6:	4621      	mov	r1, r4
 80152d8:	4630      	mov	r0, r6
 80152da:	f7ff ff26 	bl	801512a <__multiply>
 80152de:	6020      	str	r0, [r4, #0]
 80152e0:	f8c0 8000 	str.w	r8, [r0]
 80152e4:	4604      	mov	r4, r0
 80152e6:	e7e4      	b.n	80152b2 <__pow5mult+0x5a>
 80152e8:	4638      	mov	r0, r7
 80152ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152ee:	bf00      	nop
 80152f0:	08016470 	.word	0x08016470

080152f4 <__lshift>:
 80152f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f8:	460c      	mov	r4, r1
 80152fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80152fe:	6923      	ldr	r3, [r4, #16]
 8015300:	6849      	ldr	r1, [r1, #4]
 8015302:	eb0a 0903 	add.w	r9, sl, r3
 8015306:	68a3      	ldr	r3, [r4, #8]
 8015308:	4607      	mov	r7, r0
 801530a:	4616      	mov	r6, r2
 801530c:	f109 0501 	add.w	r5, r9, #1
 8015310:	42ab      	cmp	r3, r5
 8015312:	db32      	blt.n	801537a <__lshift+0x86>
 8015314:	4638      	mov	r0, r7
 8015316:	f7ff fe2b 	bl	8014f70 <_Balloc>
 801531a:	2300      	movs	r3, #0
 801531c:	4680      	mov	r8, r0
 801531e:	f100 0114 	add.w	r1, r0, #20
 8015322:	461a      	mov	r2, r3
 8015324:	4553      	cmp	r3, sl
 8015326:	db2b      	blt.n	8015380 <__lshift+0x8c>
 8015328:	6920      	ldr	r0, [r4, #16]
 801532a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801532e:	f104 0314 	add.w	r3, r4, #20
 8015332:	f016 021f 	ands.w	r2, r6, #31
 8015336:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801533a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801533e:	d025      	beq.n	801538c <__lshift+0x98>
 8015340:	f1c2 0e20 	rsb	lr, r2, #32
 8015344:	2000      	movs	r0, #0
 8015346:	681e      	ldr	r6, [r3, #0]
 8015348:	468a      	mov	sl, r1
 801534a:	4096      	lsls	r6, r2
 801534c:	4330      	orrs	r0, r6
 801534e:	f84a 0b04 	str.w	r0, [sl], #4
 8015352:	f853 0b04 	ldr.w	r0, [r3], #4
 8015356:	459c      	cmp	ip, r3
 8015358:	fa20 f00e 	lsr.w	r0, r0, lr
 801535c:	d814      	bhi.n	8015388 <__lshift+0x94>
 801535e:	6048      	str	r0, [r1, #4]
 8015360:	b108      	cbz	r0, 8015366 <__lshift+0x72>
 8015362:	f109 0502 	add.w	r5, r9, #2
 8015366:	3d01      	subs	r5, #1
 8015368:	4638      	mov	r0, r7
 801536a:	f8c8 5010 	str.w	r5, [r8, #16]
 801536e:	4621      	mov	r1, r4
 8015370:	f7ff fe32 	bl	8014fd8 <_Bfree>
 8015374:	4640      	mov	r0, r8
 8015376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801537a:	3101      	adds	r1, #1
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	e7c7      	b.n	8015310 <__lshift+0x1c>
 8015380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015384:	3301      	adds	r3, #1
 8015386:	e7cd      	b.n	8015324 <__lshift+0x30>
 8015388:	4651      	mov	r1, sl
 801538a:	e7dc      	b.n	8015346 <__lshift+0x52>
 801538c:	3904      	subs	r1, #4
 801538e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015392:	f841 2f04 	str.w	r2, [r1, #4]!
 8015396:	459c      	cmp	ip, r3
 8015398:	d8f9      	bhi.n	801538e <__lshift+0x9a>
 801539a:	e7e4      	b.n	8015366 <__lshift+0x72>

0801539c <__mcmp>:
 801539c:	6903      	ldr	r3, [r0, #16]
 801539e:	690a      	ldr	r2, [r1, #16]
 80153a0:	1a9b      	subs	r3, r3, r2
 80153a2:	b530      	push	{r4, r5, lr}
 80153a4:	d10c      	bne.n	80153c0 <__mcmp+0x24>
 80153a6:	0092      	lsls	r2, r2, #2
 80153a8:	3014      	adds	r0, #20
 80153aa:	3114      	adds	r1, #20
 80153ac:	1884      	adds	r4, r0, r2
 80153ae:	4411      	add	r1, r2
 80153b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80153b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80153b8:	4295      	cmp	r5, r2
 80153ba:	d003      	beq.n	80153c4 <__mcmp+0x28>
 80153bc:	d305      	bcc.n	80153ca <__mcmp+0x2e>
 80153be:	2301      	movs	r3, #1
 80153c0:	4618      	mov	r0, r3
 80153c2:	bd30      	pop	{r4, r5, pc}
 80153c4:	42a0      	cmp	r0, r4
 80153c6:	d3f3      	bcc.n	80153b0 <__mcmp+0x14>
 80153c8:	e7fa      	b.n	80153c0 <__mcmp+0x24>
 80153ca:	f04f 33ff 	mov.w	r3, #4294967295
 80153ce:	e7f7      	b.n	80153c0 <__mcmp+0x24>

080153d0 <__mdiff>:
 80153d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153d4:	460d      	mov	r5, r1
 80153d6:	4607      	mov	r7, r0
 80153d8:	4611      	mov	r1, r2
 80153da:	4628      	mov	r0, r5
 80153dc:	4614      	mov	r4, r2
 80153de:	f7ff ffdd 	bl	801539c <__mcmp>
 80153e2:	1e06      	subs	r6, r0, #0
 80153e4:	d108      	bne.n	80153f8 <__mdiff+0x28>
 80153e6:	4631      	mov	r1, r6
 80153e8:	4638      	mov	r0, r7
 80153ea:	f7ff fdc1 	bl	8014f70 <_Balloc>
 80153ee:	2301      	movs	r3, #1
 80153f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80153f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153f8:	bfa4      	itt	ge
 80153fa:	4623      	movge	r3, r4
 80153fc:	462c      	movge	r4, r5
 80153fe:	4638      	mov	r0, r7
 8015400:	6861      	ldr	r1, [r4, #4]
 8015402:	bfa6      	itte	ge
 8015404:	461d      	movge	r5, r3
 8015406:	2600      	movge	r6, #0
 8015408:	2601      	movlt	r6, #1
 801540a:	f7ff fdb1 	bl	8014f70 <_Balloc>
 801540e:	692b      	ldr	r3, [r5, #16]
 8015410:	60c6      	str	r6, [r0, #12]
 8015412:	6926      	ldr	r6, [r4, #16]
 8015414:	f105 0914 	add.w	r9, r5, #20
 8015418:	f104 0214 	add.w	r2, r4, #20
 801541c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015420:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015424:	f100 0514 	add.w	r5, r0, #20
 8015428:	f04f 0e00 	mov.w	lr, #0
 801542c:	f852 ab04 	ldr.w	sl, [r2], #4
 8015430:	f859 4b04 	ldr.w	r4, [r9], #4
 8015434:	fa1e f18a 	uxtah	r1, lr, sl
 8015438:	b2a3      	uxth	r3, r4
 801543a:	1ac9      	subs	r1, r1, r3
 801543c:	0c23      	lsrs	r3, r4, #16
 801543e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015442:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015446:	b289      	uxth	r1, r1
 8015448:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801544c:	45c8      	cmp	r8, r9
 801544e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015452:	4694      	mov	ip, r2
 8015454:	f845 3b04 	str.w	r3, [r5], #4
 8015458:	d8e8      	bhi.n	801542c <__mdiff+0x5c>
 801545a:	45bc      	cmp	ip, r7
 801545c:	d304      	bcc.n	8015468 <__mdiff+0x98>
 801545e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015462:	b183      	cbz	r3, 8015486 <__mdiff+0xb6>
 8015464:	6106      	str	r6, [r0, #16]
 8015466:	e7c5      	b.n	80153f4 <__mdiff+0x24>
 8015468:	f85c 1b04 	ldr.w	r1, [ip], #4
 801546c:	fa1e f381 	uxtah	r3, lr, r1
 8015470:	141a      	asrs	r2, r3, #16
 8015472:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015476:	b29b      	uxth	r3, r3
 8015478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801547c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015480:	f845 3b04 	str.w	r3, [r5], #4
 8015484:	e7e9      	b.n	801545a <__mdiff+0x8a>
 8015486:	3e01      	subs	r6, #1
 8015488:	e7e9      	b.n	801545e <__mdiff+0x8e>

0801548a <__d2b>:
 801548a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801548e:	460e      	mov	r6, r1
 8015490:	2101      	movs	r1, #1
 8015492:	ec59 8b10 	vmov	r8, r9, d0
 8015496:	4615      	mov	r5, r2
 8015498:	f7ff fd6a 	bl	8014f70 <_Balloc>
 801549c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80154a0:	4607      	mov	r7, r0
 80154a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154a6:	bb34      	cbnz	r4, 80154f6 <__d2b+0x6c>
 80154a8:	9301      	str	r3, [sp, #4]
 80154aa:	f1b8 0300 	subs.w	r3, r8, #0
 80154ae:	d027      	beq.n	8015500 <__d2b+0x76>
 80154b0:	a802      	add	r0, sp, #8
 80154b2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80154b6:	f7ff fe00 	bl	80150ba <__lo0bits>
 80154ba:	9900      	ldr	r1, [sp, #0]
 80154bc:	b1f0      	cbz	r0, 80154fc <__d2b+0x72>
 80154be:	9a01      	ldr	r2, [sp, #4]
 80154c0:	f1c0 0320 	rsb	r3, r0, #32
 80154c4:	fa02 f303 	lsl.w	r3, r2, r3
 80154c8:	430b      	orrs	r3, r1
 80154ca:	40c2      	lsrs	r2, r0
 80154cc:	617b      	str	r3, [r7, #20]
 80154ce:	9201      	str	r2, [sp, #4]
 80154d0:	9b01      	ldr	r3, [sp, #4]
 80154d2:	61bb      	str	r3, [r7, #24]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	bf14      	ite	ne
 80154d8:	2102      	movne	r1, #2
 80154da:	2101      	moveq	r1, #1
 80154dc:	6139      	str	r1, [r7, #16]
 80154de:	b1c4      	cbz	r4, 8015512 <__d2b+0x88>
 80154e0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80154e4:	4404      	add	r4, r0
 80154e6:	6034      	str	r4, [r6, #0]
 80154e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80154ec:	6028      	str	r0, [r5, #0]
 80154ee:	4638      	mov	r0, r7
 80154f0:	b003      	add	sp, #12
 80154f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80154fa:	e7d5      	b.n	80154a8 <__d2b+0x1e>
 80154fc:	6179      	str	r1, [r7, #20]
 80154fe:	e7e7      	b.n	80154d0 <__d2b+0x46>
 8015500:	a801      	add	r0, sp, #4
 8015502:	f7ff fdda 	bl	80150ba <__lo0bits>
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	617b      	str	r3, [r7, #20]
 801550a:	2101      	movs	r1, #1
 801550c:	6139      	str	r1, [r7, #16]
 801550e:	3020      	adds	r0, #32
 8015510:	e7e5      	b.n	80154de <__d2b+0x54>
 8015512:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015516:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801551a:	6030      	str	r0, [r6, #0]
 801551c:	6918      	ldr	r0, [r3, #16]
 801551e:	f7ff fdad 	bl	801507c <__hi0bits>
 8015522:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015526:	e7e1      	b.n	80154ec <__d2b+0x62>

08015528 <_calloc_r>:
 8015528:	b538      	push	{r3, r4, r5, lr}
 801552a:	fb02 f401 	mul.w	r4, r2, r1
 801552e:	4621      	mov	r1, r4
 8015530:	f000 f856 	bl	80155e0 <_malloc_r>
 8015534:	4605      	mov	r5, r0
 8015536:	b118      	cbz	r0, 8015540 <_calloc_r+0x18>
 8015538:	4622      	mov	r2, r4
 801553a:	2100      	movs	r1, #0
 801553c:	f7fe f957 	bl	80137ee <memset>
 8015540:	4628      	mov	r0, r5
 8015542:	bd38      	pop	{r3, r4, r5, pc}

08015544 <_free_r>:
 8015544:	b538      	push	{r3, r4, r5, lr}
 8015546:	4605      	mov	r5, r0
 8015548:	2900      	cmp	r1, #0
 801554a:	d045      	beq.n	80155d8 <_free_r+0x94>
 801554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015550:	1f0c      	subs	r4, r1, #4
 8015552:	2b00      	cmp	r3, #0
 8015554:	bfb8      	it	lt
 8015556:	18e4      	addlt	r4, r4, r3
 8015558:	f000 fdb5 	bl	80160c6 <__malloc_lock>
 801555c:	4a1f      	ldr	r2, [pc, #124]	; (80155dc <_free_r+0x98>)
 801555e:	6813      	ldr	r3, [r2, #0]
 8015560:	4610      	mov	r0, r2
 8015562:	b933      	cbnz	r3, 8015572 <_free_r+0x2e>
 8015564:	6063      	str	r3, [r4, #4]
 8015566:	6014      	str	r4, [r2, #0]
 8015568:	4628      	mov	r0, r5
 801556a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801556e:	f000 bdab 	b.w	80160c8 <__malloc_unlock>
 8015572:	42a3      	cmp	r3, r4
 8015574:	d90c      	bls.n	8015590 <_free_r+0x4c>
 8015576:	6821      	ldr	r1, [r4, #0]
 8015578:	1862      	adds	r2, r4, r1
 801557a:	4293      	cmp	r3, r2
 801557c:	bf04      	itt	eq
 801557e:	681a      	ldreq	r2, [r3, #0]
 8015580:	685b      	ldreq	r3, [r3, #4]
 8015582:	6063      	str	r3, [r4, #4]
 8015584:	bf04      	itt	eq
 8015586:	1852      	addeq	r2, r2, r1
 8015588:	6022      	streq	r2, [r4, #0]
 801558a:	6004      	str	r4, [r0, #0]
 801558c:	e7ec      	b.n	8015568 <_free_r+0x24>
 801558e:	4613      	mov	r3, r2
 8015590:	685a      	ldr	r2, [r3, #4]
 8015592:	b10a      	cbz	r2, 8015598 <_free_r+0x54>
 8015594:	42a2      	cmp	r2, r4
 8015596:	d9fa      	bls.n	801558e <_free_r+0x4a>
 8015598:	6819      	ldr	r1, [r3, #0]
 801559a:	1858      	adds	r0, r3, r1
 801559c:	42a0      	cmp	r0, r4
 801559e:	d10b      	bne.n	80155b8 <_free_r+0x74>
 80155a0:	6820      	ldr	r0, [r4, #0]
 80155a2:	4401      	add	r1, r0
 80155a4:	1858      	adds	r0, r3, r1
 80155a6:	4282      	cmp	r2, r0
 80155a8:	6019      	str	r1, [r3, #0]
 80155aa:	d1dd      	bne.n	8015568 <_free_r+0x24>
 80155ac:	6810      	ldr	r0, [r2, #0]
 80155ae:	6852      	ldr	r2, [r2, #4]
 80155b0:	605a      	str	r2, [r3, #4]
 80155b2:	4401      	add	r1, r0
 80155b4:	6019      	str	r1, [r3, #0]
 80155b6:	e7d7      	b.n	8015568 <_free_r+0x24>
 80155b8:	d902      	bls.n	80155c0 <_free_r+0x7c>
 80155ba:	230c      	movs	r3, #12
 80155bc:	602b      	str	r3, [r5, #0]
 80155be:	e7d3      	b.n	8015568 <_free_r+0x24>
 80155c0:	6820      	ldr	r0, [r4, #0]
 80155c2:	1821      	adds	r1, r4, r0
 80155c4:	428a      	cmp	r2, r1
 80155c6:	bf04      	itt	eq
 80155c8:	6811      	ldreq	r1, [r2, #0]
 80155ca:	6852      	ldreq	r2, [r2, #4]
 80155cc:	6062      	str	r2, [r4, #4]
 80155ce:	bf04      	itt	eq
 80155d0:	1809      	addeq	r1, r1, r0
 80155d2:	6021      	streq	r1, [r4, #0]
 80155d4:	605c      	str	r4, [r3, #4]
 80155d6:	e7c7      	b.n	8015568 <_free_r+0x24>
 80155d8:	bd38      	pop	{r3, r4, r5, pc}
 80155da:	bf00      	nop
 80155dc:	2000c2d0 	.word	0x2000c2d0

080155e0 <_malloc_r>:
 80155e0:	b570      	push	{r4, r5, r6, lr}
 80155e2:	1ccd      	adds	r5, r1, #3
 80155e4:	f025 0503 	bic.w	r5, r5, #3
 80155e8:	3508      	adds	r5, #8
 80155ea:	2d0c      	cmp	r5, #12
 80155ec:	bf38      	it	cc
 80155ee:	250c      	movcc	r5, #12
 80155f0:	2d00      	cmp	r5, #0
 80155f2:	4606      	mov	r6, r0
 80155f4:	db01      	blt.n	80155fa <_malloc_r+0x1a>
 80155f6:	42a9      	cmp	r1, r5
 80155f8:	d903      	bls.n	8015602 <_malloc_r+0x22>
 80155fa:	230c      	movs	r3, #12
 80155fc:	6033      	str	r3, [r6, #0]
 80155fe:	2000      	movs	r0, #0
 8015600:	bd70      	pop	{r4, r5, r6, pc}
 8015602:	f000 fd60 	bl	80160c6 <__malloc_lock>
 8015606:	4a21      	ldr	r2, [pc, #132]	; (801568c <_malloc_r+0xac>)
 8015608:	6814      	ldr	r4, [r2, #0]
 801560a:	4621      	mov	r1, r4
 801560c:	b991      	cbnz	r1, 8015634 <_malloc_r+0x54>
 801560e:	4c20      	ldr	r4, [pc, #128]	; (8015690 <_malloc_r+0xb0>)
 8015610:	6823      	ldr	r3, [r4, #0]
 8015612:	b91b      	cbnz	r3, 801561c <_malloc_r+0x3c>
 8015614:	4630      	mov	r0, r6
 8015616:	f000 facf 	bl	8015bb8 <_sbrk_r>
 801561a:	6020      	str	r0, [r4, #0]
 801561c:	4629      	mov	r1, r5
 801561e:	4630      	mov	r0, r6
 8015620:	f000 faca 	bl	8015bb8 <_sbrk_r>
 8015624:	1c43      	adds	r3, r0, #1
 8015626:	d124      	bne.n	8015672 <_malloc_r+0x92>
 8015628:	230c      	movs	r3, #12
 801562a:	6033      	str	r3, [r6, #0]
 801562c:	4630      	mov	r0, r6
 801562e:	f000 fd4b 	bl	80160c8 <__malloc_unlock>
 8015632:	e7e4      	b.n	80155fe <_malloc_r+0x1e>
 8015634:	680b      	ldr	r3, [r1, #0]
 8015636:	1b5b      	subs	r3, r3, r5
 8015638:	d418      	bmi.n	801566c <_malloc_r+0x8c>
 801563a:	2b0b      	cmp	r3, #11
 801563c:	d90f      	bls.n	801565e <_malloc_r+0x7e>
 801563e:	600b      	str	r3, [r1, #0]
 8015640:	50cd      	str	r5, [r1, r3]
 8015642:	18cc      	adds	r4, r1, r3
 8015644:	4630      	mov	r0, r6
 8015646:	f000 fd3f 	bl	80160c8 <__malloc_unlock>
 801564a:	f104 000b 	add.w	r0, r4, #11
 801564e:	1d23      	adds	r3, r4, #4
 8015650:	f020 0007 	bic.w	r0, r0, #7
 8015654:	1ac3      	subs	r3, r0, r3
 8015656:	d0d3      	beq.n	8015600 <_malloc_r+0x20>
 8015658:	425a      	negs	r2, r3
 801565a:	50e2      	str	r2, [r4, r3]
 801565c:	e7d0      	b.n	8015600 <_malloc_r+0x20>
 801565e:	428c      	cmp	r4, r1
 8015660:	684b      	ldr	r3, [r1, #4]
 8015662:	bf16      	itet	ne
 8015664:	6063      	strne	r3, [r4, #4]
 8015666:	6013      	streq	r3, [r2, #0]
 8015668:	460c      	movne	r4, r1
 801566a:	e7eb      	b.n	8015644 <_malloc_r+0x64>
 801566c:	460c      	mov	r4, r1
 801566e:	6849      	ldr	r1, [r1, #4]
 8015670:	e7cc      	b.n	801560c <_malloc_r+0x2c>
 8015672:	1cc4      	adds	r4, r0, #3
 8015674:	f024 0403 	bic.w	r4, r4, #3
 8015678:	42a0      	cmp	r0, r4
 801567a:	d005      	beq.n	8015688 <_malloc_r+0xa8>
 801567c:	1a21      	subs	r1, r4, r0
 801567e:	4630      	mov	r0, r6
 8015680:	f000 fa9a 	bl	8015bb8 <_sbrk_r>
 8015684:	3001      	adds	r0, #1
 8015686:	d0cf      	beq.n	8015628 <_malloc_r+0x48>
 8015688:	6025      	str	r5, [r4, #0]
 801568a:	e7db      	b.n	8015644 <_malloc_r+0x64>
 801568c:	2000c2d0 	.word	0x2000c2d0
 8015690:	2000c2d4 	.word	0x2000c2d4

08015694 <__ssputs_r>:
 8015694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015698:	688e      	ldr	r6, [r1, #8]
 801569a:	429e      	cmp	r6, r3
 801569c:	4682      	mov	sl, r0
 801569e:	460c      	mov	r4, r1
 80156a0:	4690      	mov	r8, r2
 80156a2:	4699      	mov	r9, r3
 80156a4:	d837      	bhi.n	8015716 <__ssputs_r+0x82>
 80156a6:	898a      	ldrh	r2, [r1, #12]
 80156a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80156ac:	d031      	beq.n	8015712 <__ssputs_r+0x7e>
 80156ae:	6825      	ldr	r5, [r4, #0]
 80156b0:	6909      	ldr	r1, [r1, #16]
 80156b2:	1a6f      	subs	r7, r5, r1
 80156b4:	6965      	ldr	r5, [r4, #20]
 80156b6:	2302      	movs	r3, #2
 80156b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80156bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80156c0:	f109 0301 	add.w	r3, r9, #1
 80156c4:	443b      	add	r3, r7
 80156c6:	429d      	cmp	r5, r3
 80156c8:	bf38      	it	cc
 80156ca:	461d      	movcc	r5, r3
 80156cc:	0553      	lsls	r3, r2, #21
 80156ce:	d530      	bpl.n	8015732 <__ssputs_r+0x9e>
 80156d0:	4629      	mov	r1, r5
 80156d2:	f7ff ff85 	bl	80155e0 <_malloc_r>
 80156d6:	4606      	mov	r6, r0
 80156d8:	b950      	cbnz	r0, 80156f0 <__ssputs_r+0x5c>
 80156da:	230c      	movs	r3, #12
 80156dc:	f8ca 3000 	str.w	r3, [sl]
 80156e0:	89a3      	ldrh	r3, [r4, #12]
 80156e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156e6:	81a3      	strh	r3, [r4, #12]
 80156e8:	f04f 30ff 	mov.w	r0, #4294967295
 80156ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156f0:	463a      	mov	r2, r7
 80156f2:	6921      	ldr	r1, [r4, #16]
 80156f4:	f7fe f870 	bl	80137d8 <memcpy>
 80156f8:	89a3      	ldrh	r3, [r4, #12]
 80156fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80156fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015702:	81a3      	strh	r3, [r4, #12]
 8015704:	6126      	str	r6, [r4, #16]
 8015706:	6165      	str	r5, [r4, #20]
 8015708:	443e      	add	r6, r7
 801570a:	1bed      	subs	r5, r5, r7
 801570c:	6026      	str	r6, [r4, #0]
 801570e:	60a5      	str	r5, [r4, #8]
 8015710:	464e      	mov	r6, r9
 8015712:	454e      	cmp	r6, r9
 8015714:	d900      	bls.n	8015718 <__ssputs_r+0x84>
 8015716:	464e      	mov	r6, r9
 8015718:	4632      	mov	r2, r6
 801571a:	4641      	mov	r1, r8
 801571c:	6820      	ldr	r0, [r4, #0]
 801571e:	f000 fcb9 	bl	8016094 <memmove>
 8015722:	68a3      	ldr	r3, [r4, #8]
 8015724:	1b9b      	subs	r3, r3, r6
 8015726:	60a3      	str	r3, [r4, #8]
 8015728:	6823      	ldr	r3, [r4, #0]
 801572a:	441e      	add	r6, r3
 801572c:	6026      	str	r6, [r4, #0]
 801572e:	2000      	movs	r0, #0
 8015730:	e7dc      	b.n	80156ec <__ssputs_r+0x58>
 8015732:	462a      	mov	r2, r5
 8015734:	f000 fcc9 	bl	80160ca <_realloc_r>
 8015738:	4606      	mov	r6, r0
 801573a:	2800      	cmp	r0, #0
 801573c:	d1e2      	bne.n	8015704 <__ssputs_r+0x70>
 801573e:	6921      	ldr	r1, [r4, #16]
 8015740:	4650      	mov	r0, sl
 8015742:	f7ff feff 	bl	8015544 <_free_r>
 8015746:	e7c8      	b.n	80156da <__ssputs_r+0x46>

08015748 <_svfiprintf_r>:
 8015748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801574c:	461d      	mov	r5, r3
 801574e:	898b      	ldrh	r3, [r1, #12]
 8015750:	061f      	lsls	r7, r3, #24
 8015752:	b09d      	sub	sp, #116	; 0x74
 8015754:	4680      	mov	r8, r0
 8015756:	460c      	mov	r4, r1
 8015758:	4616      	mov	r6, r2
 801575a:	d50f      	bpl.n	801577c <_svfiprintf_r+0x34>
 801575c:	690b      	ldr	r3, [r1, #16]
 801575e:	b96b      	cbnz	r3, 801577c <_svfiprintf_r+0x34>
 8015760:	2140      	movs	r1, #64	; 0x40
 8015762:	f7ff ff3d 	bl	80155e0 <_malloc_r>
 8015766:	6020      	str	r0, [r4, #0]
 8015768:	6120      	str	r0, [r4, #16]
 801576a:	b928      	cbnz	r0, 8015778 <_svfiprintf_r+0x30>
 801576c:	230c      	movs	r3, #12
 801576e:	f8c8 3000 	str.w	r3, [r8]
 8015772:	f04f 30ff 	mov.w	r0, #4294967295
 8015776:	e0c8      	b.n	801590a <_svfiprintf_r+0x1c2>
 8015778:	2340      	movs	r3, #64	; 0x40
 801577a:	6163      	str	r3, [r4, #20]
 801577c:	2300      	movs	r3, #0
 801577e:	9309      	str	r3, [sp, #36]	; 0x24
 8015780:	2320      	movs	r3, #32
 8015782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015786:	2330      	movs	r3, #48	; 0x30
 8015788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801578c:	9503      	str	r5, [sp, #12]
 801578e:	f04f 0b01 	mov.w	fp, #1
 8015792:	4637      	mov	r7, r6
 8015794:	463d      	mov	r5, r7
 8015796:	f815 3b01 	ldrb.w	r3, [r5], #1
 801579a:	b10b      	cbz	r3, 80157a0 <_svfiprintf_r+0x58>
 801579c:	2b25      	cmp	r3, #37	; 0x25
 801579e:	d13e      	bne.n	801581e <_svfiprintf_r+0xd6>
 80157a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80157a4:	d00b      	beq.n	80157be <_svfiprintf_r+0x76>
 80157a6:	4653      	mov	r3, sl
 80157a8:	4632      	mov	r2, r6
 80157aa:	4621      	mov	r1, r4
 80157ac:	4640      	mov	r0, r8
 80157ae:	f7ff ff71 	bl	8015694 <__ssputs_r>
 80157b2:	3001      	adds	r0, #1
 80157b4:	f000 80a4 	beq.w	8015900 <_svfiprintf_r+0x1b8>
 80157b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ba:	4453      	add	r3, sl
 80157bc:	9309      	str	r3, [sp, #36]	; 0x24
 80157be:	783b      	ldrb	r3, [r7, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	f000 809d 	beq.w	8015900 <_svfiprintf_r+0x1b8>
 80157c6:	2300      	movs	r3, #0
 80157c8:	f04f 32ff 	mov.w	r2, #4294967295
 80157cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157d0:	9304      	str	r3, [sp, #16]
 80157d2:	9307      	str	r3, [sp, #28]
 80157d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157d8:	931a      	str	r3, [sp, #104]	; 0x68
 80157da:	462f      	mov	r7, r5
 80157dc:	2205      	movs	r2, #5
 80157de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80157e2:	4850      	ldr	r0, [pc, #320]	; (8015924 <_svfiprintf_r+0x1dc>)
 80157e4:	f7f2 fc34 	bl	8008050 <memchr>
 80157e8:	9b04      	ldr	r3, [sp, #16]
 80157ea:	b9d0      	cbnz	r0, 8015822 <_svfiprintf_r+0xda>
 80157ec:	06d9      	lsls	r1, r3, #27
 80157ee:	bf44      	itt	mi
 80157f0:	2220      	movmi	r2, #32
 80157f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80157f6:	071a      	lsls	r2, r3, #28
 80157f8:	bf44      	itt	mi
 80157fa:	222b      	movmi	r2, #43	; 0x2b
 80157fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015800:	782a      	ldrb	r2, [r5, #0]
 8015802:	2a2a      	cmp	r2, #42	; 0x2a
 8015804:	d015      	beq.n	8015832 <_svfiprintf_r+0xea>
 8015806:	9a07      	ldr	r2, [sp, #28]
 8015808:	462f      	mov	r7, r5
 801580a:	2000      	movs	r0, #0
 801580c:	250a      	movs	r5, #10
 801580e:	4639      	mov	r1, r7
 8015810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015814:	3b30      	subs	r3, #48	; 0x30
 8015816:	2b09      	cmp	r3, #9
 8015818:	d94d      	bls.n	80158b6 <_svfiprintf_r+0x16e>
 801581a:	b1b8      	cbz	r0, 801584c <_svfiprintf_r+0x104>
 801581c:	e00f      	b.n	801583e <_svfiprintf_r+0xf6>
 801581e:	462f      	mov	r7, r5
 8015820:	e7b8      	b.n	8015794 <_svfiprintf_r+0x4c>
 8015822:	4a40      	ldr	r2, [pc, #256]	; (8015924 <_svfiprintf_r+0x1dc>)
 8015824:	1a80      	subs	r0, r0, r2
 8015826:	fa0b f000 	lsl.w	r0, fp, r0
 801582a:	4318      	orrs	r0, r3
 801582c:	9004      	str	r0, [sp, #16]
 801582e:	463d      	mov	r5, r7
 8015830:	e7d3      	b.n	80157da <_svfiprintf_r+0x92>
 8015832:	9a03      	ldr	r2, [sp, #12]
 8015834:	1d11      	adds	r1, r2, #4
 8015836:	6812      	ldr	r2, [r2, #0]
 8015838:	9103      	str	r1, [sp, #12]
 801583a:	2a00      	cmp	r2, #0
 801583c:	db01      	blt.n	8015842 <_svfiprintf_r+0xfa>
 801583e:	9207      	str	r2, [sp, #28]
 8015840:	e004      	b.n	801584c <_svfiprintf_r+0x104>
 8015842:	4252      	negs	r2, r2
 8015844:	f043 0302 	orr.w	r3, r3, #2
 8015848:	9207      	str	r2, [sp, #28]
 801584a:	9304      	str	r3, [sp, #16]
 801584c:	783b      	ldrb	r3, [r7, #0]
 801584e:	2b2e      	cmp	r3, #46	; 0x2e
 8015850:	d10c      	bne.n	801586c <_svfiprintf_r+0x124>
 8015852:	787b      	ldrb	r3, [r7, #1]
 8015854:	2b2a      	cmp	r3, #42	; 0x2a
 8015856:	d133      	bne.n	80158c0 <_svfiprintf_r+0x178>
 8015858:	9b03      	ldr	r3, [sp, #12]
 801585a:	1d1a      	adds	r2, r3, #4
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	9203      	str	r2, [sp, #12]
 8015860:	2b00      	cmp	r3, #0
 8015862:	bfb8      	it	lt
 8015864:	f04f 33ff 	movlt.w	r3, #4294967295
 8015868:	3702      	adds	r7, #2
 801586a:	9305      	str	r3, [sp, #20]
 801586c:	4d2e      	ldr	r5, [pc, #184]	; (8015928 <_svfiprintf_r+0x1e0>)
 801586e:	7839      	ldrb	r1, [r7, #0]
 8015870:	2203      	movs	r2, #3
 8015872:	4628      	mov	r0, r5
 8015874:	f7f2 fbec 	bl	8008050 <memchr>
 8015878:	b138      	cbz	r0, 801588a <_svfiprintf_r+0x142>
 801587a:	2340      	movs	r3, #64	; 0x40
 801587c:	1b40      	subs	r0, r0, r5
 801587e:	fa03 f000 	lsl.w	r0, r3, r0
 8015882:	9b04      	ldr	r3, [sp, #16]
 8015884:	4303      	orrs	r3, r0
 8015886:	3701      	adds	r7, #1
 8015888:	9304      	str	r3, [sp, #16]
 801588a:	7839      	ldrb	r1, [r7, #0]
 801588c:	4827      	ldr	r0, [pc, #156]	; (801592c <_svfiprintf_r+0x1e4>)
 801588e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015892:	2206      	movs	r2, #6
 8015894:	1c7e      	adds	r6, r7, #1
 8015896:	f7f2 fbdb 	bl	8008050 <memchr>
 801589a:	2800      	cmp	r0, #0
 801589c:	d038      	beq.n	8015910 <_svfiprintf_r+0x1c8>
 801589e:	4b24      	ldr	r3, [pc, #144]	; (8015930 <_svfiprintf_r+0x1e8>)
 80158a0:	bb13      	cbnz	r3, 80158e8 <_svfiprintf_r+0x1a0>
 80158a2:	9b03      	ldr	r3, [sp, #12]
 80158a4:	3307      	adds	r3, #7
 80158a6:	f023 0307 	bic.w	r3, r3, #7
 80158aa:	3308      	adds	r3, #8
 80158ac:	9303      	str	r3, [sp, #12]
 80158ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b0:	444b      	add	r3, r9
 80158b2:	9309      	str	r3, [sp, #36]	; 0x24
 80158b4:	e76d      	b.n	8015792 <_svfiprintf_r+0x4a>
 80158b6:	fb05 3202 	mla	r2, r5, r2, r3
 80158ba:	2001      	movs	r0, #1
 80158bc:	460f      	mov	r7, r1
 80158be:	e7a6      	b.n	801580e <_svfiprintf_r+0xc6>
 80158c0:	2300      	movs	r3, #0
 80158c2:	3701      	adds	r7, #1
 80158c4:	9305      	str	r3, [sp, #20]
 80158c6:	4619      	mov	r1, r3
 80158c8:	250a      	movs	r5, #10
 80158ca:	4638      	mov	r0, r7
 80158cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158d0:	3a30      	subs	r2, #48	; 0x30
 80158d2:	2a09      	cmp	r2, #9
 80158d4:	d903      	bls.n	80158de <_svfiprintf_r+0x196>
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d0c8      	beq.n	801586c <_svfiprintf_r+0x124>
 80158da:	9105      	str	r1, [sp, #20]
 80158dc:	e7c6      	b.n	801586c <_svfiprintf_r+0x124>
 80158de:	fb05 2101 	mla	r1, r5, r1, r2
 80158e2:	2301      	movs	r3, #1
 80158e4:	4607      	mov	r7, r0
 80158e6:	e7f0      	b.n	80158ca <_svfiprintf_r+0x182>
 80158e8:	ab03      	add	r3, sp, #12
 80158ea:	9300      	str	r3, [sp, #0]
 80158ec:	4622      	mov	r2, r4
 80158ee:	4b11      	ldr	r3, [pc, #68]	; (8015934 <_svfiprintf_r+0x1ec>)
 80158f0:	a904      	add	r1, sp, #16
 80158f2:	4640      	mov	r0, r8
 80158f4:	f7fe f818 	bl	8013928 <_printf_float>
 80158f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80158fc:	4681      	mov	r9, r0
 80158fe:	d1d6      	bne.n	80158ae <_svfiprintf_r+0x166>
 8015900:	89a3      	ldrh	r3, [r4, #12]
 8015902:	065b      	lsls	r3, r3, #25
 8015904:	f53f af35 	bmi.w	8015772 <_svfiprintf_r+0x2a>
 8015908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801590a:	b01d      	add	sp, #116	; 0x74
 801590c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015910:	ab03      	add	r3, sp, #12
 8015912:	9300      	str	r3, [sp, #0]
 8015914:	4622      	mov	r2, r4
 8015916:	4b07      	ldr	r3, [pc, #28]	; (8015934 <_svfiprintf_r+0x1ec>)
 8015918:	a904      	add	r1, sp, #16
 801591a:	4640      	mov	r0, r8
 801591c:	f7fe faba 	bl	8013e94 <_printf_i>
 8015920:	e7ea      	b.n	80158f8 <_svfiprintf_r+0x1b0>
 8015922:	bf00      	nop
 8015924:	0801647c 	.word	0x0801647c
 8015928:	08016482 	.word	0x08016482
 801592c:	08016486 	.word	0x08016486
 8015930:	08013929 	.word	0x08013929
 8015934:	08015695 	.word	0x08015695

08015938 <__sfputc_r>:
 8015938:	6893      	ldr	r3, [r2, #8]
 801593a:	3b01      	subs	r3, #1
 801593c:	2b00      	cmp	r3, #0
 801593e:	b410      	push	{r4}
 8015940:	6093      	str	r3, [r2, #8]
 8015942:	da08      	bge.n	8015956 <__sfputc_r+0x1e>
 8015944:	6994      	ldr	r4, [r2, #24]
 8015946:	42a3      	cmp	r3, r4
 8015948:	db01      	blt.n	801594e <__sfputc_r+0x16>
 801594a:	290a      	cmp	r1, #10
 801594c:	d103      	bne.n	8015956 <__sfputc_r+0x1e>
 801594e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015952:	f000 b985 	b.w	8015c60 <__swbuf_r>
 8015956:	6813      	ldr	r3, [r2, #0]
 8015958:	1c58      	adds	r0, r3, #1
 801595a:	6010      	str	r0, [r2, #0]
 801595c:	7019      	strb	r1, [r3, #0]
 801595e:	4608      	mov	r0, r1
 8015960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015964:	4770      	bx	lr

08015966 <__sfputs_r>:
 8015966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015968:	4606      	mov	r6, r0
 801596a:	460f      	mov	r7, r1
 801596c:	4614      	mov	r4, r2
 801596e:	18d5      	adds	r5, r2, r3
 8015970:	42ac      	cmp	r4, r5
 8015972:	d101      	bne.n	8015978 <__sfputs_r+0x12>
 8015974:	2000      	movs	r0, #0
 8015976:	e007      	b.n	8015988 <__sfputs_r+0x22>
 8015978:	463a      	mov	r2, r7
 801597a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801597e:	4630      	mov	r0, r6
 8015980:	f7ff ffda 	bl	8015938 <__sfputc_r>
 8015984:	1c43      	adds	r3, r0, #1
 8015986:	d1f3      	bne.n	8015970 <__sfputs_r+0xa>
 8015988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801598c <_vfiprintf_r>:
 801598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015990:	460c      	mov	r4, r1
 8015992:	b09d      	sub	sp, #116	; 0x74
 8015994:	4617      	mov	r7, r2
 8015996:	461d      	mov	r5, r3
 8015998:	4606      	mov	r6, r0
 801599a:	b118      	cbz	r0, 80159a4 <_vfiprintf_r+0x18>
 801599c:	6983      	ldr	r3, [r0, #24]
 801599e:	b90b      	cbnz	r3, 80159a4 <_vfiprintf_r+0x18>
 80159a0:	f7ff fa46 	bl	8014e30 <__sinit>
 80159a4:	4b7c      	ldr	r3, [pc, #496]	; (8015b98 <_vfiprintf_r+0x20c>)
 80159a6:	429c      	cmp	r4, r3
 80159a8:	d158      	bne.n	8015a5c <_vfiprintf_r+0xd0>
 80159aa:	6874      	ldr	r4, [r6, #4]
 80159ac:	89a3      	ldrh	r3, [r4, #12]
 80159ae:	0718      	lsls	r0, r3, #28
 80159b0:	d55e      	bpl.n	8015a70 <_vfiprintf_r+0xe4>
 80159b2:	6923      	ldr	r3, [r4, #16]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d05b      	beq.n	8015a70 <_vfiprintf_r+0xe4>
 80159b8:	2300      	movs	r3, #0
 80159ba:	9309      	str	r3, [sp, #36]	; 0x24
 80159bc:	2320      	movs	r3, #32
 80159be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159c2:	2330      	movs	r3, #48	; 0x30
 80159c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80159c8:	9503      	str	r5, [sp, #12]
 80159ca:	f04f 0b01 	mov.w	fp, #1
 80159ce:	46b8      	mov	r8, r7
 80159d0:	4645      	mov	r5, r8
 80159d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80159d6:	b10b      	cbz	r3, 80159dc <_vfiprintf_r+0x50>
 80159d8:	2b25      	cmp	r3, #37	; 0x25
 80159da:	d154      	bne.n	8015a86 <_vfiprintf_r+0xfa>
 80159dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80159e0:	d00b      	beq.n	80159fa <_vfiprintf_r+0x6e>
 80159e2:	4653      	mov	r3, sl
 80159e4:	463a      	mov	r2, r7
 80159e6:	4621      	mov	r1, r4
 80159e8:	4630      	mov	r0, r6
 80159ea:	f7ff ffbc 	bl	8015966 <__sfputs_r>
 80159ee:	3001      	adds	r0, #1
 80159f0:	f000 80c2 	beq.w	8015b78 <_vfiprintf_r+0x1ec>
 80159f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159f6:	4453      	add	r3, sl
 80159f8:	9309      	str	r3, [sp, #36]	; 0x24
 80159fa:	f898 3000 	ldrb.w	r3, [r8]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	f000 80ba 	beq.w	8015b78 <_vfiprintf_r+0x1ec>
 8015a04:	2300      	movs	r3, #0
 8015a06:	f04f 32ff 	mov.w	r2, #4294967295
 8015a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a0e:	9304      	str	r3, [sp, #16]
 8015a10:	9307      	str	r3, [sp, #28]
 8015a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a16:	931a      	str	r3, [sp, #104]	; 0x68
 8015a18:	46a8      	mov	r8, r5
 8015a1a:	2205      	movs	r2, #5
 8015a1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015a20:	485e      	ldr	r0, [pc, #376]	; (8015b9c <_vfiprintf_r+0x210>)
 8015a22:	f7f2 fb15 	bl	8008050 <memchr>
 8015a26:	9b04      	ldr	r3, [sp, #16]
 8015a28:	bb78      	cbnz	r0, 8015a8a <_vfiprintf_r+0xfe>
 8015a2a:	06d9      	lsls	r1, r3, #27
 8015a2c:	bf44      	itt	mi
 8015a2e:	2220      	movmi	r2, #32
 8015a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015a34:	071a      	lsls	r2, r3, #28
 8015a36:	bf44      	itt	mi
 8015a38:	222b      	movmi	r2, #43	; 0x2b
 8015a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015a3e:	782a      	ldrb	r2, [r5, #0]
 8015a40:	2a2a      	cmp	r2, #42	; 0x2a
 8015a42:	d02a      	beq.n	8015a9a <_vfiprintf_r+0x10e>
 8015a44:	9a07      	ldr	r2, [sp, #28]
 8015a46:	46a8      	mov	r8, r5
 8015a48:	2000      	movs	r0, #0
 8015a4a:	250a      	movs	r5, #10
 8015a4c:	4641      	mov	r1, r8
 8015a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a52:	3b30      	subs	r3, #48	; 0x30
 8015a54:	2b09      	cmp	r3, #9
 8015a56:	d969      	bls.n	8015b2c <_vfiprintf_r+0x1a0>
 8015a58:	b360      	cbz	r0, 8015ab4 <_vfiprintf_r+0x128>
 8015a5a:	e024      	b.n	8015aa6 <_vfiprintf_r+0x11a>
 8015a5c:	4b50      	ldr	r3, [pc, #320]	; (8015ba0 <_vfiprintf_r+0x214>)
 8015a5e:	429c      	cmp	r4, r3
 8015a60:	d101      	bne.n	8015a66 <_vfiprintf_r+0xda>
 8015a62:	68b4      	ldr	r4, [r6, #8]
 8015a64:	e7a2      	b.n	80159ac <_vfiprintf_r+0x20>
 8015a66:	4b4f      	ldr	r3, [pc, #316]	; (8015ba4 <_vfiprintf_r+0x218>)
 8015a68:	429c      	cmp	r4, r3
 8015a6a:	bf08      	it	eq
 8015a6c:	68f4      	ldreq	r4, [r6, #12]
 8015a6e:	e79d      	b.n	80159ac <_vfiprintf_r+0x20>
 8015a70:	4621      	mov	r1, r4
 8015a72:	4630      	mov	r0, r6
 8015a74:	f000 f958 	bl	8015d28 <__swsetup_r>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	d09d      	beq.n	80159b8 <_vfiprintf_r+0x2c>
 8015a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a80:	b01d      	add	sp, #116	; 0x74
 8015a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a86:	46a8      	mov	r8, r5
 8015a88:	e7a2      	b.n	80159d0 <_vfiprintf_r+0x44>
 8015a8a:	4a44      	ldr	r2, [pc, #272]	; (8015b9c <_vfiprintf_r+0x210>)
 8015a8c:	1a80      	subs	r0, r0, r2
 8015a8e:	fa0b f000 	lsl.w	r0, fp, r0
 8015a92:	4318      	orrs	r0, r3
 8015a94:	9004      	str	r0, [sp, #16]
 8015a96:	4645      	mov	r5, r8
 8015a98:	e7be      	b.n	8015a18 <_vfiprintf_r+0x8c>
 8015a9a:	9a03      	ldr	r2, [sp, #12]
 8015a9c:	1d11      	adds	r1, r2, #4
 8015a9e:	6812      	ldr	r2, [r2, #0]
 8015aa0:	9103      	str	r1, [sp, #12]
 8015aa2:	2a00      	cmp	r2, #0
 8015aa4:	db01      	blt.n	8015aaa <_vfiprintf_r+0x11e>
 8015aa6:	9207      	str	r2, [sp, #28]
 8015aa8:	e004      	b.n	8015ab4 <_vfiprintf_r+0x128>
 8015aaa:	4252      	negs	r2, r2
 8015aac:	f043 0302 	orr.w	r3, r3, #2
 8015ab0:	9207      	str	r2, [sp, #28]
 8015ab2:	9304      	str	r3, [sp, #16]
 8015ab4:	f898 3000 	ldrb.w	r3, [r8]
 8015ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8015aba:	d10e      	bne.n	8015ada <_vfiprintf_r+0x14e>
 8015abc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8015ac2:	d138      	bne.n	8015b36 <_vfiprintf_r+0x1aa>
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	1d1a      	adds	r2, r3, #4
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	9203      	str	r2, [sp, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	bfb8      	it	lt
 8015ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ad4:	f108 0802 	add.w	r8, r8, #2
 8015ad8:	9305      	str	r3, [sp, #20]
 8015ada:	4d33      	ldr	r5, [pc, #204]	; (8015ba8 <_vfiprintf_r+0x21c>)
 8015adc:	f898 1000 	ldrb.w	r1, [r8]
 8015ae0:	2203      	movs	r2, #3
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	f7f2 fab4 	bl	8008050 <memchr>
 8015ae8:	b140      	cbz	r0, 8015afc <_vfiprintf_r+0x170>
 8015aea:	2340      	movs	r3, #64	; 0x40
 8015aec:	1b40      	subs	r0, r0, r5
 8015aee:	fa03 f000 	lsl.w	r0, r3, r0
 8015af2:	9b04      	ldr	r3, [sp, #16]
 8015af4:	4303      	orrs	r3, r0
 8015af6:	f108 0801 	add.w	r8, r8, #1
 8015afa:	9304      	str	r3, [sp, #16]
 8015afc:	f898 1000 	ldrb.w	r1, [r8]
 8015b00:	482a      	ldr	r0, [pc, #168]	; (8015bac <_vfiprintf_r+0x220>)
 8015b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b06:	2206      	movs	r2, #6
 8015b08:	f108 0701 	add.w	r7, r8, #1
 8015b0c:	f7f2 faa0 	bl	8008050 <memchr>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d037      	beq.n	8015b84 <_vfiprintf_r+0x1f8>
 8015b14:	4b26      	ldr	r3, [pc, #152]	; (8015bb0 <_vfiprintf_r+0x224>)
 8015b16:	bb1b      	cbnz	r3, 8015b60 <_vfiprintf_r+0x1d4>
 8015b18:	9b03      	ldr	r3, [sp, #12]
 8015b1a:	3307      	adds	r3, #7
 8015b1c:	f023 0307 	bic.w	r3, r3, #7
 8015b20:	3308      	adds	r3, #8
 8015b22:	9303      	str	r3, [sp, #12]
 8015b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b26:	444b      	add	r3, r9
 8015b28:	9309      	str	r3, [sp, #36]	; 0x24
 8015b2a:	e750      	b.n	80159ce <_vfiprintf_r+0x42>
 8015b2c:	fb05 3202 	mla	r2, r5, r2, r3
 8015b30:	2001      	movs	r0, #1
 8015b32:	4688      	mov	r8, r1
 8015b34:	e78a      	b.n	8015a4c <_vfiprintf_r+0xc0>
 8015b36:	2300      	movs	r3, #0
 8015b38:	f108 0801 	add.w	r8, r8, #1
 8015b3c:	9305      	str	r3, [sp, #20]
 8015b3e:	4619      	mov	r1, r3
 8015b40:	250a      	movs	r5, #10
 8015b42:	4640      	mov	r0, r8
 8015b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b48:	3a30      	subs	r2, #48	; 0x30
 8015b4a:	2a09      	cmp	r2, #9
 8015b4c:	d903      	bls.n	8015b56 <_vfiprintf_r+0x1ca>
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d0c3      	beq.n	8015ada <_vfiprintf_r+0x14e>
 8015b52:	9105      	str	r1, [sp, #20]
 8015b54:	e7c1      	b.n	8015ada <_vfiprintf_r+0x14e>
 8015b56:	fb05 2101 	mla	r1, r5, r1, r2
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	4680      	mov	r8, r0
 8015b5e:	e7f0      	b.n	8015b42 <_vfiprintf_r+0x1b6>
 8015b60:	ab03      	add	r3, sp, #12
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	4622      	mov	r2, r4
 8015b66:	4b13      	ldr	r3, [pc, #76]	; (8015bb4 <_vfiprintf_r+0x228>)
 8015b68:	a904      	add	r1, sp, #16
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	f7fd fedc 	bl	8013928 <_printf_float>
 8015b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015b74:	4681      	mov	r9, r0
 8015b76:	d1d5      	bne.n	8015b24 <_vfiprintf_r+0x198>
 8015b78:	89a3      	ldrh	r3, [r4, #12]
 8015b7a:	065b      	lsls	r3, r3, #25
 8015b7c:	f53f af7e 	bmi.w	8015a7c <_vfiprintf_r+0xf0>
 8015b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b82:	e77d      	b.n	8015a80 <_vfiprintf_r+0xf4>
 8015b84:	ab03      	add	r3, sp, #12
 8015b86:	9300      	str	r3, [sp, #0]
 8015b88:	4622      	mov	r2, r4
 8015b8a:	4b0a      	ldr	r3, [pc, #40]	; (8015bb4 <_vfiprintf_r+0x228>)
 8015b8c:	a904      	add	r1, sp, #16
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f7fe f980 	bl	8013e94 <_printf_i>
 8015b94:	e7ec      	b.n	8015b70 <_vfiprintf_r+0x1e4>
 8015b96:	bf00      	nop
 8015b98:	0801633c 	.word	0x0801633c
 8015b9c:	0801647c 	.word	0x0801647c
 8015ba0:	0801635c 	.word	0x0801635c
 8015ba4:	0801631c 	.word	0x0801631c
 8015ba8:	08016482 	.word	0x08016482
 8015bac:	08016486 	.word	0x08016486
 8015bb0:	08013929 	.word	0x08013929
 8015bb4:	08015967 	.word	0x08015967

08015bb8 <_sbrk_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	4c06      	ldr	r4, [pc, #24]	; (8015bd4 <_sbrk_r+0x1c>)
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	4605      	mov	r5, r0
 8015bc0:	4608      	mov	r0, r1
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	f7f8 fbee 	bl	800e3a4 <_sbrk>
 8015bc8:	1c43      	adds	r3, r0, #1
 8015bca:	d102      	bne.n	8015bd2 <_sbrk_r+0x1a>
 8015bcc:	6823      	ldr	r3, [r4, #0]
 8015bce:	b103      	cbz	r3, 8015bd2 <_sbrk_r+0x1a>
 8015bd0:	602b      	str	r3, [r5, #0]
 8015bd2:	bd38      	pop	{r3, r4, r5, pc}
 8015bd4:	200146a8 	.word	0x200146a8

08015bd8 <__sread>:
 8015bd8:	b510      	push	{r4, lr}
 8015bda:	460c      	mov	r4, r1
 8015bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015be0:	f000 fa9a 	bl	8016118 <_read_r>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	bfab      	itete	ge
 8015be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bea:	89a3      	ldrhlt	r3, [r4, #12]
 8015bec:	181b      	addge	r3, r3, r0
 8015bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bf2:	bfac      	ite	ge
 8015bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015bf6:	81a3      	strhlt	r3, [r4, #12]
 8015bf8:	bd10      	pop	{r4, pc}

08015bfa <__swrite>:
 8015bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfe:	461f      	mov	r7, r3
 8015c00:	898b      	ldrh	r3, [r1, #12]
 8015c02:	05db      	lsls	r3, r3, #23
 8015c04:	4605      	mov	r5, r0
 8015c06:	460c      	mov	r4, r1
 8015c08:	4616      	mov	r6, r2
 8015c0a:	d505      	bpl.n	8015c18 <__swrite+0x1e>
 8015c0c:	2302      	movs	r3, #2
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c14:	f000 f9b6 	bl	8015f84 <_lseek_r>
 8015c18:	89a3      	ldrh	r3, [r4, #12]
 8015c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c22:	81a3      	strh	r3, [r4, #12]
 8015c24:	4632      	mov	r2, r6
 8015c26:	463b      	mov	r3, r7
 8015c28:	4628      	mov	r0, r5
 8015c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2e:	f000 b869 	b.w	8015d04 <_write_r>

08015c32 <__sseek>:
 8015c32:	b510      	push	{r4, lr}
 8015c34:	460c      	mov	r4, r1
 8015c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c3a:	f000 f9a3 	bl	8015f84 <_lseek_r>
 8015c3e:	1c43      	adds	r3, r0, #1
 8015c40:	89a3      	ldrh	r3, [r4, #12]
 8015c42:	bf15      	itete	ne
 8015c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c4e:	81a3      	strheq	r3, [r4, #12]
 8015c50:	bf18      	it	ne
 8015c52:	81a3      	strhne	r3, [r4, #12]
 8015c54:	bd10      	pop	{r4, pc}

08015c56 <__sclose>:
 8015c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c5a:	f000 b8d3 	b.w	8015e04 <_close_r>
	...

08015c60 <__swbuf_r>:
 8015c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c62:	460e      	mov	r6, r1
 8015c64:	4614      	mov	r4, r2
 8015c66:	4605      	mov	r5, r0
 8015c68:	b118      	cbz	r0, 8015c72 <__swbuf_r+0x12>
 8015c6a:	6983      	ldr	r3, [r0, #24]
 8015c6c:	b90b      	cbnz	r3, 8015c72 <__swbuf_r+0x12>
 8015c6e:	f7ff f8df 	bl	8014e30 <__sinit>
 8015c72:	4b21      	ldr	r3, [pc, #132]	; (8015cf8 <__swbuf_r+0x98>)
 8015c74:	429c      	cmp	r4, r3
 8015c76:	d12a      	bne.n	8015cce <__swbuf_r+0x6e>
 8015c78:	686c      	ldr	r4, [r5, #4]
 8015c7a:	69a3      	ldr	r3, [r4, #24]
 8015c7c:	60a3      	str	r3, [r4, #8]
 8015c7e:	89a3      	ldrh	r3, [r4, #12]
 8015c80:	071a      	lsls	r2, r3, #28
 8015c82:	d52e      	bpl.n	8015ce2 <__swbuf_r+0x82>
 8015c84:	6923      	ldr	r3, [r4, #16]
 8015c86:	b363      	cbz	r3, 8015ce2 <__swbuf_r+0x82>
 8015c88:	6923      	ldr	r3, [r4, #16]
 8015c8a:	6820      	ldr	r0, [r4, #0]
 8015c8c:	1ac0      	subs	r0, r0, r3
 8015c8e:	6963      	ldr	r3, [r4, #20]
 8015c90:	b2f6      	uxtb	r6, r6
 8015c92:	4283      	cmp	r3, r0
 8015c94:	4637      	mov	r7, r6
 8015c96:	dc04      	bgt.n	8015ca2 <__swbuf_r+0x42>
 8015c98:	4621      	mov	r1, r4
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	f000 f948 	bl	8015f30 <_fflush_r>
 8015ca0:	bb28      	cbnz	r0, 8015cee <__swbuf_r+0x8e>
 8015ca2:	68a3      	ldr	r3, [r4, #8]
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	60a3      	str	r3, [r4, #8]
 8015ca8:	6823      	ldr	r3, [r4, #0]
 8015caa:	1c5a      	adds	r2, r3, #1
 8015cac:	6022      	str	r2, [r4, #0]
 8015cae:	701e      	strb	r6, [r3, #0]
 8015cb0:	6963      	ldr	r3, [r4, #20]
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	4283      	cmp	r3, r0
 8015cb6:	d004      	beq.n	8015cc2 <__swbuf_r+0x62>
 8015cb8:	89a3      	ldrh	r3, [r4, #12]
 8015cba:	07db      	lsls	r3, r3, #31
 8015cbc:	d519      	bpl.n	8015cf2 <__swbuf_r+0x92>
 8015cbe:	2e0a      	cmp	r6, #10
 8015cc0:	d117      	bne.n	8015cf2 <__swbuf_r+0x92>
 8015cc2:	4621      	mov	r1, r4
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	f000 f933 	bl	8015f30 <_fflush_r>
 8015cca:	b190      	cbz	r0, 8015cf2 <__swbuf_r+0x92>
 8015ccc:	e00f      	b.n	8015cee <__swbuf_r+0x8e>
 8015cce:	4b0b      	ldr	r3, [pc, #44]	; (8015cfc <__swbuf_r+0x9c>)
 8015cd0:	429c      	cmp	r4, r3
 8015cd2:	d101      	bne.n	8015cd8 <__swbuf_r+0x78>
 8015cd4:	68ac      	ldr	r4, [r5, #8]
 8015cd6:	e7d0      	b.n	8015c7a <__swbuf_r+0x1a>
 8015cd8:	4b09      	ldr	r3, [pc, #36]	; (8015d00 <__swbuf_r+0xa0>)
 8015cda:	429c      	cmp	r4, r3
 8015cdc:	bf08      	it	eq
 8015cde:	68ec      	ldreq	r4, [r5, #12]
 8015ce0:	e7cb      	b.n	8015c7a <__swbuf_r+0x1a>
 8015ce2:	4621      	mov	r1, r4
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	f000 f81f 	bl	8015d28 <__swsetup_r>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d0cc      	beq.n	8015c88 <__swbuf_r+0x28>
 8015cee:	f04f 37ff 	mov.w	r7, #4294967295
 8015cf2:	4638      	mov	r0, r7
 8015cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	0801633c 	.word	0x0801633c
 8015cfc:	0801635c 	.word	0x0801635c
 8015d00:	0801631c 	.word	0x0801631c

08015d04 <_write_r>:
 8015d04:	b538      	push	{r3, r4, r5, lr}
 8015d06:	4c07      	ldr	r4, [pc, #28]	; (8015d24 <_write_r+0x20>)
 8015d08:	4605      	mov	r5, r0
 8015d0a:	4608      	mov	r0, r1
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	2200      	movs	r2, #0
 8015d10:	6022      	str	r2, [r4, #0]
 8015d12:	461a      	mov	r2, r3
 8015d14:	f7f8 faf5 	bl	800e302 <_write>
 8015d18:	1c43      	adds	r3, r0, #1
 8015d1a:	d102      	bne.n	8015d22 <_write_r+0x1e>
 8015d1c:	6823      	ldr	r3, [r4, #0]
 8015d1e:	b103      	cbz	r3, 8015d22 <_write_r+0x1e>
 8015d20:	602b      	str	r3, [r5, #0]
 8015d22:	bd38      	pop	{r3, r4, r5, pc}
 8015d24:	200146a8 	.word	0x200146a8

08015d28 <__swsetup_r>:
 8015d28:	4b32      	ldr	r3, [pc, #200]	; (8015df4 <__swsetup_r+0xcc>)
 8015d2a:	b570      	push	{r4, r5, r6, lr}
 8015d2c:	681d      	ldr	r5, [r3, #0]
 8015d2e:	4606      	mov	r6, r0
 8015d30:	460c      	mov	r4, r1
 8015d32:	b125      	cbz	r5, 8015d3e <__swsetup_r+0x16>
 8015d34:	69ab      	ldr	r3, [r5, #24]
 8015d36:	b913      	cbnz	r3, 8015d3e <__swsetup_r+0x16>
 8015d38:	4628      	mov	r0, r5
 8015d3a:	f7ff f879 	bl	8014e30 <__sinit>
 8015d3e:	4b2e      	ldr	r3, [pc, #184]	; (8015df8 <__swsetup_r+0xd0>)
 8015d40:	429c      	cmp	r4, r3
 8015d42:	d10f      	bne.n	8015d64 <__swsetup_r+0x3c>
 8015d44:	686c      	ldr	r4, [r5, #4]
 8015d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d4a:	b29a      	uxth	r2, r3
 8015d4c:	0715      	lsls	r5, r2, #28
 8015d4e:	d42c      	bmi.n	8015daa <__swsetup_r+0x82>
 8015d50:	06d0      	lsls	r0, r2, #27
 8015d52:	d411      	bmi.n	8015d78 <__swsetup_r+0x50>
 8015d54:	2209      	movs	r2, #9
 8015d56:	6032      	str	r2, [r6, #0]
 8015d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d5c:	81a3      	strh	r3, [r4, #12]
 8015d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8015d62:	e03e      	b.n	8015de2 <__swsetup_r+0xba>
 8015d64:	4b25      	ldr	r3, [pc, #148]	; (8015dfc <__swsetup_r+0xd4>)
 8015d66:	429c      	cmp	r4, r3
 8015d68:	d101      	bne.n	8015d6e <__swsetup_r+0x46>
 8015d6a:	68ac      	ldr	r4, [r5, #8]
 8015d6c:	e7eb      	b.n	8015d46 <__swsetup_r+0x1e>
 8015d6e:	4b24      	ldr	r3, [pc, #144]	; (8015e00 <__swsetup_r+0xd8>)
 8015d70:	429c      	cmp	r4, r3
 8015d72:	bf08      	it	eq
 8015d74:	68ec      	ldreq	r4, [r5, #12]
 8015d76:	e7e6      	b.n	8015d46 <__swsetup_r+0x1e>
 8015d78:	0751      	lsls	r1, r2, #29
 8015d7a:	d512      	bpl.n	8015da2 <__swsetup_r+0x7a>
 8015d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d7e:	b141      	cbz	r1, 8015d92 <__swsetup_r+0x6a>
 8015d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d84:	4299      	cmp	r1, r3
 8015d86:	d002      	beq.n	8015d8e <__swsetup_r+0x66>
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f7ff fbdb 	bl	8015544 <_free_r>
 8015d8e:	2300      	movs	r3, #0
 8015d90:	6363      	str	r3, [r4, #52]	; 0x34
 8015d92:	89a3      	ldrh	r3, [r4, #12]
 8015d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d98:	81a3      	strh	r3, [r4, #12]
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	6063      	str	r3, [r4, #4]
 8015d9e:	6923      	ldr	r3, [r4, #16]
 8015da0:	6023      	str	r3, [r4, #0]
 8015da2:	89a3      	ldrh	r3, [r4, #12]
 8015da4:	f043 0308 	orr.w	r3, r3, #8
 8015da8:	81a3      	strh	r3, [r4, #12]
 8015daa:	6923      	ldr	r3, [r4, #16]
 8015dac:	b94b      	cbnz	r3, 8015dc2 <__swsetup_r+0x9a>
 8015dae:	89a3      	ldrh	r3, [r4, #12]
 8015db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015db8:	d003      	beq.n	8015dc2 <__swsetup_r+0x9a>
 8015dba:	4621      	mov	r1, r4
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	f000 f917 	bl	8015ff0 <__smakebuf_r>
 8015dc2:	89a2      	ldrh	r2, [r4, #12]
 8015dc4:	f012 0301 	ands.w	r3, r2, #1
 8015dc8:	d00c      	beq.n	8015de4 <__swsetup_r+0xbc>
 8015dca:	2300      	movs	r3, #0
 8015dcc:	60a3      	str	r3, [r4, #8]
 8015dce:	6963      	ldr	r3, [r4, #20]
 8015dd0:	425b      	negs	r3, r3
 8015dd2:	61a3      	str	r3, [r4, #24]
 8015dd4:	6923      	ldr	r3, [r4, #16]
 8015dd6:	b953      	cbnz	r3, 8015dee <__swsetup_r+0xc6>
 8015dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ddc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015de0:	d1ba      	bne.n	8015d58 <__swsetup_r+0x30>
 8015de2:	bd70      	pop	{r4, r5, r6, pc}
 8015de4:	0792      	lsls	r2, r2, #30
 8015de6:	bf58      	it	pl
 8015de8:	6963      	ldrpl	r3, [r4, #20]
 8015dea:	60a3      	str	r3, [r4, #8]
 8015dec:	e7f2      	b.n	8015dd4 <__swsetup_r+0xac>
 8015dee:	2000      	movs	r0, #0
 8015df0:	e7f7      	b.n	8015de2 <__swsetup_r+0xba>
 8015df2:	bf00      	nop
 8015df4:	20000018 	.word	0x20000018
 8015df8:	0801633c 	.word	0x0801633c
 8015dfc:	0801635c 	.word	0x0801635c
 8015e00:	0801631c 	.word	0x0801631c

08015e04 <_close_r>:
 8015e04:	b538      	push	{r3, r4, r5, lr}
 8015e06:	4c06      	ldr	r4, [pc, #24]	; (8015e20 <_close_r+0x1c>)
 8015e08:	2300      	movs	r3, #0
 8015e0a:	4605      	mov	r5, r0
 8015e0c:	4608      	mov	r0, r1
 8015e0e:	6023      	str	r3, [r4, #0]
 8015e10:	f7f8 fa93 	bl	800e33a <_close>
 8015e14:	1c43      	adds	r3, r0, #1
 8015e16:	d102      	bne.n	8015e1e <_close_r+0x1a>
 8015e18:	6823      	ldr	r3, [r4, #0]
 8015e1a:	b103      	cbz	r3, 8015e1e <_close_r+0x1a>
 8015e1c:	602b      	str	r3, [r5, #0]
 8015e1e:	bd38      	pop	{r3, r4, r5, pc}
 8015e20:	200146a8 	.word	0x200146a8

08015e24 <__sflush_r>:
 8015e24:	898a      	ldrh	r2, [r1, #12]
 8015e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	0710      	lsls	r0, r2, #28
 8015e2e:	460c      	mov	r4, r1
 8015e30:	d458      	bmi.n	8015ee4 <__sflush_r+0xc0>
 8015e32:	684b      	ldr	r3, [r1, #4]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	dc05      	bgt.n	8015e44 <__sflush_r+0x20>
 8015e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	dc02      	bgt.n	8015e44 <__sflush_r+0x20>
 8015e3e:	2000      	movs	r0, #0
 8015e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e46:	2e00      	cmp	r6, #0
 8015e48:	d0f9      	beq.n	8015e3e <__sflush_r+0x1a>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e50:	682f      	ldr	r7, [r5, #0]
 8015e52:	6a21      	ldr	r1, [r4, #32]
 8015e54:	602b      	str	r3, [r5, #0]
 8015e56:	d032      	beq.n	8015ebe <__sflush_r+0x9a>
 8015e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e5a:	89a3      	ldrh	r3, [r4, #12]
 8015e5c:	075a      	lsls	r2, r3, #29
 8015e5e:	d505      	bpl.n	8015e6c <__sflush_r+0x48>
 8015e60:	6863      	ldr	r3, [r4, #4]
 8015e62:	1ac0      	subs	r0, r0, r3
 8015e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e66:	b10b      	cbz	r3, 8015e6c <__sflush_r+0x48>
 8015e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e6a:	1ac0      	subs	r0, r0, r3
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	4602      	mov	r2, r0
 8015e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e72:	6a21      	ldr	r1, [r4, #32]
 8015e74:	4628      	mov	r0, r5
 8015e76:	47b0      	blx	r6
 8015e78:	1c43      	adds	r3, r0, #1
 8015e7a:	89a3      	ldrh	r3, [r4, #12]
 8015e7c:	d106      	bne.n	8015e8c <__sflush_r+0x68>
 8015e7e:	6829      	ldr	r1, [r5, #0]
 8015e80:	291d      	cmp	r1, #29
 8015e82:	d848      	bhi.n	8015f16 <__sflush_r+0xf2>
 8015e84:	4a29      	ldr	r2, [pc, #164]	; (8015f2c <__sflush_r+0x108>)
 8015e86:	40ca      	lsrs	r2, r1
 8015e88:	07d6      	lsls	r6, r2, #31
 8015e8a:	d544      	bpl.n	8015f16 <__sflush_r+0xf2>
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	6062      	str	r2, [r4, #4]
 8015e90:	04d9      	lsls	r1, r3, #19
 8015e92:	6922      	ldr	r2, [r4, #16]
 8015e94:	6022      	str	r2, [r4, #0]
 8015e96:	d504      	bpl.n	8015ea2 <__sflush_r+0x7e>
 8015e98:	1c42      	adds	r2, r0, #1
 8015e9a:	d101      	bne.n	8015ea0 <__sflush_r+0x7c>
 8015e9c:	682b      	ldr	r3, [r5, #0]
 8015e9e:	b903      	cbnz	r3, 8015ea2 <__sflush_r+0x7e>
 8015ea0:	6560      	str	r0, [r4, #84]	; 0x54
 8015ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ea4:	602f      	str	r7, [r5, #0]
 8015ea6:	2900      	cmp	r1, #0
 8015ea8:	d0c9      	beq.n	8015e3e <__sflush_r+0x1a>
 8015eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015eae:	4299      	cmp	r1, r3
 8015eb0:	d002      	beq.n	8015eb8 <__sflush_r+0x94>
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	f7ff fb46 	bl	8015544 <_free_r>
 8015eb8:	2000      	movs	r0, #0
 8015eba:	6360      	str	r0, [r4, #52]	; 0x34
 8015ebc:	e7c0      	b.n	8015e40 <__sflush_r+0x1c>
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	47b0      	blx	r6
 8015ec4:	1c41      	adds	r1, r0, #1
 8015ec6:	d1c8      	bne.n	8015e5a <__sflush_r+0x36>
 8015ec8:	682b      	ldr	r3, [r5, #0]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d0c5      	beq.n	8015e5a <__sflush_r+0x36>
 8015ece:	2b1d      	cmp	r3, #29
 8015ed0:	d001      	beq.n	8015ed6 <__sflush_r+0xb2>
 8015ed2:	2b16      	cmp	r3, #22
 8015ed4:	d101      	bne.n	8015eda <__sflush_r+0xb6>
 8015ed6:	602f      	str	r7, [r5, #0]
 8015ed8:	e7b1      	b.n	8015e3e <__sflush_r+0x1a>
 8015eda:	89a3      	ldrh	r3, [r4, #12]
 8015edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ee0:	81a3      	strh	r3, [r4, #12]
 8015ee2:	e7ad      	b.n	8015e40 <__sflush_r+0x1c>
 8015ee4:	690f      	ldr	r7, [r1, #16]
 8015ee6:	2f00      	cmp	r7, #0
 8015ee8:	d0a9      	beq.n	8015e3e <__sflush_r+0x1a>
 8015eea:	0793      	lsls	r3, r2, #30
 8015eec:	680e      	ldr	r6, [r1, #0]
 8015eee:	bf08      	it	eq
 8015ef0:	694b      	ldreq	r3, [r1, #20]
 8015ef2:	600f      	str	r7, [r1, #0]
 8015ef4:	bf18      	it	ne
 8015ef6:	2300      	movne	r3, #0
 8015ef8:	eba6 0807 	sub.w	r8, r6, r7
 8015efc:	608b      	str	r3, [r1, #8]
 8015efe:	f1b8 0f00 	cmp.w	r8, #0
 8015f02:	dd9c      	ble.n	8015e3e <__sflush_r+0x1a>
 8015f04:	4643      	mov	r3, r8
 8015f06:	463a      	mov	r2, r7
 8015f08:	6a21      	ldr	r1, [r4, #32]
 8015f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015f0c:	4628      	mov	r0, r5
 8015f0e:	47b0      	blx	r6
 8015f10:	2800      	cmp	r0, #0
 8015f12:	dc06      	bgt.n	8015f22 <__sflush_r+0xfe>
 8015f14:	89a3      	ldrh	r3, [r4, #12]
 8015f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f1a:	81a3      	strh	r3, [r4, #12]
 8015f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f20:	e78e      	b.n	8015e40 <__sflush_r+0x1c>
 8015f22:	4407      	add	r7, r0
 8015f24:	eba8 0800 	sub.w	r8, r8, r0
 8015f28:	e7e9      	b.n	8015efe <__sflush_r+0xda>
 8015f2a:	bf00      	nop
 8015f2c:	20400001 	.word	0x20400001

08015f30 <_fflush_r>:
 8015f30:	b538      	push	{r3, r4, r5, lr}
 8015f32:	690b      	ldr	r3, [r1, #16]
 8015f34:	4605      	mov	r5, r0
 8015f36:	460c      	mov	r4, r1
 8015f38:	b1db      	cbz	r3, 8015f72 <_fflush_r+0x42>
 8015f3a:	b118      	cbz	r0, 8015f44 <_fflush_r+0x14>
 8015f3c:	6983      	ldr	r3, [r0, #24]
 8015f3e:	b90b      	cbnz	r3, 8015f44 <_fflush_r+0x14>
 8015f40:	f7fe ff76 	bl	8014e30 <__sinit>
 8015f44:	4b0c      	ldr	r3, [pc, #48]	; (8015f78 <_fflush_r+0x48>)
 8015f46:	429c      	cmp	r4, r3
 8015f48:	d109      	bne.n	8015f5e <_fflush_r+0x2e>
 8015f4a:	686c      	ldr	r4, [r5, #4]
 8015f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f50:	b17b      	cbz	r3, 8015f72 <_fflush_r+0x42>
 8015f52:	4621      	mov	r1, r4
 8015f54:	4628      	mov	r0, r5
 8015f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f5a:	f7ff bf63 	b.w	8015e24 <__sflush_r>
 8015f5e:	4b07      	ldr	r3, [pc, #28]	; (8015f7c <_fflush_r+0x4c>)
 8015f60:	429c      	cmp	r4, r3
 8015f62:	d101      	bne.n	8015f68 <_fflush_r+0x38>
 8015f64:	68ac      	ldr	r4, [r5, #8]
 8015f66:	e7f1      	b.n	8015f4c <_fflush_r+0x1c>
 8015f68:	4b05      	ldr	r3, [pc, #20]	; (8015f80 <_fflush_r+0x50>)
 8015f6a:	429c      	cmp	r4, r3
 8015f6c:	bf08      	it	eq
 8015f6e:	68ec      	ldreq	r4, [r5, #12]
 8015f70:	e7ec      	b.n	8015f4c <_fflush_r+0x1c>
 8015f72:	2000      	movs	r0, #0
 8015f74:	bd38      	pop	{r3, r4, r5, pc}
 8015f76:	bf00      	nop
 8015f78:	0801633c 	.word	0x0801633c
 8015f7c:	0801635c 	.word	0x0801635c
 8015f80:	0801631c 	.word	0x0801631c

08015f84 <_lseek_r>:
 8015f84:	b538      	push	{r3, r4, r5, lr}
 8015f86:	4c07      	ldr	r4, [pc, #28]	; (8015fa4 <_lseek_r+0x20>)
 8015f88:	4605      	mov	r5, r0
 8015f8a:	4608      	mov	r0, r1
 8015f8c:	4611      	mov	r1, r2
 8015f8e:	2200      	movs	r2, #0
 8015f90:	6022      	str	r2, [r4, #0]
 8015f92:	461a      	mov	r2, r3
 8015f94:	f7f8 f9f8 	bl	800e388 <_lseek>
 8015f98:	1c43      	adds	r3, r0, #1
 8015f9a:	d102      	bne.n	8015fa2 <_lseek_r+0x1e>
 8015f9c:	6823      	ldr	r3, [r4, #0]
 8015f9e:	b103      	cbz	r3, 8015fa2 <_lseek_r+0x1e>
 8015fa0:	602b      	str	r3, [r5, #0]
 8015fa2:	bd38      	pop	{r3, r4, r5, pc}
 8015fa4:	200146a8 	.word	0x200146a8

08015fa8 <__swhatbuf_r>:
 8015fa8:	b570      	push	{r4, r5, r6, lr}
 8015faa:	460e      	mov	r6, r1
 8015fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fb0:	2900      	cmp	r1, #0
 8015fb2:	b096      	sub	sp, #88	; 0x58
 8015fb4:	4614      	mov	r4, r2
 8015fb6:	461d      	mov	r5, r3
 8015fb8:	da07      	bge.n	8015fca <__swhatbuf_r+0x22>
 8015fba:	2300      	movs	r3, #0
 8015fbc:	602b      	str	r3, [r5, #0]
 8015fbe:	89b3      	ldrh	r3, [r6, #12]
 8015fc0:	061a      	lsls	r2, r3, #24
 8015fc2:	d410      	bmi.n	8015fe6 <__swhatbuf_r+0x3e>
 8015fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015fc8:	e00e      	b.n	8015fe8 <__swhatbuf_r+0x40>
 8015fca:	466a      	mov	r2, sp
 8015fcc:	f000 f8c4 	bl	8016158 <_fstat_r>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	dbf2      	blt.n	8015fba <__swhatbuf_r+0x12>
 8015fd4:	9a01      	ldr	r2, [sp, #4]
 8015fd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015fda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015fde:	425a      	negs	r2, r3
 8015fe0:	415a      	adcs	r2, r3
 8015fe2:	602a      	str	r2, [r5, #0]
 8015fe4:	e7ee      	b.n	8015fc4 <__swhatbuf_r+0x1c>
 8015fe6:	2340      	movs	r3, #64	; 0x40
 8015fe8:	2000      	movs	r0, #0
 8015fea:	6023      	str	r3, [r4, #0]
 8015fec:	b016      	add	sp, #88	; 0x58
 8015fee:	bd70      	pop	{r4, r5, r6, pc}

08015ff0 <__smakebuf_r>:
 8015ff0:	898b      	ldrh	r3, [r1, #12]
 8015ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ff4:	079d      	lsls	r5, r3, #30
 8015ff6:	4606      	mov	r6, r0
 8015ff8:	460c      	mov	r4, r1
 8015ffa:	d507      	bpl.n	801600c <__smakebuf_r+0x1c>
 8015ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016000:	6023      	str	r3, [r4, #0]
 8016002:	6123      	str	r3, [r4, #16]
 8016004:	2301      	movs	r3, #1
 8016006:	6163      	str	r3, [r4, #20]
 8016008:	b002      	add	sp, #8
 801600a:	bd70      	pop	{r4, r5, r6, pc}
 801600c:	ab01      	add	r3, sp, #4
 801600e:	466a      	mov	r2, sp
 8016010:	f7ff ffca 	bl	8015fa8 <__swhatbuf_r>
 8016014:	9900      	ldr	r1, [sp, #0]
 8016016:	4605      	mov	r5, r0
 8016018:	4630      	mov	r0, r6
 801601a:	f7ff fae1 	bl	80155e0 <_malloc_r>
 801601e:	b948      	cbnz	r0, 8016034 <__smakebuf_r+0x44>
 8016020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016024:	059a      	lsls	r2, r3, #22
 8016026:	d4ef      	bmi.n	8016008 <__smakebuf_r+0x18>
 8016028:	f023 0303 	bic.w	r3, r3, #3
 801602c:	f043 0302 	orr.w	r3, r3, #2
 8016030:	81a3      	strh	r3, [r4, #12]
 8016032:	e7e3      	b.n	8015ffc <__smakebuf_r+0xc>
 8016034:	4b0d      	ldr	r3, [pc, #52]	; (801606c <__smakebuf_r+0x7c>)
 8016036:	62b3      	str	r3, [r6, #40]	; 0x28
 8016038:	89a3      	ldrh	r3, [r4, #12]
 801603a:	6020      	str	r0, [r4, #0]
 801603c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016040:	81a3      	strh	r3, [r4, #12]
 8016042:	9b00      	ldr	r3, [sp, #0]
 8016044:	6163      	str	r3, [r4, #20]
 8016046:	9b01      	ldr	r3, [sp, #4]
 8016048:	6120      	str	r0, [r4, #16]
 801604a:	b15b      	cbz	r3, 8016064 <__smakebuf_r+0x74>
 801604c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016050:	4630      	mov	r0, r6
 8016052:	f000 f893 	bl	801617c <_isatty_r>
 8016056:	b128      	cbz	r0, 8016064 <__smakebuf_r+0x74>
 8016058:	89a3      	ldrh	r3, [r4, #12]
 801605a:	f023 0303 	bic.w	r3, r3, #3
 801605e:	f043 0301 	orr.w	r3, r3, #1
 8016062:	81a3      	strh	r3, [r4, #12]
 8016064:	89a3      	ldrh	r3, [r4, #12]
 8016066:	431d      	orrs	r5, r3
 8016068:	81a5      	strh	r5, [r4, #12]
 801606a:	e7cd      	b.n	8016008 <__smakebuf_r+0x18>
 801606c:	08014df9 	.word	0x08014df9

08016070 <__ascii_mbtowc>:
 8016070:	b082      	sub	sp, #8
 8016072:	b901      	cbnz	r1, 8016076 <__ascii_mbtowc+0x6>
 8016074:	a901      	add	r1, sp, #4
 8016076:	b142      	cbz	r2, 801608a <__ascii_mbtowc+0x1a>
 8016078:	b14b      	cbz	r3, 801608e <__ascii_mbtowc+0x1e>
 801607a:	7813      	ldrb	r3, [r2, #0]
 801607c:	600b      	str	r3, [r1, #0]
 801607e:	7812      	ldrb	r2, [r2, #0]
 8016080:	1c10      	adds	r0, r2, #0
 8016082:	bf18      	it	ne
 8016084:	2001      	movne	r0, #1
 8016086:	b002      	add	sp, #8
 8016088:	4770      	bx	lr
 801608a:	4610      	mov	r0, r2
 801608c:	e7fb      	b.n	8016086 <__ascii_mbtowc+0x16>
 801608e:	f06f 0001 	mvn.w	r0, #1
 8016092:	e7f8      	b.n	8016086 <__ascii_mbtowc+0x16>

08016094 <memmove>:
 8016094:	4288      	cmp	r0, r1
 8016096:	b510      	push	{r4, lr}
 8016098:	eb01 0302 	add.w	r3, r1, r2
 801609c:	d807      	bhi.n	80160ae <memmove+0x1a>
 801609e:	1e42      	subs	r2, r0, #1
 80160a0:	4299      	cmp	r1, r3
 80160a2:	d00a      	beq.n	80160ba <memmove+0x26>
 80160a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80160ac:	e7f8      	b.n	80160a0 <memmove+0xc>
 80160ae:	4283      	cmp	r3, r0
 80160b0:	d9f5      	bls.n	801609e <memmove+0xa>
 80160b2:	1881      	adds	r1, r0, r2
 80160b4:	1ad2      	subs	r2, r2, r3
 80160b6:	42d3      	cmn	r3, r2
 80160b8:	d100      	bne.n	80160bc <memmove+0x28>
 80160ba:	bd10      	pop	{r4, pc}
 80160bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80160c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80160c4:	e7f7      	b.n	80160b6 <memmove+0x22>

080160c6 <__malloc_lock>:
 80160c6:	4770      	bx	lr

080160c8 <__malloc_unlock>:
 80160c8:	4770      	bx	lr

080160ca <_realloc_r>:
 80160ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160cc:	4607      	mov	r7, r0
 80160ce:	4614      	mov	r4, r2
 80160d0:	460e      	mov	r6, r1
 80160d2:	b921      	cbnz	r1, 80160de <_realloc_r+0x14>
 80160d4:	4611      	mov	r1, r2
 80160d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80160da:	f7ff ba81 	b.w	80155e0 <_malloc_r>
 80160de:	b922      	cbnz	r2, 80160ea <_realloc_r+0x20>
 80160e0:	f7ff fa30 	bl	8015544 <_free_r>
 80160e4:	4625      	mov	r5, r4
 80160e6:	4628      	mov	r0, r5
 80160e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ea:	f000 f857 	bl	801619c <_malloc_usable_size_r>
 80160ee:	42a0      	cmp	r0, r4
 80160f0:	d20f      	bcs.n	8016112 <_realloc_r+0x48>
 80160f2:	4621      	mov	r1, r4
 80160f4:	4638      	mov	r0, r7
 80160f6:	f7ff fa73 	bl	80155e0 <_malloc_r>
 80160fa:	4605      	mov	r5, r0
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d0f2      	beq.n	80160e6 <_realloc_r+0x1c>
 8016100:	4631      	mov	r1, r6
 8016102:	4622      	mov	r2, r4
 8016104:	f7fd fb68 	bl	80137d8 <memcpy>
 8016108:	4631      	mov	r1, r6
 801610a:	4638      	mov	r0, r7
 801610c:	f7ff fa1a 	bl	8015544 <_free_r>
 8016110:	e7e9      	b.n	80160e6 <_realloc_r+0x1c>
 8016112:	4635      	mov	r5, r6
 8016114:	e7e7      	b.n	80160e6 <_realloc_r+0x1c>
	...

08016118 <_read_r>:
 8016118:	b538      	push	{r3, r4, r5, lr}
 801611a:	4c07      	ldr	r4, [pc, #28]	; (8016138 <_read_r+0x20>)
 801611c:	4605      	mov	r5, r0
 801611e:	4608      	mov	r0, r1
 8016120:	4611      	mov	r1, r2
 8016122:	2200      	movs	r2, #0
 8016124:	6022      	str	r2, [r4, #0]
 8016126:	461a      	mov	r2, r3
 8016128:	f7f8 f8ce 	bl	800e2c8 <_read>
 801612c:	1c43      	adds	r3, r0, #1
 801612e:	d102      	bne.n	8016136 <_read_r+0x1e>
 8016130:	6823      	ldr	r3, [r4, #0]
 8016132:	b103      	cbz	r3, 8016136 <_read_r+0x1e>
 8016134:	602b      	str	r3, [r5, #0]
 8016136:	bd38      	pop	{r3, r4, r5, pc}
 8016138:	200146a8 	.word	0x200146a8

0801613c <__ascii_wctomb>:
 801613c:	b149      	cbz	r1, 8016152 <__ascii_wctomb+0x16>
 801613e:	2aff      	cmp	r2, #255	; 0xff
 8016140:	bf85      	ittet	hi
 8016142:	238a      	movhi	r3, #138	; 0x8a
 8016144:	6003      	strhi	r3, [r0, #0]
 8016146:	700a      	strbls	r2, [r1, #0]
 8016148:	f04f 30ff 	movhi.w	r0, #4294967295
 801614c:	bf98      	it	ls
 801614e:	2001      	movls	r0, #1
 8016150:	4770      	bx	lr
 8016152:	4608      	mov	r0, r1
 8016154:	4770      	bx	lr
	...

08016158 <_fstat_r>:
 8016158:	b538      	push	{r3, r4, r5, lr}
 801615a:	4c07      	ldr	r4, [pc, #28]	; (8016178 <_fstat_r+0x20>)
 801615c:	2300      	movs	r3, #0
 801615e:	4605      	mov	r5, r0
 8016160:	4608      	mov	r0, r1
 8016162:	4611      	mov	r1, r2
 8016164:	6023      	str	r3, [r4, #0]
 8016166:	f7f8 f8f4 	bl	800e352 <_fstat>
 801616a:	1c43      	adds	r3, r0, #1
 801616c:	d102      	bne.n	8016174 <_fstat_r+0x1c>
 801616e:	6823      	ldr	r3, [r4, #0]
 8016170:	b103      	cbz	r3, 8016174 <_fstat_r+0x1c>
 8016172:	602b      	str	r3, [r5, #0]
 8016174:	bd38      	pop	{r3, r4, r5, pc}
 8016176:	bf00      	nop
 8016178:	200146a8 	.word	0x200146a8

0801617c <_isatty_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4c06      	ldr	r4, [pc, #24]	; (8016198 <_isatty_r+0x1c>)
 8016180:	2300      	movs	r3, #0
 8016182:	4605      	mov	r5, r0
 8016184:	4608      	mov	r0, r1
 8016186:	6023      	str	r3, [r4, #0]
 8016188:	f7f8 f8f3 	bl	800e372 <_isatty>
 801618c:	1c43      	adds	r3, r0, #1
 801618e:	d102      	bne.n	8016196 <_isatty_r+0x1a>
 8016190:	6823      	ldr	r3, [r4, #0]
 8016192:	b103      	cbz	r3, 8016196 <_isatty_r+0x1a>
 8016194:	602b      	str	r3, [r5, #0]
 8016196:	bd38      	pop	{r3, r4, r5, pc}
 8016198:	200146a8 	.word	0x200146a8

0801619c <_malloc_usable_size_r>:
 801619c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161a0:	1f18      	subs	r0, r3, #4
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	bfbc      	itt	lt
 80161a6:	580b      	ldrlt	r3, [r1, r0]
 80161a8:	18c0      	addlt	r0, r0, r3
 80161aa:	4770      	bx	lr

080161ac <roundf>:
 80161ac:	ee10 0a10 	vmov	r0, s0
 80161b0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80161b4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80161b8:	2a16      	cmp	r2, #22
 80161ba:	dc15      	bgt.n	80161e8 <roundf+0x3c>
 80161bc:	2a00      	cmp	r2, #0
 80161be:	da08      	bge.n	80161d2 <roundf+0x26>
 80161c0:	3201      	adds	r2, #1
 80161c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80161c6:	d101      	bne.n	80161cc <roundf+0x20>
 80161c8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80161cc:	ee00 3a10 	vmov	s0, r3
 80161d0:	4770      	bx	lr
 80161d2:	4908      	ldr	r1, [pc, #32]	; (80161f4 <roundf+0x48>)
 80161d4:	4111      	asrs	r1, r2
 80161d6:	4208      	tst	r0, r1
 80161d8:	d0fa      	beq.n	80161d0 <roundf+0x24>
 80161da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80161de:	4113      	asrs	r3, r2
 80161e0:	4403      	add	r3, r0
 80161e2:	ea23 0301 	bic.w	r3, r3, r1
 80161e6:	e7f1      	b.n	80161cc <roundf+0x20>
 80161e8:	2a80      	cmp	r2, #128	; 0x80
 80161ea:	d1f1      	bne.n	80161d0 <roundf+0x24>
 80161ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	007fffff 	.word	0x007fffff

080161f8 <_init>:
 80161f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161fa:	bf00      	nop
 80161fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161fe:	bc08      	pop	{r3}
 8016200:	469e      	mov	lr, r3
 8016202:	4770      	bx	lr

08016204 <_fini>:
 8016204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016206:	bf00      	nop
 8016208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801620a:	bc08      	pop	{r3}
 801620c:	469e      	mov	lr, r3
 801620e:	4770      	bx	lr
