
robotore_v2.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash2 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000c230  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000318  08014230  08014230  00024230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08014548  08014548  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  08014548  08014548  00024548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08014550  08014550  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08014550  08014550  00024550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08014554  08014554  00024554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  08014558  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000144c8  200001e8  08014740  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200146b0  08014740  000346b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d014  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000040a0  00000000  00000000  0004d22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001700  00000000  00000000  000512d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001550  00000000  00000000  000529d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002403d  00000000  00000000  00053f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014de9  00000000  00000000  00077f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000ca750  00000000  00000000  0008cd46  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00157496  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e94  00000000  00000000  00157514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	08014218 	.word	0x08014218

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	08014218 	.word	0x08014218

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	733b      	strb	r3, [r7, #12]
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8008dca:	f107 020c 	add.w	r2, r7, #12
 8008dce:	2364      	movs	r3, #100	; 0x64
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	217c      	movs	r1, #124	; 0x7c
 8008dd6:	4803      	ldr	r0, [pc, #12]	; (8008de4 <lcd_cmd+0x2c>)
 8008dd8:	f005 fa88 	bl	800e2ec <HAL_I2C_Master_Transmit>
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	2001455c 	.word	0x2001455c

08008de8 <lcd_data>:

void lcd_data(uint8_t data) {
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8008df2:	2340      	movs	r3, #64	; 0x40
 8008df4:	733b      	strb	r3, [r7, #12]
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8008dfa:	f107 020c 	add.w	r2, r7, #12
 8008dfe:	2364      	movs	r3, #100	; 0x64
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2302      	movs	r3, #2
 8008e04:	217c      	movs	r1, #124	; 0x7c
 8008e06:	4803      	ldr	r0, [pc, #12]	; (8008e14 <lcd_data+0x2c>)
 8008e08:	f005 fa70 	bl	800e2ec <HAL_I2C_Master_Transmit>
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	2001455c 	.word	0x2001455c

08008e18 <lcd_init>:

void lcd_init(){
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	2110      	movs	r1, #16
 8008e20:	481e      	ldr	r0, [pc, #120]	; (8008e9c <lcd_init+0x84>)
 8008e22:	f005 f911 	bl	800e048 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8008e26:	2028      	movs	r0, #40	; 0x28
 8008e28:	f003 fbd8 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x38);
 8008e2c:	2038      	movs	r0, #56	; 0x38
 8008e2e:	f7ff ffc3 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e32:	2001      	movs	r0, #1
 8008e34:	f003 fbd2 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x39);
 8008e38:	2039      	movs	r0, #57	; 0x39
 8008e3a:	f7ff ffbd 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e3e:	2001      	movs	r0, #1
 8008e40:	f003 fbcc 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x14);
 8008e44:	2014      	movs	r0, #20
 8008e46:	f7ff ffb7 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f003 fbc6 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x70);
 8008e50:	2070      	movs	r0, #112	; 0x70
 8008e52:	f7ff ffb1 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e56:	2001      	movs	r0, #1
 8008e58:	f003 fbc0 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x56);
 8008e5c:	2056      	movs	r0, #86	; 0x56
 8008e5e:	f7ff ffab 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e62:	2001      	movs	r0, #1
 8008e64:	f003 fbba 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x6C);
 8008e68:	206c      	movs	r0, #108	; 0x6c
 8008e6a:	f7ff ffa5 	bl	8008db8 <lcd_cmd>
	HAL_Delay(200);
 8008e6e:	20c8      	movs	r0, #200	; 0xc8
 8008e70:	f003 fbb4 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x38);
 8008e74:	2038      	movs	r0, #56	; 0x38
 8008e76:	f7ff ff9f 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f003 fbae 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x0C);
 8008e80:	200c      	movs	r0, #12
 8008e82:	f7ff ff99 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e86:	2001      	movs	r0, #1
 8008e88:	f003 fba8 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x01);
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f7ff ff93 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008e92:	2001      	movs	r0, #1
 8008e94:	f003 fba2 	bl	800c5dc <HAL_Delay>
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40020000 	.word	0x40020000

08008ea0 <lcd_clear>:

void lcd_clear(){
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f7ff ff87 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f003 fb96 	bl	800c5dc <HAL_Delay>
	lcd_cmd(0x02);
 8008eb0:	2002      	movs	r0, #2
 8008eb2:	f7ff ff81 	bl	8008db8 <lcd_cmd>
	HAL_Delay(1);
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f003 fb90 	bl	800c5dc <HAL_Delay>
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <lcd_locate>:

void lcd_locate(int x, int y) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	019b      	lsls	r3, r3, #6
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff ff6b 	bl	8008db8 <lcd_cmd>
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <lcd_print>:

void lcd_print(const char *str) {
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8008ef2:	e007      	b.n	8008f04 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff75 	bl	8008de8 <lcd_data>
			str++;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3301      	adds	r3, #1
 8008f02:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f3      	bne.n	8008ef4 <lcd_print+0xa>
	}
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8008f14:	b40f      	push	{r0, r1, r2, r3}
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 8008f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f20:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8008f22:	1d3b      	adds	r3, r7, #4
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f009 f903 	bl	8012134 <vsiprintf>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8008f32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dd03      	ble.n	8008f42 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff ffd4 	bl	8008eea <lcd_print>
	}

	return ret;
 8008f42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f50:	b004      	add	sp, #16
 8008f52:	4770      	bx	lr

08008f54 <log_init>:
int count_num=0;
uint8_t second_soeed=0;
uint16_t correction[200]= {0};
uint8_t cross_maker=0;
extern float test;
void log_init (){
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	actual__callog_adress = start_adress_sector6;
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <log_init+0x44>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a0f      	ldr	r2, [pc, #60]	; (8008f9c <log_init+0x48>)
 8008f5e:	6013      	str	r3, [r2, #0]
	callog_adress = start_adress_sector7;
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <log_init+0x4c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0f      	ldr	r2, [pc, #60]	; (8008fa4 <log_init+0x50>)
 8008f66:	6013      	str	r3, [r2, #0]
	actual__velo_adress = start_adress_sector8;
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <log_init+0x54>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	; (8008fac <log_init+0x58>)
 8008f6e:	6013      	str	r3, [r2, #0]
	loadlog_adress = start_adress_sector9;
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <log_init+0x5c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0f      	ldr	r2, [pc, #60]	; (8008fb4 <log_init+0x60>)
 8008f76:	6013      	str	r3, [r2, #0]
	side_adress = start_adress_sector10;
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <log_init+0x64>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <log_init+0x68>)
 8008f7e:	6013      	str	r3, [r2, #0]
	plan_velo_adress=start_adress_sector11;
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <log_init+0x6c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <log_init+0x70>)
 8008f86:	6013      	str	r3, [r2, #0]
	log_count=0;
 8008f88:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <log_init+0x74>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	08014250 	.word	0x08014250
 8008f9c:	2000c2dc 	.word	0x2000c2dc
 8008fa0:	08014254 	.word	0x08014254
 8008fa4:	2000c2e0 	.word	0x2000c2e0
 8008fa8:	08014258 	.word	0x08014258
 8008fac:	2000c2f0 	.word	0x2000c2f0
 8008fb0:	0801425c 	.word	0x0801425c
 8008fb4:	2000c2ec 	.word	0x2000c2ec
 8008fb8:	08014260 	.word	0x08014260
 8008fbc:	2000c2f4 	.word	0x2000c2f4
 8008fc0:	08014264 	.word	0x08014264
 8008fc4:	2000c2e8 	.word	0x2000c2e8
 8008fc8:	2000c0b4 	.word	0x2000c0b4

08008fcc <log_write>:
void speed_sloow(int a,int b,float speed){
	for(int i=a;i<=b;i++){
		secondsp[i] = speed;
	}
}
void log_write(float u){
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	ed87 0a01 	vstr	s0, [r7, #4]
	  FLASH_Write_Word_F(callog_adress,u);
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <log_write+0x48>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	ed97 0a01 	vldr	s0, [r7, #4]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fcb4 	bl	800994c <FLASH_Write_Word_F>
	  FLASH_Write_Word_F(loadlog_adress,load_log);
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <log_write+0x4c>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <log_write+0x50>)
 8008fea:	edd3 7a00 	vldr	s15, [r3]
 8008fee:	eeb0 0a67 	vmov.f32	s0, s15
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f000 fcaa 	bl	800994c <FLASH_Write_Word_F>
	  callog_adress+= 0x04;
 8008ff8:	4b06      	ldr	r3, [pc, #24]	; (8009014 <log_write+0x48>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4a05      	ldr	r2, [pc, #20]	; (8009014 <log_write+0x48>)
 8009000:	6013      	str	r3, [r2, #0]
	  loadlog_adress+= 0x04;
 8009002:	4b05      	ldr	r3, [pc, #20]	; (8009018 <log_write+0x4c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3304      	adds	r3, #4
 8009008:	4a03      	ldr	r2, [pc, #12]	; (8009018 <log_write+0x4c>)
 800900a:	6013      	str	r3, [r2, #0]
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	2000c2e0 	.word	0x2000c2e0
 8009018:	2000c2ec 	.word	0x2000c2ec
 800901c:	20000204 	.word	0x20000204

08009020 <first_cale>:
inline void first_cale(){
 8009020:	b5b0      	push	{r4, r5, r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
	static float cale_val=0;
	static float cale_buff=0;
	static uint16_t num=0;
	float cale=0;
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	607b      	str	r3, [r7, #4]
	static int frp=0;
	static int frap=0;
	static int d=39;
	static uint16_t coi=0;
	num++;
 800902c:	4b88      	ldr	r3, [pc, #544]	; (8009250 <first_cale+0x230>)
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	4b86      	ldr	r3, [pc, #536]	; (8009250 <first_cale+0x230>)
 8009036:	801a      	strh	r2, [r3, #0]
	cale_val += calc_angle()*T;
 8009038:	f000 fd6e 	bl	8009b18 <calc_angle>
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff f9b9 	bl	80083b8 <__aeabi_f2d>
 8009046:	a37c      	add	r3, pc, #496	; (adr r3, 8009238 <first_cale+0x218>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7ff fa0c 	bl	8008468 <__aeabi_dmul>
 8009050:	4603      	mov	r3, r0
 8009052:	460c      	mov	r4, r1
 8009054:	4625      	mov	r5, r4
 8009056:	461c      	mov	r4, r3
 8009058:	4b7e      	ldr	r3, [pc, #504]	; (8009254 <first_cale+0x234>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff f9ab 	bl	80083b8 <__aeabi_f2d>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	f7ff f847 	bl	80080fc <__adddf3>
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
 8009072:	4618      	mov	r0, r3
 8009074:	4621      	mov	r1, r4
 8009076:	f7ff fccf 	bl	8008a18 <__aeabi_d2f>
 800907a:	4602      	mov	r2, r0
 800907c:	4b75      	ldr	r3, [pc, #468]	; (8009254 <first_cale+0x234>)
 800907e:	601a      	str	r2, [r3, #0]

	if(log2_flag) {
 8009080:	4b75      	ldr	r3, [pc, #468]	; (8009258 <first_cale+0x238>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d070      	beq.n	800916a <first_cale+0x14a>
		coi++;
 8009088:	4b74      	ldr	r3, [pc, #464]	; (800925c <first_cale+0x23c>)
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	4b72      	ldr	r3, [pc, #456]	; (800925c <first_cale+0x23c>)
 8009092:	801a      	strh	r2, [r3, #0]
		cale = cale_val;
 8009094:	4b6f      	ldr	r3, [pc, #444]	; (8009254 <first_cale+0x234>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	607b      	str	r3, [r7, #4]

		log_write(cale_val);
 800909a:	4b6e      	ldr	r3, [pc, #440]	; (8009254 <first_cale+0x234>)
 800909c:	edd3 7a00 	vldr	s15, [r3]
 80090a0:	eeb0 0a67 	vmov.f32	s0, s15
 80090a4:	f7ff ff92 	bl	8008fcc <log_write>
		cale_val=0;
 80090a8:	4b6a      	ldr	r3, [pc, #424]	; (8009254 <first_cale+0x234>)
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
		if((cale_buff-cale)<=0.05 && (cale_buff-cale)>=-0.05 ) frp++;
 80090b0:	4b6b      	ldr	r3, [pc, #428]	; (8009260 <first_cale+0x240>)
 80090b2:	ed93 7a00 	vldr	s14, [r3]
 80090b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80090ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090be:	ee17 0a90 	vmov	r0, s15
 80090c2:	f7ff f979 	bl	80083b8 <__aeabi_f2d>
 80090c6:	a35e      	add	r3, pc, #376	; (adr r3, 8009240 <first_cale+0x220>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7ff fc48 	bl	8008960 <__aeabi_dcmple>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d017      	beq.n	8009106 <first_cale+0xe6>
 80090d6:	4b62      	ldr	r3, [pc, #392]	; (8009260 <first_cale+0x240>)
 80090d8:	ed93 7a00 	vldr	s14, [r3]
 80090dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80090e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090e4:	ee17 0a90 	vmov	r0, s15
 80090e8:	f7ff f966 	bl	80083b8 <__aeabi_f2d>
 80090ec:	a356      	add	r3, pc, #344	; (adr r3, 8009248 <first_cale+0x228>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7ff fc3f 	bl	8008974 <__aeabi_dcmpge>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <first_cale+0xe6>
 80090fc:	4b59      	ldr	r3, [pc, #356]	; (8009264 <first_cale+0x244>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	4a58      	ldr	r2, [pc, #352]	; (8009264 <first_cale+0x244>)
 8009104:	6013      	str	r3, [r2, #0]
		cale_buff = cale;
 8009106:	4a56      	ldr	r2, [pc, #344]	; (8009260 <first_cale+0x240>)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6013      	str	r3, [r2, #0]
		if(frp >= 50 || cross_line){
 800910c:	4b55      	ldr	r3, [pc, #340]	; (8009264 <first_cale+0x244>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b31      	cmp	r3, #49	; 0x31
 8009112:	dc03      	bgt.n	800911c <first_cale+0xfc>
 8009114:	4b54      	ldr	r3, [pc, #336]	; (8009268 <first_cale+0x248>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01a      	beq.n	8009152 <first_cale+0x132>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800911c:	2200      	movs	r2, #0
 800911e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009122:	4852      	ldr	r0, [pc, #328]	; (800926c <first_cale+0x24c>)
 8009124:	f004 ff90 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8009128:	2200      	movs	r2, #0
 800912a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800912e:	484f      	ldr	r0, [pc, #316]	; (800926c <first_cale+0x24c>)
 8009130:	f004 ff8a 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8009134:	2200      	movs	r2, #0
 8009136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800913a:	484c      	ldr	r0, [pc, #304]	; (800926c <first_cale+0x24c>)
 800913c:	f004 ff84 	bl	800e048 <HAL_GPIO_WritePin>
			straight_flag = true;
 8009140:	4b4b      	ldr	r3, [pc, #300]	; (8009270 <first_cale+0x250>)
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]
			frp=30;
 8009146:	4b47      	ldr	r3, [pc, #284]	; (8009264 <first_cale+0x244>)
 8009148:	221e      	movs	r2, #30
 800914a:	601a      	str	r2, [r3, #0]
			frap =0;
 800914c:	4b49      	ldr	r3, [pc, #292]	; (8009274 <first_cale+0x254>)
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
//			straight_flag = false;
//			frap = 0;
//			frp=0;
//		}

		log2_flag=0;
 8009152:	4b41      	ldr	r3, [pc, #260]	; (8009258 <first_cale+0x238>)
 8009154:	2200      	movs	r2, #0
 8009156:	701a      	strb	r2, [r3, #0]
		//cale_val=0;
		num=0;
 8009158:	4b3d      	ldr	r3, [pc, #244]	; (8009250 <first_cale+0x230>)
 800915a:	2200      	movs	r2, #0
 800915c:	801a      	strh	r2, [r3, #0]
		co++;
 800915e:	4b46      	ldr	r3, [pc, #280]	; (8009278 <first_cale+0x258>)
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	4b44      	ldr	r3, [pc, #272]	; (8009278 <first_cale+0x258>)
 8009168:	801a      	strh	r2, [r3, #0]
	}

//	if(straight_flag==1  && correc_maker==1){
	//if(coi>=30)HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	if(correc_maker==1 && straight_flag==1 ){
 800916a:	4b44      	ldr	r3, [pc, #272]	; (800927c <first_cale+0x25c>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d12e      	bne.n	80091d0 <first_cale+0x1b0>
 8009172:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <first_cale+0x250>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d12a      	bne.n	80091d0 <first_cale+0x1b0>
//	if(correc_maker==1){
		FLASH_Write_Word_S(side_adress,log_count_buff);
 800917a:	4b41      	ldr	r3, [pc, #260]	; (8009280 <first_cale+0x260>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b41      	ldr	r3, [pc, #260]	; (8009284 <first_cale+0x264>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4619      	mov	r1, r3
 8009184:	4610      	mov	r0, r2
 8009186:	f000 fbb9 	bl	80098fc <FLASH_Write_Word_S>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800918a:	2201      	movs	r2, #1
 800918c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009190:	4836      	ldr	r0, [pc, #216]	; (800926c <first_cale+0x24c>)
 8009192:	f004 ff59 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8009196:	2201      	movs	r2, #1
 8009198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800919c:	4833      	ldr	r0, [pc, #204]	; (800926c <first_cale+0x24c>)
 800919e:	f004 ff53 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80091a2:	2201      	movs	r2, #1
 80091a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091a8:	4830      	ldr	r0, [pc, #192]	; (800926c <first_cale+0x24c>)
 80091aa:	f004 ff4d 	bl	800e048 <HAL_GPIO_WritePin>
		side_adress+= 0x04;
 80091ae:	4b34      	ldr	r3, [pc, #208]	; (8009280 <first_cale+0x260>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4a32      	ldr	r2, [pc, #200]	; (8009280 <first_cale+0x260>)
 80091b6:	6013      	str	r3, [r2, #0]
		straight_flag=false;
 80091b8:	4b2d      	ldr	r3, [pc, #180]	; (8009270 <first_cale+0x250>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 80091be:	4b2f      	ldr	r3, [pc, #188]	; (800927c <first_cale+0x25c>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	701a      	strb	r2, [r3, #0]
		coi=0;
 80091c4:	4b25      	ldr	r3, [pc, #148]	; (800925c <first_cale+0x23c>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	801a      	strh	r2, [r3, #0]
		frp=0;
 80091ca:	4b26      	ldr	r3, [pc, #152]	; (8009264 <first_cale+0x244>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
	}
	if(correc_maker==1){
 80091d0:	4b2a      	ldr	r3, [pc, #168]	; (800927c <first_cale+0x25c>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d105      	bne.n	80091e4 <first_cale+0x1c4>
		straight_flag = false;
 80091d8:	4b25      	ldr	r3, [pc, #148]	; (8009270 <first_cale+0x250>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
		frp= 0;
 80091de:	4b21      	ldr	r3, [pc, #132]	; (8009264 <first_cale+0x244>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
		//coi=0;
	}
	if(cross_maker){
 80091e4:	4b28      	ldr	r3, [pc, #160]	; (8009288 <first_cale+0x268>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d021      	beq.n	8009230 <first_cale+0x210>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80091ec:	2201      	movs	r2, #1
 80091ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091f2:	481e      	ldr	r0, [pc, #120]	; (800926c <first_cale+0x24c>)
 80091f4:	f004 ff28 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80091f8:	2201      	movs	r2, #1
 80091fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091fe:	481b      	ldr	r0, [pc, #108]	; (800926c <first_cale+0x24c>)
 8009200:	f004 ff22 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8009204:	2201      	movs	r2, #1
 8009206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800920a:	4818      	ldr	r0, [pc, #96]	; (800926c <first_cale+0x24c>)
 800920c:	f004 ff1c 	bl	800e048 <HAL_GPIO_WritePin>
		work_ram[d] = log_count_buff;
 8009210:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <first_cale+0x264>)
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	4b1d      	ldr	r3, [pc, #116]	; (800928c <first_cale+0x26c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	b291      	uxth	r1, r2
 800921a:	4a1d      	ldr	r2, [pc, #116]	; (8009290 <first_cale+0x270>)
 800921c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		cross_maker = false;
 8009220:	4b19      	ldr	r3, [pc, #100]	; (8009288 <first_cale+0x268>)
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
		d++;
 8009226:	4b19      	ldr	r3, [pc, #100]	; (800928c <first_cale+0x26c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	4a17      	ldr	r2, [pc, #92]	; (800928c <first_cale+0x26c>)
 800922e:	6013      	str	r3, [r2, #0]
	}


}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bdb0      	pop	{r4, r5, r7, pc}
 8009238:	d2f1a9fc 	.word	0xd2f1a9fc
 800923c:	3f50624d 	.word	0x3f50624d
 8009240:	9999999a 	.word	0x9999999a
 8009244:	3fa99999 	.word	0x3fa99999
 8009248:	9999999a 	.word	0x9999999a
 800924c:	bfa99999 	.word	0xbfa99999
 8009250:	2000c252 	.word	0x2000c252
 8009254:	2000c254 	.word	0x2000c254
 8009258:	2000020b 	.word	0x2000020b
 800925c:	2000c258 	.word	0x2000c258
 8009260:	2000c25c 	.word	0x2000c25c
 8009264:	2000c260 	.word	0x2000c260
 8009268:	2000c2cc 	.word	0x2000c2cc
 800926c:	40020000 	.word	0x40020000
 8009270:	2000020c 	.word	0x2000020c
 8009274:	2000c264 	.word	0x2000c264
 8009278:	20000208 	.word	0x20000208
 800927c:	2000c0b0 	.word	0x2000c0b0
 8009280:	2000c2f4 	.word	0x2000c2f4
 8009284:	2000c2e4 	.word	0x2000c2e4
 8009288:	2000c250 	.word	0x2000c250
 800928c:	20000000 	.word	0x20000000
 8009290:	2000c310 	.word	0x2000c310

08009294 <first_driv>:
inline void first_driv(float log){
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	ed87 0a01 	vstr	s0, [r7, #4]
	static float logbuff=0;
	static float buff=0;
	//	logbuff = logbuff + log;

		logbuff += log;
 800929e:	4b19      	ldr	r3, [pc, #100]	; (8009304 <first_driv+0x70>)
 80092a0:	ed93 7a00 	vldr	s14, [r3]
 80092a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80092a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ac:	4b15      	ldr	r3, [pc, #84]	; (8009304 <first_driv+0x70>)
 80092ae:	edc3 7a00 	vstr	s15, [r3]
		load_log =logbuff;
 80092b2:	4b14      	ldr	r3, [pc, #80]	; (8009304 <first_driv+0x70>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a14      	ldr	r2, [pc, #80]	; (8009308 <first_driv+0x74>)
 80092b8:	6013      	str	r3, [r2, #0]
	//		logbuff = logbuff-10.0;
	//		buff = logbuff;
	//		log_count++;
	//
	//	}
		if((logbuff-buff)>=10.000){
 80092ba:	4b12      	ldr	r3, [pc, #72]	; (8009304 <first_driv+0x70>)
 80092bc:	ed93 7a00 	vldr	s14, [r3]
 80092c0:	4b12      	ldr	r3, [pc, #72]	; (800930c <first_driv+0x78>)
 80092c2:	edd3 7a00 	vldr	s15, [r3]
 80092c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80092ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d6:	da00      	bge.n	80092da <first_driv+0x46>
			//logbuff = 0;
			//buff = logbuff;
			log_count++;

		}
}
 80092d8:	e00e      	b.n	80092f8 <first_driv+0x64>
			log_flag = 1;
 80092da:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <first_driv+0x7c>)
 80092dc:	2201      	movs	r2, #1
 80092de:	701a      	strb	r2, [r3, #0]
			log2_flag=1;
 80092e0:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <first_driv+0x80>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	701a      	strb	r2, [r3, #0]
			buff = logbuff;
 80092e6:	4b07      	ldr	r3, [pc, #28]	; (8009304 <first_driv+0x70>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a08      	ldr	r2, [pc, #32]	; (800930c <first_driv+0x78>)
 80092ec:	6013      	str	r3, [r2, #0]
			log_count++;
 80092ee:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <first_driv+0x84>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	4a08      	ldr	r2, [pc, #32]	; (8009318 <first_driv+0x84>)
 80092f6:	6013      	str	r3, [r2, #0]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	2000c268 	.word	0x2000c268
 8009308:	20000204 	.word	0x20000204
 800930c:	2000c26c 	.word	0x2000c26c
 8009310:	2000020a 	.word	0x2000020a
 8009314:	2000020b 	.word	0x2000020b
 8009318:	2000c0b4 	.word	0x2000c0b4
 800931c:	00000000 	.word	0x00000000

08009320 <second_driv>:
		correction[d] = cao;
		d++;
		side_adress+= 0x04;
	}
}
inline void second_driv(float log){
 8009320:	b5b0      	push	{r4, r5, r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af00      	add	r7, sp, #0
 8009326:	ed87 0a01 	vstr	s0, [r7, #4]
	static  int hu=0;
	static float logbuff2=0;
	static float cale_val=0;
	static uint16_t num=0;
	static uint16_t corr = 0;
	float cale=0;
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	613b      	str	r3, [r7, #16]
	static int frp=0;
	static int frap = 0;
	static int cao=0;
	int cao_d=0;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]
	int cao_v=10000;
 8009334:	f242 7310 	movw	r3, #10000	; 0x2710
 8009338:	61fb      	str	r3, [r7, #28]
	int carr_d=0;
 800933a:	2300      	movs	r3, #0
 800933c:	61bb      	str	r3, [r7, #24]
	int cou_buff=0;
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]
	static uint16_t coi=0;
	static int cros=39;

	//float fu=0;
	static uint d=0;
	if(i<=0)corr=correction[0];
 8009342:	4b8f      	ldr	r3, [pc, #572]	; (8009580 <second_driv+0x260>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	dc03      	bgt.n	8009352 <second_driv+0x32>
 800934a:	4b8e      	ldr	r3, [pc, #568]	; (8009584 <second_driv+0x264>)
 800934c:	881a      	ldrh	r2, [r3, #0]
 800934e:	4b8e      	ldr	r3, [pc, #568]	; (8009588 <second_driv+0x268>)
 8009350:	801a      	strh	r2, [r3, #0]
	num++;
 8009352:	4b8e      	ldr	r3, [pc, #568]	; (800958c <second_driv+0x26c>)
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	3301      	adds	r3, #1
 8009358:	b29a      	uxth	r2, r3
 800935a:	4b8c      	ldr	r3, [pc, #560]	; (800958c <second_driv+0x26c>)
 800935c:	801a      	strh	r2, [r3, #0]
	cale_val += calc_angle()*T;
 800935e:	f000 fbdb 	bl	8009b18 <calc_angle>
 8009362:	ee10 3a10 	vmov	r3, s0
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff f826 	bl	80083b8 <__aeabi_f2d>
 800936c:	a37e      	add	r3, pc, #504	; (adr r3, 8009568 <second_driv+0x248>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f7ff f879 	bl	8008468 <__aeabi_dmul>
 8009376:	4603      	mov	r3, r0
 8009378:	460c      	mov	r4, r1
 800937a:	4625      	mov	r5, r4
 800937c:	461c      	mov	r4, r3
 800937e:	4b84      	ldr	r3, [pc, #528]	; (8009590 <second_driv+0x270>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff f818 	bl	80083b8 <__aeabi_f2d>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7fe feb4 	bl	80080fc <__adddf3>
 8009394:	4603      	mov	r3, r0
 8009396:	460c      	mov	r4, r1
 8009398:	4618      	mov	r0, r3
 800939a:	4621      	mov	r1, r4
 800939c:	f7ff fb3c 	bl	8008a18 <__aeabi_d2f>
 80093a0:	4602      	mov	r2, r0
 80093a2:	4b7b      	ldr	r3, [pc, #492]	; (8009590 <second_driv+0x270>)
 80093a4:	601a      	str	r2, [r3, #0]

	logbuff = logbuff+ log;
 80093a6:	4b7b      	ldr	r3, [pc, #492]	; (8009594 <second_driv+0x274>)
 80093a8:	ed93 7a00 	vldr	s14, [r3]
 80093ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80093b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093b4:	4b77      	ldr	r3, [pc, #476]	; (8009594 <second_driv+0x274>)
 80093b6:	edc3 7a00 	vstr	s15, [r3]
	logbuff2 = logbuff2 + log;
 80093ba:	4b77      	ldr	r3, [pc, #476]	; (8009598 <second_driv+0x278>)
 80093bc:	ed93 7a00 	vldr	s14, [r3]
 80093c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80093c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093c8:	4b73      	ldr	r3, [pc, #460]	; (8009598 <second_driv+0x278>)
 80093ca:	edc3 7a00 	vstr	s15, [r3]
	if(logbuff2>=10.000){
 80093ce:	4b72      	ldr	r3, [pc, #456]	; (8009598 <second_driv+0x278>)
 80093d0:	edd3 7a00 	vldr	s15, [r3]
 80093d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80093d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e0:	db3b      	blt.n	800945a <second_driv+0x13a>
		log_flag = 1;
 80093e2:	4b6e      	ldr	r3, [pc, #440]	; (800959c <second_driv+0x27c>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
		cale = cale_val;
 80093e8:	4b69      	ldr	r3, [pc, #420]	; (8009590 <second_driv+0x270>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	613b      	str	r3, [r7, #16]
		if((cale_buff-cale)<=0.05 && (cale_buff-cale)>=-0.05 )frp++;//0.005
 80093ee:	4b6c      	ldr	r3, [pc, #432]	; (80095a0 <second_driv+0x280>)
 80093f0:	ed93 7a00 	vldr	s14, [r3]
 80093f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80093f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093fc:	ee17 0a90 	vmov	r0, s15
 8009400:	f7fe ffda 	bl	80083b8 <__aeabi_f2d>
 8009404:	a35a      	add	r3, pc, #360	; (adr r3, 8009570 <second_driv+0x250>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7ff faa9 	bl	8008960 <__aeabi_dcmple>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d017      	beq.n	8009444 <second_driv+0x124>
 8009414:	4b62      	ldr	r3, [pc, #392]	; (80095a0 <second_driv+0x280>)
 8009416:	ed93 7a00 	vldr	s14, [r3]
 800941a:	edd7 7a04 	vldr	s15, [r7, #16]
 800941e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009422:	ee17 0a90 	vmov	r0, s15
 8009426:	f7fe ffc7 	bl	80083b8 <__aeabi_f2d>
 800942a:	a353      	add	r3, pc, #332	; (adr r3, 8009578 <second_driv+0x258>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7ff faa0 	bl	8008974 <__aeabi_dcmpge>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d004      	beq.n	8009444 <second_driv+0x124>
 800943a:	4b5a      	ldr	r3, [pc, #360]	; (80095a4 <second_driv+0x284>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	4a58      	ldr	r2, [pc, #352]	; (80095a4 <second_driv+0x284>)
 8009442:	6013      	str	r3, [r2, #0]
		cale_buff = cale;
 8009444:	4a56      	ldr	r2, [pc, #344]	; (80095a0 <second_driv+0x280>)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6013      	str	r3, [r2, #0]
		cale_val=0;
 800944a:	4b51      	ldr	r3, [pc, #324]	; (8009590 <second_driv+0x270>)
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
		logbuff2=0;
 8009452:	4b51      	ldr	r3, [pc, #324]	; (8009598 <second_driv+0x278>)
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
	}
	//test = logbuff;
	//driv_fan(speedget);
	if(straight_flag){
 800945a:	4b53      	ldr	r3, [pc, #332]	; (80095a8 <second_driv+0x288>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d011      	beq.n	8009486 <second_driv+0x166>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8009462:	2200      	movs	r2, #0
 8009464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009468:	4850      	ldr	r0, [pc, #320]	; (80095ac <second_driv+0x28c>)
 800946a:	f004 fded 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800946e:	2200      	movs	r2, #0
 8009470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009474:	484d      	ldr	r0, [pc, #308]	; (80095ac <second_driv+0x28c>)
 8009476:	f004 fde7 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800947a:	2200      	movs	r2, #0
 800947c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009480:	484a      	ldr	r0, [pc, #296]	; (80095ac <second_driv+0x28c>)
 8009482:	f004 fde1 	bl	800e048 <HAL_GPIO_WritePin>
	}
	//else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(logbuff >= second_load[i]){
 8009486:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <second_driv+0x260>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a49      	ldr	r2, [pc, #292]	; (80095b0 <second_driv+0x290>)
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	ed93 7a00 	vldr	s14, [r3]
 8009494:	4b3f      	ldr	r3, [pc, #252]	; (8009594 <second_driv+0x274>)
 8009496:	edd3 7a00 	vldr	s15, [r3]
 800949a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	f200 80fb 	bhi.w	800969c <second_driv+0x37c>
		if(logbuff > second_load[i+1]) i++;
 80094a6:	4b36      	ldr	r3, [pc, #216]	; (8009580 <second_driv+0x260>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	4a40      	ldr	r2, [pc, #256]	; (80095b0 <second_driv+0x290>)
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	ed93 7a00 	vldr	s14, [r3]
 80094b6:	4b37      	ldr	r3, [pc, #220]	; (8009594 <second_driv+0x274>)
 80094b8:	edd3 7a00 	vldr	s15, [r3]
 80094bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d504      	bpl.n	80094d0 <second_driv+0x1b0>
 80094c6:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <second_driv+0x260>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a2c      	ldr	r2, [pc, #176]	; (8009580 <second_driv+0x260>)
 80094ce:	6013      	str	r3, [r2, #0]

		coi++;
 80094d0:	4b38      	ldr	r3, [pc, #224]	; (80095b4 <second_driv+0x294>)
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	4b36      	ldr	r3, [pc, #216]	; (80095b4 <second_driv+0x294>)
 80094da:	801a      	strh	r2, [r3, #0]
		if(secondsp[i]<2500 && count_num > i && maker_flag==1)secondsp[i]=2500;
 80094dc:	4b28      	ldr	r3, [pc, #160]	; (8009580 <second_driv+0x260>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a35      	ldr	r2, [pc, #212]	; (80095b8 <second_driv+0x298>)
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	edd3 7a00 	vldr	s15, [r3]
 80094ea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80095bc <second_driv+0x29c>
 80094ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f6:	d510      	bpl.n	800951a <second_driv+0x1fa>
 80094f8:	4b31      	ldr	r3, [pc, #196]	; (80095c0 <second_driv+0x2a0>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	4b20      	ldr	r3, [pc, #128]	; (8009580 <second_driv+0x260>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	dd0a      	ble.n	800951a <second_driv+0x1fa>
 8009504:	4b2f      	ldr	r3, [pc, #188]	; (80095c4 <second_driv+0x2a4>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d106      	bne.n	800951a <second_driv+0x1fa>
 800950c:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <second_driv+0x260>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a29      	ldr	r2, [pc, #164]	; (80095b8 <second_driv+0x298>)
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	4a2c      	ldr	r2, [pc, #176]	; (80095c8 <second_driv+0x2a8>)
 8009518:	601a      	str	r2, [r3, #0]
		if(count_num-100 < i || i <= 100){
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <second_driv+0x2a0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8009522:	4b17      	ldr	r3, [pc, #92]	; (8009580 <second_driv+0x260>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	db03      	blt.n	8009532 <second_driv+0x212>
 800952a:	4b15      	ldr	r3, [pc, #84]	; (8009580 <second_driv+0x260>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b64      	cmp	r3, #100	; 0x64
 8009530:	dc4e      	bgt.n	80095d0 <second_driv+0x2b0>
			goal=1;
 8009532:	4b26      	ldr	r3, [pc, #152]	; (80095cc <second_driv+0x2ac>)
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
			if(secondsp[i]<2500)secondsp[i]=2500;
 8009538:	4b11      	ldr	r3, [pc, #68]	; (8009580 <second_driv+0x260>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <second_driv+0x298>)
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	edd3 7a00 	vldr	s15, [r3]
 8009546:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80095bc <second_driv+0x29c>
 800954a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009552:	d540      	bpl.n	80095d6 <second_driv+0x2b6>
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <second_driv+0x260>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <second_driv+0x298>)
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	4a1a      	ldr	r2, [pc, #104]	; (80095c8 <second_driv+0x2a8>)
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	e038      	b.n	80095d6 <second_driv+0x2b6>
 8009564:	f3af 8000 	nop.w
 8009568:	d2f1a9fc 	.word	0xd2f1a9fc
 800956c:	3f50624d 	.word	0x3f50624d
 8009570:	9999999a 	.word	0x9999999a
 8009574:	3fa99999 	.word	0x3fa99999
 8009578:	9999999a 	.word	0x9999999a
 800957c:	bfa99999 	.word	0xbfa99999
 8009580:	2000c270 	.word	0x2000c270
 8009584:	2000c0c0 	.word	0x2000c0c0
 8009588:	2000c274 	.word	0x2000c274
 800958c:	2000c276 	.word	0x2000c276
 8009590:	2000c278 	.word	0x2000c278
 8009594:	2000c27c 	.word	0x2000c27c
 8009598:	2000c280 	.word	0x2000c280
 800959c:	2000020a 	.word	0x2000020a
 80095a0:	2000c284 	.word	0x2000c284
 80095a4:	2000c288 	.word	0x2000c288
 80095a8:	2000020c 	.word	0x2000020c
 80095ac:	40020000 	.word	0x40020000
 80095b0:	20006160 	.word	0x20006160
 80095b4:	2000c28c 	.word	0x2000c28c
 80095b8:	20000210 	.word	0x20000210
 80095bc:	451c4000 	.word	0x451c4000
 80095c0:	2000c0b8 	.word	0x2000c0b8
 80095c4:	2000c2bc 	.word	0x2000c2bc
 80095c8:	451c4000 	.word	0x451c4000
 80095cc:	20000008 	.word	0x20000008
		}
		else goal=0;
 80095d0:	4b94      	ldr	r3, [pc, #592]	; (8009824 <second_driv+0x504>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]

		Average_speed = secondsp[i];
 80095d6:	4b94      	ldr	r3, [pc, #592]	; (8009828 <second_driv+0x508>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a94      	ldr	r2, [pc, #592]	; (800982c <second_driv+0x50c>)
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	edd3 7a00 	vldr	s15, [r3]
 80095e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095e8:	ee17 3a90 	vmov	r3, s15
 80095ec:	b21a      	sxth	r2, r3
 80095ee:	4b90      	ldr	r3, [pc, #576]	; (8009830 <second_driv+0x510>)
 80095f0:	801a      	strh	r2, [r3, #0]
		co++;
 80095f2:	4b90      	ldr	r3, [pc, #576]	; (8009834 <second_driv+0x514>)
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	4b8e      	ldr	r3, [pc, #568]	; (8009834 <second_driv+0x514>)
 80095fc:	801a      	strh	r2, [r3, #0]
		i++;
 80095fe:	4b8a      	ldr	r3, [pc, #552]	; (8009828 <second_driv+0x508>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	4a88      	ldr	r2, [pc, #544]	; (8009828 <second_driv+0x508>)
 8009606:	6013      	str	r3, [r2, #0]
		cao++;
 8009608:	4b8b      	ldr	r3, [pc, #556]	; (8009838 <second_driv+0x518>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3301      	adds	r3, #1
 800960e:	4a8a      	ldr	r2, [pc, #552]	; (8009838 <second_driv+0x518>)
 8009610:	6013      	str	r3, [r2, #0]
		FLASH_Write_Word_F(actual__callog_adress,cale_val);
 8009612:	4b8a      	ldr	r3, [pc, #552]	; (800983c <second_driv+0x51c>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	4b8a      	ldr	r3, [pc, #552]	; (8009840 <second_driv+0x520>)
 8009618:	edd3 7a00 	vldr	s15, [r3]
 800961c:	eeb0 0a67 	vmov.f32	s0, s15
 8009620:	4610      	mov	r0, r2
 8009622:	f000 f993 	bl	800994c <FLASH_Write_Word_F>
		FLASH_Write_Word_F(actual__velo_adress,Average_speed);
 8009626:	4b87      	ldr	r3, [pc, #540]	; (8009844 <second_driv+0x524>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	4b81      	ldr	r3, [pc, #516]	; (8009830 <second_driv+0x510>)
 800962c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009638:	eeb0 0a67 	vmov.f32	s0, s15
 800963c:	4610      	mov	r0, r2
 800963e:	f000 f985 	bl	800994c <FLASH_Write_Word_F>
		FLASH_Write_Word_F(plan_velo_adress,speedget);
 8009642:	4b81      	ldr	r3, [pc, #516]	; (8009848 <second_driv+0x528>)
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b81      	ldr	r3, [pc, #516]	; (800984c <second_driv+0x52c>)
 8009648:	edd3 7a00 	vldr	s15, [r3]
 800964c:	eeb0 0a67 	vmov.f32	s0, s15
 8009650:	4610      	mov	r0, r2
 8009652:	f000 f97b 	bl	800994c <FLASH_Write_Word_F>
		plan_velo_adress += 0x04;
 8009656:	4b7c      	ldr	r3, [pc, #496]	; (8009848 <second_driv+0x528>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3304      	adds	r3, #4
 800965c:	4a7a      	ldr	r2, [pc, #488]	; (8009848 <second_driv+0x528>)
 800965e:	6013      	str	r3, [r2, #0]
		actual__velo_adress += 0x04;
 8009660:	4b78      	ldr	r3, [pc, #480]	; (8009844 <second_driv+0x524>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3304      	adds	r3, #4
 8009666:	4a77      	ldr	r2, [pc, #476]	; (8009844 <second_driv+0x524>)
 8009668:	6013      	str	r3, [r2, #0]
		actual__callog_adress+= 0x04;
 800966a:	4b74      	ldr	r3, [pc, #464]	; (800983c <second_driv+0x51c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3304      	adds	r3, #4
 8009670:	4a72      	ldr	r2, [pc, #456]	; (800983c <second_driv+0x51c>)
 8009672:	6013      	str	r3, [r2, #0]
//			//if(abs((corr-i) <= 20) && cao >= 30) straight_flag = true;
//			//if(corr <= i)corr=correction[d+1];
//		}

//		cale_buff = cale;
		if(frp >= 40 || cross_line){
 8009674:	4b76      	ldr	r3, [pc, #472]	; (8009850 <second_driv+0x530>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b27      	cmp	r3, #39	; 0x27
 800967a:	dc03      	bgt.n	8009684 <second_driv+0x364>
 800967c:	4b75      	ldr	r3, [pc, #468]	; (8009854 <second_driv+0x534>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d008      	beq.n	8009696 <second_driv+0x376>
			straight_flag = true;
 8009684:	4b74      	ldr	r3, [pc, #464]	; (8009858 <second_driv+0x538>)
 8009686:	2201      	movs	r2, #1
 8009688:	701a      	strb	r2, [r3, #0]
			frp=30;
 800968a:	4b71      	ldr	r3, [pc, #452]	; (8009850 <second_driv+0x530>)
 800968c:	221e      	movs	r2, #30
 800968e:	601a      	str	r2, [r3, #0]
			frap = 0;
 8009690:	4b72      	ldr	r3, [pc, #456]	; (800985c <second_driv+0x53c>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
		}

		//cale_val=0;
		num=0;
 8009696:	4b72      	ldr	r3, [pc, #456]	; (8009860 <second_driv+0x540>)
 8009698:	2200      	movs	r2, #0
 800969a:	801a      	strh	r2, [r3, #0]
	}
//	if(correc_maker==1 ){
	if(correc_maker==1  && straight_flag == 1){
 800969c:	4b71      	ldr	r3, [pc, #452]	; (8009864 <second_driv+0x544>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d17d      	bne.n	80097a0 <second_driv+0x480>
 80096a4:	4b6c      	ldr	r3, [pc, #432]	; (8009858 <second_driv+0x538>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d179      	bne.n	80097a0 <second_driv+0x480>

		hu=0;
 80096ac:	4b6e      	ldr	r3, [pc, #440]	; (8009868 <second_driv+0x548>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
		while(1){
			cao = correction[hu];
 80096b2:	4b6d      	ldr	r3, [pc, #436]	; (8009868 <second_driv+0x548>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a6d      	ldr	r2, [pc, #436]	; (800986c <second_driv+0x54c>)
 80096b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096bc:	461a      	mov	r2, r3
 80096be:	4b5e      	ldr	r3, [pc, #376]	; (8009838 <second_driv+0x518>)
 80096c0:	601a      	str	r2, [r3, #0]
			if(correction[hu]==0 && hu > 0)break;
 80096c2:	4b69      	ldr	r3, [pc, #420]	; (8009868 <second_driv+0x548>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a69      	ldr	r2, [pc, #420]	; (800986c <second_driv+0x54c>)
 80096c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <second_driv+0x3b8>
 80096d0:	4b65      	ldr	r3, [pc, #404]	; (8009868 <second_driv+0x548>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dc1a      	bgt.n	800970e <second_driv+0x3ee>
			cao_d = abs(i-cao);
 80096d8:	4b53      	ldr	r3, [pc, #332]	; (8009828 <second_driv+0x508>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4b56      	ldr	r3, [pc, #344]	; (8009838 <second_driv+0x518>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfb8      	it	lt
 80096e6:	425b      	neglt	r3, r3
 80096e8:	60fb      	str	r3, [r7, #12]

			//if(cao_d<30)break;
			if (cao_v > cao_d){
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	dd07      	ble.n	8009702 <second_driv+0x3e2>
				cao_v = cao_d;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	61fb      	str	r3, [r7, #28]
				cou_buff = cao;
 80096f6:	4b50      	ldr	r3, [pc, #320]	; (8009838 <second_driv+0x518>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	617b      	str	r3, [r7, #20]
				carr_d=hu;
 80096fc:	4b5a      	ldr	r3, [pc, #360]	; (8009868 <second_driv+0x548>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	61bb      	str	r3, [r7, #24]
			}
			hu++;
 8009702:	4b59      	ldr	r3, [pc, #356]	; (8009868 <second_driv+0x548>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3301      	adds	r3, #1
 8009708:	4a57      	ldr	r2, [pc, #348]	; (8009868 <second_driv+0x548>)
 800970a:	6013      	str	r3, [r2, #0]
			cao = correction[hu];
 800970c:	e7d1      	b.n	80096b2 <second_driv+0x392>
			if(correction[hu]==0 && hu > 0)break;
 800970e:	bf00      	nop

		}
		if(abs(i-cou_buff)<=30 /*|| (cao >= 500 && abs(i-cou_buff)<=500)*/){
 8009710:	4b45      	ldr	r3, [pc, #276]	; (8009828 <second_driv+0x508>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	f113 0f1e 	cmn.w	r3, #30
 800971c:	db37      	blt.n	800978e <second_driv+0x46e>
 800971e:	4b42      	ldr	r3, [pc, #264]	; (8009828 <second_driv+0x508>)
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b1e      	cmp	r3, #30
 8009728:	dc31      	bgt.n	800978e <second_driv+0x46e>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800972a:	2201      	movs	r2, #1
 800972c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009730:	484f      	ldr	r0, [pc, #316]	; (8009870 <second_driv+0x550>)
 8009732:	f004 fc89 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8009736:	2201      	movs	r2, #1
 8009738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800973c:	484c      	ldr	r0, [pc, #304]	; (8009870 <second_driv+0x550>)
 800973e:	f004 fc83 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8009742:	2201      	movs	r2, #1
 8009744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009748:	4849      	ldr	r0, [pc, #292]	; (8009870 <second_driv+0x550>)
 800974a:	f004 fc7d 	bl	800e048 <HAL_GPIO_WritePin>
			i = cou_buff;
 800974e:	4a36      	ldr	r2, [pc, #216]	; (8009828 <second_driv+0x508>)
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	6013      	str	r3, [r2, #0]
			logbuff=second_load[i];
 8009754:	4b34      	ldr	r3, [pc, #208]	; (8009828 <second_driv+0x508>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a46      	ldr	r2, [pc, #280]	; (8009874 <second_driv+0x554>)
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a45      	ldr	r2, [pc, #276]	; (8009878 <second_driv+0x558>)
 8009762:	6013      	str	r3, [r2, #0]
			hu = carr_d;
 8009764:	4a40      	ldr	r2, [pc, #256]	; (8009868 <second_driv+0x548>)
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	6013      	str	r3, [r2, #0]
			d= carr_d+1;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	3301      	adds	r3, #1
 800976e:	461a      	mov	r2, r3
 8009770:	4b42      	ldr	r3, [pc, #264]	; (800987c <second_driv+0x55c>)
 8009772:	601a      	str	r2, [r3, #0]
			corr=correction[d];
 8009774:	4b41      	ldr	r3, [pc, #260]	; (800987c <second_driv+0x55c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a3c      	ldr	r2, [pc, #240]	; (800986c <second_driv+0x54c>)
 800977a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800977e:	4b40      	ldr	r3, [pc, #256]	; (8009880 <second_driv+0x560>)
 8009780:	801a      	strh	r2, [r3, #0]
			cao=0;
 8009782:	4b2d      	ldr	r3, [pc, #180]	; (8009838 <second_driv+0x518>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
			coi=0;
 8009788:	4b3e      	ldr	r3, [pc, #248]	; (8009884 <second_driv+0x564>)
 800978a:	2200      	movs	r2, #0
 800978c:	801a      	strh	r2, [r3, #0]


		}
//		d++;
//		corr=correction[d];
		straight_flag=false;
 800978e:	4b32      	ldr	r3, [pc, #200]	; (8009858 <second_driv+0x538>)
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 8009794:	4b33      	ldr	r3, [pc, #204]	; (8009864 <second_driv+0x544>)
 8009796:	2200      	movs	r2, #0
 8009798:	701a      	strb	r2, [r3, #0]
		frp=0;
 800979a:	4b2d      	ldr	r3, [pc, #180]	; (8009850 <second_driv+0x530>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
	}
	if(cross_maker){
 80097a0:	4b39      	ldr	r3, [pc, #228]	; (8009888 <second_driv+0x568>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d029      	beq.n	80097fc <second_driv+0x4dc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80097a8:	2201      	movs	r2, #1
 80097aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097ae:	4830      	ldr	r0, [pc, #192]	; (8009870 <second_driv+0x550>)
 80097b0:	f004 fc4a 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80097b4:	2201      	movs	r2, #1
 80097b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097ba:	482d      	ldr	r0, [pc, #180]	; (8009870 <second_driv+0x550>)
 80097bc:	f004 fc44 	bl	800e048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80097c0:	2201      	movs	r2, #1
 80097c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097c6:	482a      	ldr	r0, [pc, #168]	; (8009870 <second_driv+0x550>)
 80097c8:	f004 fc3e 	bl	800e048 <HAL_GPIO_WritePin>
		i = work_ram[cros];
 80097cc:	4b2f      	ldr	r3, [pc, #188]	; (800988c <second_driv+0x56c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a2f      	ldr	r2, [pc, #188]	; (8009890 <second_driv+0x570>)
 80097d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d6:	461a      	mov	r2, r3
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <second_driv+0x508>)
 80097da:	601a      	str	r2, [r3, #0]
		logbuff=second_load[i];
 80097dc:	4b12      	ldr	r3, [pc, #72]	; (8009828 <second_driv+0x508>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a24      	ldr	r2, [pc, #144]	; (8009874 <second_driv+0x554>)
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a23      	ldr	r2, [pc, #140]	; (8009878 <second_driv+0x558>)
 80097ea:	6013      	str	r3, [r2, #0]
		cross_maker = false;
 80097ec:	4b26      	ldr	r3, [pc, #152]	; (8009888 <second_driv+0x568>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
		cros++;
 80097f2:	4b26      	ldr	r3, [pc, #152]	; (800988c <second_driv+0x56c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3301      	adds	r3, #1
 80097f8:	4a24      	ldr	r2, [pc, #144]	; (800988c <second_driv+0x56c>)
 80097fa:	6013      	str	r3, [r2, #0]
	}
	if(correc_maker==1){
 80097fc:	4b19      	ldr	r3, [pc, #100]	; (8009864 <second_driv+0x544>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d10b      	bne.n	800981c <second_driv+0x4fc>
		frp=0;
 8009804:	4b12      	ldr	r3, [pc, #72]	; (8009850 <second_driv+0x530>)
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]
		coi=0;
 800980a:	4b1e      	ldr	r3, [pc, #120]	; (8009884 <second_driv+0x564>)
 800980c:	2200      	movs	r2, #0
 800980e:	801a      	strh	r2, [r3, #0]
		straight_flag = false;
 8009810:	4b11      	ldr	r3, [pc, #68]	; (8009858 <second_driv+0x538>)
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
		correc_maker = false;
 8009816:	4b13      	ldr	r3, [pc, #76]	; (8009864 <second_driv+0x544>)
 8009818:	2200      	movs	r2, #0
 800981a:	701a      	strb	r2, [r3, #0]

	}

}
 800981c:	bf00      	nop
 800981e:	3720      	adds	r7, #32
 8009820:	46bd      	mov	sp, r7
 8009822:	bdb0      	pop	{r4, r5, r7, pc}
 8009824:	20000008 	.word	0x20000008
 8009828:	2000c270 	.word	0x2000c270
 800982c:	20000210 	.word	0x20000210
 8009830:	2001432a 	.word	0x2001432a
 8009834:	20000208 	.word	0x20000208
 8009838:	2000c290 	.word	0x2000c290
 800983c:	2000c2dc 	.word	0x2000c2dc
 8009840:	2000c278 	.word	0x2000c278
 8009844:	2000c2f0 	.word	0x2000c2f0
 8009848:	2000c2e8 	.word	0x2000c2e8
 800984c:	20014608 	.word	0x20014608
 8009850:	2000c288 	.word	0x2000c288
 8009854:	2000c2cc 	.word	0x2000c2cc
 8009858:	2000020c 	.word	0x2000020c
 800985c:	2000c294 	.word	0x2000c294
 8009860:	2000c276 	.word	0x2000c276
 8009864:	2000c0b0 	.word	0x2000c0b0
 8009868:	2000c298 	.word	0x2000c298
 800986c:	2000c0c0 	.word	0x2000c0c0
 8009870:	40020000 	.word	0x40020000
 8009874:	20006160 	.word	0x20006160
 8009878:	2000c27c 	.word	0x2000c27c
 800987c:	2000c29c 	.word	0x2000c29c
 8009880:	2000c274 	.word	0x2000c274
 8009884:	2000c28c 	.word	0x2000c28c
 8009888:	2000c250 	.word	0x2000c250
 800988c:	20000004 	.word	0x20000004
 8009890:	2000c310 	.word	0x2000c310

08009894 <FLASH_Unlock>:
const uint32_t end_adress_sector10 	 = 	0x80DFFFF;
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <FLASH_Unlock+0x1c>)
 800989a:	4a06      	ldr	r2, [pc, #24]	; (80098b4 <FLASH_Unlock+0x20>)
 800989c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800989e:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <FLASH_Unlock+0x1c>)
 80098a0:	4a05      	ldr	r2, [pc, #20]	; (80098b8 <FLASH_Unlock+0x24>)
 80098a2:	605a      	str	r2, [r3, #4]
}
 80098a4:	bf00      	nop
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40023c00 	.word	0x40023c00
 80098b4:	45670123 	.word	0x45670123
 80098b8:	cdef89ab 	.word	0xcdef89ab

080098bc <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <FLASH_Lock+0x1c>)
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	4a04      	ldr	r2, [pc, #16]	; (80098d8 <FLASH_Lock+0x1c>)
 80098c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098ca:	6113      	str	r3, [r2, #16]

}
 80098cc:	bf00      	nop
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40023c00 	.word	0x40023c00

080098dc <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 80098e0:	bf00      	nop
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <FLASH_WaitBusy+0x1c>)
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f9      	bne.n	80098e2 <FLASH_WaitBusy+0x6>
}
 80098ee:	bf00      	nop
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	40023c00 	.word	0x40023c00

080098fc <FLASH_Write_Word_S>:

	FLASH_Lock();
}

void FLASH_Write_Word_S(uint32_t address, int32_t data)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 8009906:	f7ff ffc5 	bl	8009894 <FLASH_Unlock>

	FLASH_WaitBusy();
 800990a:	f7ff ffe7 	bl	80098dc <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800990e:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <FLASH_Write_Word_S+0x4c>)
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	4a0d      	ldr	r2, [pc, #52]	; (8009948 <FLASH_Write_Word_S+0x4c>)
 8009914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009918:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800991a:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <FLASH_Write_Word_S+0x4c>)
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	4a0a      	ldr	r2, [pc, #40]	; (8009948 <FLASH_Write_Word_S+0x4c>)
 8009920:	f043 0301 	orr.w	r3, r3, #1
 8009924:	6113      	str	r3, [r2, #16]

	*(__IO int32_t*)address = data;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800992c:	f7ff ffd6 	bl	80098dc <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <FLASH_Write_Word_S+0x4c>)
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	4a04      	ldr	r2, [pc, #16]	; (8009948 <FLASH_Write_Word_S+0x4c>)
 8009936:	f023 0301 	bic.w	r3, r3, #1
 800993a:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800993c:	f7ff ffbe 	bl	80098bc <FLASH_Lock>
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	40023c00 	.word	0x40023c00

0800994c <FLASH_Write_Word_F>:

inline void FLASH_Write_Word_F(uint32_t address, float data)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8009958:	f7ff ff9c 	bl	8009894 <FLASH_Unlock>

	FLASH_WaitBusy();
 800995c:	f7ff ffbe 	bl	80098dc <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8009960:	4b0e      	ldr	r3, [pc, #56]	; (800999c <FLASH_Write_Word_F+0x50>)
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	4a0d      	ldr	r2, [pc, #52]	; (800999c <FLASH_Write_Word_F+0x50>)
 8009966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800996a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800996c:	4b0b      	ldr	r3, [pc, #44]	; (800999c <FLASH_Write_Word_F+0x50>)
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	4a0a      	ldr	r2, [pc, #40]	; (800999c <FLASH_Write_Word_F+0x50>)
 8009972:	f043 0301 	orr.w	r3, r3, #1
 8009976:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800997e:	f7ff ffad 	bl	80098dc <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 8009982:	4b06      	ldr	r3, [pc, #24]	; (800999c <FLASH_Write_Word_F+0x50>)
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	4a05      	ldr	r2, [pc, #20]	; (800999c <FLASH_Write_Word_F+0x50>)
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800998e:	f7ff ff95 	bl	80098bc <FLASH_Lock>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	40023c00 	.word	0x40023c00

080099a0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80099b4:	2200      	movs	r2, #0
 80099b6:	2104      	movs	r1, #4
 80099b8:	480d      	ldr	r0, [pc, #52]	; (80099f0 <read_byte+0x50>)
 80099ba:	f004 fb45 	bl	800e048 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 80099be:	f107 010f 	add.w	r1, r7, #15
 80099c2:	2364      	movs	r3, #100	; 0x64
 80099c4:	2201      	movs	r2, #1
 80099c6:	480b      	ldr	r0, [pc, #44]	; (80099f4 <read_byte+0x54>)
 80099c8:	f005 fc38 	bl	800f23c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 80099cc:	f107 010e 	add.w	r1, r7, #14
 80099d0:	2364      	movs	r3, #100	; 0x64
 80099d2:	2201      	movs	r2, #1
 80099d4:	4807      	ldr	r0, [pc, #28]	; (80099f4 <read_byte+0x54>)
 80099d6:	f005 fd65 	bl	800f4a4 <HAL_SPI_Receive>
	CS_SET;
 80099da:	2201      	movs	r2, #1
 80099dc:	2104      	movs	r1, #4
 80099de:	4804      	ldr	r0, [pc, #16]	; (80099f0 <read_byte+0x50>)
 80099e0:	f004 fb32 	bl	800e048 <HAL_GPIO_WritePin>

	return val;
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40020c00 	.word	0x40020c00
 80099f4:	200145b0 	.word	0x200145b0

080099f8 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	460a      	mov	r2, r1
 8009a02:	71fb      	strb	r3, [r7, #7]
 8009a04:	4613      	mov	r3, r2
 8009a06:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8009a12:	2200      	movs	r2, #0
 8009a14:	2104      	movs	r1, #4
 8009a16:	480c      	ldr	r0, [pc, #48]	; (8009a48 <write_byte+0x50>)
 8009a18:	f004 fb16 	bl	800e048 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009a1c:	f107 010f 	add.w	r1, r7, #15
 8009a20:	2364      	movs	r3, #100	; 0x64
 8009a22:	2201      	movs	r2, #1
 8009a24:	4809      	ldr	r0, [pc, #36]	; (8009a4c <write_byte+0x54>)
 8009a26:	f005 fc09 	bl	800f23c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8009a2a:	1db9      	adds	r1, r7, #6
 8009a2c:	2364      	movs	r3, #100	; 0x64
 8009a2e:	2201      	movs	r2, #1
 8009a30:	4806      	ldr	r0, [pc, #24]	; (8009a4c <write_byte+0x54>)
 8009a32:	f005 fc03 	bl	800f23c <HAL_SPI_Transmit>
	CS_SET;
 8009a36:	2201      	movs	r2, #1
 8009a38:	2104      	movs	r1, #4
 8009a3a:	4803      	ldr	r0, [pc, #12]	; (8009a48 <write_byte+0x50>)
 8009a3c:	f004 fb04 	bl	800e048 <HAL_GPIO_WritePin>
}
 8009a40:	bf00      	nop
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	40020c00 	.word	0x40020c00
 8009a4c:	200145b0 	.word	0x200145b0

08009a50 <IMU_init>:

uint8_t IMU_init() {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8009a56:	2000      	movs	r0, #0
 8009a58:	f7ff ffa2 	bl	80099a0 <read_byte>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8009a60:	79bb      	ldrb	r3, [r7, #6]
 8009a62:	2be0      	cmp	r3, #224	; 0xe0
 8009a64:	d119      	bne.n	8009a9a <IMU_init+0x4a>
		ret = 1;
 8009a66:	2301      	movs	r3, #1
 8009a68:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	2006      	movs	r0, #6
 8009a6e:	f7ff ffc3 	bl	80099f8 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8009a72:	2110      	movs	r1, #16
 8009a74:	2003      	movs	r0, #3
 8009a76:	f7ff ffbf 	bl	80099f8 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8009a7a:	2120      	movs	r1, #32
 8009a7c:	207f      	movs	r0, #127	; 0x7f
 8009a7e:	f7ff ffbb 	bl	80099f8 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 8009a82:	2117      	movs	r1, #23
 8009a84:	2001      	movs	r0, #1
 8009a86:	f7ff ffb7 	bl	80099f8 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 8009a8a:	2106      	movs	r1, #6
 8009a8c:	2014      	movs	r0, #20
 8009a8e:	f7ff ffb3 	bl	80099f8 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8009a92:	2100      	movs	r1, #0
 8009a94:	207f      	movs	r0, #127	; 0x7f
 8009a96:	f7ff ffaf 	bl	80099f8 <write_byte>
	}
	return ret;
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <read_gyro_data>:

void read_zg_data() {
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
}

void read_gyro_data() {
 8009aa4:	b598      	push	{r3, r4, r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8009aa8:	2033      	movs	r0, #51	; 0x33
 8009aaa:	f7ff ff79 	bl	80099a0 <read_byte>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	b21c      	sxth	r4, r3
 8009ab4:	2034      	movs	r0, #52	; 0x34
 8009ab6:	f7ff ff73 	bl	80099a0 <read_byte>
 8009aba:	4603      	mov	r3, r0
 8009abc:	b21b      	sxth	r3, r3
 8009abe:	4323      	orrs	r3, r4
 8009ac0:	b21a      	sxth	r2, r3
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <read_gyro_data+0x64>)
 8009ac4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8009ac6:	2035      	movs	r0, #53	; 0x35
 8009ac8:	f7ff ff6a 	bl	80099a0 <read_byte>
 8009acc:	4603      	mov	r3, r0
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	b21c      	sxth	r4, r3
 8009ad2:	2036      	movs	r0, #54	; 0x36
 8009ad4:	f7ff ff64 	bl	80099a0 <read_byte>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	b21b      	sxth	r3, r3
 8009adc:	4323      	orrs	r3, r4
 8009ade:	b21a      	sxth	r2, r3
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <read_gyro_data+0x68>)
 8009ae2:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8009ae4:	2037      	movs	r0, #55	; 0x37
 8009ae6:	f7ff ff5b 	bl	80099a0 <read_byte>
 8009aea:	4603      	mov	r3, r0
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	b21c      	sxth	r4, r3
 8009af0:	2038      	movs	r0, #56	; 0x38
 8009af2:	f7ff ff55 	bl	80099a0 <read_byte>
 8009af6:	4603      	mov	r3, r0
 8009af8:	b21b      	sxth	r3, r3
 8009afa:	4323      	orrs	r3, r4
 8009afc:	b21a      	sxth	r2, r3
 8009afe:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <read_gyro_data+0x6c>)
 8009b00:	801a      	strh	r2, [r3, #0]
}
 8009b02:	bf00      	nop
 8009b04:	bd98      	pop	{r3, r4, r7, pc}
 8009b06:	bf00      	nop
 8009b08:	2000c300 	.word	0x2000c300
 8009b0c:	2000c2fe 	.word	0x2000c2fe
 8009b10:	2000c2f8 	.word	0x2000c2f8
 8009b14:	00000000 	.word	0x00000000

08009b18 <calc_angle>:

//	printf("%f\r\n",ang_average);
//	printf("%d\r\n",work_ram[30]);
	Flash_store();
}
inline float calc_angle(){
 8009b18:	b5b0      	push	{r4, r5, r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
	float omega_z=0;
 8009b1e:	f04f 0300 	mov.w	r3, #0
 8009b22:	607b      	str	r3, [r7, #4]
	static float pre_zg;
	float R_IMU2 = 0.1;
 8009b24:	4b32      	ldr	r3, [pc, #200]	; (8009bf0 <calc_angle+0xd8>)
 8009b26:	603b      	str	r3, [r7, #0]
	//float angle;
	read_gyro_data();
 8009b28:	f7ff ffbc 	bl	8009aa4 <read_gyro_data>
	omega_z = (((float)zg-ang_average) / 16.4) * PI / 180;
 8009b2c:	4b31      	ldr	r3, [pc, #196]	; (8009bf4 <calc_angle+0xdc>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b21b      	sxth	r3, r3
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b3a:	4b2f      	ldr	r3, [pc, #188]	; (8009bf8 <calc_angle+0xe0>)
 8009b3c:	edd3 7a00 	vldr	s15, [r3]
 8009b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b44:	ee17 0a90 	vmov	r0, s15
 8009b48:	f7fe fc36 	bl	80083b8 <__aeabi_f2d>
 8009b4c:	a324      	add	r3, pc, #144	; (adr r3, 8009be0 <calc_angle+0xc8>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7fe fdb3 	bl	80086bc <__aeabi_ddiv>
 8009b56:	4603      	mov	r3, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	a322      	add	r3, pc, #136	; (adr r3, 8009be8 <calc_angle+0xd0>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7fe fc80 	bl	8008468 <__aeabi_dmul>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	4621      	mov	r1, r4
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	4b21      	ldr	r3, [pc, #132]	; (8009bfc <calc_angle+0xe4>)
 8009b76:	f7fe fda1 	bl	80086bc <__aeabi_ddiv>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	4618      	mov	r0, r3
 8009b80:	4621      	mov	r1, r4
 8009b82:	f7fe ff49 	bl	8008a18 <__aeabi_d2f>
 8009b86:	4603      	mov	r3, r0
 8009b88:	607b      	str	r3, [r7, #4]
	//angle = angle+ (omega_z * 0.01);
	//if(driv_flag==2)omega_z= ((R_IMU2)*(omega_z) + (1.0 - (R_IMU2))* (pre_zg));
	omega_z= ((R_IMU)*(omega_z) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7fe fc14 	bl	80083b8 <__aeabi_f2d>
 8009b90:	4604      	mov	r4, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	4b1a      	ldr	r3, [pc, #104]	; (8009c00 <calc_angle+0xe8>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fc0d 	bl	80083b8 <__aeabi_f2d>
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	f7fe fc5f 	bl	8008468 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7fe faa3 	bl	80080fc <__adddf3>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	460c      	mov	r4, r1
 8009bba:	4618      	mov	r0, r3
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	f7fe ff2b 	bl	8008a18 <__aeabi_d2f>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	607b      	str	r3, [r7, #4]
	pre_zg =  omega_z;
 8009bc6:	4a0e      	ldr	r2, [pc, #56]	; (8009c00 <calc_angle+0xe8>)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6013      	str	r3, [r2, #0]

	return omega_z;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	ee07 3a90 	vmov	s15, r3
}
 8009bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bdb0      	pop	{r4, r5, r7, pc}
 8009bdc:	f3af 8000 	nop.w
 8009be0:	66666666 	.word	0x66666666
 8009be4:	40306666 	.word	0x40306666
 8009be8:	fc8b007a 	.word	0xfc8b007a
 8009bec:	400921fa 	.word	0x400921fa
 8009bf0:	3dcccccd 	.word	0x3dcccccd
 8009bf4:	2000c2f8 	.word	0x2000c2f8
 8009bf8:	2000c2a0 	.word	0x2000c2a0
 8009bfc:	40668000 	.word	0x40668000
 8009c00:	2000c2a4 	.word	0x2000c2a4
 8009c04:	00000000 	.word	0x00000000

08009c08 <Line_Motor>:
uint16_t  Ki;
uint16_t  Kd ;
extern float speedget ;

//float speedval_I=0 ;
inline float Line_Motor(){
 8009c08:	b5b0      	push	{r4, r5, r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
	static float sensvalBuf;
	static float sensval_I = 0;
	static float sensval_IBuf ;
	float sensval_D =0;
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	607b      	str	r3, [r7, #4]
	float sensval;//偏差


	sensval = senseGet();//hensa
 8009c14:	f001 fe1c 	bl	800b850 <senseGet>
 8009c18:	ed87 0a00 	vstr	s0, [r7]

    sensval_I = sensval_I + (float)sensval*T;
 8009c1c:	4b60      	ldr	r3, [pc, #384]	; (8009da0 <Line_Motor+0x198>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fbc9 	bl	80083b8 <__aeabi_f2d>
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	6838      	ldr	r0, [r7, #0]
 8009c2c:	f7fe fbc4 	bl	80083b8 <__aeabi_f2d>
 8009c30:	a357      	add	r3, pc, #348	; (adr r3, 8009d90 <Line_Motor+0x188>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7fe fc17 	bl	8008468 <__aeabi_dmul>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7fe fa5b 	bl	80080fc <__adddf3>
 8009c46:	4603      	mov	r3, r0
 8009c48:	460c      	mov	r4, r1
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	f7fe fee3 	bl	8008a18 <__aeabi_d2f>
 8009c52:	4602      	mov	r2, r0
 8009c54:	4b52      	ldr	r3, [pc, #328]	; (8009da0 <Line_Motor+0x198>)
 8009c56:	601a      	str	r2, [r3, #0]
    sensval_IBuf = sensval_IBuf + sensval;
 8009c58:	4b52      	ldr	r3, [pc, #328]	; (8009da4 <Line_Motor+0x19c>)
 8009c5a:	ed93 7a00 	vldr	s14, [r3]
 8009c5e:	edd7 7a00 	vldr	s15, [r7]
 8009c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c66:	4b4f      	ldr	r3, [pc, #316]	; (8009da4 <Line_Motor+0x19c>)
 8009c68:	edc3 7a00 	vstr	s15, [r3]

    if(sensval_I >= 1000000) sensval_I = 1000000;
 8009c6c:	4b4c      	ldr	r3, [pc, #304]	; (8009da0 <Line_Motor+0x198>)
 8009c6e:	edd3 7a00 	vldr	s15, [r3]
 8009c72:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009da8 <Line_Motor+0x1a0>
 8009c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	db02      	blt.n	8009c86 <Line_Motor+0x7e>
 8009c80:	4b47      	ldr	r3, [pc, #284]	; (8009da0 <Line_Motor+0x198>)
 8009c82:	4a4a      	ldr	r2, [pc, #296]	; (8009dac <Line_Motor+0x1a4>)
 8009c84:	601a      	str	r2, [r3, #0]
    if(sensval_I <= (-1000000)) sensval_I = (-1000000);
 8009c86:	4b46      	ldr	r3, [pc, #280]	; (8009da0 <Line_Motor+0x198>)
 8009c88:	edd3 7a00 	vldr	s15, [r3]
 8009c8c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009db0 <Line_Motor+0x1a8>
 8009c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	d802      	bhi.n	8009ca0 <Line_Motor+0x98>
 8009c9a:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <Line_Motor+0x198>)
 8009c9c:	4a45      	ldr	r2, [pc, #276]	; (8009db4 <Line_Motor+0x1ac>)
 8009c9e:	601a      	str	r2, [r3, #0]

    sensval_D = (sensvalBuf - sensval)/T;
 8009ca0:	4b45      	ldr	r3, [pc, #276]	; (8009db8 <Line_Motor+0x1b0>)
 8009ca2:	ed93 7a00 	vldr	s14, [r3]
 8009ca6:	edd7 7a00 	vldr	s15, [r7]
 8009caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cae:	ee17 0a90 	vmov	r0, s15
 8009cb2:	f7fe fb81 	bl	80083b8 <__aeabi_f2d>
 8009cb6:	a336      	add	r3, pc, #216	; (adr r3, 8009d90 <Line_Motor+0x188>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7fe fcfe 	bl	80086bc <__aeabi_ddiv>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f7fe fea6 	bl	8008a18 <__aeabi_d2f>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	607b      	str	r3, [r7, #4]
    sensvalBuf = sensval;
 8009cd0:	4a39      	ldr	r2, [pc, #228]	; (8009db8 <Line_Motor+0x1b0>)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	6013      	str	r3, [r2, #0]

	return ((sensval* (float)Kp*0.001)+(sensval_I*(float)Ki*0.0001)-(sensval_D*(float)Kd*0.0001));
 8009cd6:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <Line_Motor+0x1b4>)
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ce2:	edd7 7a00 	vldr	s15, [r7]
 8009ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cea:	ee17 0a90 	vmov	r0, s15
 8009cee:	f7fe fb63 	bl	80083b8 <__aeabi_f2d>
 8009cf2:	a327      	add	r3, pc, #156	; (adr r3, 8009d90 <Line_Motor+0x188>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7fe fbb6 	bl	8008468 <__aeabi_dmul>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	4625      	mov	r5, r4
 8009d02:	461c      	mov	r4, r3
 8009d04:	4b2e      	ldr	r3, [pc, #184]	; (8009dc0 <Line_Motor+0x1b8>)
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d10:	4b23      	ldr	r3, [pc, #140]	; (8009da0 <Line_Motor+0x198>)
 8009d12:	edd3 7a00 	vldr	s15, [r3]
 8009d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1a:	ee17 0a90 	vmov	r0, s15
 8009d1e:	f7fe fb4b 	bl	80083b8 <__aeabi_f2d>
 8009d22:	a31d      	add	r3, pc, #116	; (adr r3, 8009d98 <Line_Motor+0x190>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7fe fb9e 	bl	8008468 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7fe f9e2 	bl	80080fc <__adddf3>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4625      	mov	r5, r4
 8009d3e:	461c      	mov	r4, r3
 8009d40:	4b20      	ldr	r3, [pc, #128]	; (8009dc4 <Line_Motor+0x1bc>)
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	ee07 3a90 	vmov	s15, r3
 8009d48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d54:	ee17 0a90 	vmov	r0, s15
 8009d58:	f7fe fb2e 	bl	80083b8 <__aeabi_f2d>
 8009d5c:	a30e      	add	r3, pc, #56	; (adr r3, 8009d98 <Line_Motor+0x190>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7fe fb81 	bl	8008468 <__aeabi_dmul>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7fe f9c3 	bl	80080f8 <__aeabi_dsub>
 8009d72:	4603      	mov	r3, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	4618      	mov	r0, r3
 8009d78:	4621      	mov	r1, r4
 8009d7a:	f7fe fe4d 	bl	8008a18 <__aeabi_d2f>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	ee07 3a90 	vmov	s15, r3


}
 8009d84:	eeb0 0a67 	vmov.f32	s0, s15
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8009d94:	3f50624d 	.word	0x3f50624d
 8009d98:	eb1c432d 	.word	0xeb1c432d
 8009d9c:	3f1a36e2 	.word	0x3f1a36e2
 8009da0:	2000c2a8 	.word	0x2000c2a8
 8009da4:	2000c2ac 	.word	0x2000c2ac
 8009da8:	49742400 	.word	0x49742400
 8009dac:	49742400 	.word	0x49742400
 8009db0:	c9742400 	.word	0xc9742400
 8009db4:	c9742400 	.word	0xc9742400
 8009db8:	2000c2b0 	.word	0x2000c2b0
 8009dbc:	2000c308 	.word	0x2000c308
 8009dc0:	2000c304 	.word	0x2000c304
 8009dc4:	2000c306 	.word	0x2000c306

08009dc8 <speed_get>:
inline float speed_get(){
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b089      	sub	sp, #36	; 0x24
 8009dcc:	af00      	add	r7, sp, #0
	//static float speedbuffg=0;
	float speedget_L=0;
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	61fb      	str	r3, [r7, #28]
	float speedget_R=0;
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	61bb      	str	r3, [r7, #24]
	float load_L,load_R=0;
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
	static float val=0;
	float load=0;
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	613b      	str	r3, [r7, #16]
	int L=0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]
	int R=0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60bb      	str	r3, [r7, #8]
//	static int i =0;
	L = TIM3 -> CNT -32768;
 8009dee:	4b52      	ldr	r3, [pc, #328]	; (8009f38 <speed_get+0x170>)
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009df6:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32768;
 8009df8:	4b4f      	ldr	r3, [pc, #316]	; (8009f38 <speed_get+0x170>)
 8009dfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24

	R = TIM4 -> CNT -32768;;
 8009e00:	4b4e      	ldr	r3, [pc, #312]	; (8009f3c <speed_get+0x174>)
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009e08:	60bb      	str	r3, [r7, #8]
	TIM4 -> CNT = 32768;
 8009e0a:	4b4c      	ldr	r3, [pc, #304]	; (8009f3c <speed_get+0x174>)
 8009e0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009e10:	625a      	str	r2, [r3, #36]	; 0x24
//	speedget_R = (((24.1/4096)*(float)R)/T);
//	speedget_L = (((24.1/4096)*(float)L)/T);
//	speedget_R = (((24.1/4096)*(float)R)/T);
//	speedget_L = (((23/4096)*(float)L)/T);
//	speedget_R = (((23/4096)*(float)R)/T);
	load_L = (25.3/2048)*(float)L;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e1c:	ee17 0a90 	vmov	r0, s15
 8009e20:	f7fe faca 	bl	80083b8 <__aeabi_f2d>
 8009e24:	a340      	add	r3, pc, #256	; (adr r3, 8009f28 <speed_get+0x160>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f7fe fb1d 	bl	8008468 <__aeabi_dmul>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	4618      	mov	r0, r3
 8009e34:	4621      	mov	r1, r4
 8009e36:	f7fe fdef 	bl	8008a18 <__aeabi_d2f>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	607b      	str	r3, [r7, #4]
	load_R = (25.3/2048)*(float)R;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	ee07 3a90 	vmov	s15, r3
 8009e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e48:	ee17 0a90 	vmov	r0, s15
 8009e4c:	f7fe fab4 	bl	80083b8 <__aeabi_f2d>
 8009e50:	a335      	add	r3, pc, #212	; (adr r3, 8009f28 <speed_get+0x160>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7fe fb07 	bl	8008468 <__aeabi_dmul>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	4621      	mov	r1, r4
 8009e62:	f7fe fdd9 	bl	8008a18 <__aeabi_d2f>
 8009e66:	4603      	mov	r3, r0
 8009e68:	617b      	str	r3, [r7, #20]
	speedget_L = load_L/T;
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7fe faa4 	bl	80083b8 <__aeabi_f2d>
 8009e70:	a32f      	add	r3, pc, #188	; (adr r3, 8009f30 <speed_get+0x168>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f7fe fc21 	bl	80086bc <__aeabi_ddiv>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	4618      	mov	r0, r3
 8009e80:	4621      	mov	r1, r4
 8009e82:	f7fe fdc9 	bl	8008a18 <__aeabi_d2f>
 8009e86:	4603      	mov	r3, r0
 8009e88:	61fb      	str	r3, [r7, #28]
	speedget_R = load_R/T;
 8009e8a:	6978      	ldr	r0, [r7, #20]
 8009e8c:	f7fe fa94 	bl	80083b8 <__aeabi_f2d>
 8009e90:	a327      	add	r3, pc, #156	; (adr r3, 8009f30 <speed_get+0x168>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7fe fc11 	bl	80086bc <__aeabi_ddiv>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f7fe fdb9 	bl	8008a18 <__aeabi_d2f>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	61bb      	str	r3, [r7, #24]
//	if(load_L <= 0) load_L=0;
//	if(load_R <= 0) load_R=0;
	load = (load_R+load_L)/2.0f;
 8009eaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8009eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8009eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009eb6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ebe:	edc7 7a04 	vstr	s15, [r7, #16]
	//load = (((24.1/4096)*(float)L)+((24.1/4096)*(float)R))/2;
	speedget = (speedget_R+speedget_L)/2;
 8009ec2:	ed97 7a06 	vldr	s14, [r7, #24]
 8009ec6:	edd7 7a07 	vldr	s15, [r7, #28]
 8009eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ece:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <speed_get+0x178>)
 8009ed8:	edc3 7a00 	vstr	s15, [r3]
	//speedbuffg += speedget*T;
	if(driv_flag==1&& maker_flag==1){
 8009edc:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <speed_get+0x17c>)
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d109      	bne.n	8009ef8 <speed_get+0x130>
 8009ee4:	4b18      	ldr	r3, [pc, #96]	; (8009f48 <speed_get+0x180>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d105      	bne.n	8009ef8 <speed_get+0x130>

		first_driv(load);
 8009eec:	ed97 0a04 	vldr	s0, [r7, #16]
 8009ef0:	f7ff f9d0 	bl	8009294 <first_driv>
		first_cale();
 8009ef4:	f7ff f894 	bl	8009020 <first_cale>
	}
	if(driv_flag==2 && maker_flag==1)second_driv(load);
 8009ef8:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <speed_get+0x17c>)
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d107      	bne.n	8009f10 <speed_get+0x148>
 8009f00:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <speed_get+0x180>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d103      	bne.n	8009f10 <speed_get+0x148>
 8009f08:	ed97 0a04 	vldr	s0, [r7, #16]
 8009f0c:	f7ff fa08 	bl	8009320 <second_driv>

	return speedget;
 8009f10:	4b0b      	ldr	r3, [pc, #44]	; (8009f40 <speed_get+0x178>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	ee07 3a90 	vmov	s15, r3
}
 8009f18:	eeb0 0a67 	vmov.f32	s0, s15
 8009f1c:	3724      	adds	r7, #36	; 0x24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}
 8009f22:	bf00      	nop
 8009f24:	f3af 8000 	nop.w
 8009f28:	cccccccd 	.word	0xcccccccd
 8009f2c:	3f894ccc 	.word	0x3f894ccc
 8009f30:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f34:	3f50624d 	.word	0x3f50624d
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	20014608 	.word	0x20014608
 8009f44:	2000c2be 	.word	0x2000c2be
 8009f48:	2000c2bc 	.word	0x2000c2bc
 8009f4c:	00000000 	.word	0x00000000

08009f50 <Speed_Motor>:
inline void Speed_Motor(){
 8009f50:	b5b0      	push	{r4, r5, r7, lr}
 8009f52:	ed2d 8b02 	vpush	{d8}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
	int16_t MotorL=0,MotorR=0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	83fb      	strh	r3, [r7, #30]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	83bb      	strh	r3, [r7, #28]

	float speedval;
	float val_v = 0;
 8009f62:	f04f 0300 	mov.w	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
	float val_k=0;
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
	float se=0;
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	613b      	str	r3, [r7, #16]
	static float speedval_I=0 ;
	static float speed_buff=0;
	float val= 0;
 8009f74:	f04f 0300 	mov.w	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
	float sKp = 2.5;//1.8
 8009f7a:	4bcd      	ldr	r3, [pc, #820]	; (800a2b0 <Speed_Motor+0x360>)
 8009f7c:	60bb      	str	r3, [r7, #8]
	float sKi= 28;//20
 8009f7e:	4bcd      	ldr	r3, [pc, #820]	; (800a2b4 <Speed_Motor+0x364>)
 8009f80:	607b      	str	r3, [r7, #4]
	//float lKi= 20;

	speedval = (float)Average_speed - speed_get();
 8009f82:	4bcd      	ldr	r3, [pc, #820]	; (800a2b8 <Speed_Motor+0x368>)
 8009f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009f90:	f7ff ff1a 	bl	8009dc8 <speed_get>
 8009f94:	eef0 7a40 	vmov.f32	s15, s0
 8009f98:	ee78 7a67 	vsub.f32	s15, s16, s15
 8009f9c:	edc7 7a00 	vstr	s15, [r7]
//	speedval = 0- speed_get();

	if(speed_buff != Average_speed && speed_buff > Average_speed && speedval_I > 0)speedval_I=0;
 8009fa0:	4bc5      	ldr	r3, [pc, #788]	; (800a2b8 <Speed_Motor+0x368>)
 8009fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fae:	4bc3      	ldr	r3, [pc, #780]	; (800a2bc <Speed_Motor+0x36c>)
 8009fb0:	edd3 7a00 	vldr	s15, [r3]
 8009fb4:	eeb4 7a67 	vcmp.f32	s14, s15
 8009fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbc:	d01a      	beq.n	8009ff4 <Speed_Motor+0xa4>
 8009fbe:	4bbe      	ldr	r3, [pc, #760]	; (800a2b8 <Speed_Motor+0x368>)
 8009fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fcc:	4bbb      	ldr	r3, [pc, #748]	; (800a2bc <Speed_Motor+0x36c>)
 8009fce:	edd3 7a00 	vldr	s15, [r3]
 8009fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fda:	d50b      	bpl.n	8009ff4 <Speed_Motor+0xa4>
 8009fdc:	4bb8      	ldr	r3, [pc, #736]	; (800a2c0 <Speed_Motor+0x370>)
 8009fde:	edd3 7a00 	vldr	s15, [r3]
 8009fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fea:	dd03      	ble.n	8009ff4 <Speed_Motor+0xa4>
 8009fec:	4bb4      	ldr	r3, [pc, #720]	; (800a2c0 <Speed_Motor+0x370>)
 8009fee:	f04f 0200 	mov.w	r2, #0
 8009ff2:	601a      	str	r2, [r3, #0]
	if(speed_buff != Average_speed && speed_buff < Average_speed && speedval_I < 0)speedval_I=0;
 8009ff4:	4bb0      	ldr	r3, [pc, #704]	; (800a2b8 <Speed_Motor+0x368>)
 8009ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a002:	4bae      	ldr	r3, [pc, #696]	; (800a2bc <Speed_Motor+0x36c>)
 800a004:	edd3 7a00 	vldr	s15, [r3]
 800a008:	eeb4 7a67 	vcmp.f32	s14, s15
 800a00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a010:	d01a      	beq.n	800a048 <Speed_Motor+0xf8>
 800a012:	4ba9      	ldr	r3, [pc, #676]	; (800a2b8 <Speed_Motor+0x368>)
 800a014:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a020:	4ba6      	ldr	r3, [pc, #664]	; (800a2bc <Speed_Motor+0x36c>)
 800a022:	edd3 7a00 	vldr	s15, [r3]
 800a026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02e:	dd0b      	ble.n	800a048 <Speed_Motor+0xf8>
 800a030:	4ba3      	ldr	r3, [pc, #652]	; (800a2c0 <Speed_Motor+0x370>)
 800a032:	edd3 7a00 	vldr	s15, [r3]
 800a036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03e:	d503      	bpl.n	800a048 <Speed_Motor+0xf8>
 800a040:	4b9f      	ldr	r3, [pc, #636]	; (800a2c0 <Speed_Motor+0x370>)
 800a042:	f04f 0200 	mov.w	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
	speed_buff = Average_speed;
 800a048:	4b9b      	ldr	r3, [pc, #620]	; (800a2b8 <Speed_Motor+0x368>)
 800a04a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a056:	4b99      	ldr	r3, [pc, #612]	; (800a2bc <Speed_Motor+0x36c>)
 800a058:	edc3 7a00 	vstr	s15, [r3]
	//if(speedval <= 10.0 && speedval >= (-10.0))speedval_I=0;
	speedval_I = speedval_I + ((float)speedval*T);
 800a05c:	4b98      	ldr	r3, [pc, #608]	; (800a2c0 <Speed_Motor+0x370>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe f9a9 	bl	80083b8 <__aeabi_f2d>
 800a066:	4604      	mov	r4, r0
 800a068:	460d      	mov	r5, r1
 800a06a:	6838      	ldr	r0, [r7, #0]
 800a06c:	f7fe f9a4 	bl	80083b8 <__aeabi_f2d>
 800a070:	a38d      	add	r3, pc, #564	; (adr r3, 800a2a8 <Speed_Motor+0x358>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7fe f9f7 	bl	8008468 <__aeabi_dmul>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7fe f83b 	bl	80080fc <__adddf3>
 800a086:	4603      	mov	r3, r0
 800a088:	460c      	mov	r4, r1
 800a08a:	4618      	mov	r0, r3
 800a08c:	4621      	mov	r1, r4
 800a08e:	f7fe fcc3 	bl	8008a18 <__aeabi_d2f>
 800a092:	4602      	mov	r2, r0
 800a094:	4b8a      	ldr	r3, [pc, #552]	; (800a2c0 <Speed_Motor+0x370>)
 800a096:	601a      	str	r2, [r3, #0]

	//if(speedval <= 10.0 && speedval >= (-10.0))speedval_I=0;

	if(speedval_I >= 100000) speedval_I = 100000;
 800a098:	4b89      	ldr	r3, [pc, #548]	; (800a2c0 <Speed_Motor+0x370>)
 800a09a:	edd3 7a00 	vldr	s15, [r3]
 800a09e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800a2c4 <Speed_Motor+0x374>
 800a0a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0aa:	db02      	blt.n	800a0b2 <Speed_Motor+0x162>
 800a0ac:	4b84      	ldr	r3, [pc, #528]	; (800a2c0 <Speed_Motor+0x370>)
 800a0ae:	4a86      	ldr	r2, [pc, #536]	; (800a2c8 <Speed_Motor+0x378>)
 800a0b0:	601a      	str	r2, [r3, #0]
	if(speedval_I <= (-100000)) speedval_I = (-100000);
 800a0b2:	4b83      	ldr	r3, [pc, #524]	; (800a2c0 <Speed_Motor+0x370>)
 800a0b4:	edd3 7a00 	vldr	s15, [r3]
 800a0b8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800a2cc <Speed_Motor+0x37c>
 800a0bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c4:	d802      	bhi.n	800a0cc <Speed_Motor+0x17c>
 800a0c6:	4b7e      	ldr	r3, [pc, #504]	; (800a2c0 <Speed_Motor+0x370>)
 800a0c8:	4a81      	ldr	r2, [pc, #516]	; (800a2d0 <Speed_Motor+0x380>)
 800a0ca:	601a      	str	r2, [r3, #0]

	val_v = (speedval* sKp)+((float)speedval_I*sKi);
 800a0cc:	ed97 7a00 	vldr	s14, [r7]
 800a0d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0d8:	4b79      	ldr	r3, [pc, #484]	; (800a2c0 <Speed_Motor+0x370>)
 800a0da:	edd3 6a00 	vldr	s13, [r3]
 800a0de:	edd7 7a01 	vldr	s15, [r7, #4]
 800a0e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ea:	edc7 7a06 	vstr	s15, [r7, #24]
	val_k  = Line_Motor();
 800a0ee:	f7ff fd8b 	bl	8009c08 <Line_Motor>
 800a0f2:	ed87 0a05 	vstr	s0, [r7, #20]
//	if(val_v >= 1400 && val_k >= 2000) val_v =1400;
//	if(val_v <= -1400 && val_k <= -2000) val_v = -1400;
	if(val_v >= 2000) val_v =2000;
 800a0f6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0fa:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800a2e0 <Speed_Motor+0x390>
 800a0fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a106:	db01      	blt.n	800a10c <Speed_Motor+0x1bc>
 800a108:	4b72      	ldr	r3, [pc, #456]	; (800a2d4 <Speed_Motor+0x384>)
 800a10a:	61bb      	str	r3, [r7, #24]
	if(val_v <= -2000) val_v = -2000;
 800a10c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a110:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a2d8 <Speed_Motor+0x388>
 800a114:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	d801      	bhi.n	800a122 <Speed_Motor+0x1d2>
 800a11e:	4b6f      	ldr	r3, [pc, #444]	; (800a2dc <Speed_Motor+0x38c>)
 800a120:	61bb      	str	r3, [r7, #24]
	if(val_k >= 2000){
 800a122:	edd7 7a05 	vldr	s15, [r7, #20]
 800a126:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800a2e0 <Speed_Motor+0x390>
 800a12a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a132:	db01      	blt.n	800a138 <Speed_Motor+0x1e8>
		val_k =2000;
 800a134:	4b67      	ldr	r3, [pc, #412]	; (800a2d4 <Speed_Motor+0x384>)
 800a136:	617b      	str	r3, [r7, #20]
		//val_v = 0;
	}
	if(val_k <= -2000){
 800a138:	edd7 7a05 	vldr	s15, [r7, #20]
 800a13c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a2d8 <Speed_Motor+0x388>
 800a140:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a148:	d801      	bhi.n	800a14e <Speed_Motor+0x1fe>
		val_k = -2000;
 800a14a:	4b64      	ldr	r3, [pc, #400]	; (800a2dc <Speed_Motor+0x38c>)
 800a14c:	617b      	str	r3, [r7, #20]
		//val_v = 0;
	}
//	if(val_k >= 2000) val_v = 0;
//	if(val_k <= -2000) val_v = 0;
	MotorL = roundf(val_v + val_k);
 800a14e:	ed97 7a06 	vldr	s14, [r7, #24]
 800a152:	edd7 7a05 	vldr	s15, [r7, #20]
 800a156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a15a:	eeb0 0a67 	vmov.f32	s0, s15
 800a15e:	f00a f835 	bl	80141cc <roundf>
 800a162:	eef0 7a40 	vmov.f32	s15, s0
 800a166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a16a:	ee17 3a90 	vmov	r3, s15
 800a16e:	83fb      	strh	r3, [r7, #30]
	MotorR =roundf( val_v - val_k);
 800a170:	ed97 7a06 	vldr	s14, [r7, #24]
 800a174:	edd7 7a05 	vldr	s15, [r7, #20]
 800a178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a17c:	eeb0 0a67 	vmov.f32	s0, s15
 800a180:	f00a f824 	bl	80141cc <roundf>
 800a184:	eef0 7a40 	vmov.f32	s15, s0
 800a188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a18c:	ee17 3a90 	vmov	r3, s15
 800a190:	83bb      	strh	r3, [r7, #28]
	if(MotorL>=2000  ){
 800a192:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a196:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a19a:	db28      	blt.n	800a1ee <Speed_Motor+0x29e>
		se = MotorL-2000;
 800a19c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a1a0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800a1a4:	ee07 3a90 	vmov	s15, r3
 800a1a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ac:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800a1b0:	ed97 7a06 	vldr	s14, [r7, #24]
 800a1b4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1bc:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1c8:	ee17 3a90 	vmov	r3, s15
 800a1cc:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800a1ce:	ed97 7a06 	vldr	s14, [r7, #24]
 800a1d2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1da:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1e6:	ee17 3a90 	vmov	r3, s15
 800a1ea:	83bb      	strh	r3, [r7, #28]
 800a1ec:	e0a7      	b.n	800a33e <Speed_Motor+0x3ee>
	}
	else if(MotorR>=2000){
 800a1ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a1f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a1f6:	db28      	blt.n	800a24a <Speed_Motor+0x2fa>
		se = MotorR-2000;
 800a1f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a1fc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a208:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800a20c:	ed97 7a06 	vldr	s14, [r7, #24]
 800a210:	edd7 7a04 	vldr	s15, [r7, #16]
 800a214:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a218:	edd7 7a05 	vldr	s15, [r7, #20]
 800a21c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a224:	ee17 3a90 	vmov	r3, s15
 800a228:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800a22a:	ed97 7a06 	vldr	s14, [r7, #24]
 800a22e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a232:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a236:	edd7 7a05 	vldr	s15, [r7, #20]
 800a23a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a23e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a242:	ee17 3a90 	vmov	r3, s15
 800a246:	83bb      	strh	r3, [r7, #28]
 800a248:	e079      	b.n	800a33e <Speed_Motor+0x3ee>
	}
	else if(MotorL<=-2000 ){
 800a24a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a24e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800a252:	dc47      	bgt.n	800a2e4 <Speed_Motor+0x394>
		se = MotorL+2000;
 800a254:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a258:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a264:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800a268:	ed97 7a06 	vldr	s14, [r7, #24]
 800a26c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a270:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a274:	edd7 7a05 	vldr	s15, [r7, #20]
 800a278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a27c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a280:	ee17 3a90 	vmov	r3, s15
 800a284:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800a286:	ed97 7a06 	vldr	s14, [r7, #24]
 800a28a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a28e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a292:	edd7 7a05 	vldr	s15, [r7, #20]
 800a296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a29e:	ee17 3a90 	vmov	r3, s15
 800a2a2:	83bb      	strh	r3, [r7, #28]
 800a2a4:	e04b      	b.n	800a33e <Speed_Motor+0x3ee>
 800a2a6:	bf00      	nop
 800a2a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800a2ac:	3f50624d 	.word	0x3f50624d
 800a2b0:	40200000 	.word	0x40200000
 800a2b4:	41e00000 	.word	0x41e00000
 800a2b8:	2001432a 	.word	0x2001432a
 800a2bc:	2000c2b4 	.word	0x2000c2b4
 800a2c0:	2000c2b8 	.word	0x2000c2b8
 800a2c4:	47c35000 	.word	0x47c35000
 800a2c8:	47c35000 	.word	0x47c35000
 800a2cc:	c7c35000 	.word	0xc7c35000
 800a2d0:	c7c35000 	.word	0xc7c35000
 800a2d4:	44fa0000 	.word	0x44fa0000
 800a2d8:	c4fa0000 	.word	0xc4fa0000
 800a2dc:	c4fa0000 	.word	0xc4fa0000
 800a2e0:	44fa0000 	.word	0x44fa0000
	}
	else if(MotorR<=-2000 ){
 800a2e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a2e8:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800a2ec:	dc27      	bgt.n	800a33e <Speed_Motor+0x3ee>
		se = MotorR+2000;
 800a2ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a2f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2fe:	edc7 7a04 	vstr	s15, [r7, #16]
		MotorL = (val_v-se)+val_k;
 800a302:	ed97 7a06 	vldr	s14, [r7, #24]
 800a306:	edd7 7a04 	vldr	s15, [r7, #16]
 800a30a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a30e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a312:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a31a:	ee17 3a90 	vmov	r3, s15
 800a31e:	83fb      	strh	r3, [r7, #30]
		MotorR = (val_v-se)-val_k;
 800a320:	ed97 7a06 	vldr	s14, [r7, #24]
 800a324:	edd7 7a04 	vldr	s15, [r7, #16]
 800a328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a32c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a330:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a338:	ee17 3a90 	vmov	r3, s15
 800a33c:	83bb      	strh	r3, [r7, #28]
	}
	if(speedval>=2000){
 800a33e:	edd7 7a00 	vldr	s15, [r7]
 800a342:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 800a2e0 <Speed_Motor+0x390>
 800a346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34e:	db07      	blt.n	800a360 <Speed_Motor+0x410>
		MotorL=MotorL+200;
 800a350:	8bfb      	ldrh	r3, [r7, #30]
 800a352:	33c8      	adds	r3, #200	; 0xc8
 800a354:	b29b      	uxth	r3, r3
 800a356:	83fb      	strh	r3, [r7, #30]
		MotorR=MotorR+200;
 800a358:	8bbb      	ldrh	r3, [r7, #28]
 800a35a:	33c8      	adds	r3, #200	; 0xc8
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	83bb      	strh	r3, [r7, #28]
	}
//	if(MotorL-MotorR <= 2000) fan_pressure(14.5,15.0);
//	else fan_pressure(14.5,14.5);
//	if(MotorR-MotorL <= 2000) fan_pressure(15.0,14.5);
//	else fan_pressure(14.5,14.5);
	Motor(MotorL,MotorR);
 800a360:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a364:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fafe 	bl	800a96c <Motor>


}
 800a370:	bf00      	nop
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	ecbd 8b02 	vpop	{d8}
 800a37a:	bdb0      	pop	{r4, r5, r7, pc}

0800a37c <Flash_clear>:




bool Flash_clear()
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800a382:	f003 fa2d 	bl	800d7e0 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800a386:	2300      	movs	r3, #0
 800a388:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800a38a:	2301      	movs	r3, #1
 800a38c:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800a38e:	2302      	movs	r3, #2
 800a390:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800a392:	2301      	movs	r3, #1
 800a394:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800a396:	1d3a      	adds	r2, r7, #4
 800a398:	f107 0308 	add.w	r3, r7, #8
 800a39c:	4611      	mov	r1, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f003 fb7e 	bl	800daa0 <HAL_FLASHEx_Erase>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800a3a8:	f003 fa3c 	bl	800d824 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800a3ac:	7ffb      	ldrb	r3, [r7, #31]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d105      	bne.n	800a3be <Flash_clear+0x42>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d101      	bne.n	800a3be <Flash_clear+0x42>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e000      	b.n	800a3c0 <Flash_clear+0x44>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	b2db      	uxtb	r3, r3
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <Flash_load>:

    return result2 == HAL_OK && error_sector == 0xFFFFFFFF;
}

uint16_t* Flash_load()
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800a3d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3d8:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <Flash_load+0x18>)
 800a3da:	4804      	ldr	r0, [pc, #16]	; (800a3ec <Flash_load+0x1c>)
 800a3dc:	f007 fa0c 	bl	80117f8 <memcpy>
    return work_ram;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <Flash_load+0x1c>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	08004000 	.word	0x08004000
 800a3ec:	2000c310 	.word	0x2000c310

0800a3f0 <Flash_store>:

bool Flash_store()
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 800a3f6:	f7ff ffc1 	bl	800a37c <Flash_clear>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f083 0301 	eor.w	r3, r3, #1
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <Flash_store+0x1a>
 800a406:	2300      	movs	r3, #0
 800a408:	e02f      	b.n	800a46a <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800a40a:	4b1a      	ldr	r3, [pc, #104]	; (800a474 <Flash_store+0x84>)
 800a40c:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800a40e:	f003 f9e7 	bl	800d7e0 <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800a412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a416:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800a418:	2300      	movs	r3, #0
 800a41a:	60bb      	str	r3, [r7, #8]
 800a41c:	e017      	b.n	800a44e <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4a15      	ldr	r2, [pc, #84]	; (800a478 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 800a424:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800a430:	f04f 0400 	mov.w	r4, #0
 800a434:	461a      	mov	r2, r3
 800a436:	4623      	mov	r3, r4
 800a438:	2002      	movs	r0, #2
 800a43a:	f003 f97d 	bl	800d738 <HAL_FLASH_Program>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d107      	bne.n	800a458 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	3301      	adds	r3, #1
 800a44c:	60bb      	str	r3, [r7, #8]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d3e3      	bcc.n	800a41e <Flash_store+0x2e>
 800a456:	e000      	b.n	800a45a <Flash_store+0x6a>
        if (result != HAL_OK) break;
 800a458:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800a45a:	f003 f9e3 	bl	800d824 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	bf0c      	ite	eq
 800a464:	2301      	moveq	r3, #1
 800a466:	2300      	movne	r3, #0
 800a468:	b2db      	uxtb	r3, r3
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd90      	pop	{r4, r7, pc}
 800a472:	bf00      	nop
 800a474:	2000c310 	.word	0x2000c310
 800a478:	08004000 	.word	0x08004000

0800a47c <init>:
uint8_t maker_right;
uint8_t maker_left;
uint8_t maker_flag=0;
uint8_t cross_flag=0;
void MX_TIM6_Init(void);
void init(){
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, SENSOR_NUMBER) != HAL_OK){
 800a482:	220d      	movs	r2, #13
 800a484:	4959      	ldr	r1, [pc, #356]	; (800a5ec <init+0x170>)
 800a486:	485a      	ldr	r0, [pc, #360]	; (800a5f0 <init+0x174>)
 800a488:	f002 f90e 	bl	800c6a8 <HAL_ADC_Start_DMA>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <init+0x1a>
	  Error_Handler();
 800a492:	f001 f9d9 	bl	800b848 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK){
 800a496:	2104      	movs	r1, #4
 800a498:	4856      	ldr	r0, [pc, #344]	; (800a5f4 <init+0x178>)
 800a49a:	f005 fc41 	bl	800fd20 <HAL_TIM_PWM_Start>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <init+0x2c>
		  Error_Handler();
 800a4a4:	f001 f9d0 	bl	800b848 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3) != HAL_OK){
 800a4a8:	2108      	movs	r1, #8
 800a4aa:	4853      	ldr	r0, [pc, #332]	; (800a5f8 <init+0x17c>)
 800a4ac:	f005 fc38 	bl	800fd20 <HAL_TIM_PWM_Start>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <init+0x3e>
	      Error_Handler();
 800a4b6:	f001 f9c7 	bl	800b848 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK){
 800a4ba:	2108      	movs	r1, #8
 800a4bc:	484f      	ldr	r0, [pc, #316]	; (800a5fc <init+0x180>)
 800a4be:	f005 fc2f 	bl	800fd20 <HAL_TIM_PWM_Start>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <init+0x50>
		  Error_Handler();
 800a4c8:	f001 f9be 	bl	800b848 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a4cc:	210c      	movs	r1, #12
 800a4ce:	484b      	ldr	r0, [pc, #300]	; (800a5fc <init+0x180>)
 800a4d0:	f005 fc26 	bl	800fd20 <HAL_TIM_PWM_Start>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <init+0x62>
		  Error_Handler();
 800a4da:	f001 f9b5 	bl	800b848 <Error_Handler>
	}
	lcd_init();
 800a4de:	f7fe fc9b 	bl	8008e18 <lcd_init>
	lcd_clear();
 800a4e2:	f7fe fcdd 	bl	8008ea0 <lcd_clear>
	lcd_locate(0,0);
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f7fe fce9 	bl	8008ec0 <lcd_locate>
	lcd_printf("OK");
 800a4ee:	4844      	ldr	r0, [pc, #272]	; (800a600 <init+0x184>)
 800a4f0:	f7fe fd10 	bl	8008f14 <lcd_printf>

	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800a4f4:	213c      	movs	r1, #60	; 0x3c
 800a4f6:	4843      	ldr	r0, [pc, #268]	; (800a604 <init+0x188>)
 800a4f8:	f005 fce2 	bl	800fec0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800a4fc:	213c      	movs	r1, #60	; 0x3c
 800a4fe:	4842      	ldr	r0, [pc, #264]	; (800a608 <init+0x18c>)
 800a500:	f005 fcde 	bl	800fec0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_ALL);
 800a504:	213c      	movs	r1, #60	; 0x3c
 800a506:	483b      	ldr	r0, [pc, #236]	; (800a5f4 <init+0x178>)
 800a508:	f005 fc0a 	bl	800fd20 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_ALL);
 800a50c:	213c      	movs	r1, #60	; 0x3c
 800a50e:	483a      	ldr	r0, [pc, #232]	; (800a5f8 <init+0x17c>)
 800a510:	f005 fc06 	bl	800fd20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_ALL);
 800a514:	213c      	movs	r1, #60	; 0x3c
 800a516:	4839      	ldr	r0, [pc, #228]	; (800a5fc <init+0x180>)
 800a518:	f005 fc02 	bl	800fd20 <HAL_TIM_PWM_Start>

	Flash_load();
 800a51c:	f7ff ff58 	bl	800a3d0 <Flash_load>
	for(int z=0;z<SENSOR_NUMBER;z++){
 800a520:	2300      	movs	r3, #0
 800a522:	607b      	str	r3, [r7, #4]
 800a524:	e013      	b.n	800a54e <init+0xd2>
		ADC_dif[z] = work_ram[z];
 800a526:	4a39      	ldr	r2, [pc, #228]	; (800a60c <init+0x190>)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800a52e:	4a38      	ldr	r2, [pc, #224]	; (800a610 <init+0x194>)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_Small[z]=work_ram[z+SENSOR_NUMBER];
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	330d      	adds	r3, #13
 800a53a:	4a34      	ldr	r2, [pc, #208]	; (800a60c <init+0x190>)
 800a53c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800a540:	4a34      	ldr	r2, [pc, #208]	; (800a614 <init+0x198>)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int z=0;z<SENSOR_NUMBER;z++){
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3301      	adds	r3, #1
 800a54c:	607b      	str	r3, [r7, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b0c      	cmp	r3, #12
 800a552:	dde8      	ble.n	800a526 <init+0xaa>
	}
	flashcheck();
 800a554:	f000 faf4 	bl	800ab40 <flashcheck>
	Average_speed=work_ram[26];
 800a558:	4b2c      	ldr	r3, [pc, #176]	; (800a60c <init+0x190>)
 800a55a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a55c:	b21a      	sxth	r2, r3
 800a55e:	4b2e      	ldr	r3, [pc, #184]	; (800a618 <init+0x19c>)
 800a560:	801a      	strh	r2, [r3, #0]
	Kp = work_ram[27];
 800a562:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <init+0x190>)
 800a564:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a566:	4b2d      	ldr	r3, [pc, #180]	; (800a61c <init+0x1a0>)
 800a568:	801a      	strh	r2, [r3, #0]
	Ki = work_ram[28];
 800a56a:	4b28      	ldr	r3, [pc, #160]	; (800a60c <init+0x190>)
 800a56c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800a56e:	4b2c      	ldr	r3, [pc, #176]	; (800a620 <init+0x1a4>)
 800a570:	801a      	strh	r2, [r3, #0]
	Kd = work_ram[29];
 800a572:	4b26      	ldr	r3, [pc, #152]	; (800a60c <init+0x190>)
 800a574:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800a576:	4b2b      	ldr	r3, [pc, #172]	; (800a624 <init+0x1a8>)
 800a578:	801a      	strh	r2, [r3, #0]

	ang_average = work_ram[30]/1000;
 800a57a:	4b24      	ldr	r3, [pc, #144]	; (800a60c <init+0x190>)
 800a57c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a57e:	4a2a      	ldr	r2, [pc, #168]	; (800a628 <init+0x1ac>)
 800a580:	fba2 2303 	umull	r2, r3, r2, r3
 800a584:	099b      	lsrs	r3, r3, #6
 800a586:	b29b      	uxth	r3, r3
 800a588:	ee07 3a90 	vmov	s15, r3
 800a58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a590:	4b26      	ldr	r3, [pc, #152]	; (800a62c <init+0x1b0>)
 800a592:	edc3 7a00 	vstr	s15, [r3]
	if(ang_average>=50) ang_average = (ang_average*-1)/100;
 800a596:	4b25      	ldr	r3, [pc, #148]	; (800a62c <init+0x1b0>)
 800a598:	edd3 7a00 	vldr	s15, [r3]
 800a59c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a630 <init+0x1b4>
 800a5a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a8:	db0b      	blt.n	800a5c2 <init+0x146>
 800a5aa:	4b20      	ldr	r3, [pc, #128]	; (800a62c <init+0x1b0>)
 800a5ac:	edd3 7a00 	vldr	s15, [r3]
 800a5b0:	eeb1 7a67 	vneg.f32	s14, s15
 800a5b4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a634 <init+0x1b8>
 800a5b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5bc:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <init+0x1b0>)
 800a5be:	edc3 7a00 	vstr	s15, [r3]
	Accm = work_ram[31];
 800a5c2:	4b12      	ldr	r3, [pc, #72]	; (800a60c <init+0x190>)
 800a5c4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800a5c6:	4b1c      	ldr	r3, [pc, #112]	; (800a638 <init+0x1bc>)
 800a5c8:	801a      	strh	r2, [r3, #0]
	Decm = work_ram[32];
 800a5ca:	4b10      	ldr	r3, [pc, #64]	; (800a60c <init+0x190>)
 800a5cc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <init+0x1c0>)
 800a5d2:	801a      	strh	r2, [r3, #0]

	TIM4 -> CNT = 32768;
 800a5d4:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <init+0x1c4>)
 800a5d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a5da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 32768;
 800a5dc:	4b19      	ldr	r3, [pc, #100]	; (800a644 <init+0x1c8>)
 800a5de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a5e2:	625a      	str	r2, [r3, #36]	; 0x24

}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20014310 	.word	0x20014310
 800a5f0:	200143f0 	.word	0x200143f0
 800a5f4:	200144dc 	.word	0x200144dc
 800a5f8:	2001432c 	.word	0x2001432c
 800a5fc:	2001451c 	.word	0x2001451c
 800a600:	08014230 	.word	0x08014230
 800a604:	2001436c 	.word	0x2001436c
 800a608:	200143b0 	.word	0x200143b0
 800a60c:	2000c310 	.word	0x2000c310
 800a610:	20014650 	.word	0x20014650
 800a614:	2001466c 	.word	0x2001466c
 800a618:	2001432a 	.word	0x2001432a
 800a61c:	2000c308 	.word	0x2000c308
 800a620:	2000c304 	.word	0x2000c304
 800a624:	2000c306 	.word	0x2000c306
 800a628:	10624dd3 	.word	0x10624dd3
 800a62c:	2000c2a0 	.word	0x2000c2a0
 800a630:	42480000 	.word	0x42480000
 800a634:	42c80000 	.word	0x42c80000
 800a638:	2000c30c 	.word	0x2000c30c
 800a63c:	2000c30a 	.word	0x2000c30a
 800a640:	40000800 	.word	0x40000800
 800a644:	40000400 	.word	0x40000400

0800a648 <LED>:
void LED(uint8_t x){
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800a652:	79fb      	ldrb	r3, [r7, #7]
 800a654:	3b01      	subs	r3, #1
 800a656:	2b07      	cmp	r3, #7
 800a658:	f200 80ac 	bhi.w	800a7b4 <LED+0x16c>
 800a65c:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <LED+0x1c>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a685 	.word	0x0800a685
 800a668:	0800a6ab 	.word	0x0800a6ab
 800a66c:	0800a6d1 	.word	0x0800a6d1
 800a670:	0800a6f7 	.word	0x0800a6f7
 800a674:	0800a71d 	.word	0x0800a71d
 800a678:	0800a743 	.word	0x0800a743
 800a67c:	0800a769 	.word	0x0800a769
 800a680:	0800a78f 	.word	0x0800a78f
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800a684:	2200      	movs	r2, #0
 800a686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a68a:	484c      	ldr	r0, [pc, #304]	; (800a7bc <LED+0x174>)
 800a68c:	f003 fcdc 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a690:	2201      	movs	r2, #1
 800a692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a696:	4849      	ldr	r0, [pc, #292]	; (800a7bc <LED+0x174>)
 800a698:	f003 fcd6 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a69c:	2201      	movs	r2, #1
 800a69e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6a2:	4846      	ldr	r0, [pc, #280]	; (800a7bc <LED+0x174>)
 800a6a4:	f003 fcd0 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a6a8:	e084      	b.n	800a7b4 <LED+0x16c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6b0:	4842      	ldr	r0, [pc, #264]	; (800a7bc <LED+0x174>)
 800a6b2:	f003 fcc9 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a6bc:	483f      	ldr	r0, [pc, #252]	; (800a7bc <LED+0x174>)
 800a6be:	f003 fcc3 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6c8:	483c      	ldr	r0, [pc, #240]	; (800a7bc <LED+0x174>)
 800a6ca:	f003 fcbd 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a6ce:	e071      	b.n	800a7b4 <LED+0x16c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6d6:	4839      	ldr	r0, [pc, #228]	; (800a7bc <LED+0x174>)
 800a6d8:	f003 fcb6 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a6e2:	4836      	ldr	r0, [pc, #216]	; (800a7bc <LED+0x174>)
 800a6e4:	f003 fcb0 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6ee:	4833      	ldr	r0, [pc, #204]	; (800a7bc <LED+0x174>)
 800a6f0:	f003 fcaa 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a6f4:	e05e      	b.n	800a7b4 <LED+0x16c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6fc:	482f      	ldr	r0, [pc, #188]	; (800a7bc <LED+0x174>)
 800a6fe:	f003 fca3 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a702:	2201      	movs	r2, #1
 800a704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a708:	482c      	ldr	r0, [pc, #176]	; (800a7bc <LED+0x174>)
 800a70a:	f003 fc9d 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a70e:	2200      	movs	r2, #0
 800a710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a714:	4829      	ldr	r0, [pc, #164]	; (800a7bc <LED+0x174>)
 800a716:	f003 fc97 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a71a:	e04b      	b.n	800a7b4 <LED+0x16c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800a71c:	2200      	movs	r2, #0
 800a71e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a722:	4826      	ldr	r0, [pc, #152]	; (800a7bc <LED+0x174>)
 800a724:	f003 fc90 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a728:	2201      	movs	r2, #1
 800a72a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a72e:	4823      	ldr	r0, [pc, #140]	; (800a7bc <LED+0x174>)
 800a730:	f003 fc8a 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a734:	2200      	movs	r2, #0
 800a736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a73a:	4820      	ldr	r0, [pc, #128]	; (800a7bc <LED+0x174>)
 800a73c:	f003 fc84 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a740:	e038      	b.n	800a7b4 <LED+0x16c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800a742:	2201      	movs	r2, #1
 800a744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a748:	481c      	ldr	r0, [pc, #112]	; (800a7bc <LED+0x174>)
 800a74a:	f003 fc7d 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800a74e:	2200      	movs	r2, #0
 800a750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a754:	4819      	ldr	r0, [pc, #100]	; (800a7bc <LED+0x174>)
 800a756:	f003 fc77 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a75a:	2200      	movs	r2, #0
 800a75c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a760:	4816      	ldr	r0, [pc, #88]	; (800a7bc <LED+0x174>)
 800a762:	f003 fc71 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a766:	e025      	b.n	800a7b4 <LED+0x16c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800a768:	2200      	movs	r2, #0
 800a76a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a76e:	4813      	ldr	r0, [pc, #76]	; (800a7bc <LED+0x174>)
 800a770:	f003 fc6a 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800a774:	2200      	movs	r2, #0
 800a776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a77a:	4810      	ldr	r0, [pc, #64]	; (800a7bc <LED+0x174>)
 800a77c:	f003 fc64 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a780:	2200      	movs	r2, #0
 800a782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a786:	480d      	ldr	r0, [pc, #52]	; (800a7bc <LED+0x174>)
 800a788:	f003 fc5e 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a78c:	e012      	b.n	800a7b4 <LED+0x16c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800a78e:	2201      	movs	r2, #1
 800a790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a794:	4809      	ldr	r0, [pc, #36]	; (800a7bc <LED+0x174>)
 800a796:	f003 fc57 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800a79a:	2201      	movs	r2, #1
 800a79c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7a0:	4806      	ldr	r0, [pc, #24]	; (800a7bc <LED+0x174>)
 800a7a2:	f003 fc51 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7ac:	4803      	ldr	r0, [pc, #12]	; (800a7bc <LED+0x174>)
 800a7ae:	f003 fc4b 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a7b2:	bf00      	nop

	}

}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40020400 	.word	0x40020400

0800a7c0 <LED2>:
void LED2(uint8_t x){
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	71fb      	strb	r3, [r7, #7]
	switch(x){
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	2b07      	cmp	r3, #7
 800a7d0:	f200 809c 	bhi.w	800a90c <LED2+0x14c>
 800a7d4:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <LED2+0x1c>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a7fd 	.word	0x0800a7fd
 800a7e0:	0800a81f 	.word	0x0800a81f
 800a7e4:	0800a841 	.word	0x0800a841
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a885 	.word	0x0800a885
 800a7f0:	0800a8a7 	.word	0x0800a8a7
 800a7f4:	0800a8c9 	.word	0x0800a8c9
 800a7f8:	0800a8eb 	.word	0x0800a8eb
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2120      	movs	r1, #32
 800a800:	4844      	ldr	r0, [pc, #272]	; (800a914 <LED2+0x154>)
 800a802:	f003 fc21 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800a806:	2201      	movs	r2, #1
 800a808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a80c:	4842      	ldr	r0, [pc, #264]	; (800a918 <LED2+0x158>)
 800a80e:	f003 fc1b 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800a812:	2201      	movs	r2, #1
 800a814:	2110      	movs	r1, #16
 800a816:	483f      	ldr	r0, [pc, #252]	; (800a914 <LED2+0x154>)
 800a818:	f003 fc16 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a81c:	e076      	b.n	800a90c <LED2+0x14c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800a81e:	2201      	movs	r2, #1
 800a820:	2120      	movs	r1, #32
 800a822:	483c      	ldr	r0, [pc, #240]	; (800a914 <LED2+0x154>)
 800a824:	f003 fc10 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800a828:	2200      	movs	r2, #0
 800a82a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a82e:	483a      	ldr	r0, [pc, #232]	; (800a918 <LED2+0x158>)
 800a830:	f003 fc0a 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800a834:	2201      	movs	r2, #1
 800a836:	2110      	movs	r1, #16
 800a838:	4836      	ldr	r0, [pc, #216]	; (800a914 <LED2+0x154>)
 800a83a:	f003 fc05 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a83e:	e065      	b.n	800a90c <LED2+0x14c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800a840:	2200      	movs	r2, #0
 800a842:	2120      	movs	r1, #32
 800a844:	4833      	ldr	r0, [pc, #204]	; (800a914 <LED2+0x154>)
 800a846:	f003 fbff 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800a84a:	2200      	movs	r2, #0
 800a84c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a850:	4831      	ldr	r0, [pc, #196]	; (800a918 <LED2+0x158>)
 800a852:	f003 fbf9 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800a856:	2201      	movs	r2, #1
 800a858:	2110      	movs	r1, #16
 800a85a:	482e      	ldr	r0, [pc, #184]	; (800a914 <LED2+0x154>)
 800a85c:	f003 fbf4 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a860:	e054      	b.n	800a90c <LED2+0x14c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800a862:	2201      	movs	r2, #1
 800a864:	2120      	movs	r1, #32
 800a866:	482b      	ldr	r0, [pc, #172]	; (800a914 <LED2+0x154>)
 800a868:	f003 fbee 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800a86c:	2201      	movs	r2, #1
 800a86e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a872:	4829      	ldr	r0, [pc, #164]	; (800a918 <LED2+0x158>)
 800a874:	f003 fbe8 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a878:	2200      	movs	r2, #0
 800a87a:	2110      	movs	r1, #16
 800a87c:	4825      	ldr	r0, [pc, #148]	; (800a914 <LED2+0x154>)
 800a87e:	f003 fbe3 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a882:	e043      	b.n	800a90c <LED2+0x14c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800a884:	2200      	movs	r2, #0
 800a886:	2120      	movs	r1, #32
 800a888:	4822      	ldr	r0, [pc, #136]	; (800a914 <LED2+0x154>)
 800a88a:	f003 fbdd 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800a88e:	2201      	movs	r2, #1
 800a890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a894:	4820      	ldr	r0, [pc, #128]	; (800a918 <LED2+0x158>)
 800a896:	f003 fbd7 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a89a:	2200      	movs	r2, #0
 800a89c:	2110      	movs	r1, #16
 800a89e:	481d      	ldr	r0, [pc, #116]	; (800a914 <LED2+0x154>)
 800a8a0:	f003 fbd2 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a8a4:	e032      	b.n	800a90c <LED2+0x14c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	2120      	movs	r1, #32
 800a8aa:	481a      	ldr	r0, [pc, #104]	; (800a914 <LED2+0x154>)
 800a8ac:	f003 fbcc 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8b6:	4818      	ldr	r0, [pc, #96]	; (800a918 <LED2+0x158>)
 800a8b8:	f003 fbc6 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2110      	movs	r1, #16
 800a8c0:	4814      	ldr	r0, [pc, #80]	; (800a914 <LED2+0x154>)
 800a8c2:	f003 fbc1 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a8c6:	e021      	b.n	800a90c <LED2+0x14c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2120      	movs	r1, #32
 800a8cc:	4811      	ldr	r0, [pc, #68]	; (800a914 <LED2+0x154>)
 800a8ce:	f003 fbbb 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8d8:	480f      	ldr	r0, [pc, #60]	; (800a918 <LED2+0x158>)
 800a8da:	f003 fbb5 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2110      	movs	r1, #16
 800a8e2:	480c      	ldr	r0, [pc, #48]	; (800a914 <LED2+0x154>)
 800a8e4:	f003 fbb0 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a8e8:	e010      	b.n	800a90c <LED2+0x14c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	2120      	movs	r1, #32
 800a8ee:	4809      	ldr	r0, [pc, #36]	; (800a914 <LED2+0x154>)
 800a8f0:	f003 fbaa 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8fa:	4807      	ldr	r0, [pc, #28]	; (800a918 <LED2+0x158>)
 800a8fc:	f003 fba4 	bl	800e048 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800a900:	2201      	movs	r2, #1
 800a902:	2110      	movs	r1, #16
 800a904:	4803      	ldr	r0, [pc, #12]	; (800a914 <LED2+0x154>)
 800a906:	f003 fb9f 	bl	800e048 <HAL_GPIO_WritePin>
			break;
 800a90a:	bf00      	nop

	}

}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40020400 	.word	0x40020400
 800a918:	40020000 	.word	0x40020000

0800a91c <error>:
void error(){
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ESC_MIN);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ESC_MIN);
	Motor(0,0);
 800a920:	2100      	movs	r1, #0
 800a922:	2000      	movs	r0, #0
 800a924:	f000 f822 	bl	800a96c <Motor>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800a928:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <error+0x48>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2200      	movs	r2, #0
 800a92e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <error+0x48>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2200      	movs	r2, #0
 800a936:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_Base_Stop_IT(&htim6);
 800a938:	480b      	ldr	r0, [pc, #44]	; (800a968 <error+0x4c>)
 800a93a:	f005 f99a 	bl	800fc72 <HAL_TIM_Base_Stop_IT>

	while(1){
		Motor(0,0);
 800a93e:	2100      	movs	r1, #0
 800a940:	2000      	movs	r0, #0
 800a942:	f000 f813 	bl	800a96c <Motor>
		LED(1);
 800a946:	2001      	movs	r0, #1
 800a948:	f7ff fe7e 	bl	800a648 <LED>
		HAL_Delay(1000);
 800a94c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a950:	f001 fe44 	bl	800c5dc <HAL_Delay>
		LED(8);
 800a954:	2008      	movs	r0, #8
 800a956:	f7ff fe77 	bl	800a648 <LED>
		HAL_Delay(1000);
 800a95a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a95e:	f001 fe3d 	bl	800c5dc <HAL_Delay>
		Motor(0,0);
 800a962:	e7ec      	b.n	800a93e <error+0x22>
 800a964:	2001451c 	.word	0x2001451c
 800a968:	2001449c 	.word	0x2001449c

0800a96c <Motor>:
	LED(6);
	HAL_Delay(1000);

}
void Motor(int16_t MotorL,int16_t MotorR)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	460a      	mov	r2, r1
 800a976:	80fb      	strh	r3, [r7, #6]
 800a978:	4613      	mov	r3, r2
 800a97a:	80bb      	strh	r3, [r7, #4]
//		if (MotorR >= 2000) MotorR = 2000;
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MotorR);
//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//
//	}
	if(MotorL > 0 ){
 800a97c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd06      	ble.n	800a992 <Motor+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a984:	2201      	movs	r2, #1
 800a986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a98a:	4824      	ldr	r0, [pc, #144]	; (800aa1c <Motor+0xb0>)
 800a98c:	f003 fb5c 	bl	800e048 <HAL_GPIO_WritePin>
 800a990:	e00d      	b.n	800a9ae <Motor+0x42>


	}else if(MotorL < 0){
 800a992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da09      	bge.n	800a9ae <Motor+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a99a:	2200      	movs	r2, #0
 800a99c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9a0:	481e      	ldr	r0, [pc, #120]	; (800aa1c <Motor+0xb0>)
 800a9a2:	f003 fb51 	bl	800e048 <HAL_GPIO_WritePin>
		MotorL = -MotorL;
 800a9a6:	88fb      	ldrh	r3, [r7, #6]
 800a9a8:	425b      	negs	r3, r3
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	80fb      	strh	r3, [r7, #6]
	}
	if(MotorR > 0 ){
 800a9ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dd06      	ble.n	800a9c4 <Motor+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9bc:	4818      	ldr	r0, [pc, #96]	; (800aa20 <Motor+0xb4>)
 800a9be:	f003 fb43 	bl	800e048 <HAL_GPIO_WritePin>
 800a9c2:	e00d      	b.n	800a9e0 <Motor+0x74>

	}else if(MotorR < 0){
 800a9c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da09      	bge.n	800a9e0 <Motor+0x74>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9d2:	4813      	ldr	r0, [pc, #76]	; (800aa20 <Motor+0xb4>)
 800a9d4:	f003 fb38 	bl	800e048 <HAL_GPIO_WritePin>
		MotorR = -MotorR;
 800a9d8:	88bb      	ldrh	r3, [r7, #4]
 800a9da:	425b      	negs	r3, r3
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	80bb      	strh	r3, [r7, #4]

	}
	if (MotorR > 2000) MotorR = 2000;
 800a9e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a9e8:	dd02      	ble.n	800a9f0 <Motor+0x84>
 800a9ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a9ee:	80bb      	strh	r3, [r7, #4]
	if (MotorL > 2000) MotorL = 2000;
 800a9f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a9f8:	dd02      	ble.n	800aa00 <Motor+0x94>
 800a9fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a9fe:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MotorL);
 800aa00:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <Motor+0xb8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa08:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MotorR);
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <Motor+0xbc>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38


}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	40020800 	.word	0x40020800
 800aa20:	40020000 	.word	0x40020000
 800aa24:	2001432c 	.word	0x2001432c
 800aa28:	200144dc 	.word	0x200144dc

0800aa2c <sidemaker>:
void sidemaker(){
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15) ==0) maker_right = true;
 800aa30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa34:	481b      	ldr	r0, [pc, #108]	; (800aaa4 <sidemaker+0x78>)
 800aa36:	f003 faef 	bl	800e018 <HAL_GPIO_ReadPin>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <sidemaker+0x1c>
 800aa40:	4b19      	ldr	r3, [pc, #100]	; (800aaa8 <sidemaker+0x7c>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	e002      	b.n	800aa4e <sidemaker+0x22>
	else maker_right = false;
 800aa48:	4b17      	ldr	r3, [pc, #92]	; (800aaa8 <sidemaker+0x7c>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2) ==0 ) maker_left = true;
 800aa4e:	2104      	movs	r1, #4
 800aa50:	4816      	ldr	r0, [pc, #88]	; (800aaac <sidemaker+0x80>)
 800aa52:	f003 fae1 	bl	800e018 <HAL_GPIO_ReadPin>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <sidemaker+0x38>
 800aa5c:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <sidemaker+0x84>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	701a      	strb	r2, [r3, #0]
 800aa62:	e002      	b.n	800aa6a <sidemaker+0x3e>
	else maker_left = false;
 800aa64:	4b12      	ldr	r3, [pc, #72]	; (800aab0 <sidemaker+0x84>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]

	if(log_flag){
 800aa6a:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <sidemaker+0x88>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d016      	beq.n	800aaa0 <sidemaker+0x74>
	  if(cross_line) cross_flag++;
 800aa72:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <sidemaker+0x8c>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <sidemaker+0x5a>
 800aa7a:	4b10      	ldr	r3, [pc, #64]	; (800aabc <sidemaker+0x90>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	4b0e      	ldr	r3, [pc, #56]	; (800aabc <sidemaker+0x90>)
 800aa84:	701a      	strb	r2, [r3, #0]
	  if(cross_flag>=11) {
 800aa86:	4b0d      	ldr	r3, [pc, #52]	; (800aabc <sidemaker+0x90>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b0a      	cmp	r3, #10
 800aa8c:	d905      	bls.n	800aa9a <sidemaker+0x6e>
		  cross_line=0;
 800aa8e:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <sidemaker+0x8c>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	701a      	strb	r2, [r3, #0]
		  cross_flag=0;
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <sidemaker+0x90>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
	  }
		  log_flag= false;
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <sidemaker+0x88>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
	  }
}
 800aaa0:	bf00      	nop
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40020800 	.word	0x40020800
 800aaa8:	200143ac 	.word	0x200143ac
 800aaac:	40020400 	.word	0x40020400
 800aab0:	20014498 	.word	0x20014498
 800aab4:	2000020a 	.word	0x2000020a
 800aab8:	2000c2cc 	.word	0x2000c2cc
 800aabc:	2000c2bd 	.word	0x2000c2bd

0800aac0 <fan_pressure>:
void fan_pressure(float L,float R){
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	ed87 0a01 	vstr	s0, [r7, #4]
 800aaca:	edc7 0a00 	vstr	s1, [r7]
	int fanL=0;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
	int fanR=0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60bb      	str	r3, [r7, #8]
	if(L>220)L=220;
 800aad6:	edd7 7a01 	vldr	s15, [r7, #4]
 800aada:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ab34 <fan_pressure+0x74>
 800aade:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae6:	dd01      	ble.n	800aaec <fan_pressure+0x2c>
 800aae8:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <fan_pressure+0x78>)
 800aaea:	607b      	str	r3, [r7, #4]
	if(R>220)R=220;
 800aaec:	edd7 7a00 	vldr	s15, [r7]
 800aaf0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ab34 <fan_pressure+0x74>
 800aaf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafc:	dd01      	ble.n	800ab02 <fan_pressure+0x42>
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <fan_pressure+0x78>)
 800ab00:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, L);
 800ab02:	4b0e      	ldr	r3, [pc, #56]	; (800ab3c <fan_pressure+0x7c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab0e:	ee17 2a90 	vmov	r2, s15
 800ab12:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, R);
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <fan_pressure+0x7c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	edd7 7a00 	vldr	s15, [r7]
 800ab1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab20:	ee17 2a90 	vmov	r2, s15
 800ab24:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	435c0000 	.word	0x435c0000
 800ab38:	435c0000 	.word	0x435c0000
 800ab3c:	2001451c 	.word	0x2001451c

0800ab40 <flashcheck>:

	fan_Lim = (19*(100-fan))/100;

	fan_pressure(round(fan_Lim),round(fan_Lim));
}
void flashcheck(){
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
	if(work_ram[28] != 0){
 800ab44:	4b1c      	ldr	r3, [pc, #112]	; (800abb8 <flashcheck+0x78>)
 800ab46:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d033      	beq.n	800abb4 <flashcheck+0x74>
		  work_ram[26]=2500;
 800ab4c:	4b1a      	ldr	r3, [pc, #104]	; (800abb8 <flashcheck+0x78>)
 800ab4e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ab52:	869a      	strh	r2, [r3, #52]	; 0x34
		  work_ram[27]=200;
 800ab54:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <flashcheck+0x78>)
 800ab56:	22c8      	movs	r2, #200	; 0xc8
 800ab58:	86da      	strh	r2, [r3, #54]	; 0x36
		  work_ram[28]=0;
 800ab5a:	4b17      	ldr	r3, [pc, #92]	; (800abb8 <flashcheck+0x78>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	871a      	strh	r2, [r3, #56]	; 0x38
		  work_ram[29]=32;
 800ab60:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <flashcheck+0x78>)
 800ab62:	2220      	movs	r2, #32
 800ab64:	875a      	strh	r2, [r3, #58]	; 0x3a
		  work_ram[31]=22;
 800ab66:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <flashcheck+0x78>)
 800ab68:	2216      	movs	r2, #22
 800ab6a:	87da      	strh	r2, [r3, #62]	; 0x3e
		  work_ram[32]=6;
 800ab6c:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <flashcheck+0x78>)
 800ab6e:	2206      	movs	r2, #6
 800ab70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		  work_ram[33] = 2000;
 800ab74:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <flashcheck+0x78>)
 800ab76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ab7a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		  work_ram[34] = 3000;
 800ab7e:	4b0e      	ldr	r3, [pc, #56]	; (800abb8 <flashcheck+0x78>)
 800ab80:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ab84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		  work_ram[35] = 3500;
 800ab88:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <flashcheck+0x78>)
 800ab8a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800ab8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		  work_ram[36] = 4500;
 800ab92:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <flashcheck+0x78>)
 800ab94:	f241 1294 	movw	r2, #4500	; 0x1194
 800ab98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		  work_ram[37] = 4500;
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <flashcheck+0x78>)
 800ab9e:	f241 1294 	movw	r2, #4500	; 0x1194
 800aba2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		  work_ram[38] = 7000;
 800aba6:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <flashcheck+0x78>)
 800aba8:	f641 3258 	movw	r2, #7000	; 0x1b58
 800abac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		  Flash_store();
 800abb0:	f7ff fc1e 	bl	800a3f0 <Flash_store>
	}
}
 800abb4:	bf00      	nop
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	2000c310 	.word	0x2000c310

0800abbc <switch_cheack2>:
uint8_t switch_cheack(){
	return HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);

}
uint8_t switch_cheack2(){
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15);
 800abc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abc4:	4802      	ldr	r0, [pc, #8]	; (800abd0 <switch_cheack2+0x14>)
 800abc6:	f003 fa27 	bl	800e018 <HAL_GPIO_ReadPin>
 800abca:	4603      	mov	r3, r0

}
 800abcc:	4618      	mov	r0, r3
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	40020400 	.word	0x40020400

0800abd4 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, 0xFFFF);
 800abdc:	1d39      	adds	r1, r7, #4
 800abde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abe2:	2201      	movs	r2, #1
 800abe4:	4803      	ldr	r0, [pc, #12]	; (800abf4 <__io_putchar+0x20>)
 800abe6:	f005 ff3e 	bl	8010a66 <HAL_UART_Transmit>
	return ch;
 800abea:	687b      	ldr	r3, [r7, #4]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	2001460c 	.word	0x2001460c

0800abf8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_TIM_PeriodElapsedCallback>:
//  {
//    ITM_SendChar(*ptr++);
//  }
//  return len;
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	ghq++;
 800ac14:	4b23      	ldr	r3, [pc, #140]	; (800aca4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	4a22      	ldr	r2, [pc, #136]	; (800aca4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800ac1c:	6013      	str	r3, [r2, #0]
	Speed_Motor();
 800ac1e:	f7ff f997 	bl	8009f50 <Speed_Motor>
	sidemaker();
 800ac22:	f7ff ff03 	bl	800aa2c <sidemaker>
	  if(maker_flag==0 && second_soeed>=1 && (Average_speed<=6000)){
 800ac26:	4b20      	ldr	r3, [pc, #128]	; (800aca8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d113      	bne.n	800ac56 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	; (800acac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00f      	beq.n	800ac56 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800ac36:	4b1e      	ldr	r3, [pc, #120]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac3c:	f241 7270 	movw	r2, #6000	; 0x1770
 800ac40:	4293      	cmp	r3, r2
 800ac42:	dc08      	bgt.n	800ac56 <HAL_TIM_PeriodElapsedCallback+0x4a>
		  Average_speed=Average_speed+5;
 800ac44:	4b1a      	ldr	r3, [pc, #104]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	3305      	adds	r3, #5
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	b21a      	sxth	r2, r3
 800ac52:	4b17      	ldr	r3, [pc, #92]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac54:	801a      	strh	r2, [r3, #0]
	  }
	//if(driv_flag==1&& maker_flag==1)first_cale();
//	if(straight_flag) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//	else if(driv_flag ==1) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  if(maker_flag==0 && Average_speed<=work_ram[26])Average_speed+=5;
 800ac56:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d111      	bne.n	800ac82 <HAL_TIM_PeriodElapsedCallback+0x76>
 800ac5e:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac64:	461a      	mov	r2, r3
 800ac66:	4b13      	ldr	r3, [pc, #76]	; (800acb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800ac68:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	dc09      	bgt.n	800ac82 <HAL_TIM_PeriodElapsedCallback+0x76>
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	3305      	adds	r3, #5
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	b21a      	sxth	r2, r3
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac7e:	801a      	strh	r2, [r3, #0]
  else if(driv_flag ==1 && maker_flag==1) Average_speed=work_ram[26];


}
 800ac80:	e00c      	b.n	800ac9c <HAL_TIM_PeriodElapsedCallback+0x90>
  else if(driv_flag ==1 && maker_flag==1) Average_speed=work_ram[26];
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d108      	bne.n	800ac9c <HAL_TIM_PeriodElapsedCallback+0x90>
 800ac8a:	4b07      	ldr	r3, [pc, #28]	; (800aca8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d104      	bne.n	800ac9c <HAL_TIM_PeriodElapsedCallback+0x90>
 800ac92:	4b08      	ldr	r3, [pc, #32]	; (800acb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800ac94:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ac96:	b21a      	sxth	r2, r3
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800ac9a:	801a      	strh	r2, [r3, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	2000c2c0 	.word	0x2000c2c0
 800aca8:	2000c2bc 	.word	0x2000c2bc
 800acac:	2000c0bc 	.word	0x2000c0bc
 800acb0:	2001432a 	.word	0x2001432a
 800acb4:	2000c310 	.word	0x2000c310
 800acb8:	2000c2be 	.word	0x2000c2be

0800acbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	int i=0;
//	int z=0;
//	int g=0;
	int cal=0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800acc6:	f001 fc17 	bl	800c4f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800acca:	f000 f895 	bl	800adf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800acce:	f000 fcef 	bl	800b6b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800acd2:	f000 fccd 	bl	800b670 <MX_DMA_Init>
  MX_ADC1_Init();
 800acd6:	f000 f8f9 	bl	800aecc <MX_ADC1_Init>
  MX_I2C1_Init();
 800acda:	f000 f9f1 	bl	800b0c0 <MX_I2C1_Init>
  MX_SPI3_Init();
 800acde:	f000 fa1d 	bl	800b11c <MX_SPI3_Init>
  MX_TIM1_Init();
 800ace2:	f000 fa51 	bl	800b188 <MX_TIM1_Init>
  MX_TIM3_Init();
 800ace6:	f000 fb37 	bl	800b358 <MX_TIM3_Init>
  MX_TIM4_Init();
 800acea:	f000 fb89 	bl	800b400 <MX_TIM4_Init>
  MX_TIM8_Init();
 800acee:	f000 fc11 	bl	800b514 <MX_TIM8_Init>
  MX_USART6_UART_Init();
 800acf2:	f000 fc93 	bl	800b61c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800acf6:	f000 fbd7 	bl	800b4a8 <MX_TIM6_Init>
  MX_TIM2_Init();
 800acfa:	f000 fac9 	bl	800b290 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(100);

  init();
 800acfe:	f7ff fbbd 	bl	800a47c <init>
 // ADCinit();

//  brushi_init();
  IMU_init();
 800ad02:	f7fe fea5 	bl	8009a50 <IMU_init>
  IMU_init();
 800ad06:	f7fe fea3 	bl	8009a50 <IMU_init>
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50)
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 50);
//  fan_pressure(10,0);f
 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 400);
 // Kd = 10;
if(switch_cheack2()==0){
 800ad0a:	f7ff ff57 	bl	800abbc <switch_cheack2>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d110      	bne.n	800ad36 <main+0x7a>
	LED(4);
 800ad14:	2004      	movs	r0, #4
 800ad16:	f7ff fc97 	bl	800a648 <LED>
	LED2(4);
 800ad1a:	2004      	movs	r0, #4
 800ad1c:	f7ff fd50 	bl	800a7c0 <LED2>
	HAL_Delay(500);
 800ad20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad24:	f001 fc5a 	bl	800c5dc <HAL_Delay>
	fan_pressure(150,150);
 800ad28:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800add8 <main+0x11c>
 800ad2c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800add8 <main+0x11c>
 800ad30:	f7ff fec6 	bl	800aac0 <fan_pressure>
	while(1);
 800ad34:	e7fe      	b.n	800ad34 <main+0x78>
}
//  HAL_TIM_Base_Start_IT(&htim6);
 // tuning();
//  second_soeed = 2;
//  log_Cal();
Motor(00,00);
 800ad36:	2100      	movs	r1, #0
 800ad38:	2000      	movs	r0, #0
 800ad3a:	f7ff fe17 	bl	800a96c <Motor>
 //	 mode();
//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 // __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 400);
 //Motor(500,500);
 Motor(00,00);
 800ad3e:	2100      	movs	r1, #0
 800ad40:	2000      	movs	r0, #0
 800ad42:	f7ff fe13 	bl	800a96c <Motor>
//  mode_Selection(1);
LED(5);
 800ad46:	2005      	movs	r0, #5
 800ad48:	f7ff fc7e 	bl	800a648 <LED>
LED2(4);
 800ad4c:	2004      	movs	r0, #4
 800ad4e:	f7ff fd37 	bl	800a7c0 <LED2>
//  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 2000);
	//IMU_init();
	//off_angle();
  //printf("hello\r\n");
  log_init ();
 800ad52:	f7fe f8ff 	bl	8008f54 <log_init>
//  Flash_store();
 // driv_fan(3800);
//  maker_flag=1;
//  driv_flag=2;
//  HAL_TIM_Base_Start_IT(&htim6);
  TIM3-> CNT = 0;
 800ad56:	4b21      	ldr	r3, [pc, #132]	; (800addc <main+0x120>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	625a      	str	r2, [r3, #36]	; 0x24
//  fan_pressure(15,15);
//mode_Selection(1);
//  TIM3 -> CNT = 32768;
  while (1)
  {
	  read_gyro_data();
 800ad5c:	f7fe fea2 	bl	8009aa4 <read_gyro_data>
	  senseGet();
 800ad60:	f000 fd76 	bl	800b850 <senseGet>
//	  HAL_Delay(3000);
//	  fan_pressure(0,13);
//	  HAL_Delay(3000);
//	ghq = *(uint32_t*)plan_velo_adress;
//	cal = *(float*)plan_velo_adress;
	if(isnan(test) != 0)break;
 800ad64:	4b1e      	ldr	r3, [pc, #120]	; (800ade0 <main+0x124>)
 800ad66:	edd3 7a00 	vldr	s15, [r3]
 800ad6a:	eef4 7a67 	vcmp.f32	s15, s15
 800ad6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad72:	d62a      	bvs.n	800adca <main+0x10e>
	cal = *(uint32_t*)side_adress;
 800ad74:	4b1b      	ldr	r3, [pc, #108]	; (800ade4 <main+0x128>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	607b      	str	r3, [r7, #4]
	test = *(float*)side_adress;
 800ad7c:	4b19      	ldr	r3, [pc, #100]	; (800ade4 <main+0x128>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a17      	ldr	r2, [pc, #92]	; (800ade0 <main+0x124>)
 800ad84:	6013      	str	r3, [r2, #0]
//	if(isnan(cal) != 0)break;
	side_adress+= 0x04;
 800ad86:	4b17      	ldr	r3, [pc, #92]	; (800ade4 <main+0x128>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <main+0x128>)
 800ad8e:	6013      	str	r3, [r2, #0]
//	//c++;
//	//printf("%d,",c);
	printf("%d\r\n",cal);
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4815      	ldr	r0, [pc, #84]	; (800ade8 <main+0x12c>)
 800ad94:	f007 f9a0 	bl	80120d8 <iprintf>
//	plan_velo_adress+= 0x04;
//
//	HAL_Delay(1000);

//	 a= analog[0];
	  test =  (a-32768 );
 800ad98:	4b14      	ldr	r3, [pc, #80]	; (800adec <main+0x130>)
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ada0:	ee07 3a90 	vmov	s15, r3
 800ada4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <main+0x124>)
 800adaa:	edc3 7a00 	vstr	s15, [r3]
//	  printf("%d,",analog[10]);
//	  printf("%d,",analog[11]);
//	  printf("%d,\r\n",analog[12]);
//	  printf("%d\r\n",a);
//	  read_gyro_data();
	  a=TIM4 -> CNT;
 800adae:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <main+0x134>)
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	4b0d      	ldr	r3, [pc, #52]	; (800adec <main+0x130>)
 800adb6:	801a      	strh	r2, [r3, #0]
	  b=TIM3 -> CNT;
 800adb8:	4b08      	ldr	r3, [pc, #32]	; (800addc <main+0x120>)
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <main+0x138>)
 800adc0:	801a      	strh	r2, [r3, #0]
//			  g=0;
//		  }
//		  log_flag= false;
	//  }
	  //printf("%lf\r\n",speedget());
	  HAL_Delay(100);
 800adc2:	2064      	movs	r0, #100	; 0x64
 800adc4:	f001 fc0a 	bl	800c5dc <HAL_Delay>
	  read_gyro_data();
 800adc8:	e7c8      	b.n	800ad5c <main+0xa0>
	if(isnan(test) != 0)break;
 800adca:	bf00      	nop
    /* USER CODE BEGIN 3 */
  }

 // printf("%lf\r\n",test);
//  Motor(00,00);
  return 0;
 800adcc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	43160000 	.word	0x43160000
 800addc:	40000400 	.word	0x40000400
 800ade0:	2000c2c8 	.word	0x2000c2c8
 800ade4:	2000c2f4 	.word	0x2000c2f4
 800ade8:	08014248 	.word	0x08014248
 800adec:	2000c2c4 	.word	0x2000c2c4
 800adf0:	40000800 	.word	0x40000800
 800adf4:	2000c2c6 	.word	0x2000c2c6

0800adf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b094      	sub	sp, #80	; 0x50
 800adfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800adfe:	f107 0320 	add.w	r3, r7, #32
 800ae02:	2230      	movs	r2, #48	; 0x30
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f006 fd01 	bl	801180e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae0c:	f107 030c 	add.w	r3, r7, #12
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	605a      	str	r2, [r3, #4]
 800ae16:	609a      	str	r2, [r3, #8]
 800ae18:	60da      	str	r2, [r3, #12]
 800ae1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60bb      	str	r3, [r7, #8]
 800ae20:	4b28      	ldr	r3, [pc, #160]	; (800aec4 <SystemClock_Config+0xcc>)
 800ae22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae24:	4a27      	ldr	r2, [pc, #156]	; (800aec4 <SystemClock_Config+0xcc>)
 800ae26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae2a:	6413      	str	r3, [r2, #64]	; 0x40
 800ae2c:	4b25      	ldr	r3, [pc, #148]	; (800aec4 <SystemClock_Config+0xcc>)
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae38:	2300      	movs	r3, #0
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	4b22      	ldr	r3, [pc, #136]	; (800aec8 <SystemClock_Config+0xd0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a21      	ldr	r2, [pc, #132]	; (800aec8 <SystemClock_Config+0xd0>)
 800ae42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	4b1f      	ldr	r3, [pc, #124]	; (800aec8 <SystemClock_Config+0xd0>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae50:	607b      	str	r3, [r7, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ae58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ae62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800ae68:	2306      	movs	r3, #6
 800ae6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800ae6c:	23a8      	movs	r3, #168	; 0xa8
 800ae6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ae70:	2302      	movs	r3, #2
 800ae72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ae74:	2304      	movs	r3, #4
 800ae76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ae78:	f107 0320 	add.w	r3, r7, #32
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f003 fd3d 	bl	800e8fc <HAL_RCC_OscConfig>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800ae88:	f000 fcde 	bl	800b848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ae8c:	230f      	movs	r3, #15
 800ae8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ae90:	2302      	movs	r3, #2
 800ae92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ae94:	2300      	movs	r3, #0
 800ae96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ae98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ae9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ae9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800aea4:	f107 030c 	add.w	r3, r7, #12
 800aea8:	2105      	movs	r1, #5
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f003 ff96 	bl	800eddc <HAL_RCC_ClockConfig>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800aeb6:	f000 fcc7 	bl	800b848 <Error_Handler>
  }
}
 800aeba:	bf00      	nop
 800aebc:	3750      	adds	r7, #80	; 0x50
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	40023800 	.word	0x40023800
 800aec8:	40007000 	.word	0x40007000

0800aecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800aed2:	463b      	mov	r3, r7
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	605a      	str	r2, [r3, #4]
 800aeda:	609a      	str	r2, [r3, #8]
 800aedc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800aede:	4b75      	ldr	r3, [pc, #468]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800aee0:	4a75      	ldr	r2, [pc, #468]	; (800b0b8 <MX_ADC1_Init+0x1ec>)
 800aee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800aee4:	4b73      	ldr	r3, [pc, #460]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800aee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aeea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800aeec:	4b71      	ldr	r3, [pc, #452]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800aef2:	4b70      	ldr	r3, [pc, #448]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800aef8:	4b6e      	ldr	r3, [pc, #440]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800aefe:	4b6d      	ldr	r3, [pc, #436]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800af06:	4b6b      	ldr	r3, [pc, #428]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af08:	2200      	movs	r2, #0
 800af0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800af0c:	4b69      	ldr	r3, [pc, #420]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af0e:	4a6b      	ldr	r2, [pc, #428]	; (800b0bc <MX_ADC1_Init+0x1f0>)
 800af10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800af12:	4b68      	ldr	r3, [pc, #416]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af14:	2200      	movs	r2, #0
 800af16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 800af18:	4b66      	ldr	r3, [pc, #408]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af1a:	220d      	movs	r2, #13
 800af1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800af1e:	4b65      	ldr	r3, [pc, #404]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800af26:	4b63      	ldr	r3, [pc, #396]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af28:	2201      	movs	r2, #1
 800af2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800af2c:	4861      	ldr	r0, [pc, #388]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af2e:	f001 fb77 	bl	800c620 <HAL_ADC_Init>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800af38:	f000 fc86 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800af3c:	2309      	movs	r3, #9
 800af3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800af40:	2301      	movs	r3, #1
 800af42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800af44:	2307      	movs	r3, #7
 800af46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800af48:	463b      	mov	r3, r7
 800af4a:	4619      	mov	r1, r3
 800af4c:	4859      	ldr	r0, [pc, #356]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af4e:	f001 fcb1 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800af58:	f000 fc76 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800af5c:	2308      	movs	r3, #8
 800af5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800af60:	2302      	movs	r3, #2
 800af62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800af64:	463b      	mov	r3, r7
 800af66:	4619      	mov	r1, r3
 800af68:	4852      	ldr	r0, [pc, #328]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af6a:	f001 fca3 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800af74:	f000 fc68 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800af78:	230f      	movs	r3, #15
 800af7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800af7c:	2303      	movs	r3, #3
 800af7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800af80:	463b      	mov	r3, r7
 800af82:	4619      	mov	r1, r3
 800af84:	484b      	ldr	r0, [pc, #300]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800af86:	f001 fc95 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800af90:	f000 fc5a 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800af94:	230e      	movs	r3, #14
 800af96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800af98:	2304      	movs	r3, #4
 800af9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800af9c:	463b      	mov	r3, r7
 800af9e:	4619      	mov	r1, r3
 800afa0:	4844      	ldr	r0, [pc, #272]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800afa2:	f001 fc87 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800afac:	f000 fc4c 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800afb0:	2305      	movs	r3, #5
 800afb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800afb4:	2305      	movs	r3, #5
 800afb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800afb8:	463b      	mov	r3, r7
 800afba:	4619      	mov	r1, r3
 800afbc:	483d      	ldr	r0, [pc, #244]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800afbe:	f001 fc79 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800afc8:	f000 fc3e 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800afcc:	2304      	movs	r3, #4
 800afce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800afd0:	2306      	movs	r3, #6
 800afd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800afd4:	463b      	mov	r3, r7
 800afd6:	4619      	mov	r1, r3
 800afd8:	4836      	ldr	r0, [pc, #216]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800afda:	f001 fc6b 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800afe4:	f000 fc30 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800afe8:	2303      	movs	r3, #3
 800afea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800afec:	2307      	movs	r3, #7
 800afee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aff0:	463b      	mov	r3, r7
 800aff2:	4619      	mov	r1, r3
 800aff4:	482f      	ldr	r0, [pc, #188]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800aff6:	f001 fc5d 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800b000:	f000 fc22 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800b004:	2302      	movs	r3, #2
 800b006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800b008:	2308      	movs	r3, #8
 800b00a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b00c:	463b      	mov	r3, r7
 800b00e:	4619      	mov	r1, r3
 800b010:	4828      	ldr	r0, [pc, #160]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800b012:	f001 fc4f 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800b01c:	f000 fc14 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800b020:	2301      	movs	r3, #1
 800b022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800b024:	2309      	movs	r3, #9
 800b026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b028:	463b      	mov	r3, r7
 800b02a:	4619      	mov	r1, r3
 800b02c:	4821      	ldr	r0, [pc, #132]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800b02e:	f001 fc41 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800b038:	f000 fc06 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800b040:	230a      	movs	r3, #10
 800b042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b044:	463b      	mov	r3, r7
 800b046:	4619      	mov	r1, r3
 800b048:	481a      	ldr	r0, [pc, #104]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800b04a:	f001 fc33 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800b054:	f000 fbf8 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800b058:	230d      	movs	r3, #13
 800b05a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800b05c:	230b      	movs	r3, #11
 800b05e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b060:	463b      	mov	r3, r7
 800b062:	4619      	mov	r1, r3
 800b064:	4813      	ldr	r0, [pc, #76]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800b066:	f001 fc25 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800b070:	f000 fbea 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800b078:	230c      	movs	r3, #12
 800b07a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b07c:	463b      	mov	r3, r7
 800b07e:	4619      	mov	r1, r3
 800b080:	480c      	ldr	r0, [pc, #48]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800b082:	f001 fc17 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800b08c:	f000 fbdc 	bl	800b848 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800b090:	230b      	movs	r3, #11
 800b092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800b094:	230d      	movs	r3, #13
 800b096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b098:	463b      	mov	r3, r7
 800b09a:	4619      	mov	r1, r3
 800b09c:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <MX_ADC1_Init+0x1e8>)
 800b09e:	f001 fc09 	bl	800c8b4 <HAL_ADC_ConfigChannel>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800b0a8:	f000 fbce 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	200143f0 	.word	0x200143f0
 800b0b8:	40012000 	.word	0x40012000
 800b0bc:	0f000001 	.word	0x0f000001

0800b0c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b0c4:	4b12      	ldr	r3, [pc, #72]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0c6:	4a13      	ldr	r2, [pc, #76]	; (800b114 <MX_I2C1_Init+0x54>)
 800b0c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0cc:	4a12      	ldr	r2, [pc, #72]	; (800b118 <MX_I2C1_Init+0x58>)
 800b0ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b0d0:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b0d6:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b0dc:	4b0c      	ldr	r3, [pc, #48]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b0f6:	4b06      	ldr	r3, [pc, #24]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b0fc:	4804      	ldr	r0, [pc, #16]	; (800b110 <MX_I2C1_Init+0x50>)
 800b0fe:	f002 ffbd 	bl	800e07c <HAL_I2C_Init>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b108:	f000 fb9e 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b10c:	bf00      	nop
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	2001455c 	.word	0x2001455c
 800b114:	40005400 	.word	0x40005400
 800b118:	000186a0 	.word	0x000186a0

0800b11c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800b120:	4b17      	ldr	r3, [pc, #92]	; (800b180 <MX_SPI3_Init+0x64>)
 800b122:	4a18      	ldr	r2, [pc, #96]	; (800b184 <MX_SPI3_Init+0x68>)
 800b124:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800b126:	4b16      	ldr	r3, [pc, #88]	; (800b180 <MX_SPI3_Init+0x64>)
 800b128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b12c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800b12e:	4b14      	ldr	r3, [pc, #80]	; (800b180 <MX_SPI3_Init+0x64>)
 800b130:	2200      	movs	r2, #0
 800b132:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800b134:	4b12      	ldr	r3, [pc, #72]	; (800b180 <MX_SPI3_Init+0x64>)
 800b136:	2200      	movs	r2, #0
 800b138:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b13a:	4b11      	ldr	r3, [pc, #68]	; (800b180 <MX_SPI3_Init+0x64>)
 800b13c:	2202      	movs	r2, #2
 800b13e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b140:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <MX_SPI3_Init+0x64>)
 800b142:	2201      	movs	r2, #1
 800b144:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800b146:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <MX_SPI3_Init+0x64>)
 800b148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b14c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b14e:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <MX_SPI3_Init+0x64>)
 800b150:	2200      	movs	r2, #0
 800b152:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b154:	4b0a      	ldr	r3, [pc, #40]	; (800b180 <MX_SPI3_Init+0x64>)
 800b156:	2200      	movs	r2, #0
 800b158:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800b15a:	4b09      	ldr	r3, [pc, #36]	; (800b180 <MX_SPI3_Init+0x64>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <MX_SPI3_Init+0x64>)
 800b162:	2200      	movs	r2, #0
 800b164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800b166:	4b06      	ldr	r3, [pc, #24]	; (800b180 <MX_SPI3_Init+0x64>)
 800b168:	220a      	movs	r2, #10
 800b16a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800b16c:	4804      	ldr	r0, [pc, #16]	; (800b180 <MX_SPI3_Init+0x64>)
 800b16e:	f004 f801 	bl	800f174 <HAL_SPI_Init>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800b178:	f000 fb66 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800b17c:	bf00      	nop
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	200145b0 	.word	0x200145b0
 800b184:	40003c00 	.word	0x40003c00

0800b188 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b092      	sub	sp, #72	; 0x48
 800b18c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b18e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b19c:	2200      	movs	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	605a      	str	r2, [r3, #4]
 800b1a2:	609a      	str	r2, [r3, #8]
 800b1a4:	60da      	str	r2, [r3, #12]
 800b1a6:	611a      	str	r2, [r3, #16]
 800b1a8:	615a      	str	r2, [r3, #20]
 800b1aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b1ac:	1d3b      	adds	r3, r7, #4
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f006 fb2b 	bl	801180e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b1b8:	4b33      	ldr	r3, [pc, #204]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1ba:	4a34      	ldr	r2, [pc, #208]	; (800b28c <MX_TIM1_Init+0x104>)
 800b1bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b1be:	4b32      	ldr	r3, [pc, #200]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1c4:	4b30      	ldr	r3, [pc, #192]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800b1ca:	4b2f      	ldr	r3, [pc, #188]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1d2:	4b2d      	ldr	r3, [pc, #180]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b1d8:	4b2b      	ldr	r3, [pc, #172]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1de:	4b2a      	ldr	r3, [pc, #168]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800b1e4:	4828      	ldr	r0, [pc, #160]	; (800b288 <MX_TIM1_Init+0x100>)
 800b1e6:	f004 fd6f 	bl	800fcc8 <HAL_TIM_PWM_Init>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800b1f0:	f000 fb2a 	bl	800b848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b1fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b200:	4619      	mov	r1, r3
 800b202:	4821      	ldr	r0, [pc, #132]	; (800b288 <MX_TIM1_Init+0x100>)
 800b204:	f005 fb00 	bl	8010808 <HAL_TIMEx_MasterConfigSynchronization>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800b20e:	f000 fb1b 	bl	800b848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b212:	2360      	movs	r3, #96	; 0x60
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b21a:	2300      	movs	r3, #0
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b21e:	2300      	movs	r3, #0
 800b220:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b222:	2300      	movs	r3, #0
 800b224:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b226:	2300      	movs	r3, #0
 800b228:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b22e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b232:	2204      	movs	r2, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4814      	ldr	r0, [pc, #80]	; (800b288 <MX_TIM1_Init+0x100>)
 800b238:	f004 ff82 	bl	8010140 <HAL_TIM_PWM_ConfigChannel>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800b242:	f000 fb01 	bl	800b848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b246:	2300      	movs	r3, #0
 800b248:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b24e:	2300      	movs	r3, #0
 800b250:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b25a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b25e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b260:	2300      	movs	r3, #0
 800b262:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b264:	1d3b      	adds	r3, r7, #4
 800b266:	4619      	mov	r1, r3
 800b268:	4807      	ldr	r0, [pc, #28]	; (800b288 <MX_TIM1_Init+0x100>)
 800b26a:	f005 fb49 	bl	8010900 <HAL_TIMEx_ConfigBreakDeadTime>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800b274:	f000 fae8 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800b278:	4803      	ldr	r0, [pc, #12]	; (800b288 <MX_TIM1_Init+0x100>)
 800b27a:	f000 ff37 	bl	800c0ec <HAL_TIM_MspPostInit>

}
 800b27e:	bf00      	nop
 800b280:	3748      	adds	r7, #72	; 0x48
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	200144dc 	.word	0x200144dc
 800b28c:	40010000 	.word	0x40010000

0800b290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b296:	f107 0320 	add.w	r3, r7, #32
 800b29a:	2200      	movs	r2, #0
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b2a0:	1d3b      	adds	r3, r7, #4
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	605a      	str	r2, [r3, #4]
 800b2a8:	609a      	str	r2, [r3, #8]
 800b2aa:	60da      	str	r2, [r3, #12]
 800b2ac:	611a      	str	r2, [r3, #16]
 800b2ae:	615a      	str	r2, [r3, #20]
 800b2b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b2b2:	4b28      	ldr	r3, [pc, #160]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b2b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b2ba:	4b26      	ldr	r3, [pc, #152]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2c0:	4b24      	ldr	r3, [pc, #144]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800b2c6:	4b23      	ldr	r3, [pc, #140]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2c8:	f240 3247 	movw	r2, #839	; 0x347
 800b2cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2ce:	4b21      	ldr	r3, [pc, #132]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b2d4:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b2da:	481e      	ldr	r0, [pc, #120]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2dc:	f004 fcf4 	bl	800fcc8 <HAL_TIM_PWM_Init>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800b2e6:	f000 faaf 	bl	800b848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b2f2:	f107 0320 	add.w	r3, r7, #32
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	4816      	ldr	r0, [pc, #88]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b2fa:	f005 fa85 	bl	8010808 <HAL_TIMEx_MasterConfigSynchronization>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800b304:	f000 faa0 	bl	800b848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b308:	2360      	movs	r3, #96	; 0x60
 800b30a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b310:	2300      	movs	r3, #0
 800b312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b318:	1d3b      	adds	r3, r7, #4
 800b31a:	2208      	movs	r2, #8
 800b31c:	4619      	mov	r1, r3
 800b31e:	480d      	ldr	r0, [pc, #52]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b320:	f004 ff0e 	bl	8010140 <HAL_TIM_PWM_ConfigChannel>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800b32a:	f000 fa8d 	bl	800b848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b32e:	1d3b      	adds	r3, r7, #4
 800b330:	220c      	movs	r2, #12
 800b332:	4619      	mov	r1, r3
 800b334:	4807      	ldr	r0, [pc, #28]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b336:	f004 ff03 	bl	8010140 <HAL_TIM_PWM_ConfigChannel>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800b340:	f000 fa82 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b344:	4803      	ldr	r0, [pc, #12]	; (800b354 <MX_TIM2_Init+0xc4>)
 800b346:	f000 fed1 	bl	800c0ec <HAL_TIM_MspPostInit>

}
 800b34a:	bf00      	nop
 800b34c:	3728      	adds	r7, #40	; 0x28
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	2001451c 	.word	0x2001451c

0800b358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08c      	sub	sp, #48	; 0x30
 800b35c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b35e:	f107 030c 	add.w	r3, r7, #12
 800b362:	2224      	movs	r2, #36	; 0x24
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f006 fa51 	bl	801180e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b36c:	1d3b      	adds	r3, r7, #4
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b374:	4b20      	ldr	r3, [pc, #128]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b376:	4a21      	ldr	r2, [pc, #132]	; (800b3fc <MX_TIM3_Init+0xa4>)
 800b378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b37a:	4b1f      	ldr	r3, [pc, #124]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b380:	4b1d      	ldr	r3, [pc, #116]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b382:	2200      	movs	r2, #0
 800b384:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b386:	4b1c      	ldr	r3, [pc, #112]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b38c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b38e:	4b1a      	ldr	r3, [pc, #104]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b390:	2200      	movs	r2, #0
 800b392:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b394:	4b18      	ldr	r3, [pc, #96]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b396:	2200      	movs	r2, #0
 800b398:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b39a:	2301      	movs	r3, #1
 800b39c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800b3be:	f107 030c 	add.w	r3, r7, #12
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	480c      	ldr	r0, [pc, #48]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b3c6:	f004 fce9 	bl	800fd9c <HAL_TIM_Encoder_Init>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800b3d0:	f000 fa3a 	bl	800b848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b3dc:	1d3b      	adds	r3, r7, #4
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <MX_TIM3_Init+0xa0>)
 800b3e2:	f005 fa11 	bl	8010808 <HAL_TIMEx_MasterConfigSynchronization>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800b3ec:	f000 fa2c 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b3f0:	bf00      	nop
 800b3f2:	3730      	adds	r7, #48	; 0x30
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	200143b0 	.word	0x200143b0
 800b3fc:	40000400 	.word	0x40000400

0800b400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08c      	sub	sp, #48	; 0x30
 800b404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b406:	f107 030c 	add.w	r3, r7, #12
 800b40a:	2224      	movs	r2, #36	; 0x24
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f006 f9fd 	bl	801180e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b414:	1d3b      	adds	r3, r7, #4
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b41c:	4b20      	ldr	r3, [pc, #128]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b41e:	4a21      	ldr	r2, [pc, #132]	; (800b4a4 <MX_TIM4_Init+0xa4>)
 800b420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800b422:	4b1f      	ldr	r3, [pc, #124]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b424:	2200      	movs	r2, #0
 800b426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b428:	4b1d      	ldr	r3, [pc, #116]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800b42e:	4b1c      	ldr	r3, [pc, #112]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b436:	4b1a      	ldr	r3, [pc, #104]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b438:	2200      	movs	r2, #0
 800b43a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b43c:	4b18      	ldr	r3, [pc, #96]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b43e:	2200      	movs	r2, #0
 800b440:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b442:	2301      	movs	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b446:	2300      	movs	r3, #0
 800b448:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b44a:	2301      	movs	r3, #1
 800b44c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b44e:	2300      	movs	r3, #0
 800b450:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b456:	2300      	movs	r3, #0
 800b458:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b45a:	2301      	movs	r3, #1
 800b45c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b45e:	2300      	movs	r3, #0
 800b460:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800b462:	2300      	movs	r3, #0
 800b464:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800b466:	f107 030c 	add.w	r3, r7, #12
 800b46a:	4619      	mov	r1, r3
 800b46c:	480c      	ldr	r0, [pc, #48]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b46e:	f004 fc95 	bl	800fd9c <HAL_TIM_Encoder_Init>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800b478:	f000 f9e6 	bl	800b848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b47c:	2300      	movs	r3, #0
 800b47e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b480:	2300      	movs	r3, #0
 800b482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b484:	1d3b      	adds	r3, r7, #4
 800b486:	4619      	mov	r1, r3
 800b488:	4805      	ldr	r0, [pc, #20]	; (800b4a0 <MX_TIM4_Init+0xa0>)
 800b48a:	f005 f9bd 	bl	8010808 <HAL_TIMEx_MasterConfigSynchronization>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800b494:	f000 f9d8 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b498:	bf00      	nop
 800b49a:	3730      	adds	r7, #48	; 0x30
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	2001436c 	.word	0x2001436c
 800b4a4:	40000800 	.word	0x40000800

0800b4a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4ae:	463b      	mov	r3, r7
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b4b6:	4b15      	ldr	r3, [pc, #84]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4b8:	4a15      	ldr	r2, [pc, #84]	; (800b510 <MX_TIM6_Init+0x68>)
 800b4ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800b4bc:	4b13      	ldr	r3, [pc, #76]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4be:	2253      	movs	r2, #83	; 0x53
 800b4c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4c2:	4b12      	ldr	r3, [pc, #72]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b4d6:	480d      	ldr	r0, [pc, #52]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4d8:	f004 fba0 	bl	800fc1c <HAL_TIM_Base_Init>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800b4e2:	f000 f9b1 	bl	800b848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4806      	ldr	r0, [pc, #24]	; (800b50c <MX_TIM6_Init+0x64>)
 800b4f4:	f005 f988 	bl	8010808 <HAL_TIMEx_MasterConfigSynchronization>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800b4fe:	f000 f9a3 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	2001449c 	.word	0x2001449c
 800b510:	40001000 	.word	0x40001000

0800b514 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b092      	sub	sp, #72	; 0x48
 800b518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b51a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
 800b52c:	605a      	str	r2, [r3, #4]
 800b52e:	609a      	str	r2, [r3, #8]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	611a      	str	r2, [r3, #16]
 800b534:	615a      	str	r2, [r3, #20]
 800b536:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b538:	1d3b      	adds	r3, r7, #4
 800b53a:	2220      	movs	r2, #32
 800b53c:	2100      	movs	r1, #0
 800b53e:	4618      	mov	r0, r3
 800b540:	f006 f965 	bl	801180e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <MX_TIM8_Init+0x100>)
 800b546:	4a34      	ldr	r2, [pc, #208]	; (800b618 <MX_TIM8_Init+0x104>)
 800b548:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800b54a:	4b32      	ldr	r3, [pc, #200]	; (800b614 <MX_TIM8_Init+0x100>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b550:	4b30      	ldr	r3, [pc, #192]	; (800b614 <MX_TIM8_Init+0x100>)
 800b552:	2200      	movs	r2, #0
 800b554:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000;
 800b556:	4b2f      	ldr	r3, [pc, #188]	; (800b614 <MX_TIM8_Init+0x100>)
 800b558:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b55c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b55e:	4b2d      	ldr	r3, [pc, #180]	; (800b614 <MX_TIM8_Init+0x100>)
 800b560:	2200      	movs	r2, #0
 800b562:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b564:	4b2b      	ldr	r3, [pc, #172]	; (800b614 <MX_TIM8_Init+0x100>)
 800b566:	2200      	movs	r2, #0
 800b568:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b56a:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <MX_TIM8_Init+0x100>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800b570:	4828      	ldr	r0, [pc, #160]	; (800b614 <MX_TIM8_Init+0x100>)
 800b572:	f004 fba9 	bl	800fcc8 <HAL_TIM_PWM_Init>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800b57c:	f000 f964 	bl	800b848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b580:	2300      	movs	r3, #0
 800b582:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b584:	2300      	movs	r3, #0
 800b586:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b58c:	4619      	mov	r1, r3
 800b58e:	4821      	ldr	r0, [pc, #132]	; (800b614 <MX_TIM8_Init+0x100>)
 800b590:	f005 f93a 	bl	8010808 <HAL_TIMEx_MasterConfigSynchronization>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800b59a:	f000 f955 	bl	800b848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b59e:	2360      	movs	r3, #96	; 0x60
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5be:	2208      	movs	r2, #8
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4814      	ldr	r0, [pc, #80]	; (800b614 <MX_TIM8_Init+0x100>)
 800b5c4:	f004 fdbc 	bl	8010140 <HAL_TIM_PWM_ConfigChannel>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800b5ce:	f000 f93b 	bl	800b848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b5e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800b5f0:	1d3b      	adds	r3, r7, #4
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4807      	ldr	r0, [pc, #28]	; (800b614 <MX_TIM8_Init+0x100>)
 800b5f6:	f005 f983 	bl	8010900 <HAL_TIMEx_ConfigBreakDeadTime>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d001      	beq.n	800b604 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800b600:	f000 f922 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800b604:	4803      	ldr	r0, [pc, #12]	; (800b614 <MX_TIM8_Init+0x100>)
 800b606:	f000 fd71 	bl	800c0ec <HAL_TIM_MspPostInit>

}
 800b60a:	bf00      	nop
 800b60c:	3748      	adds	r7, #72	; 0x48
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	2001432c 	.word	0x2001432c
 800b618:	40010400 	.word	0x40010400

0800b61c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800b620:	4b11      	ldr	r3, [pc, #68]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b622:	4a12      	ldr	r2, [pc, #72]	; (800b66c <MX_USART6_UART_Init+0x50>)
 800b624:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 14400;
 800b626:	4b10      	ldr	r3, [pc, #64]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b628:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800b62c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800b62e:	4b0e      	ldr	r3, [pc, #56]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b630:	2200      	movs	r2, #0
 800b632:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800b634:	4b0c      	ldr	r3, [pc, #48]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b636:	2200      	movs	r2, #0
 800b638:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800b63a:	4b0b      	ldr	r3, [pc, #44]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b642:	220c      	movs	r2, #12
 800b644:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b646:	4b08      	ldr	r3, [pc, #32]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b648:	2200      	movs	r2, #0
 800b64a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b64e:	2200      	movs	r2, #0
 800b650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800b652:	4805      	ldr	r0, [pc, #20]	; (800b668 <MX_USART6_UART_Init+0x4c>)
 800b654:	f005 f9ba 	bl	80109cc <HAL_UART_Init>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800b65e:	f000 f8f3 	bl	800b848 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800b662:	bf00      	nop
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	2001460c 	.word	0x2001460c
 800b66c:	40011400 	.word	0x40011400

0800b670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b676:	2300      	movs	r3, #0
 800b678:	607b      	str	r3, [r7, #4]
 800b67a:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <MX_DMA_Init+0x3c>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	4a0b      	ldr	r2, [pc, #44]	; (800b6ac <MX_DMA_Init+0x3c>)
 800b680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b684:	6313      	str	r3, [r2, #48]	; 0x30
 800b686:	4b09      	ldr	r3, [pc, #36]	; (800b6ac <MX_DMA_Init+0x3c>)
 800b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b68e:	607b      	str	r3, [r7, #4]
 800b690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800b692:	2200      	movs	r2, #0
 800b694:	2100      	movs	r1, #0
 800b696:	2038      	movs	r0, #56	; 0x38
 800b698:	f001 fc87 	bl	800cfaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b69c:	2038      	movs	r0, #56	; 0x38
 800b69e:	f001 fca0 	bl	800cfe2 <HAL_NVIC_EnableIRQ>

}
 800b6a2:	bf00      	nop
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	40023800 	.word	0x40023800

0800b6b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6b6:	f107 0314 	add.w	r3, r7, #20
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	605a      	str	r2, [r3, #4]
 800b6c0:	609a      	str	r2, [r3, #8]
 800b6c2:	60da      	str	r2, [r3, #12]
 800b6c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	613b      	str	r3, [r7, #16]
 800b6ca:	4b5a      	ldr	r3, [pc, #360]	; (800b834 <MX_GPIO_Init+0x184>)
 800b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ce:	4a59      	ldr	r2, [pc, #356]	; (800b834 <MX_GPIO_Init+0x184>)
 800b6d0:	f043 0304 	orr.w	r3, r3, #4
 800b6d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b6d6:	4b57      	ldr	r3, [pc, #348]	; (800b834 <MX_GPIO_Init+0x184>)
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6da:	f003 0304 	and.w	r3, r3, #4
 800b6de:	613b      	str	r3, [r7, #16]
 800b6e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
 800b6e6:	4b53      	ldr	r3, [pc, #332]	; (800b834 <MX_GPIO_Init+0x184>)
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	4a52      	ldr	r2, [pc, #328]	; (800b834 <MX_GPIO_Init+0x184>)
 800b6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f0:	6313      	str	r3, [r2, #48]	; 0x30
 800b6f2:	4b50      	ldr	r3, [pc, #320]	; (800b834 <MX_GPIO_Init+0x184>)
 800b6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6fe:	2300      	movs	r3, #0
 800b700:	60bb      	str	r3, [r7, #8]
 800b702:	4b4c      	ldr	r3, [pc, #304]	; (800b834 <MX_GPIO_Init+0x184>)
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	4a4b      	ldr	r2, [pc, #300]	; (800b834 <MX_GPIO_Init+0x184>)
 800b708:	f043 0301 	orr.w	r3, r3, #1
 800b70c:	6313      	str	r3, [r2, #48]	; 0x30
 800b70e:	4b49      	ldr	r3, [pc, #292]	; (800b834 <MX_GPIO_Init+0x184>)
 800b710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	60bb      	str	r3, [r7, #8]
 800b718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b71a:	2300      	movs	r3, #0
 800b71c:	607b      	str	r3, [r7, #4]
 800b71e:	4b45      	ldr	r3, [pc, #276]	; (800b834 <MX_GPIO_Init+0x184>)
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	4a44      	ldr	r2, [pc, #272]	; (800b834 <MX_GPIO_Init+0x184>)
 800b724:	f043 0302 	orr.w	r3, r3, #2
 800b728:	6313      	str	r3, [r2, #48]	; 0x30
 800b72a:	4b42      	ldr	r3, [pc, #264]	; (800b834 <MX_GPIO_Init+0x184>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	607b      	str	r3, [r7, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b736:	2300      	movs	r3, #0
 800b738:	603b      	str	r3, [r7, #0]
 800b73a:	4b3e      	ldr	r3, [pc, #248]	; (800b834 <MX_GPIO_Init+0x184>)
 800b73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73e:	4a3d      	ldr	r2, [pc, #244]	; (800b834 <MX_GPIO_Init+0x184>)
 800b740:	f043 0308 	orr.w	r3, r3, #8
 800b744:	6313      	str	r3, [r2, #48]	; 0x30
 800b746:	4b3b      	ldr	r3, [pc, #236]	; (800b834 <MX_GPIO_Init+0x184>)
 800b748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74a:	f003 0308 	and.w	r3, r3, #8
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800b752:	2200      	movs	r2, #0
 800b754:	f247 0130 	movw	r1, #28720	; 0x7030
 800b758:	4837      	ldr	r0, [pc, #220]	; (800b838 <MX_GPIO_Init+0x188>)
 800b75a:	f002 fc75 	bl	800e048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b75e:	2200      	movs	r2, #0
 800b760:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b764:	4835      	ldr	r0, [pc, #212]	; (800b83c <MX_GPIO_Init+0x18c>)
 800b766:	f002 fc6f 	bl	800e048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800b76a:	2200      	movs	r2, #0
 800b76c:	f44f 411d 	mov.w	r1, #40192	; 0x9d00
 800b770:	4833      	ldr	r0, [pc, #204]	; (800b840 <MX_GPIO_Init+0x190>)
 800b772:	f002 fc69 	bl	800e048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800b776:	2200      	movs	r2, #0
 800b778:	2104      	movs	r1, #4
 800b77a:	4832      	ldr	r0, [pc, #200]	; (800b844 <MX_GPIO_Init+0x194>)
 800b77c:	f002 fc64 	bl	800e048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800b780:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800b784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b786:	2300      	movs	r3, #0
 800b788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b78a:	2301      	movs	r3, #1
 800b78c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b78e:	f107 0314 	add.w	r3, r7, #20
 800b792:	4619      	mov	r1, r3
 800b794:	4829      	ldr	r0, [pc, #164]	; (800b83c <MX_GPIO_Init+0x18c>)
 800b796:	f002 faa5 	bl	800dce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800b79a:	f248 0304 	movw	r3, #32772	; 0x8004
 800b79e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7a8:	f107 0314 	add.w	r3, r7, #20
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4822      	ldr	r0, [pc, #136]	; (800b838 <MX_GPIO_Init+0x188>)
 800b7b0:	f002 fa98 	bl	800dce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800b7b4:	f247 0330 	movw	r3, #28720	; 0x7030
 800b7b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7c6:	f107 0314 	add.w	r3, r7, #20
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	481a      	ldr	r0, [pc, #104]	; (800b838 <MX_GPIO_Init+0x188>)
 800b7ce:	f002 fa89 	bl	800dce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b7d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7e4:	f107 0314 	add.w	r3, r7, #20
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4814      	ldr	r0, [pc, #80]	; (800b83c <MX_GPIO_Init+0x18c>)
 800b7ec:	f002 fa7a 	bl	800dce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800b7f0:	f44f 431d 	mov.w	r3, #40192	; 0x9d00
 800b7f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7fe:	2300      	movs	r3, #0
 800b800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b802:	f107 0314 	add.w	r3, r7, #20
 800b806:	4619      	mov	r1, r3
 800b808:	480d      	ldr	r0, [pc, #52]	; (800b840 <MX_GPIO_Init+0x190>)
 800b80a:	f002 fa6b 	bl	800dce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b80e:	2304      	movs	r3, #4
 800b810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b812:	2301      	movs	r3, #1
 800b814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b816:	2300      	movs	r3, #0
 800b818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b81a:	2300      	movs	r3, #0
 800b81c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4619      	mov	r1, r3
 800b824:	4807      	ldr	r0, [pc, #28]	; (800b844 <MX_GPIO_Init+0x194>)
 800b826:	f002 fa5d 	bl	800dce4 <HAL_GPIO_Init>

}
 800b82a:	bf00      	nop
 800b82c:	3728      	adds	r7, #40	; 0x28
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	40023800 	.word	0x40023800
 800b838:	40020400 	.word	0x40020400
 800b83c:	40020800 	.word	0x40020800
 800b840:	40020000 	.word	0x40020000
 800b844:	40020c00 	.word	0x40020c00

0800b848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b84c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b84e:	e7fe      	b.n	800b84e <Error_Handler+0x6>

0800b850 <senseGet>:
//		printf("%d,%d\r\n",z,ADC_Max[z]);
//	}
	LED2(3);

}
inline float senseGet(){
 800b850:	b5b0      	push	{r4, r5, r7, lr}
 800b852:	b09e      	sub	sp, #120	; 0x78
 800b854:	af00      	add	r7, sp, #0
	float sensL=0;
 800b856:	f04f 0300 	mov.w	r3, #0
 800b85a:	66fb      	str	r3, [r7, #108]	; 0x6c
	float sensR=0;
 800b85c:	f04f 0300 	mov.w	r3, #0
 800b860:	66bb      	str	r3, [r7, #104]	; 0x68
	//float ccorse_senR=0, ccorse_senL=0,ccorse_senRR=0, ccorse_senLL=0;
	uint32_t sens[SENSOR_NUMBER];
	float sensRatio[SENSOR_NUMBER];
	static float sens_buff[SENSOR_NUMBER];
	static uint8_t error_count=0;
	uint8_t black= 0;
 800b862:	2300      	movs	r3, #0
 800b864:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
//		}
//		if(sens[i] <= ADC_Small[i]){
//			sens[i] = ADC_Small[i] ;
//		}
//	}
	for(int i=0; i<SENSOR_NUMBER; i++){
 800b868:	2300      	movs	r3, #0
 800b86a:	673b      	str	r3, [r7, #112]	; 0x70
 800b86c:	e08b      	b.n	800b986 <senseGet+0x136>
		sens[i] = analog[i];
 800b86e:	4ad4      	ldr	r2, [pc, #848]	; (800bbc0 <senseGet+0x370>)
 800b870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b876:	461a      	mov	r2, r3
 800b878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800b880:	440b      	add	r3, r1
 800b882:	f843 2c44 	str.w	r2, [r3, #-68]
		if(sens[i] >=  (ADC_Small[i]+ADC_dif[i])){
 800b886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b88e:	4413      	add	r3, r2
 800b890:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b894:	49cb      	ldr	r1, [pc, #812]	; (800bbc4 <senseGet+0x374>)
 800b896:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b898:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800b89c:	4610      	mov	r0, r2
 800b89e:	49ca      	ldr	r1, [pc, #808]	; (800bbc8 <senseGet+0x378>)
 800b8a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8a2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800b8a6:	4402      	add	r2, r0
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d311      	bcc.n	800b8d0 <senseGet+0x80>
			//ADC_dif[i] = sens[i]-ADC_Small[i];
			sens[i] =  (ADC_Small[i]+ADC_dif[i]);
 800b8ac:	4ac5      	ldr	r2, [pc, #788]	; (800bbc4 <senseGet+0x374>)
 800b8ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4ac4      	ldr	r2, [pc, #784]	; (800bbc8 <senseGet+0x378>)
 800b8b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8be:	440b      	add	r3, r1
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800b8ca:	440b      	add	r3, r1
 800b8cc:	f843 2c44 	str.w	r2, [r3, #-68]
		}
		if(sens[i] <= ADC_Small[i]){
 800b8d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b8d8:	4413      	add	r3, r2
 800b8da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b8de:	49b9      	ldr	r1, [pc, #740]	; (800bbc4 <senseGet+0x374>)
 800b8e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d80b      	bhi.n	800b902 <senseGet+0xb2>
			sens[i] = ADC_Small[i] ;
 800b8ea:	4ab6      	ldr	r2, [pc, #728]	; (800bbc4 <senseGet+0x374>)
 800b8ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800b8fc:	440b      	add	r3, r1
 800b8fe:	f843 2c44 	str.w	r2, [r3, #-68]
		}
		sensRatio[i] = (1000.0f/(float)ADC_dif[i])*((float)(sens[i]-(float)ADC_Small[i]));
 800b902:	4ab1      	ldr	r2, [pc, #708]	; (800bbc8 <senseGet+0x378>)
 800b904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b912:	eddf 6aae 	vldr	s13, [pc, #696]	; 800bbcc <senseGet+0x37c>
 800b916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b91a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b922:	4413      	add	r3, r2
 800b924:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b928:	ee07 3a90 	vmov	s15, r3
 800b92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b930:	4aa4      	ldr	r2, [pc, #656]	; (800bbc4 <senseGet+0x374>)
 800b932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b944:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b950:	4413      	add	r3, r2
 800b952:	3b78      	subs	r3, #120	; 0x78
 800b954:	edc3 7a00 	vstr	s15, [r3]
//		sensRatio[i] = (sensRatio_buff[i]+sensRatio[i])/2;
//		sensRatio_buff[i]=sensRatio[i];
		if(sensRatio[i] >= 600) black++;
 800b958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b960:	4413      	add	r3, r2
 800b962:	3b78      	subs	r3, #120	; 0x78
 800b964:	edd3 7a00 	vldr	s15, [r3]
 800b968:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800bbd0 <senseGet+0x380>
 800b96c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b974:	db04      	blt.n	800b980 <senseGet+0x130>
 800b976:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b97a:	3301      	adds	r3, #1
 800b97c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	for(int i=0; i<SENSOR_NUMBER; i++){
 800b980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b982:	3301      	adds	r3, #1
 800b984:	673b      	str	r3, [r7, #112]	; 0x70
 800b986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b988:	2b0c      	cmp	r3, #12
 800b98a:	f77f af70 	ble.w	800b86e <senseGet+0x1e>
//		if(i<=5)sensL += sensRatio[i];
//		if(i>=7)sensR += sensRatio[i];
	}
	sensL = sensRatio[5]+sensRatio[4]*1.4+sensRatio[3]*1.8+sensRatio[2]*2.2+sensRatio[1]*2.6+sensRatio[0]*3.0;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	4618      	mov	r0, r3
 800b992:	f7fc fd11 	bl	80083b8 <__aeabi_f2d>
 800b996:	4604      	mov	r4, r0
 800b998:	460d      	mov	r5, r1
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fc fd0b 	bl	80083b8 <__aeabi_f2d>
 800b9a2:	a37f      	add	r3, pc, #508	; (adr r3, 800bba0 <senseGet+0x350>)
 800b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a8:	f7fc fd5e 	bl	8008468 <__aeabi_dmul>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7fc fba2 	bl	80080fc <__adddf3>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	4625      	mov	r5, r4
 800b9be:	461c      	mov	r4, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fc fcf8 	bl	80083b8 <__aeabi_f2d>
 800b9c8:	a377      	add	r3, pc, #476	; (adr r3, 800bba8 <senseGet+0x358>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7fc fd4b 	bl	8008468 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7fc fb8f 	bl	80080fc <__adddf3>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	4625      	mov	r5, r4
 800b9e4:	461c      	mov	r4, r3
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fc fce5 	bl	80083b8 <__aeabi_f2d>
 800b9ee:	a370      	add	r3, pc, #448	; (adr r3, 800bbb0 <senseGet+0x360>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7fc fd38 	bl	8008468 <__aeabi_dmul>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4629      	mov	r1, r5
 800ba00:	f7fc fb7c 	bl	80080fc <__adddf3>
 800ba04:	4603      	mov	r3, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	4625      	mov	r5, r4
 800ba0a:	461c      	mov	r4, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fc fcd2 	bl	80083b8 <__aeabi_f2d>
 800ba14:	a368      	add	r3, pc, #416	; (adr r3, 800bbb8 <senseGet+0x368>)
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	f7fc fd25 	bl	8008468 <__aeabi_dmul>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4620      	mov	r0, r4
 800ba24:	4629      	mov	r1, r5
 800ba26:	f7fc fb69 	bl	80080fc <__adddf3>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	4625      	mov	r5, r4
 800ba30:	461c      	mov	r4, r3
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fc fcbf 	bl	80083b8 <__aeabi_f2d>
 800ba3a:	f04f 0200 	mov.w	r2, #0
 800ba3e:	4b65      	ldr	r3, [pc, #404]	; (800bbd4 <senseGet+0x384>)
 800ba40:	f7fc fd12 	bl	8008468 <__aeabi_dmul>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4620      	mov	r0, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7fc fb56 	bl	80080fc <__adddf3>
 800ba50:	4603      	mov	r3, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	4618      	mov	r0, r3
 800ba56:	4621      	mov	r1, r4
 800ba58:	f7fc ffde 	bl	8008a18 <__aeabi_d2f>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	66fb      	str	r3, [r7, #108]	; 0x6c
	sensR = sensRatio[7]+sensRatio[8]*1.4+sensRatio[9]*1.8+sensRatio[10]*2.2+sensRatio[11]*2.6+sensRatio[12]*3.0;
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fc fca8 	bl	80083b8 <__aeabi_f2d>
 800ba68:	4604      	mov	r4, r0
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fc fca2 	bl	80083b8 <__aeabi_f2d>
 800ba74:	a34a      	add	r3, pc, #296	; (adr r3, 800bba0 <senseGet+0x350>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7fc fcf5 	bl	8008468 <__aeabi_dmul>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4620      	mov	r0, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7fc fb39 	bl	80080fc <__adddf3>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	4625      	mov	r5, r4
 800ba90:	461c      	mov	r4, r3
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fc fc8f 	bl	80083b8 <__aeabi_f2d>
 800ba9a:	a343      	add	r3, pc, #268	; (adr r3, 800bba8 <senseGet+0x358>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7fc fce2 	bl	8008468 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4620      	mov	r0, r4
 800baaa:	4629      	mov	r1, r5
 800baac:	f7fc fb26 	bl	80080fc <__adddf3>
 800bab0:	4603      	mov	r3, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	4625      	mov	r5, r4
 800bab6:	461c      	mov	r4, r3
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	4618      	mov	r0, r3
 800babc:	f7fc fc7c 	bl	80083b8 <__aeabi_f2d>
 800bac0:	a33b      	add	r3, pc, #236	; (adr r3, 800bbb0 <senseGet+0x360>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7fc fccf 	bl	8008468 <__aeabi_dmul>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7fc fb13 	bl	80080fc <__adddf3>
 800bad6:	4603      	mov	r3, r0
 800bad8:	460c      	mov	r4, r1
 800bada:	4625      	mov	r5, r4
 800badc:	461c      	mov	r4, r3
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fc fc69 	bl	80083b8 <__aeabi_f2d>
 800bae6:	a334      	add	r3, pc, #208	; (adr r3, 800bbb8 <senseGet+0x368>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7fc fcbc 	bl	8008468 <__aeabi_dmul>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7fc fb00 	bl	80080fc <__adddf3>
 800bafc:	4603      	mov	r3, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	4625      	mov	r5, r4
 800bb02:	461c      	mov	r4, r3
 800bb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fc fc56 	bl	80083b8 <__aeabi_f2d>
 800bb0c:	f04f 0200 	mov.w	r2, #0
 800bb10:	4b30      	ldr	r3, [pc, #192]	; (800bbd4 <senseGet+0x384>)
 800bb12:	f7fc fca9 	bl	8008468 <__aeabi_dmul>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7fc faed 	bl	80080fc <__adddf3>
 800bb22:	4603      	mov	r3, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	4618      	mov	r0, r3
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f7fc ff75 	bl	8008a18 <__aeabi_d2f>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	66bb      	str	r3, [r7, #104]	; 0x68
//	ccorse_senR = (corse_senR + sensRatio[1])/2;
//	ccorse_senLL = (corse_senLL + sensRatio[12])/2;
//	ccorse_senL = (corse_senL + sensRatio[11])/2;
	//if ((sensL+sensR)/12<=400){
//	if ((sensRatio[0]+sensRatio[12])/2<=500 /*|| (sensRatio[1]+sensRatio[11])/2 <= 650*/) {
	if ((sensRatio[0]<=500 || sensRatio[1]<=500) && (sensRatio[11]<=500 || sensRatio[12]<=500) && sensRatio[6]<=800) {
 800bb32:	edd7 7a00 	vldr	s15, [r7]
 800bb36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800bbd8 <senseGet+0x388>
 800bb3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb42:	d908      	bls.n	800bb56 <senseGet+0x306>
 800bb44:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb48:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800bbd8 <senseGet+0x388>
 800bb4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	d848      	bhi.n	800bbe8 <senseGet+0x398>
 800bb56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb5a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bbd8 <senseGet+0x388>
 800bb5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb66:	d908      	bls.n	800bb7a <senseGet+0x32a>
 800bb68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bb6c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800bbd8 <senseGet+0x388>
 800bb70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	d836      	bhi.n	800bbe8 <senseGet+0x398>
 800bb7a:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb7e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800bbdc <senseGet+0x38c>
 800bb82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8a:	d82d      	bhi.n	800bbe8 <senseGet+0x398>

	//if (((ccorse_senRR)<=300 || (ccorse_senR)<=300) && ((ccorse_senL)<=300 || (ccorse_senLL)<=300) && sensRatio[6]<=600 ) {

		cross_line=true;
 800bb8c:	4b14      	ldr	r3, [pc, #80]	; (800bbe0 <senseGet+0x390>)
 800bb8e:	2201      	movs	r2, #1
 800bb90:	701a      	strb	r2, [r3, #0]
		cross_flag=0;
 800bb92:	4b14      	ldr	r3, [pc, #80]	; (800bbe4 <senseGet+0x394>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	e026      	b.n	800bbe8 <senseGet+0x398>
 800bb9a:	bf00      	nop
 800bb9c:	f3af 8000 	nop.w
 800bba0:	66666666 	.word	0x66666666
 800bba4:	3ff66666 	.word	0x3ff66666
 800bba8:	cccccccd 	.word	0xcccccccd
 800bbac:	3ffccccc 	.word	0x3ffccccc
 800bbb0:	9999999a 	.word	0x9999999a
 800bbb4:	40019999 	.word	0x40019999
 800bbb8:	cccccccd 	.word	0xcccccccd
 800bbbc:	4004cccc 	.word	0x4004cccc
 800bbc0:	20014310 	.word	0x20014310
 800bbc4:	2001466c 	.word	0x2001466c
 800bbc8:	20014650 	.word	0x20014650
 800bbcc:	447a0000 	.word	0x447a0000
 800bbd0:	44160000 	.word	0x44160000
 800bbd4:	40080000 	.word	0x40080000
 800bbd8:	43fa0000 	.word	0x43fa0000
 800bbdc:	44480000 	.word	0x44480000
 800bbe0:	2000c2cc 	.word	0x2000c2cc
 800bbe4:	2000c2bd 	.word	0x2000c2bd
//		if(sensRatio[i] >= 600) black++;
//	}

	//if((sensL-sensR) >=  )
//	if ((sensRatio[6]>=900) && (sensRatio[5])>=900 && (sensRatio[7])>=900) error_count++;
	if(black >= 13){
 800bbe8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bbec:	2b0c      	cmp	r3, #12
 800bbee:	d909      	bls.n	800bc04 <senseGet+0x3b4>
		error_count++;
 800bbf0:	4b10      	ldr	r3, [pc, #64]	; (800bc34 <senseGet+0x3e4>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <senseGet+0x3e4>)
 800bbfa:	701a      	strb	r2, [r3, #0]
		black=0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bc02:	e005      	b.n	800bc10 <senseGet+0x3c0>
	}
	else {
		error_count=0;
 800bc04:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <senseGet+0x3e4>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	701a      	strb	r2, [r3, #0]
		black=0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	//if ((sensRatio[0]<=900 && sensRatio[12]<=900)) error_count++;
	//if ((sensRatio[6])>=700) error_count++;
//	else if ((sensRatio[6])<=700)error_count=0;
	if(error_count>110)error();
 800bc10:	4b08      	ldr	r3, [pc, #32]	; (800bc34 <senseGet+0x3e4>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b6e      	cmp	r3, #110	; 0x6e
 800bc16:	d901      	bls.n	800bc1c <senseGet+0x3cc>
 800bc18:	f7fe fe80 	bl	800a91c <error>
	return sensL-sensR;
 800bc1c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800bc20:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bc24:	ee77 7a67 	vsub.f32	s15, s14, s15
	//return sensRatio[6];

}
 800bc28:	eeb0 0a67 	vmov.f32	s0, s15
 800bc2c:	3778      	adds	r7, #120	; 0x78
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bdb0      	pop	{r4, r5, r7, pc}
 800bc32:	bf00      	nop
 800bc34:	2000c2cd 	.word	0x2000c2cd

0800bc38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc3e:	2300      	movs	r3, #0
 800bc40:	607b      	str	r3, [r7, #4]
 800bc42:	4b10      	ldr	r3, [pc, #64]	; (800bc84 <HAL_MspInit+0x4c>)
 800bc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc46:	4a0f      	ldr	r2, [pc, #60]	; (800bc84 <HAL_MspInit+0x4c>)
 800bc48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc4c:	6453      	str	r3, [r2, #68]	; 0x44
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <HAL_MspInit+0x4c>)
 800bc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	603b      	str	r3, [r7, #0]
 800bc5e:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <HAL_MspInit+0x4c>)
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	4a08      	ldr	r2, [pc, #32]	; (800bc84 <HAL_MspInit+0x4c>)
 800bc64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc68:	6413      	str	r3, [r2, #64]	; 0x40
 800bc6a:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <HAL_MspInit+0x4c>)
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	40023800 	.word	0x40023800

0800bc88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08c      	sub	sp, #48	; 0x30
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc90:	f107 031c 	add.w	r3, r7, #28
 800bc94:	2200      	movs	r2, #0
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	605a      	str	r2, [r3, #4]
 800bc9a:	609a      	str	r2, [r3, #8]
 800bc9c:	60da      	str	r2, [r3, #12]
 800bc9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a49      	ldr	r2, [pc, #292]	; (800bdcc <HAL_ADC_MspInit+0x144>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	f040 808c 	bne.w	800bdc4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bcac:	2300      	movs	r3, #0
 800bcae:	61bb      	str	r3, [r7, #24]
 800bcb0:	4b47      	ldr	r3, [pc, #284]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb4:	4a46      	ldr	r2, [pc, #280]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcba:	6453      	str	r3, [r2, #68]	; 0x44
 800bcbc:	4b44      	ldr	r3, [pc, #272]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc4:	61bb      	str	r3, [r7, #24]
 800bcc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bcc8:	2300      	movs	r3, #0
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	4b40      	ldr	r3, [pc, #256]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd0:	4a3f      	ldr	r2, [pc, #252]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcd2:	f043 0304 	orr.w	r3, r3, #4
 800bcd6:	6313      	str	r3, [r2, #48]	; 0x30
 800bcd8:	4b3d      	ldr	r3, [pc, #244]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bce4:	2300      	movs	r3, #0
 800bce6:	613b      	str	r3, [r7, #16]
 800bce8:	4b39      	ldr	r3, [pc, #228]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcec:	4a38      	ldr	r2, [pc, #224]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcee:	f043 0301 	orr.w	r3, r3, #1
 800bcf2:	6313      	str	r3, [r2, #48]	; 0x30
 800bcf4:	4b36      	ldr	r3, [pc, #216]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	613b      	str	r3, [r7, #16]
 800bcfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	4b32      	ldr	r3, [pc, #200]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd08:	4a31      	ldr	r2, [pc, #196]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bd0a:	f043 0302 	orr.w	r3, r3, #2
 800bd0e:	6313      	str	r3, [r2, #48]	; 0x30
 800bd10:	4b2f      	ldr	r3, [pc, #188]	; (800bdd0 <HAL_ADC_MspInit+0x148>)
 800bd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800bd1c:	233e      	movs	r3, #62	; 0x3e
 800bd1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd20:	2303      	movs	r3, #3
 800bd22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd28:	f107 031c 	add.w	r3, r7, #28
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	4829      	ldr	r0, [pc, #164]	; (800bdd4 <HAL_ADC_MspInit+0x14c>)
 800bd30:	f001 ffd8 	bl	800dce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800bd34:	233f      	movs	r3, #63	; 0x3f
 800bd36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd40:	f107 031c 	add.w	r3, r7, #28
 800bd44:	4619      	mov	r1, r3
 800bd46:	4824      	ldr	r0, [pc, #144]	; (800bdd8 <HAL_ADC_MspInit+0x150>)
 800bd48:	f001 ffcc 	bl	800dce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd50:	2303      	movs	r3, #3
 800bd52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd58:	f107 031c 	add.w	r3, r7, #28
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	481f      	ldr	r0, [pc, #124]	; (800bddc <HAL_ADC_MspInit+0x154>)
 800bd60:	f001 ffc0 	bl	800dce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800bd64:	4b1e      	ldr	r3, [pc, #120]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd66:	4a1f      	ldr	r2, [pc, #124]	; (800bde4 <HAL_ADC_MspInit+0x15c>)
 800bd68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800bd6a:	4b1d      	ldr	r3, [pc, #116]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bd70:	4b1b      	ldr	r3, [pc, #108]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800bd7c:	4b18      	ldr	r3, [pc, #96]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bd84:	4b16      	ldr	r3, [pc, #88]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bd8c:	4b14      	ldr	r3, [pc, #80]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bd92:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800bd94:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800bd9c:	4b10      	ldr	r3, [pc, #64]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bda2:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800bda8:	480d      	ldr	r0, [pc, #52]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bdaa:	f001 f935 	bl	800d018 <HAL_DMA_Init>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800bdb4:	f7ff fd48 	bl	800b848 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a09      	ldr	r2, [pc, #36]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bdbc:	639a      	str	r2, [r3, #56]	; 0x38
 800bdbe:	4a08      	ldr	r2, [pc, #32]	; (800bde0 <HAL_ADC_MspInit+0x158>)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800bdc4:	bf00      	nop
 800bdc6:	3730      	adds	r7, #48	; 0x30
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	40012000 	.word	0x40012000
 800bdd0:	40023800 	.word	0x40023800
 800bdd4:	40020800 	.word	0x40020800
 800bdd8:	40020000 	.word	0x40020000
 800bddc:	40020400 	.word	0x40020400
 800bde0:	20014438 	.word	0x20014438
 800bde4:	40026410 	.word	0x40026410

0800bde8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08a      	sub	sp, #40	; 0x28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdf0:	f107 0314 	add.w	r3, r7, #20
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	605a      	str	r2, [r3, #4]
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	60da      	str	r2, [r3, #12]
 800bdfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a19      	ldr	r2, [pc, #100]	; (800be6c <HAL_I2C_MspInit+0x84>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d12c      	bne.n	800be64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be0a:	2300      	movs	r3, #0
 800be0c:	613b      	str	r3, [r7, #16]
 800be0e:	4b18      	ldr	r3, [pc, #96]	; (800be70 <HAL_I2C_MspInit+0x88>)
 800be10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be12:	4a17      	ldr	r2, [pc, #92]	; (800be70 <HAL_I2C_MspInit+0x88>)
 800be14:	f043 0302 	orr.w	r3, r3, #2
 800be18:	6313      	str	r3, [r2, #48]	; 0x30
 800be1a:	4b15      	ldr	r3, [pc, #84]	; (800be70 <HAL_I2C_MspInit+0x88>)
 800be1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	613b      	str	r3, [r7, #16]
 800be24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800be26:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800be2c:	2312      	movs	r3, #18
 800be2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800be30:	2301      	movs	r3, #1
 800be32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be34:	2303      	movs	r3, #3
 800be36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800be38:	2304      	movs	r3, #4
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be3c:	f107 0314 	add.w	r3, r7, #20
 800be40:	4619      	mov	r1, r3
 800be42:	480c      	ldr	r0, [pc, #48]	; (800be74 <HAL_I2C_MspInit+0x8c>)
 800be44:	f001 ff4e 	bl	800dce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800be48:	2300      	movs	r3, #0
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	4b08      	ldr	r3, [pc, #32]	; (800be70 <HAL_I2C_MspInit+0x88>)
 800be4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be50:	4a07      	ldr	r2, [pc, #28]	; (800be70 <HAL_I2C_MspInit+0x88>)
 800be52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be56:	6413      	str	r3, [r2, #64]	; 0x40
 800be58:	4b05      	ldr	r3, [pc, #20]	; (800be70 <HAL_I2C_MspInit+0x88>)
 800be5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800be64:	bf00      	nop
 800be66:	3728      	adds	r7, #40	; 0x28
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	40005400 	.word	0x40005400
 800be70:	40023800 	.word	0x40023800
 800be74:	40020400 	.word	0x40020400

0800be78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08a      	sub	sp, #40	; 0x28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be80:	f107 0314 	add.w	r3, r7, #20
 800be84:	2200      	movs	r2, #0
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	605a      	str	r2, [r3, #4]
 800be8a:	609a      	str	r2, [r3, #8]
 800be8c:	60da      	str	r2, [r3, #12]
 800be8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a19      	ldr	r2, [pc, #100]	; (800befc <HAL_SPI_MspInit+0x84>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d12c      	bne.n	800bef4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800be9a:	2300      	movs	r3, #0
 800be9c:	613b      	str	r3, [r7, #16]
 800be9e:	4b18      	ldr	r3, [pc, #96]	; (800bf00 <HAL_SPI_MspInit+0x88>)
 800bea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea2:	4a17      	ldr	r2, [pc, #92]	; (800bf00 <HAL_SPI_MspInit+0x88>)
 800bea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bea8:	6413      	str	r3, [r2, #64]	; 0x40
 800beaa:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <HAL_SPI_MspInit+0x88>)
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <HAL_SPI_MspInit+0x88>)
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	4a10      	ldr	r2, [pc, #64]	; (800bf00 <HAL_SPI_MspInit+0x88>)
 800bec0:	f043 0304 	orr.w	r3, r3, #4
 800bec4:	6313      	str	r3, [r2, #48]	; 0x30
 800bec6:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <HAL_SPI_MspInit+0x88>)
 800bec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beca:	f003 0304 	and.w	r3, r3, #4
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800bed2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed8:	2302      	movs	r3, #2
 800beda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bee0:	2303      	movs	r3, #3
 800bee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800bee4:	2306      	movs	r3, #6
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bee8:	f107 0314 	add.w	r3, r7, #20
 800beec:	4619      	mov	r1, r3
 800beee:	4805      	ldr	r0, [pc, #20]	; (800bf04 <HAL_SPI_MspInit+0x8c>)
 800bef0:	f001 fef8 	bl	800dce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800bef4:	bf00      	nop
 800bef6:	3728      	adds	r7, #40	; 0x28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	40003c00 	.word	0x40003c00
 800bf00:	40023800 	.word	0x40023800
 800bf04:	40020800 	.word	0x40020800

0800bf08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a1f      	ldr	r2, [pc, #124]	; (800bf94 <HAL_TIM_PWM_MspInit+0x8c>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d10e      	bne.n	800bf38 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
 800bf1e:	4b1e      	ldr	r3, [pc, #120]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf22:	4a1d      	ldr	r2, [pc, #116]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf24:	f043 0301 	orr.w	r3, r3, #1
 800bf28:	6453      	str	r3, [r2, #68]	; 0x44
 800bf2a:	4b1b      	ldr	r3, [pc, #108]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	617b      	str	r3, [r7, #20]
 800bf34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800bf36:	e026      	b.n	800bf86 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf40:	d10e      	bne.n	800bf60 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bf42:	2300      	movs	r3, #0
 800bf44:	613b      	str	r3, [r7, #16]
 800bf46:	4b14      	ldr	r3, [pc, #80]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	4a13      	ldr	r2, [pc, #76]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf4c:	f043 0301 	orr.w	r3, r3, #1
 800bf50:	6413      	str	r3, [r2, #64]	; 0x40
 800bf52:	4b11      	ldr	r3, [pc, #68]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	613b      	str	r3, [r7, #16]
 800bf5c:	693b      	ldr	r3, [r7, #16]
}
 800bf5e:	e012      	b.n	800bf86 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a0d      	ldr	r2, [pc, #52]	; (800bf9c <HAL_TIM_PWM_MspInit+0x94>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d10d      	bne.n	800bf86 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60fb      	str	r3, [r7, #12]
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf72:	4a09      	ldr	r2, [pc, #36]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf74:	f043 0302 	orr.w	r3, r3, #2
 800bf78:	6453      	str	r3, [r2, #68]	; 0x44
 800bf7a:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <HAL_TIM_PWM_MspInit+0x90>)
 800bf7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	68fb      	ldr	r3, [r7, #12]
}
 800bf86:	bf00      	nop
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40023800 	.word	0x40023800
 800bf9c:	40010400 	.word	0x40010400

0800bfa0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08c      	sub	sp, #48	; 0x30
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfa8:	f107 031c 	add.w	r3, r7, #28
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]
 800bfb0:	605a      	str	r2, [r3, #4]
 800bfb2:	609a      	str	r2, [r3, #8]
 800bfb4:	60da      	str	r2, [r3, #12]
 800bfb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a32      	ldr	r2, [pc, #200]	; (800c088 <HAL_TIM_Encoder_MspInit+0xe8>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d12c      	bne.n	800c01c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	4b31      	ldr	r3, [pc, #196]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800bfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfca:	4a30      	ldr	r2, [pc, #192]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800bfcc:	f043 0302 	orr.w	r3, r3, #2
 800bfd0:	6413      	str	r3, [r2, #64]	; 0x40
 800bfd2:	4b2e      	ldr	r3, [pc, #184]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfde:	2300      	movs	r3, #0
 800bfe0:	617b      	str	r3, [r7, #20]
 800bfe2:	4b2a      	ldr	r3, [pc, #168]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe6:	4a29      	ldr	r2, [pc, #164]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800bfe8:	f043 0301 	orr.w	r3, r3, #1
 800bfec:	6313      	str	r3, [r2, #48]	; 0x30
 800bfee:	4b27      	ldr	r3, [pc, #156]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	617b      	str	r3, [r7, #20]
 800bff8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bffa:	23c0      	movs	r3, #192	; 0xc0
 800bffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bffe:	2302      	movs	r3, #2
 800c000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c002:	2300      	movs	r3, #0
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c006:	2300      	movs	r3, #0
 800c008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c00a:	2302      	movs	r3, #2
 800c00c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c00e:	f107 031c 	add.w	r3, r7, #28
 800c012:	4619      	mov	r1, r3
 800c014:	481e      	ldr	r0, [pc, #120]	; (800c090 <HAL_TIM_Encoder_MspInit+0xf0>)
 800c016:	f001 fe65 	bl	800dce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c01a:	e030      	b.n	800c07e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a1c      	ldr	r2, [pc, #112]	; (800c094 <HAL_TIM_Encoder_MspInit+0xf4>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d12b      	bne.n	800c07e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c026:	2300      	movs	r3, #0
 800c028:	613b      	str	r3, [r7, #16]
 800c02a:	4b18      	ldr	r3, [pc, #96]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	4a17      	ldr	r2, [pc, #92]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800c030:	f043 0304 	orr.w	r3, r3, #4
 800c034:	6413      	str	r3, [r2, #64]	; 0x40
 800c036:	4b15      	ldr	r3, [pc, #84]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
 800c046:	4b11      	ldr	r3, [pc, #68]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	4a10      	ldr	r2, [pc, #64]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800c04c:	f043 0302 	orr.w	r3, r3, #2
 800c050:	6313      	str	r3, [r2, #48]	; 0x30
 800c052:	4b0e      	ldr	r3, [pc, #56]	; (800c08c <HAL_TIM_Encoder_MspInit+0xec>)
 800c054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c05e:	23c0      	movs	r3, #192	; 0xc0
 800c060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c062:	2302      	movs	r3, #2
 800c064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c066:	2300      	movs	r3, #0
 800c068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c06a:	2300      	movs	r3, #0
 800c06c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c06e:	2302      	movs	r3, #2
 800c070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c072:	f107 031c 	add.w	r3, r7, #28
 800c076:	4619      	mov	r1, r3
 800c078:	4807      	ldr	r0, [pc, #28]	; (800c098 <HAL_TIM_Encoder_MspInit+0xf8>)
 800c07a:	f001 fe33 	bl	800dce4 <HAL_GPIO_Init>
}
 800c07e:	bf00      	nop
 800c080:	3730      	adds	r7, #48	; 0x30
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	40000400 	.word	0x40000400
 800c08c:	40023800 	.word	0x40023800
 800c090:	40020000 	.word	0x40020000
 800c094:	40000800 	.word	0x40000800
 800c098:	40020400 	.word	0x40020400

0800c09c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a0e      	ldr	r2, [pc, #56]	; (800c0e4 <HAL_TIM_Base_MspInit+0x48>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d115      	bne.n	800c0da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <HAL_TIM_Base_MspInit+0x4c>)
 800c0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b6:	4a0c      	ldr	r2, [pc, #48]	; (800c0e8 <HAL_TIM_Base_MspInit+0x4c>)
 800c0b8:	f043 0310 	orr.w	r3, r3, #16
 800c0bc:	6413      	str	r3, [r2, #64]	; 0x40
 800c0be:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <HAL_TIM_Base_MspInit+0x4c>)
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	f003 0310 	and.w	r3, r3, #16
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	2036      	movs	r0, #54	; 0x36
 800c0d0:	f000 ff6b 	bl	800cfaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c0d4:	2036      	movs	r0, #54	; 0x36
 800c0d6:	f000 ff84 	bl	800cfe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	40001000 	.word	0x40001000
 800c0e8:	40023800 	.word	0x40023800

0800c0ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08a      	sub	sp, #40	; 0x28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	605a      	str	r2, [r3, #4]
 800c0fe:	609a      	str	r2, [r3, #8]
 800c100:	60da      	str	r2, [r3, #12]
 800c102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a37      	ldr	r2, [pc, #220]	; (800c1e8 <HAL_TIM_MspPostInit+0xfc>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d11f      	bne.n	800c14e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c10e:	2300      	movs	r3, #0
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	4b36      	ldr	r3, [pc, #216]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c116:	4a35      	ldr	r2, [pc, #212]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c118:	f043 0301 	orr.w	r3, r3, #1
 800c11c:	6313      	str	r3, [r2, #48]	; 0x30
 800c11e:	4b33      	ldr	r3, [pc, #204]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c12e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c130:	2302      	movs	r3, #2
 800c132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c134:	2300      	movs	r3, #0
 800c136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c138:	2300      	movs	r3, #0
 800c13a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c13c:	2301      	movs	r3, #1
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	4619      	mov	r1, r3
 800c146:	482a      	ldr	r0, [pc, #168]	; (800c1f0 <HAL_TIM_MspPostInit+0x104>)
 800c148:	f001 fdcc 	bl	800dce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800c14c:	e048      	b.n	800c1e0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c156:	d11f      	bne.n	800c198 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c160:	4a22      	ldr	r2, [pc, #136]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c162:	f043 0302 	orr.w	r3, r3, #2
 800c166:	6313      	str	r3, [r2, #48]	; 0x30
 800c168:	4b20      	ldr	r3, [pc, #128]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c174:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c17a:	2302      	movs	r3, #2
 800c17c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c182:	2300      	movs	r3, #0
 800c184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c186:	2301      	movs	r3, #1
 800c188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c18a:	f107 0314 	add.w	r3, r7, #20
 800c18e:	4619      	mov	r1, r3
 800c190:	4818      	ldr	r0, [pc, #96]	; (800c1f4 <HAL_TIM_MspPostInit+0x108>)
 800c192:	f001 fda7 	bl	800dce4 <HAL_GPIO_Init>
}
 800c196:	e023      	b.n	800c1e0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a16      	ldr	r2, [pc, #88]	; (800c1f8 <HAL_TIM_MspPostInit+0x10c>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d11e      	bne.n	800c1e0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60bb      	str	r3, [r7, #8]
 800c1a6:	4b11      	ldr	r3, [pc, #68]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1aa:	4a10      	ldr	r2, [pc, #64]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c1ac:	f043 0304 	orr.w	r3, r3, #4
 800c1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800c1b2:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <HAL_TIM_MspPostInit+0x100>)
 800c1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b6:	f003 0304 	and.w	r3, r3, #4
 800c1ba:	60bb      	str	r3, [r7, #8]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800c1be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c1d4:	f107 0314 	add.w	r3, r7, #20
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4808      	ldr	r0, [pc, #32]	; (800c1fc <HAL_TIM_MspPostInit+0x110>)
 800c1dc:	f001 fd82 	bl	800dce4 <HAL_GPIO_Init>
}
 800c1e0:	bf00      	nop
 800c1e2:	3728      	adds	r7, #40	; 0x28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	40010000 	.word	0x40010000
 800c1ec:	40023800 	.word	0x40023800
 800c1f0:	40020000 	.word	0x40020000
 800c1f4:	40020400 	.word	0x40020400
 800c1f8:	40010400 	.word	0x40010400
 800c1fc:	40020800 	.word	0x40020800

0800c200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08a      	sub	sp, #40	; 0x28
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c208:	f107 0314 	add.w	r3, r7, #20
 800c20c:	2200      	movs	r2, #0
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	605a      	str	r2, [r3, #4]
 800c212:	609a      	str	r2, [r3, #8]
 800c214:	60da      	str	r2, [r3, #12]
 800c216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a1d      	ldr	r2, [pc, #116]	; (800c294 <HAL_UART_MspInit+0x94>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d133      	bne.n	800c28a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800c222:	2300      	movs	r3, #0
 800c224:	613b      	str	r3, [r7, #16]
 800c226:	4b1c      	ldr	r3, [pc, #112]	; (800c298 <HAL_UART_MspInit+0x98>)
 800c228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c22a:	4a1b      	ldr	r2, [pc, #108]	; (800c298 <HAL_UART_MspInit+0x98>)
 800c22c:	f043 0320 	orr.w	r3, r3, #32
 800c230:	6453      	str	r3, [r2, #68]	; 0x44
 800c232:	4b19      	ldr	r3, [pc, #100]	; (800c298 <HAL_UART_MspInit+0x98>)
 800c234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c236:	f003 0320 	and.w	r3, r3, #32
 800c23a:	613b      	str	r3, [r7, #16]
 800c23c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c23e:	2300      	movs	r3, #0
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <HAL_UART_MspInit+0x98>)
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	4a14      	ldr	r2, [pc, #80]	; (800c298 <HAL_UART_MspInit+0x98>)
 800c248:	f043 0304 	orr.w	r3, r3, #4
 800c24c:	6313      	str	r3, [r2, #48]	; 0x30
 800c24e:	4b12      	ldr	r3, [pc, #72]	; (800c298 <HAL_UART_MspInit+0x98>)
 800c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c252:	f003 0304 	and.w	r3, r3, #4
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c25a:	23c0      	movs	r3, #192	; 0xc0
 800c25c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c25e:	2302      	movs	r3, #2
 800c260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c266:	2303      	movs	r3, #3
 800c268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800c26a:	2308      	movs	r3, #8
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c26e:	f107 0314 	add.w	r3, r7, #20
 800c272:	4619      	mov	r1, r3
 800c274:	4809      	ldr	r0, [pc, #36]	; (800c29c <HAL_UART_MspInit+0x9c>)
 800c276:	f001 fd35 	bl	800dce4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800c27a:	2200      	movs	r2, #0
 800c27c:	2100      	movs	r1, #0
 800c27e:	2047      	movs	r0, #71	; 0x47
 800c280:	f000 fe93 	bl	800cfaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800c284:	2047      	movs	r0, #71	; 0x47
 800c286:	f000 feac 	bl	800cfe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800c28a:	bf00      	nop
 800c28c:	3728      	adds	r7, #40	; 0x28
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	40011400 	.word	0x40011400
 800c298:	40023800 	.word	0x40023800
 800c29c:	40020800 	.word	0x40020800

0800c2a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c2a4:	e7fe      	b.n	800c2a4 <NMI_Handler+0x4>

0800c2a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c2aa:	e7fe      	b.n	800c2aa <HardFault_Handler+0x4>

0800c2ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c2b0:	e7fe      	b.n	800c2b0 <MemManage_Handler+0x4>

0800c2b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c2b6:	e7fe      	b.n	800c2b6 <BusFault_Handler+0x4>

0800c2b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c2bc:	e7fe      	b.n	800c2bc <UsageFault_Handler+0x4>

0800c2be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c2c2:	bf00      	nop
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c2d0:	bf00      	nop
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c2de:	bf00      	nop
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c2ec:	f000 f956 	bl	800c59c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c2f0:	bf00      	nop
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c2f8:	4802      	ldr	r0, [pc, #8]	; (800c304 <TIM6_DAC_IRQHandler+0x10>)
 800c2fa:	f003 fe18 	bl	800ff2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c2fe:	bf00      	nop
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	2001449c 	.word	0x2001449c

0800c308 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c30c:	4802      	ldr	r0, [pc, #8]	; (800c318 <DMA2_Stream0_IRQHandler+0x10>)
 800c30e:	f000 ffab 	bl	800d268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800c312:	bf00      	nop
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20014438 	.word	0x20014438

0800c31c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800c320:	4802      	ldr	r0, [pc, #8]	; (800c32c <USART6_IRQHandler+0x10>)
 800c322:	f004 fc39 	bl	8010b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800c326:	bf00      	nop
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	2001460c 	.word	0x2001460c

0800c330 <_read>:
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	2300      	movs	r3, #0
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e00a      	b.n	800c358 <_read+0x28>
 800c342:	f3af 8000 	nop.w
 800c346:	4601      	mov	r1, r0
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	60ba      	str	r2, [r7, #8]
 800c34e:	b2ca      	uxtb	r2, r1
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	3301      	adds	r3, #1
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	dbf0      	blt.n	800c342 <_read+0x12>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <_write>:
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b086      	sub	sp, #24
 800c36e:	af00      	add	r7, sp, #0
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	607a      	str	r2, [r7, #4]
 800c376:	2300      	movs	r3, #0
 800c378:	617b      	str	r3, [r7, #20]
 800c37a:	e009      	b.n	800c390 <_write+0x26>
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	60ba      	str	r2, [r7, #8]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	f7fe fc25 	bl	800abd4 <__io_putchar>
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3301      	adds	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	dbf1      	blt.n	800c37c <_write+0x12>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <_close>:
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <_fstat>:
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c3ca:	605a      	str	r2, [r3, #4]
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <_isatty>:
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <_lseek>:
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
	...

0800c40c <_sbrk>:
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	4a14      	ldr	r2, [pc, #80]	; (800c468 <_sbrk+0x5c>)
 800c416:	4b15      	ldr	r3, [pc, #84]	; (800c46c <_sbrk+0x60>)
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	613b      	str	r3, [r7, #16]
 800c420:	4b13      	ldr	r3, [pc, #76]	; (800c470 <_sbrk+0x64>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <_sbrk+0x22>
 800c428:	4b11      	ldr	r3, [pc, #68]	; (800c470 <_sbrk+0x64>)
 800c42a:	4a12      	ldr	r2, [pc, #72]	; (800c474 <_sbrk+0x68>)
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	4b10      	ldr	r3, [pc, #64]	; (800c470 <_sbrk+0x64>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4413      	add	r3, r2
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d207      	bcs.n	800c44c <_sbrk+0x40>
 800c43c:	f005 f9b2 	bl	80117a4 <__errno>
 800c440:	4602      	mov	r2, r0
 800c442:	230c      	movs	r3, #12
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	f04f 33ff 	mov.w	r3, #4294967295
 800c44a:	e009      	b.n	800c460 <_sbrk+0x54>
 800c44c:	4b08      	ldr	r3, [pc, #32]	; (800c470 <_sbrk+0x64>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	4b07      	ldr	r3, [pc, #28]	; (800c470 <_sbrk+0x64>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4413      	add	r3, r2
 800c45a:	4a05      	ldr	r2, [pc, #20]	; (800c470 <_sbrk+0x64>)
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20020000 	.word	0x20020000
 800c46c:	00000400 	.word	0x00000400
 800c470:	2000c2d0 	.word	0x2000c2d0
 800c474:	200146b0 	.word	0x200146b0

0800c478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c478:	b480      	push	{r7}
 800c47a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c47c:	4b08      	ldr	r3, [pc, #32]	; (800c4a0 <SystemInit+0x28>)
 800c47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c482:	4a07      	ldr	r2, [pc, #28]	; (800c4a0 <SystemInit+0x28>)
 800c484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c48c:	4b04      	ldr	r3, [pc, #16]	; (800c4a0 <SystemInit+0x28>)
 800c48e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c492:	609a      	str	r2, [r3, #8]
#endif
}
 800c494:	bf00      	nop
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	e000ed00 	.word	0xe000ed00

0800c4a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c4a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c4dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c4a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c4aa:	e003      	b.n	800c4b4 <LoopCopyDataInit>

0800c4ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c4ac:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c4ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c4b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c4b2:	3104      	adds	r1, #4

0800c4b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c4b4:	480b      	ldr	r0, [pc, #44]	; (800c4e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	; (800c4e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c4b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c4ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c4bc:	d3f6      	bcc.n	800c4ac <CopyDataInit>
  ldr  r2, =_sbss
 800c4be:	4a0b      	ldr	r2, [pc, #44]	; (800c4ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c4c0:	e002      	b.n	800c4c8 <LoopFillZerobss>

0800c4c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c4c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c4c4:	f842 3b04 	str.w	r3, [r2], #4

0800c4c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c4c8:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c4ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c4cc:	d3f9      	bcc.n	800c4c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c4ce:	f7ff ffd3 	bl	800c478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c4d2:	f005 f96d 	bl	80117b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c4d6:	f7fe fbf1 	bl	800acbc <main>
  bx  lr    
 800c4da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c4dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c4e0:	08014558 	.word	0x08014558
  ldr  r0, =_sdata
 800c4e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c4e8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800c4ec:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800c4f0:	200146b0 	.word	0x200146b0

0800c4f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c4f4:	e7fe      	b.n	800c4f4 <ADC_IRQHandler>
	...

0800c4f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c4fc:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <HAL_Init+0x40>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a0d      	ldr	r2, [pc, #52]	; (800c538 <HAL_Init+0x40>)
 800c502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c508:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <HAL_Init+0x40>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a0a      	ldr	r2, [pc, #40]	; (800c538 <HAL_Init+0x40>)
 800c50e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c514:	4b08      	ldr	r3, [pc, #32]	; (800c538 <HAL_Init+0x40>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a07      	ldr	r2, [pc, #28]	; (800c538 <HAL_Init+0x40>)
 800c51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c51e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c520:	2003      	movs	r0, #3
 800c522:	f000 fd37 	bl	800cf94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c526:	2000      	movs	r0, #0
 800c528:	f000 f808 	bl	800c53c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c52c:	f7ff fb84 	bl	800bc38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	40023c00 	.word	0x40023c00

0800c53c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c544:	4b12      	ldr	r3, [pc, #72]	; (800c590 <HAL_InitTick+0x54>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	4b12      	ldr	r3, [pc, #72]	; (800c594 <HAL_InitTick+0x58>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	4619      	mov	r1, r3
 800c54e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c552:	fbb3 f3f1 	udiv	r3, r3, r1
 800c556:	fbb2 f3f3 	udiv	r3, r2, r3
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fd4f 	bl	800cffe <HAL_SYSTICK_Config>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e00e      	b.n	800c588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b0f      	cmp	r3, #15
 800c56e:	d80a      	bhi.n	800c586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c570:	2200      	movs	r2, #0
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	f000 fd17 	bl	800cfaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c57c:	4a06      	ldr	r2, [pc, #24]	; (800c598 <HAL_InitTick+0x5c>)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	e000      	b.n	800c588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	2000000c 	.word	0x2000000c
 800c594:	20000014 	.word	0x20000014
 800c598:	20000010 	.word	0x20000010

0800c59c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c5a0:	4b06      	ldr	r3, [pc, #24]	; (800c5bc <HAL_IncTick+0x20>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4b06      	ldr	r3, [pc, #24]	; (800c5c0 <HAL_IncTick+0x24>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	4a04      	ldr	r2, [pc, #16]	; (800c5c0 <HAL_IncTick+0x24>)
 800c5ae:	6013      	str	r3, [r2, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	20000014 	.word	0x20000014
 800c5c0:	20014688 	.word	0x20014688

0800c5c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	af00      	add	r7, sp, #0
  return uwTick;
 800c5c8:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <HAL_GetTick+0x14>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	20014688 	.word	0x20014688

0800c5dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c5e4:	f7ff ffee 	bl	800c5c4 <HAL_GetTick>
 800c5e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f4:	d005      	beq.n	800c602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c5f6:	4b09      	ldr	r3, [pc, #36]	; (800c61c <HAL_Delay+0x40>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c602:	bf00      	nop
 800c604:	f7ff ffde 	bl	800c5c4 <HAL_GetTick>
 800c608:	4602      	mov	r2, r0
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	429a      	cmp	r2, r3
 800c612:	d8f7      	bhi.n	800c604 <HAL_Delay+0x28>
  {
  }
}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	20000014 	.word	0x20000014

0800c620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e033      	b.n	800c69e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d109      	bne.n	800c652 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff fb22 	bl	800bc88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c656:	f003 0310 	and.w	r3, r3, #16
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d118      	bne.n	800c690 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c662:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c666:	f023 0302 	bic.w	r3, r3, #2
 800c66a:	f043 0202 	orr.w	r2, r3, #2
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fa40 	bl	800caf8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c682:	f023 0303 	bic.w	r3, r3, #3
 800c686:	f043 0201 	orr.w	r2, r3, #1
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	641a      	str	r2, [r3, #64]	; 0x40
 800c68e:	e001      	b.n	800c694 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d101      	bne.n	800c6c6 <HAL_ADC_Start_DMA+0x1e>
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	e0cc      	b.n	800c860 <HAL_ADC_Start_DMA+0x1b8>
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d018      	beq.n	800c70e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689a      	ldr	r2, [r3, #8]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f042 0201 	orr.w	r2, r2, #1
 800c6ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c6ec:	4b5e      	ldr	r3, [pc, #376]	; (800c868 <HAL_ADC_Start_DMA+0x1c0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a5e      	ldr	r2, [pc, #376]	; (800c86c <HAL_ADC_Start_DMA+0x1c4>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	0c9a      	lsrs	r2, r3, #18
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c700:	e002      	b.n	800c708 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	3b01      	subs	r3, #1
 800c706:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1f9      	bne.n	800c702 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b01      	cmp	r3, #1
 800c71a:	f040 80a0 	bne.w	800c85e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c726:	f023 0301 	bic.w	r3, r3, #1
 800c72a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d007      	beq.n	800c750 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c744:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c748:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c75c:	d106      	bne.n	800c76c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c762:	f023 0206 	bic.w	r2, r3, #6
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	645a      	str	r2, [r3, #68]	; 0x44
 800c76a:	e002      	b.n	800c772 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c77a:	4b3d      	ldr	r3, [pc, #244]	; (800c870 <HAL_ADC_Start_DMA+0x1c8>)
 800c77c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	4a3c      	ldr	r2, [pc, #240]	; (800c874 <HAL_ADC_Start_DMA+0x1cc>)
 800c784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78a:	4a3b      	ldr	r2, [pc, #236]	; (800c878 <HAL_ADC_Start_DMA+0x1d0>)
 800c78c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c792:	4a3a      	ldr	r2, [pc, #232]	; (800c87c <HAL_ADC_Start_DMA+0x1d4>)
 800c794:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c79e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c7ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	334c      	adds	r3, #76	; 0x4c
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f000 fcd0 	bl	800d174 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	f003 031f 	and.w	r3, r3, #31
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d12a      	bne.n	800c836 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a26      	ldr	r2, [pc, #152]	; (800c880 <HAL_ADC_Start_DMA+0x1d8>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d015      	beq.n	800c816 <HAL_ADC_Start_DMA+0x16e>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a25      	ldr	r2, [pc, #148]	; (800c884 <HAL_ADC_Start_DMA+0x1dc>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d105      	bne.n	800c800 <HAL_ADC_Start_DMA+0x158>
 800c7f4:	4b1e      	ldr	r3, [pc, #120]	; (800c870 <HAL_ADC_Start_DMA+0x1c8>)
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f003 031f 	and.w	r3, r3, #31
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00a      	beq.n	800c816 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a20      	ldr	r2, [pc, #128]	; (800c888 <HAL_ADC_Start_DMA+0x1e0>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d129      	bne.n	800c85e <HAL_ADC_Start_DMA+0x1b6>
 800c80a:	4b19      	ldr	r3, [pc, #100]	; (800c870 <HAL_ADC_Start_DMA+0x1c8>)
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	f003 031f 	and.w	r3, r3, #31
 800c812:	2b0f      	cmp	r3, #15
 800c814:	d823      	bhi.n	800c85e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c820:	2b00      	cmp	r3, #0
 800c822:	d11c      	bne.n	800c85e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689a      	ldr	r2, [r3, #8]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c832:	609a      	str	r2, [r3, #8]
 800c834:	e013      	b.n	800c85e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a11      	ldr	r2, [pc, #68]	; (800c880 <HAL_ADC_Start_DMA+0x1d8>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10e      	bne.n	800c85e <HAL_ADC_Start_DMA+0x1b6>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d107      	bne.n	800c85e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c85c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	2000000c 	.word	0x2000000c
 800c86c:	431bde83 	.word	0x431bde83
 800c870:	40012300 	.word	0x40012300
 800c874:	0800ccf1 	.word	0x0800ccf1
 800c878:	0800cdab 	.word	0x0800cdab
 800c87c:	0800cdc7 	.word	0x0800cdc7
 800c880:	40012000 	.word	0x40012000
 800c884:	40012100 	.word	0x40012100
 800c888:	40012200 	.word	0x40012200

0800c88c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d101      	bne.n	800c8d0 <HAL_ADC_ConfigChannel+0x1c>
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	e105      	b.n	800cadc <HAL_ADC_ConfigChannel+0x228>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b09      	cmp	r3, #9
 800c8de:	d925      	bls.n	800c92c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68d9      	ldr	r1, [r3, #12]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	4413      	add	r3, r2
 800c8f4:	3b1e      	subs	r3, #30
 800c8f6:	2207      	movs	r2, #7
 800c8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fc:	43da      	mvns	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	400a      	ands	r2, r1
 800c904:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68d9      	ldr	r1, [r3, #12]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	689a      	ldr	r2, [r3, #8]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	b29b      	uxth	r3, r3
 800c916:	4618      	mov	r0, r3
 800c918:	4603      	mov	r3, r0
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	4403      	add	r3, r0
 800c91e:	3b1e      	subs	r3, #30
 800c920:	409a      	lsls	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	430a      	orrs	r2, r1
 800c928:	60da      	str	r2, [r3, #12]
 800c92a:	e022      	b.n	800c972 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6919      	ldr	r1, [r3, #16]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	b29b      	uxth	r3, r3
 800c938:	461a      	mov	r2, r3
 800c93a:	4613      	mov	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	4413      	add	r3, r2
 800c940:	2207      	movs	r2, #7
 800c942:	fa02 f303 	lsl.w	r3, r2, r3
 800c946:	43da      	mvns	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	400a      	ands	r2, r1
 800c94e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	6919      	ldr	r1, [r3, #16]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4618      	mov	r0, r3
 800c962:	4603      	mov	r3, r0
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	4403      	add	r3, r0
 800c968:	409a      	lsls	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	2b06      	cmp	r3, #6
 800c978:	d824      	bhi.n	800c9c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	4613      	mov	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4413      	add	r3, r2
 800c98a:	3b05      	subs	r3, #5
 800c98c:	221f      	movs	r2, #31
 800c98e:	fa02 f303 	lsl.w	r3, r2, r3
 800c992:	43da      	mvns	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	400a      	ands	r2, r1
 800c99a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	3b05      	subs	r3, #5
 800c9b6:	fa00 f203 	lsl.w	r2, r0, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	635a      	str	r2, [r3, #52]	; 0x34
 800c9c2:	e04c      	b.n	800ca5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	2b0c      	cmp	r3, #12
 800c9ca:	d824      	bhi.n	800ca16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	3b23      	subs	r3, #35	; 0x23
 800c9de:	221f      	movs	r2, #31
 800c9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e4:	43da      	mvns	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	400a      	ands	r2, r1
 800c9ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	4613      	mov	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	3b23      	subs	r3, #35	; 0x23
 800ca08:	fa00 f203 	lsl.w	r2, r0, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	430a      	orrs	r2, r1
 800ca12:	631a      	str	r2, [r3, #48]	; 0x30
 800ca14:	e023      	b.n	800ca5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	685a      	ldr	r2, [r3, #4]
 800ca20:	4613      	mov	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	4413      	add	r3, r2
 800ca26:	3b41      	subs	r3, #65	; 0x41
 800ca28:	221f      	movs	r2, #31
 800ca2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2e:	43da      	mvns	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	400a      	ands	r2, r1
 800ca36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	4618      	mov	r0, r3
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	3b41      	subs	r3, #65	; 0x41
 800ca52:	fa00 f203 	lsl.w	r2, r0, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ca5e:	4b22      	ldr	r3, [pc, #136]	; (800cae8 <HAL_ADC_ConfigChannel+0x234>)
 800ca60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a21      	ldr	r2, [pc, #132]	; (800caec <HAL_ADC_ConfigChannel+0x238>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d109      	bne.n	800ca80 <HAL_ADC_ConfigChannel+0x1cc>
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b12      	cmp	r3, #18
 800ca72:	d105      	bne.n	800ca80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a19      	ldr	r2, [pc, #100]	; (800caec <HAL_ADC_ConfigChannel+0x238>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d123      	bne.n	800cad2 <HAL_ADC_ConfigChannel+0x21e>
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b10      	cmp	r3, #16
 800ca90:	d003      	beq.n	800ca9a <HAL_ADC_ConfigChannel+0x1e6>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b11      	cmp	r3, #17
 800ca98:	d11b      	bne.n	800cad2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b10      	cmp	r3, #16
 800caac:	d111      	bne.n	800cad2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800caae:	4b10      	ldr	r3, [pc, #64]	; (800caf0 <HAL_ADC_ConfigChannel+0x23c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a10      	ldr	r2, [pc, #64]	; (800caf4 <HAL_ADC_ConfigChannel+0x240>)
 800cab4:	fba2 2303 	umull	r2, r3, r2, r3
 800cab8:	0c9a      	lsrs	r2, r3, #18
 800caba:	4613      	mov	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cac4:	e002      	b.n	800cacc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	3b01      	subs	r3, #1
 800caca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1f9      	bne.n	800cac6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	40012300 	.word	0x40012300
 800caec:	40012000 	.word	0x40012000
 800caf0:	2000000c 	.word	0x2000000c
 800caf4:	431bde83 	.word	0x431bde83

0800caf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cb00:	4b79      	ldr	r3, [pc, #484]	; (800cce8 <ADC_Init+0x1f0>)
 800cb02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	431a      	orrs	r2, r3
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6859      	ldr	r1, [r3, #4]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	021a      	lsls	r2, r3, #8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800cb50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6859      	ldr	r1, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	689a      	ldr	r2, [r3, #8]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	430a      	orrs	r2, r1
 800cb62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689a      	ldr	r2, [r3, #8]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6899      	ldr	r1, [r3, #8]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68da      	ldr	r2, [r3, #12]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8a:	4a58      	ldr	r2, [pc, #352]	; (800ccec <ADC_Init+0x1f4>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d022      	beq.n	800cbd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	689a      	ldr	r2, [r3, #8]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cb9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6899      	ldr	r1, [r3, #8]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cbc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6899      	ldr	r1, [r3, #8]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	609a      	str	r2, [r3, #8]
 800cbd4:	e00f      	b.n	800cbf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689a      	ldr	r2, [r3, #8]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cbe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cbf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	689a      	ldr	r2, [r3, #8]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f022 0202 	bic.w	r2, r2, #2
 800cc04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6899      	ldr	r1, [r3, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	7e1b      	ldrb	r3, [r3, #24]
 800cc10:	005a      	lsls	r2, r3, #1
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01b      	beq.n	800cc5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	685a      	ldr	r2, [r3, #4]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685a      	ldr	r2, [r3, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800cc42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6859      	ldr	r1, [r3, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	035a      	lsls	r2, r3, #13
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	605a      	str	r2, [r3, #4]
 800cc5a:	e007      	b.n	800cc6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800cc7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	69db      	ldr	r3, [r3, #28]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	051a      	lsls	r2, r3, #20
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	689a      	ldr	r2, [r3, #8]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6899      	ldr	r1, [r3, #8]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccae:	025a      	lsls	r2, r3, #9
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	689a      	ldr	r2, [r3, #8]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6899      	ldr	r1, [r3, #8]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	029a      	lsls	r2, r3, #10
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	430a      	orrs	r2, r1
 800ccda:	609a      	str	r2, [r3, #8]
}
 800ccdc:	bf00      	nop
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	40012300 	.word	0x40012300
 800ccec:	0f000001 	.word	0x0f000001

0800ccf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d13c      	bne.n	800cd84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d12b      	bne.n	800cd7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d127      	bne.n	800cd7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d006      	beq.n	800cd48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d119      	bne.n	800cd7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f022 0220 	bic.w	r2, r2, #32
 800cd56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d105      	bne.n	800cd7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd74:	f043 0201 	orr.w	r2, r3, #1
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f7fd ff3b 	bl	800abf8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800cd82:	e00e      	b.n	800cda2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	f003 0310 	and.w	r3, r3, #16
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7ff fd85 	bl	800c8a0 <HAL_ADC_ErrorCallback>
}
 800cd96:	e004      	b.n	800cda2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	4798      	blx	r3
}
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f7ff fd67 	bl	800c88c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800cdbe:	bf00      	nop
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2240      	movs	r2, #64	; 0x40
 800cdd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdde:	f043 0204 	orr.w	r2, r3, #4
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fd5a 	bl	800c8a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800cdec:	bf00      	nop
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f003 0307 	and.w	r3, r3, #7
 800ce02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <__NVIC_SetPriorityGrouping+0x44>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ce10:	4013      	ands	r3, r2
 800ce12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ce1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ce20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ce26:	4a04      	ldr	r2, [pc, #16]	; (800ce38 <__NVIC_SetPriorityGrouping+0x44>)
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	60d3      	str	r3, [r2, #12]
}
 800ce2c:	bf00      	nop
 800ce2e:	3714      	adds	r7, #20
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	e000ed00 	.word	0xe000ed00

0800ce3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <__NVIC_GetPriorityGrouping+0x18>)
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	0a1b      	lsrs	r3, r3, #8
 800ce46:	f003 0307 	and.w	r3, r3, #7
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	e000ed00 	.word	0xe000ed00

0800ce58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	db0b      	blt.n	800ce82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	f003 021f 	and.w	r2, r3, #31
 800ce70:	4907      	ldr	r1, [pc, #28]	; (800ce90 <__NVIC_EnableIRQ+0x38>)
 800ce72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce76:	095b      	lsrs	r3, r3, #5
 800ce78:	2001      	movs	r0, #1
 800ce7a:	fa00 f202 	lsl.w	r2, r0, r2
 800ce7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ce82:	bf00      	nop
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	e000e100 	.word	0xe000e100

0800ce94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	6039      	str	r1, [r7, #0]
 800ce9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	db0a      	blt.n	800cebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	490c      	ldr	r1, [pc, #48]	; (800cee0 <__NVIC_SetPriority+0x4c>)
 800ceae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceb2:	0112      	lsls	r2, r2, #4
 800ceb4:	b2d2      	uxtb	r2, r2
 800ceb6:	440b      	add	r3, r1
 800ceb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cebc:	e00a      	b.n	800ced4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	4908      	ldr	r1, [pc, #32]	; (800cee4 <__NVIC_SetPriority+0x50>)
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	f003 030f 	and.w	r3, r3, #15
 800ceca:	3b04      	subs	r3, #4
 800cecc:	0112      	lsls	r2, r2, #4
 800cece:	b2d2      	uxtb	r2, r2
 800ced0:	440b      	add	r3, r1
 800ced2:	761a      	strb	r2, [r3, #24]
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	e000e100 	.word	0xe000e100
 800cee4:	e000ed00 	.word	0xe000ed00

0800cee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b089      	sub	sp, #36	; 0x24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f1c3 0307 	rsb	r3, r3, #7
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	bf28      	it	cs
 800cf06:	2304      	movcs	r3, #4
 800cf08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	2b06      	cmp	r3, #6
 800cf10:	d902      	bls.n	800cf18 <NVIC_EncodePriority+0x30>
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	3b03      	subs	r3, #3
 800cf16:	e000      	b.n	800cf1a <NVIC_EncodePriority+0x32>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	fa02 f303 	lsl.w	r3, r2, r3
 800cf26:	43da      	mvns	r2, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	401a      	ands	r2, r3
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cf30:	f04f 31ff 	mov.w	r1, #4294967295
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	fa01 f303 	lsl.w	r3, r1, r3
 800cf3a:	43d9      	mvns	r1, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf40:	4313      	orrs	r3, r2
         );
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3724      	adds	r7, #36	; 0x24
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
	...

0800cf50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf60:	d301      	bcc.n	800cf66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cf62:	2301      	movs	r3, #1
 800cf64:	e00f      	b.n	800cf86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cf66:	4a0a      	ldr	r2, [pc, #40]	; (800cf90 <SysTick_Config+0x40>)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cf6e:	210f      	movs	r1, #15
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295
 800cf74:	f7ff ff8e 	bl	800ce94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <SysTick_Config+0x40>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cf7e:	4b04      	ldr	r3, [pc, #16]	; (800cf90 <SysTick_Config+0x40>)
 800cf80:	2207      	movs	r2, #7
 800cf82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	e000e010 	.word	0xe000e010

0800cf94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7ff ff29 	bl	800cdf4 <__NVIC_SetPriorityGrouping>
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b086      	sub	sp, #24
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	60b9      	str	r1, [r7, #8]
 800cfb4:	607a      	str	r2, [r7, #4]
 800cfb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cfbc:	f7ff ff3e 	bl	800ce3c <__NVIC_GetPriorityGrouping>
 800cfc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	68b9      	ldr	r1, [r7, #8]
 800cfc6:	6978      	ldr	r0, [r7, #20]
 800cfc8:	f7ff ff8e 	bl	800cee8 <NVIC_EncodePriority>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7ff ff5d 	bl	800ce94 <__NVIC_SetPriority>
}
 800cfda:	bf00      	nop
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	4603      	mov	r3, r0
 800cfea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cfec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff ff31 	bl	800ce58 <__NVIC_EnableIRQ>
}
 800cff6:	bf00      	nop
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b082      	sub	sp, #8
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7ff ffa2 	bl	800cf50 <SysTick_Config>
 800d00c:	4603      	mov	r3, r0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
	...

0800d018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800d020:	2300      	movs	r3, #0
 800d022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800d024:	f7ff face 	bl	800c5c4 <HAL_GetTick>
 800d028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e099      	b.n	800d168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0201 	bic.w	r2, r2, #1
 800d052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d054:	e00f      	b.n	800d076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d056:	f7ff fab5 	bl	800c5c4 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	2b05      	cmp	r3, #5
 800d062:	d908      	bls.n	800d076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2203      	movs	r2, #3
 800d06e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800d072:	2303      	movs	r3, #3
 800d074:	e078      	b.n	800d168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0301 	and.w	r3, r3, #1
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1e8      	bne.n	800d056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	4b38      	ldr	r3, [pc, #224]	; (800d170 <HAL_DMA_Init+0x158>)
 800d090:	4013      	ands	r3, r2
 800d092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d0a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d0ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d0ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	2b04      	cmp	r3, #4
 800d0ce:	d107      	bne.n	800d0e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	695b      	ldr	r3, [r3, #20]
 800d0ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f023 0307 	bic.w	r3, r3, #7
 800d0f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	2b04      	cmp	r3, #4
 800d108:	d117      	bne.n	800d13a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	4313      	orrs	r3, r2
 800d112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00e      	beq.n	800d13a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fa91 	bl	800d644 <DMA_CheckFifoParam>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d008      	beq.n	800d13a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2240      	movs	r2, #64	; 0x40
 800d12c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800d136:	2301      	movs	r3, #1
 800d138:	e016      	b.n	800d168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fa48 	bl	800d5d8 <DMA_CalcBaseAndBitshift>
 800d148:	4603      	mov	r3, r0
 800d14a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d150:	223f      	movs	r2, #63	; 0x3f
 800d152:	409a      	lsls	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	f010803f 	.word	0xf010803f

0800d174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d18a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d192:	2b01      	cmp	r3, #1
 800d194:	d101      	bne.n	800d19a <HAL_DMA_Start_IT+0x26>
 800d196:	2302      	movs	r3, #2
 800d198:	e040      	b.n	800d21c <HAL_DMA_Start_IT+0xa8>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d12f      	bne.n	800d20e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	68b9      	ldr	r1, [r7, #8]
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f000 f9da 	bl	800d57c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1cc:	223f      	movs	r2, #63	; 0x3f
 800d1ce:	409a      	lsls	r2, r3
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f042 0216 	orr.w	r2, r2, #22
 800d1e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d007      	beq.n	800d1fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0208 	orr.w	r2, r2, #8
 800d1fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f042 0201 	orr.w	r2, r2, #1
 800d20a:	601a      	str	r2, [r3, #0]
 800d20c:	e005      	b.n	800d21a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d216:	2302      	movs	r3, #2
 800d218:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b02      	cmp	r3, #2
 800d236:	d004      	beq.n	800d242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2280      	movs	r2, #128	; 0x80
 800d23c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	e00c      	b.n	800d25c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2205      	movs	r2, #5
 800d246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f022 0201 	bic.w	r2, r2, #1
 800d258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d274:	4b92      	ldr	r3, [pc, #584]	; (800d4c0 <HAL_DMA_IRQHandler+0x258>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a92      	ldr	r2, [pc, #584]	; (800d4c4 <HAL_DMA_IRQHandler+0x25c>)
 800d27a:	fba2 2303 	umull	r2, r3, r2, r3
 800d27e:	0a9b      	lsrs	r3, r3, #10
 800d280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d292:	2208      	movs	r2, #8
 800d294:	409a      	lsls	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4013      	ands	r3, r2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d01a      	beq.n	800d2d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d013      	beq.n	800d2d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f022 0204 	bic.w	r2, r2, #4
 800d2ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	409a      	lsls	r2, r3
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2cc:	f043 0201 	orr.w	r2, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2d8:	2201      	movs	r2, #1
 800d2da:	409a      	lsls	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d012      	beq.n	800d30a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00b      	beq.n	800d30a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	409a      	lsls	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d302:	f043 0202 	orr.w	r2, r3, #2
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d30e:	2204      	movs	r2, #4
 800d310:	409a      	lsls	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	4013      	ands	r3, r2
 800d316:	2b00      	cmp	r3, #0
 800d318:	d012      	beq.n	800d340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00b      	beq.n	800d340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d32c:	2204      	movs	r2, #4
 800d32e:	409a      	lsls	r2, r3
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d338:	f043 0204 	orr.w	r2, r3, #4
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d344:	2210      	movs	r2, #16
 800d346:	409a      	lsls	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	4013      	ands	r3, r2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d043      	beq.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0308 	and.w	r3, r3, #8
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d03c      	beq.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d362:	2210      	movs	r2, #16
 800d364:	409a      	lsls	r2, r3
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d374:	2b00      	cmp	r3, #0
 800d376:	d018      	beq.n	800d3aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d108      	bne.n	800d398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d024      	beq.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	4798      	blx	r3
 800d396:	e01f      	b.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01b      	beq.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	4798      	blx	r3
 800d3a8:	e016      	b.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d107      	bne.n	800d3c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f022 0208 	bic.w	r2, r2, #8
 800d3c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3dc:	2220      	movs	r2, #32
 800d3de:	409a      	lsls	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 808e 	beq.w	800d506 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 0310 	and.w	r3, r3, #16
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 8086 	beq.w	800d506 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3fe:	2220      	movs	r2, #32
 800d400:	409a      	lsls	r2, r3
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	2b05      	cmp	r3, #5
 800d410:	d136      	bne.n	800d480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f022 0216 	bic.w	r2, r2, #22
 800d420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	695a      	ldr	r2, [r3, #20]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d436:	2b00      	cmp	r3, #0
 800d438:	d103      	bne.n	800d442 <HAL_DMA_IRQHandler+0x1da>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d007      	beq.n	800d452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f022 0208 	bic.w	r2, r2, #8
 800d450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d456:	223f      	movs	r2, #63	; 0x3f
 800d458:	409a      	lsls	r2, r3
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d472:	2b00      	cmp	r3, #0
 800d474:	d07d      	beq.n	800d572 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	4798      	blx	r3
        }
        return;
 800d47e:	e078      	b.n	800d572 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d01c      	beq.n	800d4c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d108      	bne.n	800d4ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d030      	beq.n	800d506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	4798      	blx	r3
 800d4ac:	e02b      	b.n	800d506 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d027      	beq.n	800d506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	4798      	blx	r3
 800d4be:	e022      	b.n	800d506 <HAL_DMA_IRQHandler+0x29e>
 800d4c0:	2000000c 	.word	0x2000000c
 800d4c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10f      	bne.n	800d4f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0210 	bic.w	r2, r2, #16
 800d4e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d032      	beq.n	800d574 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d022      	beq.n	800d560 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2205      	movs	r2, #5
 800d51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f022 0201 	bic.w	r2, r2, #1
 800d530:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	3301      	adds	r3, #1
 800d536:	60bb      	str	r3, [r7, #8]
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d307      	bcc.n	800d54e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1f2      	bne.n	800d532 <HAL_DMA_IRQHandler+0x2ca>
 800d54c:	e000      	b.n	800d550 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800d54e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d564:	2b00      	cmp	r3, #0
 800d566:	d005      	beq.n	800d574 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
 800d570:	e000      	b.n	800d574 <HAL_DMA_IRQHandler+0x30c>
        return;
 800d572:	bf00      	nop
    }
  }
}
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop

0800d57c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
 800d588:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d598:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	2b40      	cmp	r3, #64	; 0x40
 800d5a8:	d108      	bne.n	800d5bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d5ba:	e007      	b.n	800d5cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	60da      	str	r2, [r3, #12]
}
 800d5cc:	bf00      	nop
 800d5ce:	3714      	adds	r7, #20
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	3b10      	subs	r3, #16
 800d5e8:	4a14      	ldr	r2, [pc, #80]	; (800d63c <DMA_CalcBaseAndBitshift+0x64>)
 800d5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ee:	091b      	lsrs	r3, r3, #4
 800d5f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d5f2:	4a13      	ldr	r2, [pc, #76]	; (800d640 <DMA_CalcBaseAndBitshift+0x68>)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b03      	cmp	r3, #3
 800d604:	d909      	bls.n	800d61a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d60e:	f023 0303 	bic.w	r3, r3, #3
 800d612:	1d1a      	adds	r2, r3, #4
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	659a      	str	r2, [r3, #88]	; 0x58
 800d618:	e007      	b.n	800d62a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d622:	f023 0303 	bic.w	r3, r3, #3
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	aaaaaaab 	.word	0xaaaaaaab
 800d640:	08014280 	.word	0x08014280

0800d644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d654:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	699b      	ldr	r3, [r3, #24]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d11f      	bne.n	800d69e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2b03      	cmp	r3, #3
 800d662:	d855      	bhi.n	800d710 <DMA_CheckFifoParam+0xcc>
 800d664:	a201      	add	r2, pc, #4	; (adr r2, 800d66c <DMA_CheckFifoParam+0x28>)
 800d666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66a:	bf00      	nop
 800d66c:	0800d67d 	.word	0x0800d67d
 800d670:	0800d68f 	.word	0x0800d68f
 800d674:	0800d67d 	.word	0x0800d67d
 800d678:	0800d711 	.word	0x0800d711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d684:	2b00      	cmp	r3, #0
 800d686:	d045      	beq.n	800d714 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d68c:	e042      	b.n	800d714 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d696:	d13f      	bne.n	800d718 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d69c:	e03c      	b.n	800d718 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6a6:	d121      	bne.n	800d6ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d836      	bhi.n	800d71c <DMA_CheckFifoParam+0xd8>
 800d6ae:	a201      	add	r2, pc, #4	; (adr r2, 800d6b4 <DMA_CheckFifoParam+0x70>)
 800d6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b4:	0800d6c5 	.word	0x0800d6c5
 800d6b8:	0800d6cb 	.word	0x0800d6cb
 800d6bc:	0800d6c5 	.word	0x0800d6c5
 800d6c0:	0800d6dd 	.word	0x0800d6dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d6c8:	e02f      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d024      	beq.n	800d720 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d6da:	e021      	b.n	800d720 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d6e4:	d11e      	bne.n	800d724 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d6ea:	e01b      	b.n	800d724 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d902      	bls.n	800d6f8 <DMA_CheckFifoParam+0xb4>
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d003      	beq.n	800d6fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d6f6:	e018      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d6fc:	e015      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00e      	beq.n	800d728 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	73fb      	strb	r3, [r7, #15]
      break;
 800d70e:	e00b      	b.n	800d728 <DMA_CheckFifoParam+0xe4>
      break;
 800d710:	bf00      	nop
 800d712:	e00a      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      break;
 800d714:	bf00      	nop
 800d716:	e008      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      break;
 800d718:	bf00      	nop
 800d71a:	e006      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      break;
 800d71c:	bf00      	nop
 800d71e:	e004      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      break;
 800d720:	bf00      	nop
 800d722:	e002      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      break;   
 800d724:	bf00      	nop
 800d726:	e000      	b.n	800d72a <DMA_CheckFifoParam+0xe6>
      break;
 800d728:	bf00      	nop
    }
  } 
  
  return status; 
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b086      	sub	sp, #24
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d74a:	4b23      	ldr	r3, [pc, #140]	; (800d7d8 <HAL_FLASH_Program+0xa0>)
 800d74c:	7e1b      	ldrb	r3, [r3, #24]
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d101      	bne.n	800d756 <HAL_FLASH_Program+0x1e>
 800d752:	2302      	movs	r3, #2
 800d754:	e03b      	b.n	800d7ce <HAL_FLASH_Program+0x96>
 800d756:	4b20      	ldr	r3, [pc, #128]	; (800d7d8 <HAL_FLASH_Program+0xa0>)
 800d758:	2201      	movs	r2, #1
 800d75a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d75c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d760:	f000 f870 	bl	800d844 <FLASH_WaitForLastOperation>
 800d764:	4603      	mov	r3, r0
 800d766:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d12b      	bne.n	800d7c6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d105      	bne.n	800d780 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800d774:	783b      	ldrb	r3, [r7, #0]
 800d776:	4619      	mov	r1, r3
 800d778:	68b8      	ldr	r0, [r7, #8]
 800d77a:	f000 f919 	bl	800d9b0 <FLASH_Program_Byte>
 800d77e:	e016      	b.n	800d7ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d105      	bne.n	800d792 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800d786:	883b      	ldrh	r3, [r7, #0]
 800d788:	4619      	mov	r1, r3
 800d78a:	68b8      	ldr	r0, [r7, #8]
 800d78c:	f000 f8ec 	bl	800d968 <FLASH_Program_HalfWord>
 800d790:	e00d      	b.n	800d7ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2b02      	cmp	r3, #2
 800d796:	d105      	bne.n	800d7a4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	4619      	mov	r1, r3
 800d79c:	68b8      	ldr	r0, [r7, #8]
 800d79e:	f000 f8c1 	bl	800d924 <FLASH_Program_Word>
 800d7a2:	e004      	b.n	800d7ae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800d7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7a8:	68b8      	ldr	r0, [r7, #8]
 800d7aa:	f000 f88b 	bl	800d8c4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d7b2:	f000 f847 	bl	800d844 <FLASH_WaitForLastOperation>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800d7ba:	4b08      	ldr	r3, [pc, #32]	; (800d7dc <HAL_FLASH_Program+0xa4>)
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	4a07      	ldr	r2, [pc, #28]	; (800d7dc <HAL_FLASH_Program+0xa4>)
 800d7c0:	f023 0301 	bic.w	r3, r3, #1
 800d7c4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d7c6:	4b04      	ldr	r3, [pc, #16]	; (800d7d8 <HAL_FLASH_Program+0xa0>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	761a      	strb	r2, [r3, #24]
  
  return status;
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	2001468c 	.word	0x2001468c
 800d7dc:	40023c00 	.word	0x40023c00

0800d7e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d7ea:	4b0b      	ldr	r3, [pc, #44]	; (800d818 <HAL_FLASH_Unlock+0x38>)
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	da0b      	bge.n	800d80a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d7f2:	4b09      	ldr	r3, [pc, #36]	; (800d818 <HAL_FLASH_Unlock+0x38>)
 800d7f4:	4a09      	ldr	r2, [pc, #36]	; (800d81c <HAL_FLASH_Unlock+0x3c>)
 800d7f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d7f8:	4b07      	ldr	r3, [pc, #28]	; (800d818 <HAL_FLASH_Unlock+0x38>)
 800d7fa:	4a09      	ldr	r2, [pc, #36]	; (800d820 <HAL_FLASH_Unlock+0x40>)
 800d7fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d7fe:	4b06      	ldr	r3, [pc, #24]	; (800d818 <HAL_FLASH_Unlock+0x38>)
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	da01      	bge.n	800d80a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d80a:	79fb      	ldrb	r3, [r7, #7]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr
 800d818:	40023c00 	.word	0x40023c00
 800d81c:	45670123 	.word	0x45670123
 800d820:	cdef89ab 	.word	0xcdef89ab

0800d824 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d824:	b480      	push	{r7}
 800d826:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <HAL_FLASH_Lock+0x1c>)
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	4a04      	ldr	r2, [pc, #16]	; (800d840 <HAL_FLASH_Lock+0x1c>)
 800d82e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d832:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	40023c00 	.word	0x40023c00

0800d844 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d84c:	2300      	movs	r3, #0
 800d84e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d850:	4b1a      	ldr	r3, [pc, #104]	; (800d8bc <FLASH_WaitForLastOperation+0x78>)
 800d852:	2200      	movs	r2, #0
 800d854:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800d856:	f7fe feb5 	bl	800c5c4 <HAL_GetTick>
 800d85a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800d85c:	e010      	b.n	800d880 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d864:	d00c      	beq.n	800d880 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d007      	beq.n	800d87c <FLASH_WaitForLastOperation+0x38>
 800d86c:	f7fe feaa 	bl	800c5c4 <HAL_GetTick>
 800d870:	4602      	mov	r2, r0
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d201      	bcs.n	800d880 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800d87c:	2303      	movs	r3, #3
 800d87e:	e019      	b.n	800d8b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800d880:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <FLASH_WaitForLastOperation+0x7c>)
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e8      	bne.n	800d85e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800d88c:	4b0c      	ldr	r3, [pc, #48]	; (800d8c0 <FLASH_WaitForLastOperation+0x7c>)
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d898:	4b09      	ldr	r3, [pc, #36]	; (800d8c0 <FLASH_WaitForLastOperation+0x7c>)
 800d89a:	2201      	movs	r2, #1
 800d89c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800d89e:	4b08      	ldr	r3, [pc, #32]	; (800d8c0 <FLASH_WaitForLastOperation+0x7c>)
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d8aa:	f000 f8a3 	bl	800d9f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e000      	b.n	800d8b4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
  
}  
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	2001468c 	.word	0x2001468c
 800d8c0:	40023c00 	.word	0x40023c00

0800d8c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d8c4:	b490      	push	{r4, r7}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d8d0:	4b13      	ldr	r3, [pc, #76]	; (800d920 <FLASH_Program_DoubleWord+0x5c>)
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	4a12      	ldr	r2, [pc, #72]	; (800d920 <FLASH_Program_DoubleWord+0x5c>)
 800d8d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800d8dc:	4b10      	ldr	r3, [pc, #64]	; (800d920 <FLASH_Program_DoubleWord+0x5c>)
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	4a0f      	ldr	r2, [pc, #60]	; (800d920 <FLASH_Program_DoubleWord+0x5c>)
 800d8e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d8e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	; (800d920 <FLASH_Program_DoubleWord+0x5c>)
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	4a0c      	ldr	r2, [pc, #48]	; (800d920 <FLASH_Program_DoubleWord+0x5c>)
 800d8ee:	f043 0301 	orr.w	r3, r3, #1
 800d8f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800d8fa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800d8fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d902:	f04f 0300 	mov.w	r3, #0
 800d906:	f04f 0400 	mov.w	r4, #0
 800d90a:	0013      	movs	r3, r2
 800d90c:	2400      	movs	r4, #0
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	3204      	adds	r2, #4
 800d912:	6013      	str	r3, [r2, #0]
}
 800d914:	bf00      	nop
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bc90      	pop	{r4, r7}
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	40023c00 	.word	0x40023c00

0800d924 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d92e:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <FLASH_Program_Word+0x40>)
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	4a0c      	ldr	r2, [pc, #48]	; (800d964 <FLASH_Program_Word+0x40>)
 800d934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d938:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800d93a:	4b0a      	ldr	r3, [pc, #40]	; (800d964 <FLASH_Program_Word+0x40>)
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	4a09      	ldr	r2, [pc, #36]	; (800d964 <FLASH_Program_Word+0x40>)
 800d940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d944:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d946:	4b07      	ldr	r3, [pc, #28]	; (800d964 <FLASH_Program_Word+0x40>)
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	4a06      	ldr	r2, [pc, #24]	; (800d964 <FLASH_Program_Word+0x40>)
 800d94c:	f043 0301 	orr.w	r3, r3, #1
 800d950:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	601a      	str	r2, [r3, #0]
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	40023c00 	.word	0x40023c00

0800d968 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	460b      	mov	r3, r1
 800d972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d974:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <FLASH_Program_HalfWord+0x44>)
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	4a0c      	ldr	r2, [pc, #48]	; (800d9ac <FLASH_Program_HalfWord+0x44>)
 800d97a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d97e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800d980:	4b0a      	ldr	r3, [pc, #40]	; (800d9ac <FLASH_Program_HalfWord+0x44>)
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	4a09      	ldr	r2, [pc, #36]	; (800d9ac <FLASH_Program_HalfWord+0x44>)
 800d986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d98a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d98c:	4b07      	ldr	r3, [pc, #28]	; (800d9ac <FLASH_Program_HalfWord+0x44>)
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	4a06      	ldr	r2, [pc, #24]	; (800d9ac <FLASH_Program_HalfWord+0x44>)
 800d992:	f043 0301 	orr.w	r3, r3, #1
 800d996:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	887a      	ldrh	r2, [r7, #2]
 800d99c:	801a      	strh	r2, [r3, #0]
}
 800d99e:	bf00      	nop
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	40023c00 	.word	0x40023c00

0800d9b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d9bc:	4b0c      	ldr	r3, [pc, #48]	; (800d9f0 <FLASH_Program_Byte+0x40>)
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	4a0b      	ldr	r2, [pc, #44]	; (800d9f0 <FLASH_Program_Byte+0x40>)
 800d9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800d9c8:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <FLASH_Program_Byte+0x40>)
 800d9ca:	4a09      	ldr	r2, [pc, #36]	; (800d9f0 <FLASH_Program_Byte+0x40>)
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d9d0:	4b07      	ldr	r3, [pc, #28]	; (800d9f0 <FLASH_Program_Byte+0x40>)
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	4a06      	ldr	r2, [pc, #24]	; (800d9f0 <FLASH_Program_Byte+0x40>)
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	78fa      	ldrb	r2, [r7, #3]
 800d9e0:	701a      	strb	r2, [r3, #0]
}
 800d9e2:	bf00      	nop
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	40023c00 	.word	0x40023c00

0800d9f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800d9f4:	b480      	push	{r7}
 800d9f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800d9f8:	4b27      	ldr	r3, [pc, #156]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f003 0310 	and.w	r3, r3, #16
 800da00:	2b00      	cmp	r3, #0
 800da02:	d008      	beq.n	800da16 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800da04:	4b25      	ldr	r3, [pc, #148]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da06:	69db      	ldr	r3, [r3, #28]
 800da08:	f043 0310 	orr.w	r3, r3, #16
 800da0c:	4a23      	ldr	r2, [pc, #140]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da0e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800da10:	4b21      	ldr	r3, [pc, #132]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da12:	2210      	movs	r2, #16
 800da14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800da16:	4b20      	ldr	r3, [pc, #128]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	f003 0320 	and.w	r3, r3, #32
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d008      	beq.n	800da34 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800da22:	4b1e      	ldr	r3, [pc, #120]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da24:	69db      	ldr	r3, [r3, #28]
 800da26:	f043 0308 	orr.w	r3, r3, #8
 800da2a:	4a1c      	ldr	r2, [pc, #112]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da2c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800da2e:	4b1a      	ldr	r3, [pc, #104]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da30:	2220      	movs	r2, #32
 800da32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800da34:	4b18      	ldr	r3, [pc, #96]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d008      	beq.n	800da52 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800da40:	4b16      	ldr	r3, [pc, #88]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	f043 0304 	orr.w	r3, r3, #4
 800da48:	4a14      	ldr	r2, [pc, #80]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800da4c:	4b12      	ldr	r3, [pc, #72]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da4e:	2240      	movs	r2, #64	; 0x40
 800da50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800da52:	4b11      	ldr	r3, [pc, #68]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d008      	beq.n	800da70 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da60:	69db      	ldr	r3, [r3, #28]
 800da62:	f043 0302 	orr.w	r3, r3, #2
 800da66:	4a0d      	ldr	r2, [pc, #52]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da68:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800da6a:	4b0b      	ldr	r3, [pc, #44]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da6c:	2280      	movs	r2, #128	; 0x80
 800da6e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800da70:	4b09      	ldr	r3, [pc, #36]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d008      	beq.n	800da8e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800da7c:	4b07      	ldr	r3, [pc, #28]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	f043 0320 	orr.w	r3, r3, #32
 800da84:	4a05      	ldr	r2, [pc, #20]	; (800da9c <FLASH_SetErrorCode+0xa8>)
 800da86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800da88:	4b03      	ldr	r3, [pc, #12]	; (800da98 <FLASH_SetErrorCode+0xa4>)
 800da8a:	2202      	movs	r2, #2
 800da8c:	60da      	str	r2, [r3, #12]
  }
}
 800da8e:	bf00      	nop
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	40023c00 	.word	0x40023c00
 800da9c:	2001468c 	.word	0x2001468c

0800daa0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800daae:	2300      	movs	r3, #0
 800dab0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800dab2:	4b31      	ldr	r3, [pc, #196]	; (800db78 <HAL_FLASHEx_Erase+0xd8>)
 800dab4:	7e1b      	ldrb	r3, [r3, #24]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d101      	bne.n	800dabe <HAL_FLASHEx_Erase+0x1e>
 800daba:	2302      	movs	r3, #2
 800dabc:	e058      	b.n	800db70 <HAL_FLASHEx_Erase+0xd0>
 800dabe:	4b2e      	ldr	r3, [pc, #184]	; (800db78 <HAL_FLASHEx_Erase+0xd8>)
 800dac0:	2201      	movs	r2, #1
 800dac2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dac4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dac8:	f7ff febc 	bl	800d844 <FLASH_WaitForLastOperation>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d148      	bne.n	800db68 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	f04f 32ff 	mov.w	r2, #4294967295
 800dadc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d115      	bne.n	800db12 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	b2da      	uxtb	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	4619      	mov	r1, r3
 800daf2:	4610      	mov	r0, r2
 800daf4:	f000 f844 	bl	800db80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800daf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dafc:	f7ff fea2 	bl	800d844 <FLASH_WaitForLastOperation>
 800db00:	4603      	mov	r3, r0
 800db02:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800db04:	4b1d      	ldr	r3, [pc, #116]	; (800db7c <HAL_FLASHEx_Erase+0xdc>)
 800db06:	691b      	ldr	r3, [r3, #16]
 800db08:	4a1c      	ldr	r2, [pc, #112]	; (800db7c <HAL_FLASHEx_Erase+0xdc>)
 800db0a:	f023 0304 	bic.w	r3, r3, #4
 800db0e:	6113      	str	r3, [r2, #16]
 800db10:	e028      	b.n	800db64 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	60bb      	str	r3, [r7, #8]
 800db18:	e01c      	b.n	800db54 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	4619      	mov	r1, r3
 800db22:	68b8      	ldr	r0, [r7, #8]
 800db24:	f000 f850 	bl	800dbc8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db28:	f24c 3050 	movw	r0, #50000	; 0xc350
 800db2c:	f7ff fe8a 	bl	800d844 <FLASH_WaitForLastOperation>
 800db30:	4603      	mov	r3, r0
 800db32:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800db34:	4b11      	ldr	r3, [pc, #68]	; (800db7c <HAL_FLASHEx_Erase+0xdc>)
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	4a10      	ldr	r2, [pc, #64]	; (800db7c <HAL_FLASHEx_Erase+0xdc>)
 800db3a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800db3e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800db40:	7bfb      	ldrb	r3, [r7, #15]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	601a      	str	r2, [r3, #0]
          break;
 800db4c:	e00a      	b.n	800db64 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	3301      	adds	r3, #1
 800db52:	60bb      	str	r3, [r7, #8]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	68da      	ldr	r2, [r3, #12]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	4413      	add	r3, r2
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	429a      	cmp	r2, r3
 800db62:	d3da      	bcc.n	800db1a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800db64:	f000 f878 	bl	800dc58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800db68:	4b03      	ldr	r3, [pc, #12]	; (800db78 <HAL_FLASHEx_Erase+0xd8>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	761a      	strb	r2, [r3, #24]

  return status;
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	2001468c 	.word	0x2001468c
 800db7c:	40023c00 	.word	0x40023c00

0800db80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800db8c:	4b0d      	ldr	r3, [pc, #52]	; (800dbc4 <FLASH_MassErase+0x44>)
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	4a0c      	ldr	r2, [pc, #48]	; (800dbc4 <FLASH_MassErase+0x44>)
 800db92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800db98:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <FLASH_MassErase+0x44>)
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	4a09      	ldr	r2, [pc, #36]	; (800dbc4 <FLASH_MassErase+0x44>)
 800db9e:	f043 0304 	orr.w	r3, r3, #4
 800dba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800dba4:	4b07      	ldr	r3, [pc, #28]	; (800dbc4 <FLASH_MassErase+0x44>)
 800dba6:	691a      	ldr	r2, [r3, #16]
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	4313      	orrs	r3, r2
 800dbae:	4a05      	ldr	r2, [pc, #20]	; (800dbc4 <FLASH_MassErase+0x44>)
 800dbb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbb4:	6113      	str	r3, [r2, #16]
}
 800dbb6:	bf00      	nop
 800dbb8:	370c      	adds	r7, #12
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	40023c00 	.word	0x40023c00

0800dbc8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800dbd8:	78fb      	ldrb	r3, [r7, #3]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d102      	bne.n	800dbe4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	60fb      	str	r3, [r7, #12]
 800dbe2:	e010      	b.n	800dc06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800dbe4:	78fb      	ldrb	r3, [r7, #3]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d103      	bne.n	800dbf2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800dbea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e009      	b.n	800dc06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800dbf2:	78fb      	ldrb	r3, [r7, #3]
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d103      	bne.n	800dc00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800dbf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbfc:	60fb      	str	r3, [r7, #12]
 800dbfe:	e002      	b.n	800dc06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800dc00:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dc04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dc06:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	4a12      	ldr	r2, [pc, #72]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800dc12:	4b10      	ldr	r3, [pc, #64]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc14:	691a      	ldr	r2, [r3, #16]
 800dc16:	490f      	ldr	r1, [pc, #60]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800dc1e:	4b0d      	ldr	r3, [pc, #52]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	4a0c      	ldr	r2, [pc, #48]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800dc28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800dc2a:	4b0a      	ldr	r3, [pc, #40]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc2c:	691a      	ldr	r2, [r3, #16]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	4313      	orrs	r3, r2
 800dc34:	4a07      	ldr	r2, [pc, #28]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc36:	f043 0302 	orr.w	r3, r3, #2
 800dc3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800dc3c:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	4a04      	ldr	r2, [pc, #16]	; (800dc54 <FLASH_Erase_Sector+0x8c>)
 800dc42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc46:	6113      	str	r3, [r2, #16]
}
 800dc48:	bf00      	nop
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	40023c00 	.word	0x40023c00

0800dc58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800dc5c:	4b20      	ldr	r3, [pc, #128]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d017      	beq.n	800dc98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800dc68:	4b1d      	ldr	r3, [pc, #116]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a1c      	ldr	r2, [pc, #112]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800dc74:	4b1a      	ldr	r3, [pc, #104]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a19      	ldr	r2, [pc, #100]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	4b17      	ldr	r3, [pc, #92]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a16      	ldr	r2, [pc, #88]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dc8c:	4b14      	ldr	r3, [pc, #80]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a13      	ldr	r2, [pc, #76]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc96:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800dc98:	4b11      	ldr	r3, [pc, #68]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d017      	beq.n	800dcd4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800dca4:	4b0e      	ldr	r3, [pc, #56]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a0d      	ldr	r2, [pc, #52]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a0a      	ldr	r2, [pc, #40]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	4b08      	ldr	r3, [pc, #32]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a07      	ldr	r2, [pc, #28]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcc6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800dcc8:	4b05      	ldr	r3, [pc, #20]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a04      	ldr	r2, [pc, #16]	; (800dce0 <FLASH_FlushCaches+0x88>)
 800dcce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dcd2:	6013      	str	r3, [r2, #0]
  }
}
 800dcd4:	bf00      	nop
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	40023c00 	.word	0x40023c00

0800dce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b089      	sub	sp, #36	; 0x24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	61fb      	str	r3, [r7, #28]
 800dcfe:	e16b      	b.n	800dfd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dd00:	2201      	movs	r2, #1
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	fa02 f303 	lsl.w	r3, r2, r3
 800dd08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	4013      	ands	r3, r2
 800dd12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	f040 815a 	bne.w	800dfd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d00b      	beq.n	800dd3e <HAL_GPIO_Init+0x5a>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d007      	beq.n	800dd3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800dd32:	2b11      	cmp	r3, #17
 800dd34:	d003      	beq.n	800dd3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	2b12      	cmp	r3, #18
 800dd3c:	d130      	bne.n	800dda0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	2203      	movs	r2, #3
 800dd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4e:	43db      	mvns	r3, r3
 800dd50:	69ba      	ldr	r2, [r7, #24]
 800dd52:	4013      	ands	r3, r2
 800dd54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	68da      	ldr	r2, [r3, #12]
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	69ba      	ldr	r2, [r7, #24]
 800dd6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dd74:	2201      	movs	r2, #1
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7c:	43db      	mvns	r3, r3
 800dd7e:	69ba      	ldr	r2, [r7, #24]
 800dd80:	4013      	ands	r3, r2
 800dd82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	091b      	lsrs	r3, r3, #4
 800dd8a:	f003 0201 	and.w	r2, r3, #1
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	fa02 f303 	lsl.w	r3, r2, r3
 800dd94:	69ba      	ldr	r2, [r7, #24]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	69ba      	ldr	r2, [r7, #24]
 800dd9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	2203      	movs	r2, #3
 800ddac:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb0:	43db      	mvns	r3, r3
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	689a      	ldr	r2, [r3, #8]
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc4:	69ba      	ldr	r2, [r7, #24]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d003      	beq.n	800dde0 <HAL_GPIO_Init+0xfc>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	2b12      	cmp	r3, #18
 800ddde:	d123      	bne.n	800de28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	08da      	lsrs	r2, r3, #3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3208      	adds	r2, #8
 800dde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	f003 0307 	and.w	r3, r3, #7
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	220f      	movs	r2, #15
 800ddf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfc:	43db      	mvns	r3, r3
 800ddfe:	69ba      	ldr	r2, [r7, #24]
 800de00:	4013      	ands	r3, r2
 800de02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	691a      	ldr	r2, [r3, #16]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	f003 0307 	and.w	r3, r3, #7
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	fa02 f303 	lsl.w	r3, r2, r3
 800de14:	69ba      	ldr	r2, [r7, #24]
 800de16:	4313      	orrs	r3, r2
 800de18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	08da      	lsrs	r2, r3, #3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3208      	adds	r2, #8
 800de22:	69b9      	ldr	r1, [r7, #24]
 800de24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	2203      	movs	r2, #3
 800de34:	fa02 f303 	lsl.w	r3, r2, r3
 800de38:	43db      	mvns	r3, r3
 800de3a:	69ba      	ldr	r2, [r7, #24]
 800de3c:	4013      	ands	r3, r2
 800de3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	f003 0203 	and.w	r2, r3, #3
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	fa02 f303 	lsl.w	r3, r2, r3
 800de50:	69ba      	ldr	r2, [r7, #24]
 800de52:	4313      	orrs	r3, r2
 800de54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	69ba      	ldr	r2, [r7, #24]
 800de5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de64:	2b00      	cmp	r3, #0
 800de66:	f000 80b4 	beq.w	800dfd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	4b5f      	ldr	r3, [pc, #380]	; (800dfec <HAL_GPIO_Init+0x308>)
 800de70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de72:	4a5e      	ldr	r2, [pc, #376]	; (800dfec <HAL_GPIO_Init+0x308>)
 800de74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de78:	6453      	str	r3, [r2, #68]	; 0x44
 800de7a:	4b5c      	ldr	r3, [pc, #368]	; (800dfec <HAL_GPIO_Init+0x308>)
 800de7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800de86:	4a5a      	ldr	r2, [pc, #360]	; (800dff0 <HAL_GPIO_Init+0x30c>)
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	089b      	lsrs	r3, r3, #2
 800de8c:	3302      	adds	r3, #2
 800de8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	f003 0303 	and.w	r3, r3, #3
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	220f      	movs	r2, #15
 800de9e:	fa02 f303 	lsl.w	r3, r2, r3
 800dea2:	43db      	mvns	r3, r3
 800dea4:	69ba      	ldr	r2, [r7, #24]
 800dea6:	4013      	ands	r3, r2
 800dea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a51      	ldr	r2, [pc, #324]	; (800dff4 <HAL_GPIO_Init+0x310>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d02b      	beq.n	800df0a <HAL_GPIO_Init+0x226>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a50      	ldr	r2, [pc, #320]	; (800dff8 <HAL_GPIO_Init+0x314>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d025      	beq.n	800df06 <HAL_GPIO_Init+0x222>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a4f      	ldr	r2, [pc, #316]	; (800dffc <HAL_GPIO_Init+0x318>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d01f      	beq.n	800df02 <HAL_GPIO_Init+0x21e>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4a4e      	ldr	r2, [pc, #312]	; (800e000 <HAL_GPIO_Init+0x31c>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d019      	beq.n	800defe <HAL_GPIO_Init+0x21a>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a4d      	ldr	r2, [pc, #308]	; (800e004 <HAL_GPIO_Init+0x320>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d013      	beq.n	800defa <HAL_GPIO_Init+0x216>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a4c      	ldr	r2, [pc, #304]	; (800e008 <HAL_GPIO_Init+0x324>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d00d      	beq.n	800def6 <HAL_GPIO_Init+0x212>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a4b      	ldr	r2, [pc, #300]	; (800e00c <HAL_GPIO_Init+0x328>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d007      	beq.n	800def2 <HAL_GPIO_Init+0x20e>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a4a      	ldr	r2, [pc, #296]	; (800e010 <HAL_GPIO_Init+0x32c>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d101      	bne.n	800deee <HAL_GPIO_Init+0x20a>
 800deea:	2307      	movs	r3, #7
 800deec:	e00e      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800deee:	2308      	movs	r3, #8
 800def0:	e00c      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800def2:	2306      	movs	r3, #6
 800def4:	e00a      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800def6:	2305      	movs	r3, #5
 800def8:	e008      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800defa:	2304      	movs	r3, #4
 800defc:	e006      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800defe:	2303      	movs	r3, #3
 800df00:	e004      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800df02:	2302      	movs	r3, #2
 800df04:	e002      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800df06:	2301      	movs	r3, #1
 800df08:	e000      	b.n	800df0c <HAL_GPIO_Init+0x228>
 800df0a:	2300      	movs	r3, #0
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	f002 0203 	and.w	r2, r2, #3
 800df12:	0092      	lsls	r2, r2, #2
 800df14:	4093      	lsls	r3, r2
 800df16:	69ba      	ldr	r2, [r7, #24]
 800df18:	4313      	orrs	r3, r2
 800df1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800df1c:	4934      	ldr	r1, [pc, #208]	; (800dff0 <HAL_GPIO_Init+0x30c>)
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	089b      	lsrs	r3, r3, #2
 800df22:	3302      	adds	r3, #2
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800df2a:	4b3a      	ldr	r3, [pc, #232]	; (800e014 <HAL_GPIO_Init+0x330>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	43db      	mvns	r3, r3
 800df34:	69ba      	ldr	r2, [r7, #24]
 800df36:	4013      	ands	r3, r2
 800df38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800df4e:	4a31      	ldr	r2, [pc, #196]	; (800e014 <HAL_GPIO_Init+0x330>)
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800df54:	4b2f      	ldr	r3, [pc, #188]	; (800e014 <HAL_GPIO_Init+0x330>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	43db      	mvns	r3, r3
 800df5e:	69ba      	ldr	r2, [r7, #24]
 800df60:	4013      	ands	r3, r2
 800df62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800df70:	69ba      	ldr	r2, [r7, #24]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	4313      	orrs	r3, r2
 800df76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800df78:	4a26      	ldr	r2, [pc, #152]	; (800e014 <HAL_GPIO_Init+0x330>)
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800df7e:	4b25      	ldr	r3, [pc, #148]	; (800e014 <HAL_GPIO_Init+0x330>)
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	43db      	mvns	r3, r3
 800df88:	69ba      	ldr	r2, [r7, #24]
 800df8a:	4013      	ands	r3, r2
 800df8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800df9a:	69ba      	ldr	r2, [r7, #24]
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800dfa2:	4a1c      	ldr	r2, [pc, #112]	; (800e014 <HAL_GPIO_Init+0x330>)
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800dfa8:	4b1a      	ldr	r3, [pc, #104]	; (800e014 <HAL_GPIO_Init+0x330>)
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	43db      	mvns	r3, r3
 800dfb2:	69ba      	ldr	r2, [r7, #24]
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d003      	beq.n	800dfcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dfcc:	4a11      	ldr	r2, [pc, #68]	; (800e014 <HAL_GPIO_Init+0x330>)
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	61fb      	str	r3, [r7, #28]
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	2b0f      	cmp	r3, #15
 800dfdc:	f67f ae90 	bls.w	800dd00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	3724      	adds	r7, #36	; 0x24
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	40023800 	.word	0x40023800
 800dff0:	40013800 	.word	0x40013800
 800dff4:	40020000 	.word	0x40020000
 800dff8:	40020400 	.word	0x40020400
 800dffc:	40020800 	.word	0x40020800
 800e000:	40020c00 	.word	0x40020c00
 800e004:	40021000 	.word	0x40021000
 800e008:	40021400 	.word	0x40021400
 800e00c:	40021800 	.word	0x40021800
 800e010:	40021c00 	.word	0x40021c00
 800e014:	40013c00 	.word	0x40013c00

0800e018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	691a      	ldr	r2, [r3, #16]
 800e028:	887b      	ldrh	r3, [r7, #2]
 800e02a:	4013      	ands	r3, r2
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e030:	2301      	movs	r3, #1
 800e032:	73fb      	strb	r3, [r7, #15]
 800e034:	e001      	b.n	800e03a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e036:	2300      	movs	r3, #0
 800e038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	460b      	mov	r3, r1
 800e052:	807b      	strh	r3, [r7, #2]
 800e054:	4613      	mov	r3, r2
 800e056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e058:	787b      	ldrb	r3, [r7, #1]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d003      	beq.n	800e066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e05e:	887a      	ldrh	r2, [r7, #2]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e064:	e003      	b.n	800e06e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e066:	887b      	ldrh	r3, [r7, #2]
 800e068:	041a      	lsls	r2, r3, #16
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	619a      	str	r2, [r3, #24]
}
 800e06e:	bf00      	nop
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr
	...

0800e07c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d101      	bne.n	800e08e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e11f      	b.n	800e2ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e094:	b2db      	uxtb	r3, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d106      	bne.n	800e0a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7fd fea0 	bl	800bde8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2224      	movs	r2, #36	; 0x24
 800e0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f022 0201 	bic.w	r2, r2, #1
 800e0be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e0ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e0de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800e0e0:	f001 f820 	bl	800f124 <HAL_RCC_GetPCLK1Freq>
 800e0e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	4a7b      	ldr	r2, [pc, #492]	; (800e2d8 <HAL_I2C_Init+0x25c>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d807      	bhi.n	800e100 <HAL_I2C_Init+0x84>
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	4a7a      	ldr	r2, [pc, #488]	; (800e2dc <HAL_I2C_Init+0x260>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	bf94      	ite	ls
 800e0f8:	2301      	movls	r3, #1
 800e0fa:	2300      	movhi	r3, #0
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	e006      	b.n	800e10e <HAL_I2C_Init+0x92>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	4a77      	ldr	r2, [pc, #476]	; (800e2e0 <HAL_I2C_Init+0x264>)
 800e104:	4293      	cmp	r3, r2
 800e106:	bf94      	ite	ls
 800e108:	2301      	movls	r3, #1
 800e10a:	2300      	movhi	r3, #0
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e0db      	b.n	800e2ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	4a72      	ldr	r2, [pc, #456]	; (800e2e4 <HAL_I2C_Init+0x268>)
 800e11a:	fba2 2303 	umull	r2, r3, r2, r3
 800e11e:	0c9b      	lsrs	r3, r3, #18
 800e120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	430a      	orrs	r2, r1
 800e134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6a1b      	ldr	r3, [r3, #32]
 800e13c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	4a64      	ldr	r2, [pc, #400]	; (800e2d8 <HAL_I2C_Init+0x25c>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d802      	bhi.n	800e150 <HAL_I2C_Init+0xd4>
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	3301      	adds	r3, #1
 800e14e:	e009      	b.n	800e164 <HAL_I2C_Init+0xe8>
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e156:	fb02 f303 	mul.w	r3, r2, r3
 800e15a:	4a63      	ldr	r2, [pc, #396]	; (800e2e8 <HAL_I2C_Init+0x26c>)
 800e15c:	fba2 2303 	umull	r2, r3, r2, r3
 800e160:	099b      	lsrs	r3, r3, #6
 800e162:	3301      	adds	r3, #1
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	6812      	ldr	r2, [r2, #0]
 800e168:	430b      	orrs	r3, r1
 800e16a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	69db      	ldr	r3, [r3, #28]
 800e172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800e176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	4956      	ldr	r1, [pc, #344]	; (800e2d8 <HAL_I2C_Init+0x25c>)
 800e180:	428b      	cmp	r3, r1
 800e182:	d80d      	bhi.n	800e1a0 <HAL_I2C_Init+0x124>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	1e59      	subs	r1, r3, #1
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e192:	3301      	adds	r3, #1
 800e194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e198:	2b04      	cmp	r3, #4
 800e19a:	bf38      	it	cc
 800e19c:	2304      	movcc	r3, #4
 800e19e:	e04f      	b.n	800e240 <HAL_I2C_Init+0x1c4>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d111      	bne.n	800e1cc <HAL_I2C_Init+0x150>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	1e58      	subs	r0, r3, #1
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6859      	ldr	r1, [r3, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	440b      	add	r3, r1
 800e1b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	bf0c      	ite	eq
 800e1c4:	2301      	moveq	r3, #1
 800e1c6:	2300      	movne	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	e012      	b.n	800e1f2 <HAL_I2C_Init+0x176>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	1e58      	subs	r0, r3, #1
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6859      	ldr	r1, [r3, #4]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	440b      	add	r3, r1
 800e1da:	0099      	lsls	r1, r3, #2
 800e1dc:	440b      	add	r3, r1
 800e1de:	fbb0 f3f3 	udiv	r3, r0, r3
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	bf0c      	ite	eq
 800e1ec:	2301      	moveq	r3, #1
 800e1ee:	2300      	movne	r3, #0
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <HAL_I2C_Init+0x17e>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e022      	b.n	800e240 <HAL_I2C_Init+0x1c4>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10e      	bne.n	800e220 <HAL_I2C_Init+0x1a4>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	1e58      	subs	r0, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6859      	ldr	r1, [r3, #4]
 800e20a:	460b      	mov	r3, r1
 800e20c:	005b      	lsls	r3, r3, #1
 800e20e:	440b      	add	r3, r1
 800e210:	fbb0 f3f3 	udiv	r3, r0, r3
 800e214:	3301      	adds	r3, #1
 800e216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e21a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e21e:	e00f      	b.n	800e240 <HAL_I2C_Init+0x1c4>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	1e58      	subs	r0, r3, #1
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6859      	ldr	r1, [r3, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	440b      	add	r3, r1
 800e22e:	0099      	lsls	r1, r3, #2
 800e230:	440b      	add	r3, r1
 800e232:	fbb0 f3f3 	udiv	r3, r0, r3
 800e236:	3301      	adds	r3, #1
 800e238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e23c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e240:	6879      	ldr	r1, [r7, #4]
 800e242:	6809      	ldr	r1, [r1, #0]
 800e244:	4313      	orrs	r3, r2
 800e246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	69da      	ldr	r2, [r3, #28]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	431a      	orrs	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	430a      	orrs	r2, r1
 800e262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800e26e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	6911      	ldr	r1, [r2, #16]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	68d2      	ldr	r2, [r2, #12]
 800e27a:	4311      	orrs	r1, r2
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	6812      	ldr	r2, [r2, #0]
 800e280:	430b      	orrs	r3, r1
 800e282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	695a      	ldr	r2, [r3, #20]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	431a      	orrs	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	430a      	orrs	r2, r1
 800e29e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0201 	orr.w	r2, r2, #1
 800e2ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2220      	movs	r2, #32
 800e2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	000186a0 	.word	0x000186a0
 800e2dc:	001e847f 	.word	0x001e847f
 800e2e0:	003d08ff 	.word	0x003d08ff
 800e2e4:	431bde83 	.word	0x431bde83
 800e2e8:	10624dd3 	.word	0x10624dd3

0800e2ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af02      	add	r7, sp, #8
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	607a      	str	r2, [r7, #4]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	817b      	strh	r3, [r7, #10]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e300:	f7fe f960 	bl	800c5c4 <HAL_GetTick>
 800e304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	2b20      	cmp	r3, #32
 800e310:	f040 80e0 	bne.w	800e4d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	2319      	movs	r3, #25
 800e31a:	2201      	movs	r2, #1
 800e31c:	4970      	ldr	r1, [pc, #448]	; (800e4e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f000 f964 	bl	800e5ec <I2C_WaitOnFlagUntilTimeout>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800e32a:	2302      	movs	r3, #2
 800e32c:	e0d3      	b.n	800e4d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e334:	2b01      	cmp	r3, #1
 800e336:	d101      	bne.n	800e33c <HAL_I2C_Master_Transmit+0x50>
 800e338:	2302      	movs	r3, #2
 800e33a:	e0cc      	b.n	800e4d6 <HAL_I2C_Master_Transmit+0x1ea>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0301 	and.w	r3, r3, #1
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d007      	beq.n	800e362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f042 0201 	orr.w	r2, r2, #1
 800e360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2221      	movs	r2, #33	; 0x21
 800e376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2210      	movs	r2, #16
 800e37e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	893a      	ldrh	r2, [r7, #8]
 800e392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e398:	b29a      	uxth	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	4a50      	ldr	r2, [pc, #320]	; (800e4e4 <HAL_I2C_Master_Transmit+0x1f8>)
 800e3a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800e3a4:	8979      	ldrh	r1, [r7, #10]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	6a3a      	ldr	r2, [r7, #32]
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f000 f89c 	bl	800e4e8 <I2C_MasterRequestWrite>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e08d      	b.n	800e4d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	613b      	str	r3, [r7, #16]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	695b      	ldr	r3, [r3, #20]
 800e3c4:	613b      	str	r3, [r7, #16]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	613b      	str	r3, [r7, #16]
 800e3ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800e3d0:	e066      	b.n	800e4a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	6a39      	ldr	r1, [r7, #32]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 f9de 	bl	800e798 <I2C_WaitOnTXEFlagUntilTimeout>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00d      	beq.n	800e3fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e6:	2b04      	cmp	r3, #4
 800e3e8:	d107      	bne.n	800e3fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e06b      	b.n	800e4d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e402:	781a      	ldrb	r2, [r3, #0]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3b01      	subs	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e426:	3b01      	subs	r3, #1
 800e428:	b29a      	uxth	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	f003 0304 	and.w	r3, r3, #4
 800e438:	2b04      	cmp	r3, #4
 800e43a:	d11b      	bne.n	800e474 <HAL_I2C_Master_Transmit+0x188>
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e440:	2b00      	cmp	r3, #0
 800e442:	d017      	beq.n	800e474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e448:	781a      	ldrb	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e454:	1c5a      	adds	r2, r3, #1
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e45e:	b29b      	uxth	r3, r3
 800e460:	3b01      	subs	r3, #1
 800e462:	b29a      	uxth	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e46c:	3b01      	subs	r3, #1
 800e46e:	b29a      	uxth	r2, r3
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e474:	697a      	ldr	r2, [r7, #20]
 800e476:	6a39      	ldr	r1, [r7, #32]
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f000 f9ce 	bl	800e81a <I2C_WaitOnBTFFlagUntilTimeout>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00d      	beq.n	800e4a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e488:	2b04      	cmp	r3, #4
 800e48a:	d107      	bne.n	800e49c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e49a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	e01a      	b.n	800e4d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d194      	bne.n	800e3d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2220      	movs	r2, #32
 800e4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e000      	b.n	800e4d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800e4d4:	2302      	movs	r3, #2
  }
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	00100002 	.word	0x00100002
 800e4e4:	ffff0000 	.word	0xffff0000

0800e4e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	607a      	str	r2, [r7, #4]
 800e4f2:	603b      	str	r3, [r7, #0]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	2b08      	cmp	r3, #8
 800e502:	d006      	beq.n	800e512 <I2C_MasterRequestWrite+0x2a>
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d003      	beq.n	800e512 <I2C_MasterRequestWrite+0x2a>
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e510:	d108      	bne.n	800e524 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	e00b      	b.n	800e53c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e528:	2b12      	cmp	r3, #18
 800e52a:	d107      	bne.n	800e53c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e53a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f000 f84f 	bl	800e5ec <I2C_WaitOnFlagUntilTimeout>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d00d      	beq.n	800e570 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e562:	d103      	bne.n	800e56c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e56a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e56c:	2303      	movs	r3, #3
 800e56e:	e035      	b.n	800e5dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e578:	d108      	bne.n	800e58c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e57a:	897b      	ldrh	r3, [r7, #10]
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	461a      	mov	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e588:	611a      	str	r2, [r3, #16]
 800e58a:	e01b      	b.n	800e5c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e58c:	897b      	ldrh	r3, [r7, #10]
 800e58e:	11db      	asrs	r3, r3, #7
 800e590:	b2db      	uxtb	r3, r3
 800e592:	f003 0306 	and.w	r3, r3, #6
 800e596:	b2db      	uxtb	r3, r3
 800e598:	f063 030f 	orn	r3, r3, #15
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	490e      	ldr	r1, [pc, #56]	; (800e5e4 <I2C_MasterRequestWrite+0xfc>)
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f000 f875 	bl	800e69a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e010      	b.n	800e5dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e5ba:	897b      	ldrh	r3, [r7, #10]
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	4907      	ldr	r1, [pc, #28]	; (800e5e8 <I2C_MasterRequestWrite+0x100>)
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f000 f865 	bl	800e69a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e000      	b.n	800e5dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	00010008 	.word	0x00010008
 800e5e8:	00010002 	.word	0x00010002

0800e5ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	603b      	str	r3, [r7, #0]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5fc:	e025      	b.n	800e64a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e604:	d021      	beq.n	800e64a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e606:	f7fd ffdd 	bl	800c5c4 <HAL_GetTick>
 800e60a:	4602      	mov	r2, r0
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d302      	bcc.n	800e61c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d116      	bne.n	800e64a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2220      	movs	r2, #32
 800e626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e636:	f043 0220 	orr.w	r2, r3, #32
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e023      	b.n	800e692 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	0c1b      	lsrs	r3, r3, #16
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b01      	cmp	r3, #1
 800e652:	d10d      	bne.n	800e670 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	43da      	mvns	r2, r3
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	4013      	ands	r3, r2
 800e660:	b29b      	uxth	r3, r3
 800e662:	2b00      	cmp	r3, #0
 800e664:	bf0c      	ite	eq
 800e666:	2301      	moveq	r3, #1
 800e668:	2300      	movne	r3, #0
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	461a      	mov	r2, r3
 800e66e:	e00c      	b.n	800e68a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	43da      	mvns	r2, r3
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	4013      	ands	r3, r2
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	bf0c      	ite	eq
 800e682:	2301      	moveq	r3, #1
 800e684:	2300      	movne	r3, #0
 800e686:	b2db      	uxtb	r3, r3
 800e688:	461a      	mov	r2, r3
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d0b6      	beq.n	800e5fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	60b9      	str	r1, [r7, #8]
 800e6a4:	607a      	str	r2, [r7, #4]
 800e6a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e6a8:	e051      	b.n	800e74e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	695b      	ldr	r3, [r3, #20]
 800e6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6b8:	d123      	bne.n	800e702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e6d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2220      	movs	r2, #32
 800e6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ee:	f043 0204 	orr.w	r2, r3, #4
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e046      	b.n	800e790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e708:	d021      	beq.n	800e74e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e70a:	f7fd ff5b 	bl	800c5c4 <HAL_GetTick>
 800e70e:	4602      	mov	r2, r0
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	429a      	cmp	r2, r3
 800e718:	d302      	bcc.n	800e720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d116      	bne.n	800e74e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2220      	movs	r2, #32
 800e72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e73a:	f043 0220 	orr.w	r2, r3, #32
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	e020      	b.n	800e790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	0c1b      	lsrs	r3, r3, #16
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b01      	cmp	r3, #1
 800e756:	d10c      	bne.n	800e772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	695b      	ldr	r3, [r3, #20]
 800e75e:	43da      	mvns	r2, r3
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4013      	ands	r3, r2
 800e764:	b29b      	uxth	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	bf14      	ite	ne
 800e76a:	2301      	movne	r3, #1
 800e76c:	2300      	moveq	r3, #0
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	e00b      	b.n	800e78a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	43da      	mvns	r2, r3
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	4013      	ands	r3, r2
 800e77e:	b29b      	uxth	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	bf14      	ite	ne
 800e784:	2301      	movne	r3, #1
 800e786:	2300      	moveq	r3, #0
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d18d      	bne.n	800e6aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e7a4:	e02d      	b.n	800e802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f000 f878 	bl	800e89c <I2C_IsAcknowledgeFailed>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e02d      	b.n	800e812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7bc:	d021      	beq.n	800e802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7be:	f7fd ff01 	bl	800c5c4 <HAL_GetTick>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	68ba      	ldr	r2, [r7, #8]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d302      	bcc.n	800e7d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d116      	bne.n	800e802 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2220      	movs	r2, #32
 800e7de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ee:	f043 0220 	orr.w	r2, r3, #32
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e007      	b.n	800e812 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e80c:	2b80      	cmp	r3, #128	; 0x80
 800e80e:	d1ca      	bne.n	800e7a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b084      	sub	sp, #16
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e826:	e02d      	b.n	800e884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f000 f837 	bl	800e89c <I2C_IsAcknowledgeFailed>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e834:	2301      	movs	r3, #1
 800e836:	e02d      	b.n	800e894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83e:	d021      	beq.n	800e884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e840:	f7fd fec0 	bl	800c5c4 <HAL_GetTick>
 800e844:	4602      	mov	r2, r0
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d302      	bcc.n	800e856 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d116      	bne.n	800e884 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2220      	movs	r2, #32
 800e860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e870:	f043 0220 	orr.w	r2, r3, #32
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e007      	b.n	800e894 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	695b      	ldr	r3, [r3, #20]
 800e88a:	f003 0304 	and.w	r3, r3, #4
 800e88e:	2b04      	cmp	r3, #4
 800e890:	d1ca      	bne.n	800e828 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	695b      	ldr	r3, [r3, #20]
 800e8aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8b2:	d11b      	bne.n	800e8ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e8bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2220      	movs	r2, #32
 800e8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d8:	f043 0204 	orr.w	r2, r3, #4
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e000      	b.n	800e8ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
	...

0800e8fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b086      	sub	sp, #24
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e25b      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	d075      	beq.n	800ea06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e91a:	4ba3      	ldr	r3, [pc, #652]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	f003 030c 	and.w	r3, r3, #12
 800e922:	2b04      	cmp	r3, #4
 800e924:	d00c      	beq.n	800e940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e926:	4ba0      	ldr	r3, [pc, #640]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e92e:	2b08      	cmp	r3, #8
 800e930:	d112      	bne.n	800e958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e932:	4b9d      	ldr	r3, [pc, #628]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e93a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e93e:	d10b      	bne.n	800e958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e940:	4b99      	ldr	r3, [pc, #612]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d05b      	beq.n	800ea04 <HAL_RCC_OscConfig+0x108>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d157      	bne.n	800ea04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e954:	2301      	movs	r3, #1
 800e956:	e236      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e960:	d106      	bne.n	800e970 <HAL_RCC_OscConfig+0x74>
 800e962:	4b91      	ldr	r3, [pc, #580]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a90      	ldr	r2, [pc, #576]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e96c:	6013      	str	r3, [r2, #0]
 800e96e:	e01d      	b.n	800e9ac <HAL_RCC_OscConfig+0xb0>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e978:	d10c      	bne.n	800e994 <HAL_RCC_OscConfig+0x98>
 800e97a:	4b8b      	ldr	r3, [pc, #556]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a8a      	ldr	r2, [pc, #552]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	4b88      	ldr	r3, [pc, #544]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a87      	ldr	r2, [pc, #540]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e98c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e990:	6013      	str	r3, [r2, #0]
 800e992:	e00b      	b.n	800e9ac <HAL_RCC_OscConfig+0xb0>
 800e994:	4b84      	ldr	r3, [pc, #528]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a83      	ldr	r2, [pc, #524]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e99a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e99e:	6013      	str	r3, [r2, #0]
 800e9a0:	4b81      	ldr	r3, [pc, #516]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a80      	ldr	r2, [pc, #512]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e9a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e9aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d013      	beq.n	800e9dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9b4:	f7fd fe06 	bl	800c5c4 <HAL_GetTick>
 800e9b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9ba:	e008      	b.n	800e9ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9bc:	f7fd fe02 	bl	800c5c4 <HAL_GetTick>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	2b64      	cmp	r3, #100	; 0x64
 800e9c8:	d901      	bls.n	800e9ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	e1fb      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9ce:	4b76      	ldr	r3, [pc, #472]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d0f0      	beq.n	800e9bc <HAL_RCC_OscConfig+0xc0>
 800e9da:	e014      	b.n	800ea06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9dc:	f7fd fdf2 	bl	800c5c4 <HAL_GetTick>
 800e9e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e9e2:	e008      	b.n	800e9f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9e4:	f7fd fdee 	bl	800c5c4 <HAL_GetTick>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	2b64      	cmp	r3, #100	; 0x64
 800e9f0:	d901      	bls.n	800e9f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	e1e7      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e9f6:	4b6c      	ldr	r3, [pc, #432]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1f0      	bne.n	800e9e4 <HAL_RCC_OscConfig+0xe8>
 800ea02:	e000      	b.n	800ea06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f003 0302 	and.w	r3, r3, #2
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d063      	beq.n	800eada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ea12:	4b65      	ldr	r3, [pc, #404]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	f003 030c 	and.w	r3, r3, #12
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00b      	beq.n	800ea36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea1e:	4b62      	ldr	r3, [pc, #392]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ea26:	2b08      	cmp	r3, #8
 800ea28:	d11c      	bne.n	800ea64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea2a:	4b5f      	ldr	r3, [pc, #380]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d116      	bne.n	800ea64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea36:	4b5c      	ldr	r3, [pc, #368]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f003 0302 	and.w	r3, r3, #2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d005      	beq.n	800ea4e <HAL_RCC_OscConfig+0x152>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d001      	beq.n	800ea4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e1bb      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea4e:	4b56      	ldr	r3, [pc, #344]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	4952      	ldr	r1, [pc, #328]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea62:	e03a      	b.n	800eada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d020      	beq.n	800eaae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea6c:	4b4f      	ldr	r3, [pc, #316]	; (800ebac <HAL_RCC_OscConfig+0x2b0>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea72:	f7fd fda7 	bl	800c5c4 <HAL_GetTick>
 800ea76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea78:	e008      	b.n	800ea8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea7a:	f7fd fda3 	bl	800c5c4 <HAL_GetTick>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d901      	bls.n	800ea8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e19c      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea8c:	4b46      	ldr	r3, [pc, #280]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 0302 	and.w	r3, r3, #2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0f0      	beq.n	800ea7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea98:	4b43      	ldr	r3, [pc, #268]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	00db      	lsls	r3, r3, #3
 800eaa6:	4940      	ldr	r1, [pc, #256]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	600b      	str	r3, [r1, #0]
 800eaac:	e015      	b.n	800eada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eaae:	4b3f      	ldr	r3, [pc, #252]	; (800ebac <HAL_RCC_OscConfig+0x2b0>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eab4:	f7fd fd86 	bl	800c5c4 <HAL_GetTick>
 800eab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eaba:	e008      	b.n	800eace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eabc:	f7fd fd82 	bl	800c5c4 <HAL_GetTick>
 800eac0:	4602      	mov	r2, r0
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d901      	bls.n	800eace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800eaca:	2303      	movs	r3, #3
 800eacc:	e17b      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eace:	4b36      	ldr	r3, [pc, #216]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f003 0302 	and.w	r3, r3, #2
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1f0      	bne.n	800eabc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0308 	and.w	r3, r3, #8
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d030      	beq.n	800eb48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d016      	beq.n	800eb1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eaee:	4b30      	ldr	r3, [pc, #192]	; (800ebb0 <HAL_RCC_OscConfig+0x2b4>)
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eaf4:	f7fd fd66 	bl	800c5c4 <HAL_GetTick>
 800eaf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eafa:	e008      	b.n	800eb0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eafc:	f7fd fd62 	bl	800c5c4 <HAL_GetTick>
 800eb00:	4602      	mov	r2, r0
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d901      	bls.n	800eb0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	e15b      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb0e:	4b26      	ldr	r3, [pc, #152]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eb10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb12:	f003 0302 	and.w	r3, r3, #2
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0f0      	beq.n	800eafc <HAL_RCC_OscConfig+0x200>
 800eb1a:	e015      	b.n	800eb48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb1c:	4b24      	ldr	r3, [pc, #144]	; (800ebb0 <HAL_RCC_OscConfig+0x2b4>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb22:	f7fd fd4f 	bl	800c5c4 <HAL_GetTick>
 800eb26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb28:	e008      	b.n	800eb3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb2a:	f7fd fd4b 	bl	800c5c4 <HAL_GetTick>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	2b02      	cmp	r3, #2
 800eb36:	d901      	bls.n	800eb3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800eb38:	2303      	movs	r3, #3
 800eb3a:	e144      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb3c:	4b1a      	ldr	r3, [pc, #104]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eb3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb40:	f003 0302 	and.w	r3, r3, #2
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1f0      	bne.n	800eb2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f003 0304 	and.w	r3, r3, #4
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 80a0 	beq.w	800ec96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb56:	2300      	movs	r3, #0
 800eb58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb5a:	4b13      	ldr	r3, [pc, #76]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10f      	bne.n	800eb86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb66:	2300      	movs	r3, #0
 800eb68:	60bb      	str	r3, [r7, #8]
 800eb6a:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb6e:	4a0e      	ldr	r2, [pc, #56]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eb70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb74:	6413      	str	r3, [r2, #64]	; 0x40
 800eb76:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <HAL_RCC_OscConfig+0x2ac>)
 800eb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb7e:	60bb      	str	r3, [r7, #8]
 800eb80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eb82:	2301      	movs	r3, #1
 800eb84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb86:	4b0b      	ldr	r3, [pc, #44]	; (800ebb4 <HAL_RCC_OscConfig+0x2b8>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d121      	bne.n	800ebd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eb92:	4b08      	ldr	r3, [pc, #32]	; (800ebb4 <HAL_RCC_OscConfig+0x2b8>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a07      	ldr	r2, [pc, #28]	; (800ebb4 <HAL_RCC_OscConfig+0x2b8>)
 800eb98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eb9e:	f7fd fd11 	bl	800c5c4 <HAL_GetTick>
 800eba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eba4:	e011      	b.n	800ebca <HAL_RCC_OscConfig+0x2ce>
 800eba6:	bf00      	nop
 800eba8:	40023800 	.word	0x40023800
 800ebac:	42470000 	.word	0x42470000
 800ebb0:	42470e80 	.word	0x42470e80
 800ebb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebb8:	f7fd fd04 	bl	800c5c4 <HAL_GetTick>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	2b02      	cmp	r3, #2
 800ebc4:	d901      	bls.n	800ebca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	e0fd      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebca:	4b81      	ldr	r3, [pc, #516]	; (800edd0 <HAL_RCC_OscConfig+0x4d4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d0f0      	beq.n	800ebb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d106      	bne.n	800ebec <HAL_RCC_OscConfig+0x2f0>
 800ebde:	4b7d      	ldr	r3, [pc, #500]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ebe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebe2:	4a7c      	ldr	r2, [pc, #496]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ebe4:	f043 0301 	orr.w	r3, r3, #1
 800ebe8:	6713      	str	r3, [r2, #112]	; 0x70
 800ebea:	e01c      	b.n	800ec26 <HAL_RCC_OscConfig+0x32a>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	2b05      	cmp	r3, #5
 800ebf2:	d10c      	bne.n	800ec0e <HAL_RCC_OscConfig+0x312>
 800ebf4:	4b77      	ldr	r3, [pc, #476]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ebf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf8:	4a76      	ldr	r2, [pc, #472]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ebfa:	f043 0304 	orr.w	r3, r3, #4
 800ebfe:	6713      	str	r3, [r2, #112]	; 0x70
 800ec00:	4b74      	ldr	r3, [pc, #464]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec04:	4a73      	ldr	r2, [pc, #460]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	6713      	str	r3, [r2, #112]	; 0x70
 800ec0c:	e00b      	b.n	800ec26 <HAL_RCC_OscConfig+0x32a>
 800ec0e:	4b71      	ldr	r3, [pc, #452]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec12:	4a70      	ldr	r2, [pc, #448]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec14:	f023 0301 	bic.w	r3, r3, #1
 800ec18:	6713      	str	r3, [r2, #112]	; 0x70
 800ec1a:	4b6e      	ldr	r3, [pc, #440]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1e:	4a6d      	ldr	r2, [pc, #436]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec20:	f023 0304 	bic.w	r3, r3, #4
 800ec24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d015      	beq.n	800ec5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec2e:	f7fd fcc9 	bl	800c5c4 <HAL_GetTick>
 800ec32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec34:	e00a      	b.n	800ec4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec36:	f7fd fcc5 	bl	800c5c4 <HAL_GetTick>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d901      	bls.n	800ec4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	e0bc      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec4c:	4b61      	ldr	r3, [pc, #388]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec50:	f003 0302 	and.w	r3, r3, #2
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0ee      	beq.n	800ec36 <HAL_RCC_OscConfig+0x33a>
 800ec58:	e014      	b.n	800ec84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec5a:	f7fd fcb3 	bl	800c5c4 <HAL_GetTick>
 800ec5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec60:	e00a      	b.n	800ec78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec62:	f7fd fcaf 	bl	800c5c4 <HAL_GetTick>
 800ec66:	4602      	mov	r2, r0
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d901      	bls.n	800ec78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ec74:	2303      	movs	r3, #3
 800ec76:	e0a6      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec78:	4b56      	ldr	r3, [pc, #344]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec7c:	f003 0302 	and.w	r3, r3, #2
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1ee      	bne.n	800ec62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d105      	bne.n	800ec96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec8a:	4b52      	ldr	r3, [pc, #328]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec8e:	4a51      	ldr	r2, [pc, #324]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ec90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	699b      	ldr	r3, [r3, #24]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	f000 8092 	beq.w	800edc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eca0:	4b4c      	ldr	r3, [pc, #304]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	f003 030c 	and.w	r3, r3, #12
 800eca8:	2b08      	cmp	r3, #8
 800ecaa:	d05c      	beq.n	800ed66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d141      	bne.n	800ed38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecb4:	4b48      	ldr	r3, [pc, #288]	; (800edd8 <HAL_RCC_OscConfig+0x4dc>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecba:	f7fd fc83 	bl	800c5c4 <HAL_GetTick>
 800ecbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecc0:	e008      	b.n	800ecd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecc2:	f7fd fc7f 	bl	800c5c4 <HAL_GetTick>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d901      	bls.n	800ecd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e078      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecd4:	4b3f      	ldr	r3, [pc, #252]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1f0      	bne.n	800ecc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	69da      	ldr	r2, [r3, #28]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a1b      	ldr	r3, [r3, #32]
 800ece8:	431a      	orrs	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecee:	019b      	lsls	r3, r3, #6
 800ecf0:	431a      	orrs	r2, r3
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf6:	085b      	lsrs	r3, r3, #1
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	041b      	lsls	r3, r3, #16
 800ecfc:	431a      	orrs	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed02:	061b      	lsls	r3, r3, #24
 800ed04:	4933      	ldr	r1, [pc, #204]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ed06:	4313      	orrs	r3, r2
 800ed08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed0a:	4b33      	ldr	r3, [pc, #204]	; (800edd8 <HAL_RCC_OscConfig+0x4dc>)
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed10:	f7fd fc58 	bl	800c5c4 <HAL_GetTick>
 800ed14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed16:	e008      	b.n	800ed2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed18:	f7fd fc54 	bl	800c5c4 <HAL_GetTick>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d901      	bls.n	800ed2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e04d      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed2a:	4b2a      	ldr	r3, [pc, #168]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d0f0      	beq.n	800ed18 <HAL_RCC_OscConfig+0x41c>
 800ed36:	e045      	b.n	800edc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed38:	4b27      	ldr	r3, [pc, #156]	; (800edd8 <HAL_RCC_OscConfig+0x4dc>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed3e:	f7fd fc41 	bl	800c5c4 <HAL_GetTick>
 800ed42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed44:	e008      	b.n	800ed58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed46:	f7fd fc3d 	bl	800c5c4 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d901      	bls.n	800ed58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e036      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed58:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1f0      	bne.n	800ed46 <HAL_RCC_OscConfig+0x44a>
 800ed64:	e02e      	b.n	800edc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d101      	bne.n	800ed72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e029      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ed72:	4b18      	ldr	r3, [pc, #96]	; (800edd4 <HAL_RCC_OscConfig+0x4d8>)
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d11c      	bne.n	800edc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d115      	bne.n	800edc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d10d      	bne.n	800edc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800edae:	429a      	cmp	r2, r3
 800edb0:	d106      	bne.n	800edc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d001      	beq.n	800edc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	e000      	b.n	800edc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	40007000 	.word	0x40007000
 800edd4:	40023800 	.word	0x40023800
 800edd8:	42470060 	.word	0x42470060

0800eddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	e0cc      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800edf0:	4b68      	ldr	r3, [pc, #416]	; (800ef94 <HAL_RCC_ClockConfig+0x1b8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 030f 	and.w	r3, r3, #15
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d90c      	bls.n	800ee18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edfe:	4b65      	ldr	r3, [pc, #404]	; (800ef94 <HAL_RCC_ClockConfig+0x1b8>)
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee06:	4b63      	ldr	r3, [pc, #396]	; (800ef94 <HAL_RCC_ClockConfig+0x1b8>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f003 030f 	and.w	r3, r3, #15
 800ee0e:	683a      	ldr	r2, [r7, #0]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d001      	beq.n	800ee18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e0b8      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f003 0302 	and.w	r3, r3, #2
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d020      	beq.n	800ee66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f003 0304 	and.w	r3, r3, #4
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d005      	beq.n	800ee3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ee30:	4b59      	ldr	r3, [pc, #356]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	4a58      	ldr	r2, [pc, #352]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ee3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f003 0308 	and.w	r3, r3, #8
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d005      	beq.n	800ee54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ee48:	4b53      	ldr	r3, [pc, #332]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	4a52      	ldr	r2, [pc, #328]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ee52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee54:	4b50      	ldr	r3, [pc, #320]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	494d      	ldr	r1, [pc, #308]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee62:	4313      	orrs	r3, r2
 800ee64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f003 0301 	and.w	r3, r3, #1
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d044      	beq.n	800eefc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d107      	bne.n	800ee8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee7a:	4b47      	ldr	r3, [pc, #284]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d119      	bne.n	800eeba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee86:	2301      	movs	r3, #1
 800ee88:	e07f      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	d003      	beq.n	800ee9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	d107      	bne.n	800eeaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee9a:	4b3f      	ldr	r3, [pc, #252]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d109      	bne.n	800eeba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e06f      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eeaa:	4b3b      	ldr	r3, [pc, #236]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f003 0302 	and.w	r3, r3, #2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d101      	bne.n	800eeba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e067      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eeba:	4b37      	ldr	r3, [pc, #220]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	f023 0203 	bic.w	r2, r3, #3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	4934      	ldr	r1, [pc, #208]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800eec8:	4313      	orrs	r3, r2
 800eeca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800eecc:	f7fd fb7a 	bl	800c5c4 <HAL_GetTick>
 800eed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eed2:	e00a      	b.n	800eeea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eed4:	f7fd fb76 	bl	800c5c4 <HAL_GetTick>
 800eed8:	4602      	mov	r2, r0
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	f241 3288 	movw	r2, #5000	; 0x1388
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d901      	bls.n	800eeea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800eee6:	2303      	movs	r3, #3
 800eee8:	e04f      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eeea:	4b2b      	ldr	r3, [pc, #172]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f003 020c 	and.w	r2, r3, #12
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d1eb      	bne.n	800eed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eefc:	4b25      	ldr	r3, [pc, #148]	; (800ef94 <HAL_RCC_ClockConfig+0x1b8>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f003 030f 	and.w	r3, r3, #15
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d20c      	bcs.n	800ef24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef0a:	4b22      	ldr	r3, [pc, #136]	; (800ef94 <HAL_RCC_ClockConfig+0x1b8>)
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	b2d2      	uxtb	r2, r2
 800ef10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef12:	4b20      	ldr	r3, [pc, #128]	; (800ef94 <HAL_RCC_ClockConfig+0x1b8>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d001      	beq.n	800ef24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e032      	b.n	800ef8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f003 0304 	and.w	r3, r3, #4
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d008      	beq.n	800ef42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ef30:	4b19      	ldr	r3, [pc, #100]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	4916      	ldr	r1, [pc, #88]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f003 0308 	and.w	r3, r3, #8
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d009      	beq.n	800ef62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ef4e:	4b12      	ldr	r3, [pc, #72]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	691b      	ldr	r3, [r3, #16]
 800ef5a:	00db      	lsls	r3, r3, #3
 800ef5c:	490e      	ldr	r1, [pc, #56]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ef62:	f000 f821 	bl	800efa8 <HAL_RCC_GetSysClockFreq>
 800ef66:	4601      	mov	r1, r0
 800ef68:	4b0b      	ldr	r3, [pc, #44]	; (800ef98 <HAL_RCC_ClockConfig+0x1bc>)
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	091b      	lsrs	r3, r3, #4
 800ef6e:	f003 030f 	and.w	r3, r3, #15
 800ef72:	4a0a      	ldr	r2, [pc, #40]	; (800ef9c <HAL_RCC_ClockConfig+0x1c0>)
 800ef74:	5cd3      	ldrb	r3, [r2, r3]
 800ef76:	fa21 f303 	lsr.w	r3, r1, r3
 800ef7a:	4a09      	ldr	r2, [pc, #36]	; (800efa0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ef7e:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <HAL_RCC_ClockConfig+0x1c8>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fd fada 	bl	800c53c <HAL_InitTick>

  return HAL_OK;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	40023c00 	.word	0x40023c00
 800ef98:	40023800 	.word	0x40023800
 800ef9c:	08014268 	.word	0x08014268
 800efa0:	2000000c 	.word	0x2000000c
 800efa4:	20000010 	.word	0x20000010

0800efa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800efa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800efae:	2300      	movs	r3, #0
 800efb0:	607b      	str	r3, [r7, #4]
 800efb2:	2300      	movs	r3, #0
 800efb4:	60fb      	str	r3, [r7, #12]
 800efb6:	2300      	movs	r3, #0
 800efb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800efba:	2300      	movs	r3, #0
 800efbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800efbe:	4b50      	ldr	r3, [pc, #320]	; (800f100 <HAL_RCC_GetSysClockFreq+0x158>)
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	f003 030c 	and.w	r3, r3, #12
 800efc6:	2b04      	cmp	r3, #4
 800efc8:	d007      	beq.n	800efda <HAL_RCC_GetSysClockFreq+0x32>
 800efca:	2b08      	cmp	r3, #8
 800efcc:	d008      	beq.n	800efe0 <HAL_RCC_GetSysClockFreq+0x38>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f040 808d 	bne.w	800f0ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800efd4:	4b4b      	ldr	r3, [pc, #300]	; (800f104 <HAL_RCC_GetSysClockFreq+0x15c>)
 800efd6:	60bb      	str	r3, [r7, #8]
       break;
 800efd8:	e08c      	b.n	800f0f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800efda:	4b4b      	ldr	r3, [pc, #300]	; (800f108 <HAL_RCC_GetSysClockFreq+0x160>)
 800efdc:	60bb      	str	r3, [r7, #8]
      break;
 800efde:	e089      	b.n	800f0f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800efe0:	4b47      	ldr	r3, [pc, #284]	; (800f100 <HAL_RCC_GetSysClockFreq+0x158>)
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efe8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800efea:	4b45      	ldr	r3, [pc, #276]	; (800f100 <HAL_RCC_GetSysClockFreq+0x158>)
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d023      	beq.n	800f03e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eff6:	4b42      	ldr	r3, [pc, #264]	; (800f100 <HAL_RCC_GetSysClockFreq+0x158>)
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	099b      	lsrs	r3, r3, #6
 800effc:	f04f 0400 	mov.w	r4, #0
 800f000:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f004:	f04f 0200 	mov.w	r2, #0
 800f008:	ea03 0501 	and.w	r5, r3, r1
 800f00c:	ea04 0602 	and.w	r6, r4, r2
 800f010:	4a3d      	ldr	r2, [pc, #244]	; (800f108 <HAL_RCC_GetSysClockFreq+0x160>)
 800f012:	fb02 f106 	mul.w	r1, r2, r6
 800f016:	2200      	movs	r2, #0
 800f018:	fb02 f205 	mul.w	r2, r2, r5
 800f01c:	440a      	add	r2, r1
 800f01e:	493a      	ldr	r1, [pc, #232]	; (800f108 <HAL_RCC_GetSysClockFreq+0x160>)
 800f020:	fba5 0101 	umull	r0, r1, r5, r1
 800f024:	1853      	adds	r3, r2, r1
 800f026:	4619      	mov	r1, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f04f 0400 	mov.w	r4, #0
 800f02e:	461a      	mov	r2, r3
 800f030:	4623      	mov	r3, r4
 800f032:	f7f9 fd41 	bl	8008ab8 <__aeabi_uldivmod>
 800f036:	4603      	mov	r3, r0
 800f038:	460c      	mov	r4, r1
 800f03a:	60fb      	str	r3, [r7, #12]
 800f03c:	e049      	b.n	800f0d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f03e:	4b30      	ldr	r3, [pc, #192]	; (800f100 <HAL_RCC_GetSysClockFreq+0x158>)
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	099b      	lsrs	r3, r3, #6
 800f044:	f04f 0400 	mov.w	r4, #0
 800f048:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f04c:	f04f 0200 	mov.w	r2, #0
 800f050:	ea03 0501 	and.w	r5, r3, r1
 800f054:	ea04 0602 	and.w	r6, r4, r2
 800f058:	4629      	mov	r1, r5
 800f05a:	4632      	mov	r2, r6
 800f05c:	f04f 0300 	mov.w	r3, #0
 800f060:	f04f 0400 	mov.w	r4, #0
 800f064:	0154      	lsls	r4, r2, #5
 800f066:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f06a:	014b      	lsls	r3, r1, #5
 800f06c:	4619      	mov	r1, r3
 800f06e:	4622      	mov	r2, r4
 800f070:	1b49      	subs	r1, r1, r5
 800f072:	eb62 0206 	sbc.w	r2, r2, r6
 800f076:	f04f 0300 	mov.w	r3, #0
 800f07a:	f04f 0400 	mov.w	r4, #0
 800f07e:	0194      	lsls	r4, r2, #6
 800f080:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f084:	018b      	lsls	r3, r1, #6
 800f086:	1a5b      	subs	r3, r3, r1
 800f088:	eb64 0402 	sbc.w	r4, r4, r2
 800f08c:	f04f 0100 	mov.w	r1, #0
 800f090:	f04f 0200 	mov.w	r2, #0
 800f094:	00e2      	lsls	r2, r4, #3
 800f096:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f09a:	00d9      	lsls	r1, r3, #3
 800f09c:	460b      	mov	r3, r1
 800f09e:	4614      	mov	r4, r2
 800f0a0:	195b      	adds	r3, r3, r5
 800f0a2:	eb44 0406 	adc.w	r4, r4, r6
 800f0a6:	f04f 0100 	mov.w	r1, #0
 800f0aa:	f04f 0200 	mov.w	r2, #0
 800f0ae:	02a2      	lsls	r2, r4, #10
 800f0b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800f0b4:	0299      	lsls	r1, r3, #10
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	4614      	mov	r4, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	4621      	mov	r1, r4
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f04f 0400 	mov.w	r4, #0
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	4623      	mov	r3, r4
 800f0c8:	f7f9 fcf6 	bl	8008ab8 <__aeabi_uldivmod>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f0d2:	4b0b      	ldr	r3, [pc, #44]	; (800f100 <HAL_RCC_GetSysClockFreq+0x158>)
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	0c1b      	lsrs	r3, r3, #16
 800f0d8:	f003 0303 	and.w	r3, r3, #3
 800f0dc:	3301      	adds	r3, #1
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ea:	60bb      	str	r3, [r7, #8]
      break;
 800f0ec:	e002      	b.n	800f0f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f0ee:	4b05      	ldr	r3, [pc, #20]	; (800f104 <HAL_RCC_GetSysClockFreq+0x15c>)
 800f0f0:	60bb      	str	r3, [r7, #8]
      break;
 800f0f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f0f4:	68bb      	ldr	r3, [r7, #8]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0fe:	bf00      	nop
 800f100:	40023800 	.word	0x40023800
 800f104:	00f42400 	.word	0x00f42400
 800f108:	00b71b00 	.word	0x00b71b00

0800f10c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f10c:	b480      	push	{r7}
 800f10e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f110:	4b03      	ldr	r3, [pc, #12]	; (800f120 <HAL_RCC_GetHCLKFreq+0x14>)
 800f112:	681b      	ldr	r3, [r3, #0]
}
 800f114:	4618      	mov	r0, r3
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	2000000c 	.word	0x2000000c

0800f124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f128:	f7ff fff0 	bl	800f10c <HAL_RCC_GetHCLKFreq>
 800f12c:	4601      	mov	r1, r0
 800f12e:	4b05      	ldr	r3, [pc, #20]	; (800f144 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	0a9b      	lsrs	r3, r3, #10
 800f134:	f003 0307 	and.w	r3, r3, #7
 800f138:	4a03      	ldr	r2, [pc, #12]	; (800f148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f13a:	5cd3      	ldrb	r3, [r2, r3]
 800f13c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f140:	4618      	mov	r0, r3
 800f142:	bd80      	pop	{r7, pc}
 800f144:	40023800 	.word	0x40023800
 800f148:	08014278 	.word	0x08014278

0800f14c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f150:	f7ff ffdc 	bl	800f10c <HAL_RCC_GetHCLKFreq>
 800f154:	4601      	mov	r1, r0
 800f156:	4b05      	ldr	r3, [pc, #20]	; (800f16c <HAL_RCC_GetPCLK2Freq+0x20>)
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	0b5b      	lsrs	r3, r3, #13
 800f15c:	f003 0307 	and.w	r3, r3, #7
 800f160:	4a03      	ldr	r2, [pc, #12]	; (800f170 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f162:	5cd3      	ldrb	r3, [r2, r3]
 800f164:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f168:	4618      	mov	r0, r3
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	40023800 	.word	0x40023800
 800f170:	08014278 	.word	0x08014278

0800f174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	e056      	b.n	800f234 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	d106      	bne.n	800f1a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7fc fe69 	bl	800be78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2202      	movs	r2, #2
 800f1aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f1bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685a      	ldr	r2, [r3, #4]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	431a      	orrs	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	431a      	orrs	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	431a      	orrs	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	431a      	orrs	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1e2:	431a      	orrs	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	69db      	ldr	r3, [r3, #28]
 800f1e8:	431a      	orrs	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a1b      	ldr	r3, [r3, #32]
 800f1ee:	ea42 0103 	orr.w	r1, r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	0c1b      	lsrs	r3, r3, #16
 800f204:	f003 0104 	and.w	r1, r3, #4
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	430a      	orrs	r2, r1
 800f212:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	69da      	ldr	r2, [r3, #28]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f222:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2201      	movs	r2, #1
 800f22e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b088      	sub	sp, #32
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	603b      	str	r3, [r7, #0]
 800f248:	4613      	mov	r3, r2
 800f24a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f256:	2b01      	cmp	r3, #1
 800f258:	d101      	bne.n	800f25e <HAL_SPI_Transmit+0x22>
 800f25a:	2302      	movs	r3, #2
 800f25c:	e11e      	b.n	800f49c <HAL_SPI_Transmit+0x260>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2201      	movs	r2, #1
 800f262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f266:	f7fd f9ad 	bl	800c5c4 <HAL_GetTick>
 800f26a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f26c:	88fb      	ldrh	r3, [r7, #6]
 800f26e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d002      	beq.n	800f282 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f27c:	2302      	movs	r3, #2
 800f27e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f280:	e103      	b.n	800f48a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <HAL_SPI_Transmit+0x52>
 800f288:	88fb      	ldrh	r3, [r7, #6]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d102      	bne.n	800f294 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f28e:	2301      	movs	r3, #1
 800f290:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f292:	e0fa      	b.n	800f48a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2203      	movs	r2, #3
 800f298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	88fa      	ldrh	r2, [r7, #6]
 800f2ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	88fa      	ldrh	r2, [r7, #6]
 800f2b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2da:	d107      	bne.n	800f2ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f2ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f6:	2b40      	cmp	r3, #64	; 0x40
 800f2f8:	d007      	beq.n	800f30a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f312:	d14b      	bne.n	800f3ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <HAL_SPI_Transmit+0xe6>
 800f31c:	8afb      	ldrh	r3, [r7, #22]
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d13e      	bne.n	800f3a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f326:	881a      	ldrh	r2, [r3, #0]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f332:	1c9a      	adds	r2, r3, #2
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	3b01      	subs	r3, #1
 800f340:	b29a      	uxth	r2, r3
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f346:	e02b      	b.n	800f3a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	f003 0302 	and.w	r3, r3, #2
 800f352:	2b02      	cmp	r3, #2
 800f354:	d112      	bne.n	800f37c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f35a:	881a      	ldrh	r2, [r3, #0]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f366:	1c9a      	adds	r2, r3, #2
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f370:	b29b      	uxth	r3, r3
 800f372:	3b01      	subs	r3, #1
 800f374:	b29a      	uxth	r2, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	86da      	strh	r2, [r3, #54]	; 0x36
 800f37a:	e011      	b.n	800f3a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f37c:	f7fd f922 	bl	800c5c4 <HAL_GetTick>
 800f380:	4602      	mov	r2, r0
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d803      	bhi.n	800f394 <HAL_SPI_Transmit+0x158>
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f392:	d102      	bne.n	800f39a <HAL_SPI_Transmit+0x15e>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d102      	bne.n	800f3a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800f39a:	2303      	movs	r3, #3
 800f39c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f39e:	e074      	b.n	800f48a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1ce      	bne.n	800f348 <HAL_SPI_Transmit+0x10c>
 800f3aa:	e04c      	b.n	800f446 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <HAL_SPI_Transmit+0x17e>
 800f3b4:	8afb      	ldrh	r3, [r7, #22]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d140      	bne.n	800f43c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	330c      	adds	r3, #12
 800f3c4:	7812      	ldrb	r2, [r2, #0]
 800f3c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3cc:	1c5a      	adds	r2, r3, #1
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f3e0:	e02c      	b.n	800f43c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	f003 0302 	and.w	r3, r3, #2
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d113      	bne.n	800f418 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	330c      	adds	r3, #12
 800f3fa:	7812      	ldrb	r2, [r2, #0]
 800f3fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	3b01      	subs	r3, #1
 800f410:	b29a      	uxth	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	86da      	strh	r2, [r3, #54]	; 0x36
 800f416:	e011      	b.n	800f43c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f418:	f7fd f8d4 	bl	800c5c4 <HAL_GetTick>
 800f41c:	4602      	mov	r2, r0
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	429a      	cmp	r2, r3
 800f426:	d803      	bhi.n	800f430 <HAL_SPI_Transmit+0x1f4>
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42e:	d102      	bne.n	800f436 <HAL_SPI_Transmit+0x1fa>
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800f436:	2303      	movs	r3, #3
 800f438:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f43a:	e026      	b.n	800f48a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f440:	b29b      	uxth	r3, r3
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1cd      	bne.n	800f3e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f000 fba4 	bl	800fb98 <SPI_EndRxTxTransaction>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2220      	movs	r2, #32
 800f45a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10a      	bne.n	800f47a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f464:	2300      	movs	r3, #0
 800f466:	613b      	str	r3, [r7, #16]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	613b      	str	r3, [r7, #16]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	689b      	ldr	r3, [r3, #8]
 800f476:	613b      	str	r3, [r7, #16]
 800f478:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	77fb      	strb	r3, [r7, #31]
 800f486:	e000      	b.n	800f48a <HAL_SPI_Transmit+0x24e>
  }

error:
 800f488:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f49a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3720      	adds	r7, #32
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af02      	add	r7, sp, #8
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	603b      	str	r3, [r7, #0]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4c0:	d112      	bne.n	800f4e8 <HAL_SPI_Receive+0x44>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10e      	bne.n	800f4e8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2204      	movs	r2, #4
 800f4ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f4d2:	88fa      	ldrh	r2, [r7, #6]
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	68ba      	ldr	r2, [r7, #8]
 800f4dc:	68b9      	ldr	r1, [r7, #8]
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f000 f8e9 	bl	800f6b6 <HAL_SPI_TransmitReceive>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	e0e2      	b.n	800f6ae <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d101      	bne.n	800f4f6 <HAL_SPI_Receive+0x52>
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	e0db      	b.n	800f6ae <HAL_SPI_Receive+0x20a>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4fe:	f7fd f861 	bl	800c5c4 <HAL_GetTick>
 800f502:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d002      	beq.n	800f516 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f510:	2302      	movs	r3, #2
 800f512:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f514:	e0c2      	b.n	800f69c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <HAL_SPI_Receive+0x7e>
 800f51c:	88fb      	ldrh	r3, [r7, #6]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d102      	bne.n	800f528 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f526:	e0b9      	b.n	800f69c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2204      	movs	r2, #4
 800f52c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2200      	movs	r2, #0
 800f534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	88fa      	ldrh	r2, [r7, #6]
 800f540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	88fa      	ldrh	r2, [r7, #6]
 800f546:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2200      	movs	r2, #0
 800f558:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f56e:	d107      	bne.n	800f580 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f57e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f58a:	2b40      	cmp	r3, #64	; 0x40
 800f58c:	d007      	beq.n	800f59e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f59c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d162      	bne.n	800f66c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f5a6:	e02e      	b.n	800f606 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	f003 0301 	and.w	r3, r3, #1
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d115      	bne.n	800f5e2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f103 020c 	add.w	r2, r3, #12
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c2:	7812      	ldrb	r2, [r2, #0]
 800f5c4:	b2d2      	uxtb	r2, r2
 800f5c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5cc:	1c5a      	adds	r2, r3, #1
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f5e0:	e011      	b.n	800f606 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5e2:	f7fc ffef 	bl	800c5c4 <HAL_GetTick>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d803      	bhi.n	800f5fa <HAL_SPI_Receive+0x156>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d102      	bne.n	800f600 <HAL_SPI_Receive+0x15c>
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d102      	bne.n	800f606 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800f600:	2303      	movs	r3, #3
 800f602:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f604:	e04a      	b.n	800f69c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d1cb      	bne.n	800f5a8 <HAL_SPI_Receive+0x104>
 800f610:	e031      	b.n	800f676 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d113      	bne.n	800f648 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68da      	ldr	r2, [r3, #12]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f62a:	b292      	uxth	r2, r2
 800f62c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f632:	1c9a      	adds	r2, r3, #2
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	3b01      	subs	r3, #1
 800f640:	b29a      	uxth	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f646:	e011      	b.n	800f66c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f648:	f7fc ffbc 	bl	800c5c4 <HAL_GetTick>
 800f64c:	4602      	mov	r2, r0
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	429a      	cmp	r2, r3
 800f656:	d803      	bhi.n	800f660 <HAL_SPI_Receive+0x1bc>
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f65e:	d102      	bne.n	800f666 <HAL_SPI_Receive+0x1c2>
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d102      	bne.n	800f66c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f66a:	e017      	b.n	800f69c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f670:	b29b      	uxth	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1cd      	bne.n	800f612 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	6839      	ldr	r1, [r7, #0]
 800f67a:	68f8      	ldr	r0, [r7, #12]
 800f67c:	f000 fa27 	bl	800face <SPI_EndRxTransaction>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d002      	beq.n	800f68c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2220      	movs	r2, #32
 800f68a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f690:	2b00      	cmp	r3, #0
 800f692:	d002      	beq.n	800f69a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800f694:	2301      	movs	r3, #1
 800f696:	75fb      	strb	r3, [r7, #23]
 800f698:	e000      	b.n	800f69c <HAL_SPI_Receive+0x1f8>
  }

error :
 800f69a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3718      	adds	r7, #24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b08c      	sub	sp, #48	; 0x30
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	60f8      	str	r0, [r7, #12]
 800f6be:	60b9      	str	r1, [r7, #8]
 800f6c0:	607a      	str	r2, [r7, #4]
 800f6c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d101      	bne.n	800f6dc <HAL_SPI_TransmitReceive+0x26>
 800f6d8:	2302      	movs	r3, #2
 800f6da:	e18a      	b.n	800f9f2 <HAL_SPI_TransmitReceive+0x33c>
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f6e4:	f7fc ff6e 	bl	800c5c4 <HAL_GetTick>
 800f6e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f6f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f6fa:	887b      	ldrh	r3, [r7, #2]
 800f6fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f6fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f702:	2b01      	cmp	r3, #1
 800f704:	d00f      	beq.n	800f726 <HAL_SPI_TransmitReceive+0x70>
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f70c:	d107      	bne.n	800f71e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d103      	bne.n	800f71e <HAL_SPI_TransmitReceive+0x68>
 800f716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	d003      	beq.n	800f726 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f71e:	2302      	movs	r3, #2
 800f720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f724:	e15b      	b.n	800f9de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d005      	beq.n	800f738 <HAL_SPI_TransmitReceive+0x82>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <HAL_SPI_TransmitReceive+0x82>
 800f732:	887b      	ldrh	r3, [r7, #2]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d103      	bne.n	800f740 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f738:	2301      	movs	r3, #1
 800f73a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f73e:	e14e      	b.n	800f9de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b04      	cmp	r3, #4
 800f74a:	d003      	beq.n	800f754 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2205      	movs	r2, #5
 800f750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2200      	movs	r2, #0
 800f758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	887a      	ldrh	r2, [r7, #2]
 800f764:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	887a      	ldrh	r2, [r7, #2]
 800f76a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	887a      	ldrh	r2, [r7, #2]
 800f776:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	887a      	ldrh	r2, [r7, #2]
 800f77c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2200      	movs	r2, #0
 800f782:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2200      	movs	r2, #0
 800f788:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f794:	2b40      	cmp	r3, #64	; 0x40
 800f796:	d007      	beq.n	800f7a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f7a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7b0:	d178      	bne.n	800f8a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d002      	beq.n	800f7c0 <HAL_SPI_TransmitReceive+0x10a>
 800f7ba:	8b7b      	ldrh	r3, [r7, #26]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d166      	bne.n	800f88e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7c4:	881a      	ldrh	r2, [r3, #0]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d0:	1c9a      	adds	r2, r3, #2
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7e4:	e053      	b.n	800f88e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f003 0302 	and.w	r3, r3, #2
 800f7f0:	2b02      	cmp	r3, #2
 800f7f2:	d11b      	bne.n	800f82c <HAL_SPI_TransmitReceive+0x176>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d016      	beq.n	800f82c <HAL_SPI_TransmitReceive+0x176>
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	2b01      	cmp	r3, #1
 800f802:	d113      	bne.n	800f82c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f808:	881a      	ldrh	r2, [r3, #0]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f814:	1c9a      	adds	r2, r3, #2
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f81e:	b29b      	uxth	r3, r3
 800f820:	3b01      	subs	r3, #1
 800f822:	b29a      	uxth	r2, r3
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f828:	2300      	movs	r3, #0
 800f82a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	689b      	ldr	r3, [r3, #8]
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b01      	cmp	r3, #1
 800f838:	d119      	bne.n	800f86e <HAL_SPI_TransmitReceive+0x1b8>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f83e:	b29b      	uxth	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d014      	beq.n	800f86e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f84e:	b292      	uxth	r2, r2
 800f850:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f856:	1c9a      	adds	r2, r3, #2
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f860:	b29b      	uxth	r3, r3
 800f862:	3b01      	subs	r3, #1
 800f864:	b29a      	uxth	r2, r3
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f86a:	2301      	movs	r3, #1
 800f86c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f86e:	f7fc fea9 	bl	800c5c4 <HAL_GetTick>
 800f872:	4602      	mov	r2, r0
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d807      	bhi.n	800f88e <HAL_SPI_TransmitReceive+0x1d8>
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f884:	d003      	beq.n	800f88e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f886:	2303      	movs	r3, #3
 800f888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f88c:	e0a7      	b.n	800f9de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f892:	b29b      	uxth	r3, r3
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1a6      	bne.n	800f7e6 <HAL_SPI_TransmitReceive+0x130>
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1a1      	bne.n	800f7e6 <HAL_SPI_TransmitReceive+0x130>
 800f8a2:	e07c      	b.n	800f99e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d002      	beq.n	800f8b2 <HAL_SPI_TransmitReceive+0x1fc>
 800f8ac:	8b7b      	ldrh	r3, [r7, #26]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d16b      	bne.n	800f98a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	330c      	adds	r3, #12
 800f8bc:	7812      	ldrb	r2, [r2, #0]
 800f8be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c4:	1c5a      	adds	r2, r3, #1
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f8d8:	e057      	b.n	800f98a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	f003 0302 	and.w	r3, r3, #2
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d11c      	bne.n	800f922 <HAL_SPI_TransmitReceive+0x26c>
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d017      	beq.n	800f922 <HAL_SPI_TransmitReceive+0x26c>
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d114      	bne.n	800f922 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	330c      	adds	r3, #12
 800f902:	7812      	ldrb	r2, [r2, #0]
 800f904:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f914:	b29b      	uxth	r3, r3
 800f916:	3b01      	subs	r3, #1
 800f918:	b29a      	uxth	r2, r3
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f91e:	2300      	movs	r3, #0
 800f920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	f003 0301 	and.w	r3, r3, #1
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d119      	bne.n	800f964 <HAL_SPI_TransmitReceive+0x2ae>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f934:	b29b      	uxth	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d014      	beq.n	800f964 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68da      	ldr	r2, [r3, #12]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f944:	b2d2      	uxtb	r2, r2
 800f946:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94c:	1c5a      	adds	r2, r3, #1
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f956:	b29b      	uxth	r3, r3
 800f958:	3b01      	subs	r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f960:	2301      	movs	r3, #1
 800f962:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f964:	f7fc fe2e 	bl	800c5c4 <HAL_GetTick>
 800f968:	4602      	mov	r2, r0
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f970:	429a      	cmp	r2, r3
 800f972:	d803      	bhi.n	800f97c <HAL_SPI_TransmitReceive+0x2c6>
 800f974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97a:	d102      	bne.n	800f982 <HAL_SPI_TransmitReceive+0x2cc>
 800f97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d103      	bne.n	800f98a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f982:	2303      	movs	r3, #3
 800f984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f988:	e029      	b.n	800f9de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f98e:	b29b      	uxth	r3, r3
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1a2      	bne.n	800f8da <HAL_SPI_TransmitReceive+0x224>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f998:	b29b      	uxth	r3, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d19d      	bne.n	800f8da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f000 f8f8 	bl	800fb98 <SPI_EndRxTxTransaction>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d006      	beq.n	800f9bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2220      	movs	r2, #32
 800f9b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f9ba:	e010      	b.n	800f9de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d10b      	bne.n	800f9dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	617b      	str	r3, [r7, #20]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	e000      	b.n	800f9de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f9dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f9ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3730      	adds	r7, #48	; 0x30
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	603b      	str	r3, [r7, #0]
 800fa06:	4613      	mov	r3, r2
 800fa08:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa0a:	e04c      	b.n	800faa6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa12:	d048      	beq.n	800faa6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800fa14:	f7fc fdd6 	bl	800c5c4 <HAL_GetTick>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d902      	bls.n	800fa2a <SPI_WaitFlagStateUntilTimeout+0x30>
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d13d      	bne.n	800faa6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	685a      	ldr	r2, [r3, #4]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa42:	d111      	bne.n	800fa68 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa4c:	d004      	beq.n	800fa58 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa56:	d107      	bne.n	800fa68 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa70:	d10f      	bne.n	800fa92 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800faa2:	2303      	movs	r3, #3
 800faa4:	e00f      	b.n	800fac6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	689a      	ldr	r2, [r3, #8]
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	4013      	ands	r3, r2
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	bf0c      	ite	eq
 800fab6:	2301      	moveq	r3, #1
 800fab8:	2300      	movne	r3, #0
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	461a      	mov	r2, r3
 800fabe:	79fb      	ldrb	r3, [r7, #7]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d1a3      	bne.n	800fa0c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b086      	sub	sp, #24
 800fad2:	af02      	add	r7, sp, #8
 800fad4:	60f8      	str	r0, [r7, #12]
 800fad6:	60b9      	str	r1, [r7, #8]
 800fad8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fae2:	d111      	bne.n	800fb08 <SPI_EndRxTransaction+0x3a>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faec:	d004      	beq.n	800faf8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faf6:	d107      	bne.n	800fb08 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb06:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fb10:	d12a      	bne.n	800fb68 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb1a:	d012      	beq.n	800fb42 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	9300      	str	r3, [sp, #0]
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2200      	movs	r2, #0
 800fb24:	2180      	movs	r1, #128	; 0x80
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f7ff ff67 	bl	800f9fa <SPI_WaitFlagStateUntilTimeout>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d02d      	beq.n	800fb8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb36:	f043 0220 	orr.w	r2, r3, #32
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800fb3e:	2303      	movs	r3, #3
 800fb40:	e026      	b.n	800fb90 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	2101      	movs	r1, #1
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff ff54 	bl	800f9fa <SPI_WaitFlagStateUntilTimeout>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01a      	beq.n	800fb8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb5c:	f043 0220 	orr.w	r2, r3, #32
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e013      	b.n	800fb90 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	2101      	movs	r1, #1
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff ff41 	bl	800f9fa <SPI_WaitFlagStateUntilTimeout>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d007      	beq.n	800fb8e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb82:	f043 0220 	orr.w	r2, r3, #32
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	e000      	b.n	800fb90 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	af02      	add	r7, sp, #8
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fba4:	4b1b      	ldr	r3, [pc, #108]	; (800fc14 <SPI_EndRxTxTransaction+0x7c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a1b      	ldr	r2, [pc, #108]	; (800fc18 <SPI_EndRxTxTransaction+0x80>)
 800fbaa:	fba2 2303 	umull	r2, r3, r2, r3
 800fbae:	0d5b      	lsrs	r3, r3, #21
 800fbb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fbb4:	fb02 f303 	mul.w	r3, r2, r3
 800fbb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fbc2:	d112      	bne.n	800fbea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	2180      	movs	r1, #128	; 0x80
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f7ff ff13 	bl	800f9fa <SPI_WaitFlagStateUntilTimeout>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d016      	beq.n	800fc08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbde:	f043 0220 	orr.w	r2, r3, #32
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800fbe6:	2303      	movs	r3, #3
 800fbe8:	e00f      	b.n	800fc0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00a      	beq.n	800fc06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc00:	2b80      	cmp	r3, #128	; 0x80
 800fc02:	d0f2      	beq.n	800fbea <SPI_EndRxTxTransaction+0x52>
 800fc04:	e000      	b.n	800fc08 <SPI_EndRxTxTransaction+0x70>
        break;
 800fc06:	bf00      	nop
  }

  return HAL_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3718      	adds	r7, #24
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	2000000c 	.word	0x2000000c
 800fc18:	165e9f81 	.word	0x165e9f81

0800fc1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d101      	bne.n	800fc2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	e01d      	b.n	800fc6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7fc fa2a 	bl	800c09c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2202      	movs	r2, #2
 800fc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3304      	adds	r3, #4
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	f000 fb5e 	bl	801031c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2201      	movs	r2, #1
 800fc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800fc72:	b480      	push	{r7}
 800fc74:	b083      	sub	sp, #12
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68da      	ldr	r2, [r3, #12]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f022 0201 	bic.w	r2, r2, #1
 800fc88:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	6a1a      	ldr	r2, [r3, #32]
 800fc90:	f241 1311 	movw	r3, #4369	; 0x1111
 800fc94:	4013      	ands	r3, r2
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10f      	bne.n	800fcba <HAL_TIM_Base_Stop_IT+0x48>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	6a1a      	ldr	r2, [r3, #32]
 800fca0:	f240 4344 	movw	r3, #1092	; 0x444
 800fca4:	4013      	ands	r3, r2
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d107      	bne.n	800fcba <HAL_TIM_Base_Stop_IT+0x48>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f022 0201 	bic.w	r2, r2, #1
 800fcb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d101      	bne.n	800fcda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e01d      	b.n	800fd16 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d106      	bne.n	800fcf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fc f90a 	bl	800bf08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	3304      	adds	r3, #4
 800fd04:	4619      	mov	r1, r3
 800fd06:	4610      	mov	r0, r2
 800fd08:	f000 fb08 	bl	801031c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
	...

0800fd20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 fd42 	bl	80107bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4a15      	ldr	r2, [pc, #84]	; (800fd94 <HAL_TIM_PWM_Start+0x74>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d004      	beq.n	800fd4c <HAL_TIM_PWM_Start+0x2c>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a14      	ldr	r2, [pc, #80]	; (800fd98 <HAL_TIM_PWM_Start+0x78>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d101      	bne.n	800fd50 <HAL_TIM_PWM_Start+0x30>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e000      	b.n	800fd52 <HAL_TIM_PWM_Start+0x32>
 800fd50:	2300      	movs	r3, #0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d007      	beq.n	800fd66 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	689b      	ldr	r3, [r3, #8]
 800fd6c:	f003 0307 	and.w	r3, r3, #7
 800fd70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2b06      	cmp	r3, #6
 800fd76:	d007      	beq.n	800fd88 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f042 0201 	orr.w	r2, r2, #1
 800fd86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	40010000 	.word	0x40010000
 800fd98:	40010400 	.word	0x40010400

0800fd9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d101      	bne.n	800fdb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800fdac:	2301      	movs	r3, #1
 800fdae:	e083      	b.n	800feb8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d106      	bne.n	800fdca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7fc f8eb 	bl	800bfa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2202      	movs	r2, #2
 800fdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fde0:	f023 0307 	bic.w	r3, r3, #7
 800fde4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	3304      	adds	r3, #4
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	f000 fa93 	bl	801031c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	6a1b      	ldr	r3, [r3, #32]
 800fe0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe1e:	f023 0303 	bic.w	r3, r3, #3
 800fe22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	689a      	ldr	r2, [r3, #8]
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	021b      	lsls	r3, r3, #8
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	693a      	ldr	r2, [r7, #16]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fe3c:	f023 030c 	bic.w	r3, r3, #12
 800fe40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	68da      	ldr	r2, [r3, #12]
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	69db      	ldr	r3, [r3, #28]
 800fe56:	021b      	lsls	r3, r3, #8
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	691b      	ldr	r3, [r3, #16]
 800fe64:	011a      	lsls	r2, r3, #4
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	031b      	lsls	r3, r3, #12
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	693a      	ldr	r2, [r7, #16]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fe7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fe82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	685a      	ldr	r2, [r3, #4]
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	695b      	ldr	r3, [r3, #20]
 800fe8c:	011b      	lsls	r3, r3, #4
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	697a      	ldr	r2, [r7, #20]
 800fe9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	693a      	ldr	r2, [r7, #16]
 800fea4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2201      	movs	r2, #1
 800feb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3718      	adds	r7, #24
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <HAL_TIM_Encoder_Start+0x16>
 800fed0:	2b04      	cmp	r3, #4
 800fed2:	d008      	beq.n	800fee6 <HAL_TIM_Encoder_Start+0x26>
 800fed4:	e00f      	b.n	800fef6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2201      	movs	r2, #1
 800fedc:	2100      	movs	r1, #0
 800fede:	4618      	mov	r0, r3
 800fee0:	f000 fc6c 	bl	80107bc <TIM_CCxChannelCmd>
      break;
 800fee4:	e016      	b.n	800ff14 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2201      	movs	r2, #1
 800feec:	2104      	movs	r1, #4
 800feee:	4618      	mov	r0, r3
 800fef0:	f000 fc64 	bl	80107bc <TIM_CCxChannelCmd>
      break;
 800fef4:	e00e      	b.n	800ff14 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2201      	movs	r2, #1
 800fefc:	2100      	movs	r1, #0
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 fc5c 	bl	80107bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2201      	movs	r2, #1
 800ff0a:	2104      	movs	r1, #4
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 fc55 	bl	80107bc <TIM_CCxChannelCmd>
      break;
 800ff12:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f042 0201 	orr.w	r2, r2, #1
 800ff22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b082      	sub	sp, #8
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	f003 0302 	and.w	r3, r3, #2
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d122      	bne.n	800ff8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	f003 0302 	and.w	r3, r3, #2
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d11b      	bne.n	800ff8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f06f 0202 	mvn.w	r2, #2
 800ff5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	f003 0303 	and.w	r3, r3, #3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d003      	beq.n	800ff78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f9b5 	bl	80102e0 <HAL_TIM_IC_CaptureCallback>
 800ff76:	e005      	b.n	800ff84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f9a7 	bl	80102cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 f9b8 	bl	80102f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	f003 0304 	and.w	r3, r3, #4
 800ff94:	2b04      	cmp	r3, #4
 800ff96:	d122      	bne.n	800ffde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	f003 0304 	and.w	r3, r3, #4
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d11b      	bne.n	800ffde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f06f 0204 	mvn.w	r2, #4
 800ffae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2202      	movs	r2, #2
 800ffb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	699b      	ldr	r3, [r3, #24]
 800ffbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 f98b 	bl	80102e0 <HAL_TIM_IC_CaptureCallback>
 800ffca:	e005      	b.n	800ffd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 f97d 	bl	80102cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f98e 	bl	80102f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	f003 0308 	and.w	r3, r3, #8
 800ffe8:	2b08      	cmp	r3, #8
 800ffea:	d122      	bne.n	8010032 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	f003 0308 	and.w	r3, r3, #8
 800fff6:	2b08      	cmp	r3, #8
 800fff8:	d11b      	bne.n	8010032 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f06f 0208 	mvn.w	r2, #8
 8010002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2204      	movs	r2, #4
 8010008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	69db      	ldr	r3, [r3, #28]
 8010010:	f003 0303 	and.w	r3, r3, #3
 8010014:	2b00      	cmp	r3, #0
 8010016:	d003      	beq.n	8010020 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f961 	bl	80102e0 <HAL_TIM_IC_CaptureCallback>
 801001e:	e005      	b.n	801002c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f953 	bl	80102cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f964 	bl	80102f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	f003 0310 	and.w	r3, r3, #16
 801003c:	2b10      	cmp	r3, #16
 801003e:	d122      	bne.n	8010086 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	f003 0310 	and.w	r3, r3, #16
 801004a:	2b10      	cmp	r3, #16
 801004c:	d11b      	bne.n	8010086 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f06f 0210 	mvn.w	r2, #16
 8010056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2208      	movs	r2, #8
 801005c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	69db      	ldr	r3, [r3, #28]
 8010064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010068:	2b00      	cmp	r3, #0
 801006a:	d003      	beq.n	8010074 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 f937 	bl	80102e0 <HAL_TIM_IC_CaptureCallback>
 8010072:	e005      	b.n	8010080 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f929 	bl	80102cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f93a 	bl	80102f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	691b      	ldr	r3, [r3, #16]
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	2b01      	cmp	r3, #1
 8010092:	d10e      	bne.n	80100b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	f003 0301 	and.w	r3, r3, #1
 801009e:	2b01      	cmp	r3, #1
 80100a0:	d107      	bne.n	80100b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f06f 0201 	mvn.w	r2, #1
 80100aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f7fa fdad 	bl	800ac0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100bc:	2b80      	cmp	r3, #128	; 0x80
 80100be:	d10e      	bne.n	80100de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100ca:	2b80      	cmp	r3, #128	; 0x80
 80100cc:	d107      	bne.n	80100de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80100d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fc6d 	bl	80109b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	691b      	ldr	r3, [r3, #16]
 80100e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100e8:	2b40      	cmp	r3, #64	; 0x40
 80100ea:	d10e      	bne.n	801010a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100f6:	2b40      	cmp	r3, #64	; 0x40
 80100f8:	d107      	bne.n	801010a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 f8ff 	bl	8010308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	f003 0320 	and.w	r3, r3, #32
 8010114:	2b20      	cmp	r3, #32
 8010116:	d10e      	bne.n	8010136 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	f003 0320 	and.w	r3, r3, #32
 8010122:	2b20      	cmp	r3, #32
 8010124:	d107      	bne.n	8010136 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f06f 0220 	mvn.w	r2, #32
 801012e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 fc37 	bl	80109a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010152:	2b01      	cmp	r3, #1
 8010154:	d101      	bne.n	801015a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010156:	2302      	movs	r3, #2
 8010158:	e0b4      	b.n	80102c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2201      	movs	r2, #1
 801015e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2202      	movs	r2, #2
 8010166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b0c      	cmp	r3, #12
 801016e:	f200 809f 	bhi.w	80102b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8010172:	a201      	add	r2, pc, #4	; (adr r2, 8010178 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010178:	080101ad 	.word	0x080101ad
 801017c:	080102b1 	.word	0x080102b1
 8010180:	080102b1 	.word	0x080102b1
 8010184:	080102b1 	.word	0x080102b1
 8010188:	080101ed 	.word	0x080101ed
 801018c:	080102b1 	.word	0x080102b1
 8010190:	080102b1 	.word	0x080102b1
 8010194:	080102b1 	.word	0x080102b1
 8010198:	0801022f 	.word	0x0801022f
 801019c:	080102b1 	.word	0x080102b1
 80101a0:	080102b1 	.word	0x080102b1
 80101a4:	080102b1 	.word	0x080102b1
 80101a8:	0801026f 	.word	0x0801026f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68b9      	ldr	r1, [r7, #8]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 f952 	bl	801045c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	699a      	ldr	r2, [r3, #24]
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f042 0208 	orr.w	r2, r2, #8
 80101c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	699a      	ldr	r2, [r3, #24]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f022 0204 	bic.w	r2, r2, #4
 80101d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	6999      	ldr	r1, [r3, #24]
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	691a      	ldr	r2, [r3, #16]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	430a      	orrs	r2, r1
 80101e8:	619a      	str	r2, [r3, #24]
      break;
 80101ea:	e062      	b.n	80102b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68b9      	ldr	r1, [r7, #8]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 f9a2 	bl	801053c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	699a      	ldr	r2, [r3, #24]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	699a      	ldr	r2, [r3, #24]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6999      	ldr	r1, [r3, #24]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	691b      	ldr	r3, [r3, #16]
 8010222:	021a      	lsls	r2, r3, #8
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	430a      	orrs	r2, r1
 801022a:	619a      	str	r2, [r3, #24]
      break;
 801022c:	e041      	b.n	80102b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	68b9      	ldr	r1, [r7, #8]
 8010234:	4618      	mov	r0, r3
 8010236:	f000 f9f7 	bl	8010628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	69da      	ldr	r2, [r3, #28]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f042 0208 	orr.w	r2, r2, #8
 8010248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	69da      	ldr	r2, [r3, #28]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f022 0204 	bic.w	r2, r2, #4
 8010258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	69d9      	ldr	r1, [r3, #28]
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	691a      	ldr	r2, [r3, #16]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	430a      	orrs	r2, r1
 801026a:	61da      	str	r2, [r3, #28]
      break;
 801026c:	e021      	b.n	80102b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	68b9      	ldr	r1, [r7, #8]
 8010274:	4618      	mov	r0, r3
 8010276:	f000 fa4b 	bl	8010710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	69da      	ldr	r2, [r3, #28]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	69da      	ldr	r2, [r3, #28]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	69d9      	ldr	r1, [r3, #28]
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	021a      	lsls	r2, r3, #8
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	430a      	orrs	r2, r1
 80102ac:	61da      	str	r2, [r3, #28]
      break;
 80102ae:	e000      	b.n	80102b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80102b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2201      	movs	r2, #1
 80102b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2200      	movs	r2, #0
 80102be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80102d4:	bf00      	nop
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010310:	bf00      	nop
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	4a40      	ldr	r2, [pc, #256]	; (8010430 <TIM_Base_SetConfig+0x114>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d013      	beq.n	801035c <TIM_Base_SetConfig+0x40>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801033a:	d00f      	beq.n	801035c <TIM_Base_SetConfig+0x40>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	4a3d      	ldr	r2, [pc, #244]	; (8010434 <TIM_Base_SetConfig+0x118>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d00b      	beq.n	801035c <TIM_Base_SetConfig+0x40>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a3c      	ldr	r2, [pc, #240]	; (8010438 <TIM_Base_SetConfig+0x11c>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d007      	beq.n	801035c <TIM_Base_SetConfig+0x40>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a3b      	ldr	r2, [pc, #236]	; (801043c <TIM_Base_SetConfig+0x120>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d003      	beq.n	801035c <TIM_Base_SetConfig+0x40>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a3a      	ldr	r2, [pc, #232]	; (8010440 <TIM_Base_SetConfig+0x124>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d108      	bne.n	801036e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	4313      	orrs	r3, r2
 801036c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4a2f      	ldr	r2, [pc, #188]	; (8010430 <TIM_Base_SetConfig+0x114>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d02b      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801037c:	d027      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4a2c      	ldr	r2, [pc, #176]	; (8010434 <TIM_Base_SetConfig+0x118>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d023      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4a2b      	ldr	r2, [pc, #172]	; (8010438 <TIM_Base_SetConfig+0x11c>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d01f      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4a2a      	ldr	r2, [pc, #168]	; (801043c <TIM_Base_SetConfig+0x120>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d01b      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4a29      	ldr	r2, [pc, #164]	; (8010440 <TIM_Base_SetConfig+0x124>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d017      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4a28      	ldr	r2, [pc, #160]	; (8010444 <TIM_Base_SetConfig+0x128>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d013      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4a27      	ldr	r2, [pc, #156]	; (8010448 <TIM_Base_SetConfig+0x12c>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d00f      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a26      	ldr	r2, [pc, #152]	; (801044c <TIM_Base_SetConfig+0x130>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d00b      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a25      	ldr	r2, [pc, #148]	; (8010450 <TIM_Base_SetConfig+0x134>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d007      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a24      	ldr	r2, [pc, #144]	; (8010454 <TIM_Base_SetConfig+0x138>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d003      	beq.n	80103ce <TIM_Base_SetConfig+0xb2>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a23      	ldr	r2, [pc, #140]	; (8010458 <TIM_Base_SetConfig+0x13c>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d108      	bne.n	80103e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	68fa      	ldr	r2, [r7, #12]
 80103dc:	4313      	orrs	r3, r2
 80103de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	4313      	orrs	r3, r2
 80103ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	689a      	ldr	r2, [r3, #8]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4a0a      	ldr	r2, [pc, #40]	; (8010430 <TIM_Base_SetConfig+0x114>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d003      	beq.n	8010414 <TIM_Base_SetConfig+0xf8>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a0c      	ldr	r2, [pc, #48]	; (8010440 <TIM_Base_SetConfig+0x124>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d103      	bne.n	801041c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	691a      	ldr	r2, [r3, #16]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2201      	movs	r2, #1
 8010420:	615a      	str	r2, [r3, #20]
}
 8010422:	bf00      	nop
 8010424:	3714      	adds	r7, #20
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop
 8010430:	40010000 	.word	0x40010000
 8010434:	40000400 	.word	0x40000400
 8010438:	40000800 	.word	0x40000800
 801043c:	40000c00 	.word	0x40000c00
 8010440:	40010400 	.word	0x40010400
 8010444:	40014000 	.word	0x40014000
 8010448:	40014400 	.word	0x40014400
 801044c:	40014800 	.word	0x40014800
 8010450:	40001800 	.word	0x40001800
 8010454:	40001c00 	.word	0x40001c00
 8010458:	40002000 	.word	0x40002000

0801045c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801045c:	b480      	push	{r7}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6a1b      	ldr	r3, [r3, #32]
 801046a:	f023 0201 	bic.w	r2, r3, #1
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1b      	ldr	r3, [r3, #32]
 8010476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	699b      	ldr	r3, [r3, #24]
 8010482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801048a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f023 0303 	bic.w	r3, r3, #3
 8010492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	4313      	orrs	r3, r2
 801049c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	f023 0302 	bic.w	r3, r3, #2
 80104a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	4313      	orrs	r3, r2
 80104ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a20      	ldr	r2, [pc, #128]	; (8010534 <TIM_OC1_SetConfig+0xd8>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d003      	beq.n	80104c0 <TIM_OC1_SetConfig+0x64>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4a1f      	ldr	r2, [pc, #124]	; (8010538 <TIM_OC1_SetConfig+0xdc>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d10c      	bne.n	80104da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	f023 0308 	bic.w	r3, r3, #8
 80104c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	697a      	ldr	r2, [r7, #20]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f023 0304 	bic.w	r3, r3, #4
 80104d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a15      	ldr	r2, [pc, #84]	; (8010534 <TIM_OC1_SetConfig+0xd8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d003      	beq.n	80104ea <TIM_OC1_SetConfig+0x8e>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a14      	ldr	r2, [pc, #80]	; (8010538 <TIM_OC1_SetConfig+0xdc>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d111      	bne.n	801050e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	4313      	orrs	r3, r2
 8010502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	4313      	orrs	r3, r2
 801050c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	693a      	ldr	r2, [r7, #16]
 8010512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	685a      	ldr	r2, [r3, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	697a      	ldr	r2, [r7, #20]
 8010526:	621a      	str	r2, [r3, #32]
}
 8010528:	bf00      	nop
 801052a:	371c      	adds	r7, #28
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	40010000 	.word	0x40010000
 8010538:	40010400 	.word	0x40010400

0801053c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a1b      	ldr	r3, [r3, #32]
 801054a:	f023 0210 	bic.w	r2, r3, #16
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6a1b      	ldr	r3, [r3, #32]
 8010556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	699b      	ldr	r3, [r3, #24]
 8010562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801056a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	021b      	lsls	r3, r3, #8
 801057a:	68fa      	ldr	r2, [r7, #12]
 801057c:	4313      	orrs	r3, r2
 801057e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	f023 0320 	bic.w	r3, r3, #32
 8010586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	011b      	lsls	r3, r3, #4
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	4313      	orrs	r3, r2
 8010592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4a22      	ldr	r2, [pc, #136]	; (8010620 <TIM_OC2_SetConfig+0xe4>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d003      	beq.n	80105a4 <TIM_OC2_SetConfig+0x68>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	4a21      	ldr	r2, [pc, #132]	; (8010624 <TIM_OC2_SetConfig+0xe8>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d10d      	bne.n	80105c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	011b      	lsls	r3, r3, #4
 80105b2:	697a      	ldr	r2, [r7, #20]
 80105b4:	4313      	orrs	r3, r2
 80105b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4a17      	ldr	r2, [pc, #92]	; (8010620 <TIM_OC2_SetConfig+0xe4>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d003      	beq.n	80105d0 <TIM_OC2_SetConfig+0x94>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a16      	ldr	r2, [pc, #88]	; (8010624 <TIM_OC2_SetConfig+0xe8>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d113      	bne.n	80105f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	4313      	orrs	r3, r2
 80105ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	699b      	ldr	r3, [r3, #24]
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	693a      	ldr	r2, [r7, #16]
 80105fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	685a      	ldr	r2, [r3, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	621a      	str	r2, [r3, #32]
}
 8010612:	bf00      	nop
 8010614:	371c      	adds	r7, #28
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	40010000 	.word	0x40010000
 8010624:	40010400 	.word	0x40010400

08010628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010628:	b480      	push	{r7}
 801062a:	b087      	sub	sp, #28
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6a1b      	ldr	r3, [r3, #32]
 8010642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	69db      	ldr	r3, [r3, #28]
 801064e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f023 0303 	bic.w	r3, r3, #3
 801065e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	4313      	orrs	r3, r2
 8010668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	689b      	ldr	r3, [r3, #8]
 8010676:	021b      	lsls	r3, r3, #8
 8010678:	697a      	ldr	r2, [r7, #20]
 801067a:	4313      	orrs	r3, r2
 801067c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4a21      	ldr	r2, [pc, #132]	; (8010708 <TIM_OC3_SetConfig+0xe0>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d003      	beq.n	801068e <TIM_OC3_SetConfig+0x66>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a20      	ldr	r2, [pc, #128]	; (801070c <TIM_OC3_SetConfig+0xe4>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d10d      	bne.n	80106aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	021b      	lsls	r3, r3, #8
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	4313      	orrs	r3, r2
 80106a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4a16      	ldr	r2, [pc, #88]	; (8010708 <TIM_OC3_SetConfig+0xe0>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d003      	beq.n	80106ba <TIM_OC3_SetConfig+0x92>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4a15      	ldr	r2, [pc, #84]	; (801070c <TIM_OC3_SetConfig+0xe4>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d113      	bne.n	80106e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	695b      	ldr	r3, [r3, #20]
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	693a      	ldr	r2, [r7, #16]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	011b      	lsls	r3, r3, #4
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	4313      	orrs	r3, r2
 80106e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	693a      	ldr	r2, [r7, #16]
 80106e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	621a      	str	r2, [r3, #32]
}
 80106fc:	bf00      	nop
 80106fe:	371c      	adds	r7, #28
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr
 8010708:	40010000 	.word	0x40010000
 801070c:	40010400 	.word	0x40010400

08010710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010710:	b480      	push	{r7}
 8010712:	b087      	sub	sp, #28
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a1b      	ldr	r3, [r3, #32]
 801071e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	69db      	ldr	r3, [r3, #28]
 8010736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801073e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	021b      	lsls	r3, r3, #8
 801074e:	68fa      	ldr	r2, [r7, #12]
 8010750:	4313      	orrs	r3, r2
 8010752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801075a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	031b      	lsls	r3, r3, #12
 8010762:	693a      	ldr	r2, [r7, #16]
 8010764:	4313      	orrs	r3, r2
 8010766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a12      	ldr	r2, [pc, #72]	; (80107b4 <TIM_OC4_SetConfig+0xa4>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d003      	beq.n	8010778 <TIM_OC4_SetConfig+0x68>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	4a11      	ldr	r2, [pc, #68]	; (80107b8 <TIM_OC4_SetConfig+0xa8>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d109      	bne.n	801078c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801077e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	695b      	ldr	r3, [r3, #20]
 8010784:	019b      	lsls	r3, r3, #6
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	4313      	orrs	r3, r2
 801078a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	693a      	ldr	r2, [r7, #16]
 80107a4:	621a      	str	r2, [r3, #32]
}
 80107a6:	bf00      	nop
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	40010000 	.word	0x40010000
 80107b8:	40010400 	.word	0x40010400

080107bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80107bc:	b480      	push	{r7}
 80107be:	b087      	sub	sp, #28
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	f003 031f 	and.w	r3, r3, #31
 80107ce:	2201      	movs	r2, #1
 80107d0:	fa02 f303 	lsl.w	r3, r2, r3
 80107d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6a1a      	ldr	r2, [r3, #32]
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	43db      	mvns	r3, r3
 80107de:	401a      	ands	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6a1a      	ldr	r2, [r3, #32]
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	f003 031f 	and.w	r3, r3, #31
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	fa01 f303 	lsl.w	r3, r1, r3
 80107f4:	431a      	orrs	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	621a      	str	r2, [r3, #32]
}
 80107fa:	bf00      	nop
 80107fc:	371c      	adds	r7, #28
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
	...

08010808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010818:	2b01      	cmp	r3, #1
 801081a:	d101      	bne.n	8010820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801081c:	2302      	movs	r3, #2
 801081e:	e05a      	b.n	80108d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2201      	movs	r2, #1
 8010824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2202      	movs	r2, #2
 801082c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	4313      	orrs	r3, r2
 8010850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a21      	ldr	r2, [pc, #132]	; (80108e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d022      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801086c:	d01d      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	4a1d      	ldr	r2, [pc, #116]	; (80108e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d018      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a1b      	ldr	r2, [pc, #108]	; (80108ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d013      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a1a      	ldr	r2, [pc, #104]	; (80108f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d00e      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a18      	ldr	r2, [pc, #96]	; (80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d009      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a17      	ldr	r2, [pc, #92]	; (80108f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d004      	beq.n	80108aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a15      	ldr	r2, [pc, #84]	; (80108fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d10c      	bne.n	80108c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	68ba      	ldr	r2, [r7, #8]
 80108b8:	4313      	orrs	r3, r2
 80108ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	40010000 	.word	0x40010000
 80108e8:	40000400 	.word	0x40000400
 80108ec:	40000800 	.word	0x40000800
 80108f0:	40000c00 	.word	0x40000c00
 80108f4:	40010400 	.word	0x40010400
 80108f8:	40014000 	.word	0x40014000
 80108fc:	40001800 	.word	0x40001800

08010900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801090a:	2300      	movs	r3, #0
 801090c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010914:	2b01      	cmp	r3, #1
 8010916:	d101      	bne.n	801091c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010918:	2302      	movs	r3, #2
 801091a:	e03d      	b.n	8010998 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2201      	movs	r2, #1
 8010920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	4313      	orrs	r3, r2
 8010930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	4313      	orrs	r3, r2
 801093e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	4313      	orrs	r3, r2
 801094c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4313      	orrs	r3, r2
 801095a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	4313      	orrs	r3, r2
 8010968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	695b      	ldr	r3, [r3, #20]
 8010974:	4313      	orrs	r3, r2
 8010976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	69db      	ldr	r3, [r3, #28]
 8010982:	4313      	orrs	r3, r2
 8010984:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80109c0:	bf00      	nop
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d101      	bne.n	80109de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109da:	2301      	movs	r3, #1
 80109dc:	e03f      	b.n	8010a5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d106      	bne.n	80109f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7fb fc04 	bl	800c200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2224      	movs	r2, #36	; 0x24
 80109fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	68da      	ldr	r2, [r3, #12]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fb4b 	bl	80110ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	691a      	ldr	r2, [r3, #16]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	695a      	ldr	r2, [r3, #20]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68da      	ldr	r2, [r3, #12]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2220      	movs	r2, #32
 8010a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2220      	movs	r2, #32
 8010a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b088      	sub	sp, #32
 8010a6a:	af02      	add	r7, sp, #8
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	60b9      	str	r1, [r7, #8]
 8010a70:	603b      	str	r3, [r7, #0]
 8010a72:	4613      	mov	r3, r2
 8010a74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010a76:	2300      	movs	r3, #0
 8010a78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	2b20      	cmp	r3, #32
 8010a84:	f040 8083 	bne.w	8010b8e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d002      	beq.n	8010a94 <HAL_UART_Transmit+0x2e>
 8010a8e:	88fb      	ldrh	r3, [r7, #6]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010a94:	2301      	movs	r3, #1
 8010a96:	e07b      	b.n	8010b90 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d101      	bne.n	8010aa6 <HAL_UART_Transmit+0x40>
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	e074      	b.n	8010b90 <HAL_UART_Transmit+0x12a>
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2221      	movs	r2, #33	; 0x21
 8010ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010abc:	f7fb fd82 	bl	800c5c4 <HAL_GetTick>
 8010ac0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	88fa      	ldrh	r2, [r7, #6]
 8010ac6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	88fa      	ldrh	r2, [r7, #6]
 8010acc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010ad6:	e042      	b.n	8010b5e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010aee:	d122      	bne.n	8010b36 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	2200      	movs	r2, #0
 8010af8:	2180      	movs	r1, #128	; 0x80
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f000 f96a 	bl	8010dd4 <UART_WaitOnFlagUntilTimeout>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8010b06:	2303      	movs	r3, #3
 8010b08:	e042      	b.n	8010b90 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	461a      	mov	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b1c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d103      	bne.n	8010b2e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	3302      	adds	r3, #2
 8010b2a:	60bb      	str	r3, [r7, #8]
 8010b2c:	e017      	b.n	8010b5e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	3301      	adds	r3, #1
 8010b32:	60bb      	str	r3, [r7, #8]
 8010b34:	e013      	b.n	8010b5e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	9300      	str	r3, [sp, #0]
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	2180      	movs	r1, #128	; 0x80
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f000 f947 	bl	8010dd4 <UART_WaitOnFlagUntilTimeout>
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d001      	beq.n	8010b50 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010b4c:	2303      	movs	r3, #3
 8010b4e:	e01f      	b.n	8010b90 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	60ba      	str	r2, [r7, #8]
 8010b56:	781a      	ldrb	r2, [r3, #0]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1b7      	bne.n	8010ad8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	2140      	movs	r1, #64	; 0x40
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f000 f92e 	bl	8010dd4 <UART_WaitOnFlagUntilTimeout>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8010b7e:	2303      	movs	r3, #3
 8010b80:	e006      	b.n	8010b90 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2220      	movs	r2, #32
 8010b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e000      	b.n	8010b90 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010b8e:	2302      	movs	r3, #2
  }
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3718      	adds	r7, #24
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b088      	sub	sp, #32
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	f003 030f 	and.w	r3, r3, #15
 8010bc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10d      	bne.n	8010bea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	f003 0320 	and.w	r3, r3, #32
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d008      	beq.n	8010bea <HAL_UART_IRQHandler+0x52>
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	f003 0320 	and.w	r3, r3, #32
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d003      	beq.n	8010bea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 f9e0 	bl	8010fa8 <UART_Receive_IT>
      return;
 8010be8:	e0d1      	b.n	8010d8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f000 80b0 	beq.w	8010d52 <HAL_UART_IRQHandler+0x1ba>
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d105      	bne.n	8010c08 <HAL_UART_IRQHandler+0x70>
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f000 80a5 	beq.w	8010d52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	f003 0301 	and.w	r3, r3, #1
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d00a      	beq.n	8010c28 <HAL_UART_IRQHandler+0x90>
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d005      	beq.n	8010c28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c20:	f043 0201 	orr.w	r2, r3, #1
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	f003 0304 	and.w	r3, r3, #4
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00a      	beq.n	8010c48 <HAL_UART_IRQHandler+0xb0>
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d005      	beq.n	8010c48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c40:	f043 0202 	orr.w	r2, r3, #2
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	f003 0302 	and.w	r3, r3, #2
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00a      	beq.n	8010c68 <HAL_UART_IRQHandler+0xd0>
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d005      	beq.n	8010c68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c60:	f043 0204 	orr.w	r2, r3, #4
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	f003 0308 	and.w	r3, r3, #8
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00f      	beq.n	8010c92 <HAL_UART_IRQHandler+0xfa>
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	f003 0320 	and.w	r3, r3, #32
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d104      	bne.n	8010c86 <HAL_UART_IRQHandler+0xee>
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	f003 0301 	and.w	r3, r3, #1
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d005      	beq.n	8010c92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c8a:	f043 0208 	orr.w	r2, r3, #8
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d078      	beq.n	8010d8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	f003 0320 	and.w	r3, r3, #32
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d007      	beq.n	8010cb4 <HAL_UART_IRQHandler+0x11c>
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	f003 0320 	and.w	r3, r3, #32
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d002      	beq.n	8010cb4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f97a 	bl	8010fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cbe:	2b40      	cmp	r3, #64	; 0x40
 8010cc0:	bf0c      	ite	eq
 8010cc2:	2301      	moveq	r3, #1
 8010cc4:	2300      	movne	r3, #0
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cce:	f003 0308 	and.w	r3, r3, #8
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d102      	bne.n	8010cdc <HAL_UART_IRQHandler+0x144>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d031      	beq.n	8010d40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 f8c3 	bl	8010e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	695b      	ldr	r3, [r3, #20]
 8010ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cec:	2b40      	cmp	r3, #64	; 0x40
 8010cee:	d123      	bne.n	8010d38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	695a      	ldr	r2, [r3, #20]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cfe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d013      	beq.n	8010d30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d0c:	4a21      	ldr	r2, [pc, #132]	; (8010d94 <HAL_UART_IRQHandler+0x1fc>)
 8010d0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fc fa85 	bl	800d224 <HAL_DMA_Abort_IT>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d016      	beq.n	8010d4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010d2a:	4610      	mov	r0, r2
 8010d2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d2e:	e00e      	b.n	8010d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 f845 	bl	8010dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d36:	e00a      	b.n	8010d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 f841 	bl	8010dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d3e:	e006      	b.n	8010d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 f83d 	bl	8010dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010d4c:	e01e      	b.n	8010d8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d4e:	bf00      	nop
    return;
 8010d50:	e01c      	b.n	8010d8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d008      	beq.n	8010d6e <HAL_UART_IRQHandler+0x1d6>
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d003      	beq.n	8010d6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 f8b0 	bl	8010ecc <UART_Transmit_IT>
    return;
 8010d6c:	e00f      	b.n	8010d8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00a      	beq.n	8010d8e <HAL_UART_IRQHandler+0x1f6>
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d005      	beq.n	8010d8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 f8f8 	bl	8010f78 <UART_EndTransmit_IT>
    return;
 8010d88:	bf00      	nop
 8010d8a:	e000      	b.n	8010d8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8010d8c:	bf00      	nop
  }
}
 8010d8e:	3720      	adds	r7, #32
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	08010ea5 	.word	0x08010ea5

08010d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010da0:	bf00      	nop
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010db4:	bf00      	nop
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010dc8:	bf00      	nop
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	603b      	str	r3, [r7, #0]
 8010de0:	4613      	mov	r3, r2
 8010de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010de4:	e02c      	b.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dec:	d028      	beq.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d007      	beq.n	8010e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8010df4:	f7fb fbe6 	bl	800c5c4 <HAL_GetTick>
 8010df8:	4602      	mov	r2, r0
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	69ba      	ldr	r2, [r7, #24]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d21d      	bcs.n	8010e40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	68da      	ldr	r2, [r3, #12]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010e12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	695a      	ldr	r2, [r3, #20]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f022 0201 	bic.w	r2, r2, #1
 8010e22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2220      	movs	r2, #32
 8010e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2220      	movs	r2, #32
 8010e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2200      	movs	r2, #0
 8010e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010e3c:	2303      	movs	r3, #3
 8010e3e:	e00f      	b.n	8010e60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	681a      	ldr	r2, [r3, #0]
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	4013      	ands	r3, r2
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	bf0c      	ite	eq
 8010e50:	2301      	moveq	r3, #1
 8010e52:	2300      	movne	r3, #0
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	461a      	mov	r2, r3
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d0c3      	beq.n	8010de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	68da      	ldr	r2, [r3, #12]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010e7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	695a      	ldr	r2, [r3, #20]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f022 0201 	bic.w	r2, r2, #1
 8010e8e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2220      	movs	r2, #32
 8010e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	f7ff ff7e 	bl	8010dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ec4:	bf00      	nop
 8010ec6:	3710      	adds	r7, #16
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b085      	sub	sp, #20
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	2b21      	cmp	r3, #33	; 0x21
 8010ede:	d144      	bne.n	8010f6a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ee8:	d11a      	bne.n	8010f20 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6a1b      	ldr	r3, [r3, #32]
 8010eee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	881b      	ldrh	r3, [r3, #0]
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010efe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d105      	bne.n	8010f14 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6a1b      	ldr	r3, [r3, #32]
 8010f0c:	1c9a      	adds	r2, r3, #2
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	621a      	str	r2, [r3, #32]
 8010f12:	e00e      	b.n	8010f32 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6a1b      	ldr	r3, [r3, #32]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	621a      	str	r2, [r3, #32]
 8010f1e:	e008      	b.n	8010f32 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a1b      	ldr	r3, [r3, #32]
 8010f24:	1c59      	adds	r1, r3, #1
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	6211      	str	r1, [r2, #32]
 8010f2a:	781a      	ldrb	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	3b01      	subs	r3, #1
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10f      	bne.n	8010f66 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68da      	ldr	r2, [r3, #12]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	68da      	ldr	r2, [r3, #12]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	e000      	b.n	8010f6c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010f6a:	2302      	movs	r3, #2
  }
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68da      	ldr	r2, [r3, #12]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2220      	movs	r2, #32
 8010f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7ff fefd 	bl	8010d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	2b22      	cmp	r3, #34	; 0x22
 8010fba:	d171      	bne.n	80110a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc4:	d123      	bne.n	801100e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	691b      	ldr	r3, [r3, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10e      	bne.n	8010ff2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fea:	1c9a      	adds	r2, r3, #2
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	629a      	str	r2, [r3, #40]	; 0x28
 8010ff0:	e029      	b.n	8011046 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	685b      	ldr	r3, [r3, #4]
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011006:	1c5a      	adds	r2, r3, #1
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	629a      	str	r2, [r3, #40]	; 0x28
 801100c:	e01b      	b.n	8011046 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	691b      	ldr	r3, [r3, #16]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d10a      	bne.n	801102c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	6858      	ldr	r0, [r3, #4]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011020:	1c59      	adds	r1, r3, #1
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	6291      	str	r1, [r2, #40]	; 0x28
 8011026:	b2c2      	uxtb	r2, r0
 8011028:	701a      	strb	r2, [r3, #0]
 801102a:	e00c      	b.n	8011046 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	b2da      	uxtb	r2, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011038:	1c58      	adds	r0, r3, #1
 801103a:	6879      	ldr	r1, [r7, #4]
 801103c:	6288      	str	r0, [r1, #40]	; 0x28
 801103e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011042:	b2d2      	uxtb	r2, r2
 8011044:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801104a:	b29b      	uxth	r3, r3
 801104c:	3b01      	subs	r3, #1
 801104e:	b29b      	uxth	r3, r3
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	4619      	mov	r1, r3
 8011054:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011056:	2b00      	cmp	r3, #0
 8011058:	d120      	bne.n	801109c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68da      	ldr	r2, [r3, #12]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f022 0220 	bic.w	r2, r2, #32
 8011068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68da      	ldr	r2, [r3, #12]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	695a      	ldr	r2, [r3, #20]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f022 0201 	bic.w	r2, r2, #1
 8011088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2220      	movs	r2, #32
 801108e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff fe8a 	bl	8010dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8011098:	2300      	movs	r3, #0
 801109a:	e002      	b.n	80110a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801109c:	2300      	movs	r3, #0
 801109e:	e000      	b.n	80110a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80110a0:	2302      	movs	r3, #2
  }
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
	...

080110ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b0:	b085      	sub	sp, #20
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	68da      	ldr	r2, [r3, #12]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	430a      	orrs	r2, r1
 80110ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	689a      	ldr	r2, [r3, #8]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	691b      	ldr	r3, [r3, #16]
 80110d4:	431a      	orrs	r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	695b      	ldr	r3, [r3, #20]
 80110da:	431a      	orrs	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	69db      	ldr	r3, [r3, #28]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80110ee:	f023 030c 	bic.w	r3, r3, #12
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	6812      	ldr	r2, [r2, #0]
 80110f6:	68f9      	ldr	r1, [r7, #12]
 80110f8:	430b      	orrs	r3, r1
 80110fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	695b      	ldr	r3, [r3, #20]
 8011102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	699a      	ldr	r2, [r3, #24]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	430a      	orrs	r2, r1
 8011110:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801111a:	f040 818b 	bne.w	8011434 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4ac1      	ldr	r2, [pc, #772]	; (8011428 <UART_SetConfig+0x37c>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d005      	beq.n	8011134 <UART_SetConfig+0x88>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4abf      	ldr	r2, [pc, #764]	; (801142c <UART_SetConfig+0x380>)
 801112e:	4293      	cmp	r3, r2
 8011130:	f040 80bd 	bne.w	80112ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011134:	f7fe f80a 	bl	800f14c <HAL_RCC_GetPCLK2Freq>
 8011138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	461d      	mov	r5, r3
 801113e:	f04f 0600 	mov.w	r6, #0
 8011142:	46a8      	mov	r8, r5
 8011144:	46b1      	mov	r9, r6
 8011146:	eb18 0308 	adds.w	r3, r8, r8
 801114a:	eb49 0409 	adc.w	r4, r9, r9
 801114e:	4698      	mov	r8, r3
 8011150:	46a1      	mov	r9, r4
 8011152:	eb18 0805 	adds.w	r8, r8, r5
 8011156:	eb49 0906 	adc.w	r9, r9, r6
 801115a:	f04f 0100 	mov.w	r1, #0
 801115e:	f04f 0200 	mov.w	r2, #0
 8011162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801116a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801116e:	4688      	mov	r8, r1
 8011170:	4691      	mov	r9, r2
 8011172:	eb18 0005 	adds.w	r0, r8, r5
 8011176:	eb49 0106 	adc.w	r1, r9, r6
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	461d      	mov	r5, r3
 8011180:	f04f 0600 	mov.w	r6, #0
 8011184:	196b      	adds	r3, r5, r5
 8011186:	eb46 0406 	adc.w	r4, r6, r6
 801118a:	461a      	mov	r2, r3
 801118c:	4623      	mov	r3, r4
 801118e:	f7f7 fc93 	bl	8008ab8 <__aeabi_uldivmod>
 8011192:	4603      	mov	r3, r0
 8011194:	460c      	mov	r4, r1
 8011196:	461a      	mov	r2, r3
 8011198:	4ba5      	ldr	r3, [pc, #660]	; (8011430 <UART_SetConfig+0x384>)
 801119a:	fba3 2302 	umull	r2, r3, r3, r2
 801119e:	095b      	lsrs	r3, r3, #5
 80111a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	461d      	mov	r5, r3
 80111a8:	f04f 0600 	mov.w	r6, #0
 80111ac:	46a9      	mov	r9, r5
 80111ae:	46b2      	mov	sl, r6
 80111b0:	eb19 0309 	adds.w	r3, r9, r9
 80111b4:	eb4a 040a 	adc.w	r4, sl, sl
 80111b8:	4699      	mov	r9, r3
 80111ba:	46a2      	mov	sl, r4
 80111bc:	eb19 0905 	adds.w	r9, r9, r5
 80111c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80111c4:	f04f 0100 	mov.w	r1, #0
 80111c8:	f04f 0200 	mov.w	r2, #0
 80111cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80111d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80111d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80111d8:	4689      	mov	r9, r1
 80111da:	4692      	mov	sl, r2
 80111dc:	eb19 0005 	adds.w	r0, r9, r5
 80111e0:	eb4a 0106 	adc.w	r1, sl, r6
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	461d      	mov	r5, r3
 80111ea:	f04f 0600 	mov.w	r6, #0
 80111ee:	196b      	adds	r3, r5, r5
 80111f0:	eb46 0406 	adc.w	r4, r6, r6
 80111f4:	461a      	mov	r2, r3
 80111f6:	4623      	mov	r3, r4
 80111f8:	f7f7 fc5e 	bl	8008ab8 <__aeabi_uldivmod>
 80111fc:	4603      	mov	r3, r0
 80111fe:	460c      	mov	r4, r1
 8011200:	461a      	mov	r2, r3
 8011202:	4b8b      	ldr	r3, [pc, #556]	; (8011430 <UART_SetConfig+0x384>)
 8011204:	fba3 1302 	umull	r1, r3, r3, r2
 8011208:	095b      	lsrs	r3, r3, #5
 801120a:	2164      	movs	r1, #100	; 0x64
 801120c:	fb01 f303 	mul.w	r3, r1, r3
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	00db      	lsls	r3, r3, #3
 8011214:	3332      	adds	r3, #50	; 0x32
 8011216:	4a86      	ldr	r2, [pc, #536]	; (8011430 <UART_SetConfig+0x384>)
 8011218:	fba2 2303 	umull	r2, r3, r2, r3
 801121c:	095b      	lsrs	r3, r3, #5
 801121e:	005b      	lsls	r3, r3, #1
 8011220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011224:	4498      	add	r8, r3
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	461d      	mov	r5, r3
 801122a:	f04f 0600 	mov.w	r6, #0
 801122e:	46a9      	mov	r9, r5
 8011230:	46b2      	mov	sl, r6
 8011232:	eb19 0309 	adds.w	r3, r9, r9
 8011236:	eb4a 040a 	adc.w	r4, sl, sl
 801123a:	4699      	mov	r9, r3
 801123c:	46a2      	mov	sl, r4
 801123e:	eb19 0905 	adds.w	r9, r9, r5
 8011242:	eb4a 0a06 	adc.w	sl, sl, r6
 8011246:	f04f 0100 	mov.w	r1, #0
 801124a:	f04f 0200 	mov.w	r2, #0
 801124e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801125a:	4689      	mov	r9, r1
 801125c:	4692      	mov	sl, r2
 801125e:	eb19 0005 	adds.w	r0, r9, r5
 8011262:	eb4a 0106 	adc.w	r1, sl, r6
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	461d      	mov	r5, r3
 801126c:	f04f 0600 	mov.w	r6, #0
 8011270:	196b      	adds	r3, r5, r5
 8011272:	eb46 0406 	adc.w	r4, r6, r6
 8011276:	461a      	mov	r2, r3
 8011278:	4623      	mov	r3, r4
 801127a:	f7f7 fc1d 	bl	8008ab8 <__aeabi_uldivmod>
 801127e:	4603      	mov	r3, r0
 8011280:	460c      	mov	r4, r1
 8011282:	461a      	mov	r2, r3
 8011284:	4b6a      	ldr	r3, [pc, #424]	; (8011430 <UART_SetConfig+0x384>)
 8011286:	fba3 1302 	umull	r1, r3, r3, r2
 801128a:	095b      	lsrs	r3, r3, #5
 801128c:	2164      	movs	r1, #100	; 0x64
 801128e:	fb01 f303 	mul.w	r3, r1, r3
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	00db      	lsls	r3, r3, #3
 8011296:	3332      	adds	r3, #50	; 0x32
 8011298:	4a65      	ldr	r2, [pc, #404]	; (8011430 <UART_SetConfig+0x384>)
 801129a:	fba2 2303 	umull	r2, r3, r2, r3
 801129e:	095b      	lsrs	r3, r3, #5
 80112a0:	f003 0207 	and.w	r2, r3, #7
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4442      	add	r2, r8
 80112aa:	609a      	str	r2, [r3, #8]
 80112ac:	e26f      	b.n	801178e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80112ae:	f7fd ff39 	bl	800f124 <HAL_RCC_GetPCLK1Freq>
 80112b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	461d      	mov	r5, r3
 80112b8:	f04f 0600 	mov.w	r6, #0
 80112bc:	46a8      	mov	r8, r5
 80112be:	46b1      	mov	r9, r6
 80112c0:	eb18 0308 	adds.w	r3, r8, r8
 80112c4:	eb49 0409 	adc.w	r4, r9, r9
 80112c8:	4698      	mov	r8, r3
 80112ca:	46a1      	mov	r9, r4
 80112cc:	eb18 0805 	adds.w	r8, r8, r5
 80112d0:	eb49 0906 	adc.w	r9, r9, r6
 80112d4:	f04f 0100 	mov.w	r1, #0
 80112d8:	f04f 0200 	mov.w	r2, #0
 80112dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80112e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80112e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80112e8:	4688      	mov	r8, r1
 80112ea:	4691      	mov	r9, r2
 80112ec:	eb18 0005 	adds.w	r0, r8, r5
 80112f0:	eb49 0106 	adc.w	r1, r9, r6
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	461d      	mov	r5, r3
 80112fa:	f04f 0600 	mov.w	r6, #0
 80112fe:	196b      	adds	r3, r5, r5
 8011300:	eb46 0406 	adc.w	r4, r6, r6
 8011304:	461a      	mov	r2, r3
 8011306:	4623      	mov	r3, r4
 8011308:	f7f7 fbd6 	bl	8008ab8 <__aeabi_uldivmod>
 801130c:	4603      	mov	r3, r0
 801130e:	460c      	mov	r4, r1
 8011310:	461a      	mov	r2, r3
 8011312:	4b47      	ldr	r3, [pc, #284]	; (8011430 <UART_SetConfig+0x384>)
 8011314:	fba3 2302 	umull	r2, r3, r3, r2
 8011318:	095b      	lsrs	r3, r3, #5
 801131a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	461d      	mov	r5, r3
 8011322:	f04f 0600 	mov.w	r6, #0
 8011326:	46a9      	mov	r9, r5
 8011328:	46b2      	mov	sl, r6
 801132a:	eb19 0309 	adds.w	r3, r9, r9
 801132e:	eb4a 040a 	adc.w	r4, sl, sl
 8011332:	4699      	mov	r9, r3
 8011334:	46a2      	mov	sl, r4
 8011336:	eb19 0905 	adds.w	r9, r9, r5
 801133a:	eb4a 0a06 	adc.w	sl, sl, r6
 801133e:	f04f 0100 	mov.w	r1, #0
 8011342:	f04f 0200 	mov.w	r2, #0
 8011346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801134a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801134e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011352:	4689      	mov	r9, r1
 8011354:	4692      	mov	sl, r2
 8011356:	eb19 0005 	adds.w	r0, r9, r5
 801135a:	eb4a 0106 	adc.w	r1, sl, r6
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	461d      	mov	r5, r3
 8011364:	f04f 0600 	mov.w	r6, #0
 8011368:	196b      	adds	r3, r5, r5
 801136a:	eb46 0406 	adc.w	r4, r6, r6
 801136e:	461a      	mov	r2, r3
 8011370:	4623      	mov	r3, r4
 8011372:	f7f7 fba1 	bl	8008ab8 <__aeabi_uldivmod>
 8011376:	4603      	mov	r3, r0
 8011378:	460c      	mov	r4, r1
 801137a:	461a      	mov	r2, r3
 801137c:	4b2c      	ldr	r3, [pc, #176]	; (8011430 <UART_SetConfig+0x384>)
 801137e:	fba3 1302 	umull	r1, r3, r3, r2
 8011382:	095b      	lsrs	r3, r3, #5
 8011384:	2164      	movs	r1, #100	; 0x64
 8011386:	fb01 f303 	mul.w	r3, r1, r3
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	00db      	lsls	r3, r3, #3
 801138e:	3332      	adds	r3, #50	; 0x32
 8011390:	4a27      	ldr	r2, [pc, #156]	; (8011430 <UART_SetConfig+0x384>)
 8011392:	fba2 2303 	umull	r2, r3, r2, r3
 8011396:	095b      	lsrs	r3, r3, #5
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801139e:	4498      	add	r8, r3
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	461d      	mov	r5, r3
 80113a4:	f04f 0600 	mov.w	r6, #0
 80113a8:	46a9      	mov	r9, r5
 80113aa:	46b2      	mov	sl, r6
 80113ac:	eb19 0309 	adds.w	r3, r9, r9
 80113b0:	eb4a 040a 	adc.w	r4, sl, sl
 80113b4:	4699      	mov	r9, r3
 80113b6:	46a2      	mov	sl, r4
 80113b8:	eb19 0905 	adds.w	r9, r9, r5
 80113bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80113c0:	f04f 0100 	mov.w	r1, #0
 80113c4:	f04f 0200 	mov.w	r2, #0
 80113c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80113cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80113d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80113d4:	4689      	mov	r9, r1
 80113d6:	4692      	mov	sl, r2
 80113d8:	eb19 0005 	adds.w	r0, r9, r5
 80113dc:	eb4a 0106 	adc.w	r1, sl, r6
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	461d      	mov	r5, r3
 80113e6:	f04f 0600 	mov.w	r6, #0
 80113ea:	196b      	adds	r3, r5, r5
 80113ec:	eb46 0406 	adc.w	r4, r6, r6
 80113f0:	461a      	mov	r2, r3
 80113f2:	4623      	mov	r3, r4
 80113f4:	f7f7 fb60 	bl	8008ab8 <__aeabi_uldivmod>
 80113f8:	4603      	mov	r3, r0
 80113fa:	460c      	mov	r4, r1
 80113fc:	461a      	mov	r2, r3
 80113fe:	4b0c      	ldr	r3, [pc, #48]	; (8011430 <UART_SetConfig+0x384>)
 8011400:	fba3 1302 	umull	r1, r3, r3, r2
 8011404:	095b      	lsrs	r3, r3, #5
 8011406:	2164      	movs	r1, #100	; 0x64
 8011408:	fb01 f303 	mul.w	r3, r1, r3
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	00db      	lsls	r3, r3, #3
 8011410:	3332      	adds	r3, #50	; 0x32
 8011412:	4a07      	ldr	r2, [pc, #28]	; (8011430 <UART_SetConfig+0x384>)
 8011414:	fba2 2303 	umull	r2, r3, r2, r3
 8011418:	095b      	lsrs	r3, r3, #5
 801141a:	f003 0207 	and.w	r2, r3, #7
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4442      	add	r2, r8
 8011424:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011426:	e1b2      	b.n	801178e <UART_SetConfig+0x6e2>
 8011428:	40011000 	.word	0x40011000
 801142c:	40011400 	.word	0x40011400
 8011430:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4ad7      	ldr	r2, [pc, #860]	; (8011798 <UART_SetConfig+0x6ec>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d005      	beq.n	801144a <UART_SetConfig+0x39e>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	4ad6      	ldr	r2, [pc, #856]	; (801179c <UART_SetConfig+0x6f0>)
 8011444:	4293      	cmp	r3, r2
 8011446:	f040 80d1 	bne.w	80115ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801144a:	f7fd fe7f 	bl	800f14c <HAL_RCC_GetPCLK2Freq>
 801144e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	469a      	mov	sl, r3
 8011454:	f04f 0b00 	mov.w	fp, #0
 8011458:	46d0      	mov	r8, sl
 801145a:	46d9      	mov	r9, fp
 801145c:	eb18 0308 	adds.w	r3, r8, r8
 8011460:	eb49 0409 	adc.w	r4, r9, r9
 8011464:	4698      	mov	r8, r3
 8011466:	46a1      	mov	r9, r4
 8011468:	eb18 080a 	adds.w	r8, r8, sl
 801146c:	eb49 090b 	adc.w	r9, r9, fp
 8011470:	f04f 0100 	mov.w	r1, #0
 8011474:	f04f 0200 	mov.w	r2, #0
 8011478:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801147c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011480:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011484:	4688      	mov	r8, r1
 8011486:	4691      	mov	r9, r2
 8011488:	eb1a 0508 	adds.w	r5, sl, r8
 801148c:	eb4b 0609 	adc.w	r6, fp, r9
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	4619      	mov	r1, r3
 8011496:	f04f 0200 	mov.w	r2, #0
 801149a:	f04f 0300 	mov.w	r3, #0
 801149e:	f04f 0400 	mov.w	r4, #0
 80114a2:	0094      	lsls	r4, r2, #2
 80114a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80114a8:	008b      	lsls	r3, r1, #2
 80114aa:	461a      	mov	r2, r3
 80114ac:	4623      	mov	r3, r4
 80114ae:	4628      	mov	r0, r5
 80114b0:	4631      	mov	r1, r6
 80114b2:	f7f7 fb01 	bl	8008ab8 <__aeabi_uldivmod>
 80114b6:	4603      	mov	r3, r0
 80114b8:	460c      	mov	r4, r1
 80114ba:	461a      	mov	r2, r3
 80114bc:	4bb8      	ldr	r3, [pc, #736]	; (80117a0 <UART_SetConfig+0x6f4>)
 80114be:	fba3 2302 	umull	r2, r3, r3, r2
 80114c2:	095b      	lsrs	r3, r3, #5
 80114c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	469b      	mov	fp, r3
 80114cc:	f04f 0c00 	mov.w	ip, #0
 80114d0:	46d9      	mov	r9, fp
 80114d2:	46e2      	mov	sl, ip
 80114d4:	eb19 0309 	adds.w	r3, r9, r9
 80114d8:	eb4a 040a 	adc.w	r4, sl, sl
 80114dc:	4699      	mov	r9, r3
 80114de:	46a2      	mov	sl, r4
 80114e0:	eb19 090b 	adds.w	r9, r9, fp
 80114e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80114e8:	f04f 0100 	mov.w	r1, #0
 80114ec:	f04f 0200 	mov.w	r2, #0
 80114f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80114f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80114f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80114fc:	4689      	mov	r9, r1
 80114fe:	4692      	mov	sl, r2
 8011500:	eb1b 0509 	adds.w	r5, fp, r9
 8011504:	eb4c 060a 	adc.w	r6, ip, sl
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	4619      	mov	r1, r3
 801150e:	f04f 0200 	mov.w	r2, #0
 8011512:	f04f 0300 	mov.w	r3, #0
 8011516:	f04f 0400 	mov.w	r4, #0
 801151a:	0094      	lsls	r4, r2, #2
 801151c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011520:	008b      	lsls	r3, r1, #2
 8011522:	461a      	mov	r2, r3
 8011524:	4623      	mov	r3, r4
 8011526:	4628      	mov	r0, r5
 8011528:	4631      	mov	r1, r6
 801152a:	f7f7 fac5 	bl	8008ab8 <__aeabi_uldivmod>
 801152e:	4603      	mov	r3, r0
 8011530:	460c      	mov	r4, r1
 8011532:	461a      	mov	r2, r3
 8011534:	4b9a      	ldr	r3, [pc, #616]	; (80117a0 <UART_SetConfig+0x6f4>)
 8011536:	fba3 1302 	umull	r1, r3, r3, r2
 801153a:	095b      	lsrs	r3, r3, #5
 801153c:	2164      	movs	r1, #100	; 0x64
 801153e:	fb01 f303 	mul.w	r3, r1, r3
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	011b      	lsls	r3, r3, #4
 8011546:	3332      	adds	r3, #50	; 0x32
 8011548:	4a95      	ldr	r2, [pc, #596]	; (80117a0 <UART_SetConfig+0x6f4>)
 801154a:	fba2 2303 	umull	r2, r3, r2, r3
 801154e:	095b      	lsrs	r3, r3, #5
 8011550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011554:	4498      	add	r8, r3
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	469b      	mov	fp, r3
 801155a:	f04f 0c00 	mov.w	ip, #0
 801155e:	46d9      	mov	r9, fp
 8011560:	46e2      	mov	sl, ip
 8011562:	eb19 0309 	adds.w	r3, r9, r9
 8011566:	eb4a 040a 	adc.w	r4, sl, sl
 801156a:	4699      	mov	r9, r3
 801156c:	46a2      	mov	sl, r4
 801156e:	eb19 090b 	adds.w	r9, r9, fp
 8011572:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011576:	f04f 0100 	mov.w	r1, #0
 801157a:	f04f 0200 	mov.w	r2, #0
 801157e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801158a:	4689      	mov	r9, r1
 801158c:	4692      	mov	sl, r2
 801158e:	eb1b 0509 	adds.w	r5, fp, r9
 8011592:	eb4c 060a 	adc.w	r6, ip, sl
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	4619      	mov	r1, r3
 801159c:	f04f 0200 	mov.w	r2, #0
 80115a0:	f04f 0300 	mov.w	r3, #0
 80115a4:	f04f 0400 	mov.w	r4, #0
 80115a8:	0094      	lsls	r4, r2, #2
 80115aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80115ae:	008b      	lsls	r3, r1, #2
 80115b0:	461a      	mov	r2, r3
 80115b2:	4623      	mov	r3, r4
 80115b4:	4628      	mov	r0, r5
 80115b6:	4631      	mov	r1, r6
 80115b8:	f7f7 fa7e 	bl	8008ab8 <__aeabi_uldivmod>
 80115bc:	4603      	mov	r3, r0
 80115be:	460c      	mov	r4, r1
 80115c0:	461a      	mov	r2, r3
 80115c2:	4b77      	ldr	r3, [pc, #476]	; (80117a0 <UART_SetConfig+0x6f4>)
 80115c4:	fba3 1302 	umull	r1, r3, r3, r2
 80115c8:	095b      	lsrs	r3, r3, #5
 80115ca:	2164      	movs	r1, #100	; 0x64
 80115cc:	fb01 f303 	mul.w	r3, r1, r3
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	011b      	lsls	r3, r3, #4
 80115d4:	3332      	adds	r3, #50	; 0x32
 80115d6:	4a72      	ldr	r2, [pc, #456]	; (80117a0 <UART_SetConfig+0x6f4>)
 80115d8:	fba2 2303 	umull	r2, r3, r2, r3
 80115dc:	095b      	lsrs	r3, r3, #5
 80115de:	f003 020f 	and.w	r2, r3, #15
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4442      	add	r2, r8
 80115e8:	609a      	str	r2, [r3, #8]
 80115ea:	e0d0      	b.n	801178e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80115ec:	f7fd fd9a 	bl	800f124 <HAL_RCC_GetPCLK1Freq>
 80115f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	469a      	mov	sl, r3
 80115f6:	f04f 0b00 	mov.w	fp, #0
 80115fa:	46d0      	mov	r8, sl
 80115fc:	46d9      	mov	r9, fp
 80115fe:	eb18 0308 	adds.w	r3, r8, r8
 8011602:	eb49 0409 	adc.w	r4, r9, r9
 8011606:	4698      	mov	r8, r3
 8011608:	46a1      	mov	r9, r4
 801160a:	eb18 080a 	adds.w	r8, r8, sl
 801160e:	eb49 090b 	adc.w	r9, r9, fp
 8011612:	f04f 0100 	mov.w	r1, #0
 8011616:	f04f 0200 	mov.w	r2, #0
 801161a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801161e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011622:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011626:	4688      	mov	r8, r1
 8011628:	4691      	mov	r9, r2
 801162a:	eb1a 0508 	adds.w	r5, sl, r8
 801162e:	eb4b 0609 	adc.w	r6, fp, r9
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	4619      	mov	r1, r3
 8011638:	f04f 0200 	mov.w	r2, #0
 801163c:	f04f 0300 	mov.w	r3, #0
 8011640:	f04f 0400 	mov.w	r4, #0
 8011644:	0094      	lsls	r4, r2, #2
 8011646:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801164a:	008b      	lsls	r3, r1, #2
 801164c:	461a      	mov	r2, r3
 801164e:	4623      	mov	r3, r4
 8011650:	4628      	mov	r0, r5
 8011652:	4631      	mov	r1, r6
 8011654:	f7f7 fa30 	bl	8008ab8 <__aeabi_uldivmod>
 8011658:	4603      	mov	r3, r0
 801165a:	460c      	mov	r4, r1
 801165c:	461a      	mov	r2, r3
 801165e:	4b50      	ldr	r3, [pc, #320]	; (80117a0 <UART_SetConfig+0x6f4>)
 8011660:	fba3 2302 	umull	r2, r3, r3, r2
 8011664:	095b      	lsrs	r3, r3, #5
 8011666:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	469b      	mov	fp, r3
 801166e:	f04f 0c00 	mov.w	ip, #0
 8011672:	46d9      	mov	r9, fp
 8011674:	46e2      	mov	sl, ip
 8011676:	eb19 0309 	adds.w	r3, r9, r9
 801167a:	eb4a 040a 	adc.w	r4, sl, sl
 801167e:	4699      	mov	r9, r3
 8011680:	46a2      	mov	sl, r4
 8011682:	eb19 090b 	adds.w	r9, r9, fp
 8011686:	eb4a 0a0c 	adc.w	sl, sl, ip
 801168a:	f04f 0100 	mov.w	r1, #0
 801168e:	f04f 0200 	mov.w	r2, #0
 8011692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801169a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801169e:	4689      	mov	r9, r1
 80116a0:	4692      	mov	sl, r2
 80116a2:	eb1b 0509 	adds.w	r5, fp, r9
 80116a6:	eb4c 060a 	adc.w	r6, ip, sl
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	4619      	mov	r1, r3
 80116b0:	f04f 0200 	mov.w	r2, #0
 80116b4:	f04f 0300 	mov.w	r3, #0
 80116b8:	f04f 0400 	mov.w	r4, #0
 80116bc:	0094      	lsls	r4, r2, #2
 80116be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80116c2:	008b      	lsls	r3, r1, #2
 80116c4:	461a      	mov	r2, r3
 80116c6:	4623      	mov	r3, r4
 80116c8:	4628      	mov	r0, r5
 80116ca:	4631      	mov	r1, r6
 80116cc:	f7f7 f9f4 	bl	8008ab8 <__aeabi_uldivmod>
 80116d0:	4603      	mov	r3, r0
 80116d2:	460c      	mov	r4, r1
 80116d4:	461a      	mov	r2, r3
 80116d6:	4b32      	ldr	r3, [pc, #200]	; (80117a0 <UART_SetConfig+0x6f4>)
 80116d8:	fba3 1302 	umull	r1, r3, r3, r2
 80116dc:	095b      	lsrs	r3, r3, #5
 80116de:	2164      	movs	r1, #100	; 0x64
 80116e0:	fb01 f303 	mul.w	r3, r1, r3
 80116e4:	1ad3      	subs	r3, r2, r3
 80116e6:	011b      	lsls	r3, r3, #4
 80116e8:	3332      	adds	r3, #50	; 0x32
 80116ea:	4a2d      	ldr	r2, [pc, #180]	; (80117a0 <UART_SetConfig+0x6f4>)
 80116ec:	fba2 2303 	umull	r2, r3, r2, r3
 80116f0:	095b      	lsrs	r3, r3, #5
 80116f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116f6:	4498      	add	r8, r3
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	469b      	mov	fp, r3
 80116fc:	f04f 0c00 	mov.w	ip, #0
 8011700:	46d9      	mov	r9, fp
 8011702:	46e2      	mov	sl, ip
 8011704:	eb19 0309 	adds.w	r3, r9, r9
 8011708:	eb4a 040a 	adc.w	r4, sl, sl
 801170c:	4699      	mov	r9, r3
 801170e:	46a2      	mov	sl, r4
 8011710:	eb19 090b 	adds.w	r9, r9, fp
 8011714:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011718:	f04f 0100 	mov.w	r1, #0
 801171c:	f04f 0200 	mov.w	r2, #0
 8011720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801172c:	4689      	mov	r9, r1
 801172e:	4692      	mov	sl, r2
 8011730:	eb1b 0509 	adds.w	r5, fp, r9
 8011734:	eb4c 060a 	adc.w	r6, ip, sl
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	4619      	mov	r1, r3
 801173e:	f04f 0200 	mov.w	r2, #0
 8011742:	f04f 0300 	mov.w	r3, #0
 8011746:	f04f 0400 	mov.w	r4, #0
 801174a:	0094      	lsls	r4, r2, #2
 801174c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011750:	008b      	lsls	r3, r1, #2
 8011752:	461a      	mov	r2, r3
 8011754:	4623      	mov	r3, r4
 8011756:	4628      	mov	r0, r5
 8011758:	4631      	mov	r1, r6
 801175a:	f7f7 f9ad 	bl	8008ab8 <__aeabi_uldivmod>
 801175e:	4603      	mov	r3, r0
 8011760:	460c      	mov	r4, r1
 8011762:	461a      	mov	r2, r3
 8011764:	4b0e      	ldr	r3, [pc, #56]	; (80117a0 <UART_SetConfig+0x6f4>)
 8011766:	fba3 1302 	umull	r1, r3, r3, r2
 801176a:	095b      	lsrs	r3, r3, #5
 801176c:	2164      	movs	r1, #100	; 0x64
 801176e:	fb01 f303 	mul.w	r3, r1, r3
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	011b      	lsls	r3, r3, #4
 8011776:	3332      	adds	r3, #50	; 0x32
 8011778:	4a09      	ldr	r2, [pc, #36]	; (80117a0 <UART_SetConfig+0x6f4>)
 801177a:	fba2 2303 	umull	r2, r3, r2, r3
 801177e:	095b      	lsrs	r3, r3, #5
 8011780:	f003 020f 	and.w	r2, r3, #15
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4442      	add	r2, r8
 801178a:	609a      	str	r2, [r3, #8]
}
 801178c:	e7ff      	b.n	801178e <UART_SetConfig+0x6e2>
 801178e:	bf00      	nop
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011798:	40011000 	.word	0x40011000
 801179c:	40011400 	.word	0x40011400
 80117a0:	51eb851f 	.word	0x51eb851f

080117a4 <__errno>:
 80117a4:	4b01      	ldr	r3, [pc, #4]	; (80117ac <__errno+0x8>)
 80117a6:	6818      	ldr	r0, [r3, #0]
 80117a8:	4770      	bx	lr
 80117aa:	bf00      	nop
 80117ac:	20000018 	.word	0x20000018

080117b0 <__libc_init_array>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	4e0d      	ldr	r6, [pc, #52]	; (80117e8 <__libc_init_array+0x38>)
 80117b4:	4c0d      	ldr	r4, [pc, #52]	; (80117ec <__libc_init_array+0x3c>)
 80117b6:	1ba4      	subs	r4, r4, r6
 80117b8:	10a4      	asrs	r4, r4, #2
 80117ba:	2500      	movs	r5, #0
 80117bc:	42a5      	cmp	r5, r4
 80117be:	d109      	bne.n	80117d4 <__libc_init_array+0x24>
 80117c0:	4e0b      	ldr	r6, [pc, #44]	; (80117f0 <__libc_init_array+0x40>)
 80117c2:	4c0c      	ldr	r4, [pc, #48]	; (80117f4 <__libc_init_array+0x44>)
 80117c4:	f002 fd28 	bl	8014218 <_init>
 80117c8:	1ba4      	subs	r4, r4, r6
 80117ca:	10a4      	asrs	r4, r4, #2
 80117cc:	2500      	movs	r5, #0
 80117ce:	42a5      	cmp	r5, r4
 80117d0:	d105      	bne.n	80117de <__libc_init_array+0x2e>
 80117d2:	bd70      	pop	{r4, r5, r6, pc}
 80117d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80117d8:	4798      	blx	r3
 80117da:	3501      	adds	r5, #1
 80117dc:	e7ee      	b.n	80117bc <__libc_init_array+0xc>
 80117de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80117e2:	4798      	blx	r3
 80117e4:	3501      	adds	r5, #1
 80117e6:	e7f2      	b.n	80117ce <__libc_init_array+0x1e>
 80117e8:	08014550 	.word	0x08014550
 80117ec:	08014550 	.word	0x08014550
 80117f0:	08014550 	.word	0x08014550
 80117f4:	08014554 	.word	0x08014554

080117f8 <memcpy>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	1e43      	subs	r3, r0, #1
 80117fc:	440a      	add	r2, r1
 80117fe:	4291      	cmp	r1, r2
 8011800:	d100      	bne.n	8011804 <memcpy+0xc>
 8011802:	bd10      	pop	{r4, pc}
 8011804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011808:	f803 4f01 	strb.w	r4, [r3, #1]!
 801180c:	e7f7      	b.n	80117fe <memcpy+0x6>

0801180e <memset>:
 801180e:	4402      	add	r2, r0
 8011810:	4603      	mov	r3, r0
 8011812:	4293      	cmp	r3, r2
 8011814:	d100      	bne.n	8011818 <memset+0xa>
 8011816:	4770      	bx	lr
 8011818:	f803 1b01 	strb.w	r1, [r3], #1
 801181c:	e7f9      	b.n	8011812 <memset+0x4>

0801181e <__cvt>:
 801181e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011822:	ec55 4b10 	vmov	r4, r5, d0
 8011826:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801182c:	2d00      	cmp	r5, #0
 801182e:	460e      	mov	r6, r1
 8011830:	4691      	mov	r9, r2
 8011832:	4619      	mov	r1, r3
 8011834:	bfb8      	it	lt
 8011836:	4622      	movlt	r2, r4
 8011838:	462b      	mov	r3, r5
 801183a:	f027 0720 	bic.w	r7, r7, #32
 801183e:	bfbb      	ittet	lt
 8011840:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011844:	461d      	movlt	r5, r3
 8011846:	2300      	movge	r3, #0
 8011848:	232d      	movlt	r3, #45	; 0x2d
 801184a:	bfb8      	it	lt
 801184c:	4614      	movlt	r4, r2
 801184e:	2f46      	cmp	r7, #70	; 0x46
 8011850:	700b      	strb	r3, [r1, #0]
 8011852:	d004      	beq.n	801185e <__cvt+0x40>
 8011854:	2f45      	cmp	r7, #69	; 0x45
 8011856:	d100      	bne.n	801185a <__cvt+0x3c>
 8011858:	3601      	adds	r6, #1
 801185a:	2102      	movs	r1, #2
 801185c:	e000      	b.n	8011860 <__cvt+0x42>
 801185e:	2103      	movs	r1, #3
 8011860:	ab03      	add	r3, sp, #12
 8011862:	9301      	str	r3, [sp, #4]
 8011864:	ab02      	add	r3, sp, #8
 8011866:	9300      	str	r3, [sp, #0]
 8011868:	4632      	mov	r2, r6
 801186a:	4653      	mov	r3, sl
 801186c:	ec45 4b10 	vmov	d0, r4, r5
 8011870:	f000 fcf6 	bl	8012260 <_dtoa_r>
 8011874:	2f47      	cmp	r7, #71	; 0x47
 8011876:	4680      	mov	r8, r0
 8011878:	d102      	bne.n	8011880 <__cvt+0x62>
 801187a:	f019 0f01 	tst.w	r9, #1
 801187e:	d026      	beq.n	80118ce <__cvt+0xb0>
 8011880:	2f46      	cmp	r7, #70	; 0x46
 8011882:	eb08 0906 	add.w	r9, r8, r6
 8011886:	d111      	bne.n	80118ac <__cvt+0x8e>
 8011888:	f898 3000 	ldrb.w	r3, [r8]
 801188c:	2b30      	cmp	r3, #48	; 0x30
 801188e:	d10a      	bne.n	80118a6 <__cvt+0x88>
 8011890:	2200      	movs	r2, #0
 8011892:	2300      	movs	r3, #0
 8011894:	4620      	mov	r0, r4
 8011896:	4629      	mov	r1, r5
 8011898:	f7f7 f84e 	bl	8008938 <__aeabi_dcmpeq>
 801189c:	b918      	cbnz	r0, 80118a6 <__cvt+0x88>
 801189e:	f1c6 0601 	rsb	r6, r6, #1
 80118a2:	f8ca 6000 	str.w	r6, [sl]
 80118a6:	f8da 3000 	ldr.w	r3, [sl]
 80118aa:	4499      	add	r9, r3
 80118ac:	2200      	movs	r2, #0
 80118ae:	2300      	movs	r3, #0
 80118b0:	4620      	mov	r0, r4
 80118b2:	4629      	mov	r1, r5
 80118b4:	f7f7 f840 	bl	8008938 <__aeabi_dcmpeq>
 80118b8:	b938      	cbnz	r0, 80118ca <__cvt+0xac>
 80118ba:	2230      	movs	r2, #48	; 0x30
 80118bc:	9b03      	ldr	r3, [sp, #12]
 80118be:	454b      	cmp	r3, r9
 80118c0:	d205      	bcs.n	80118ce <__cvt+0xb0>
 80118c2:	1c59      	adds	r1, r3, #1
 80118c4:	9103      	str	r1, [sp, #12]
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	e7f8      	b.n	80118bc <__cvt+0x9e>
 80118ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80118ce:	9b03      	ldr	r3, [sp, #12]
 80118d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118d2:	eba3 0308 	sub.w	r3, r3, r8
 80118d6:	4640      	mov	r0, r8
 80118d8:	6013      	str	r3, [r2, #0]
 80118da:	b004      	add	sp, #16
 80118dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080118e0 <__exponent>:
 80118e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118e2:	2900      	cmp	r1, #0
 80118e4:	4604      	mov	r4, r0
 80118e6:	bfba      	itte	lt
 80118e8:	4249      	neglt	r1, r1
 80118ea:	232d      	movlt	r3, #45	; 0x2d
 80118ec:	232b      	movge	r3, #43	; 0x2b
 80118ee:	2909      	cmp	r1, #9
 80118f0:	f804 2b02 	strb.w	r2, [r4], #2
 80118f4:	7043      	strb	r3, [r0, #1]
 80118f6:	dd20      	ble.n	801193a <__exponent+0x5a>
 80118f8:	f10d 0307 	add.w	r3, sp, #7
 80118fc:	461f      	mov	r7, r3
 80118fe:	260a      	movs	r6, #10
 8011900:	fb91 f5f6 	sdiv	r5, r1, r6
 8011904:	fb06 1115 	mls	r1, r6, r5, r1
 8011908:	3130      	adds	r1, #48	; 0x30
 801190a:	2d09      	cmp	r5, #9
 801190c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011910:	f103 32ff 	add.w	r2, r3, #4294967295
 8011914:	4629      	mov	r1, r5
 8011916:	dc09      	bgt.n	801192c <__exponent+0x4c>
 8011918:	3130      	adds	r1, #48	; 0x30
 801191a:	3b02      	subs	r3, #2
 801191c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011920:	42bb      	cmp	r3, r7
 8011922:	4622      	mov	r2, r4
 8011924:	d304      	bcc.n	8011930 <__exponent+0x50>
 8011926:	1a10      	subs	r0, r2, r0
 8011928:	b003      	add	sp, #12
 801192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801192c:	4613      	mov	r3, r2
 801192e:	e7e7      	b.n	8011900 <__exponent+0x20>
 8011930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011934:	f804 2b01 	strb.w	r2, [r4], #1
 8011938:	e7f2      	b.n	8011920 <__exponent+0x40>
 801193a:	2330      	movs	r3, #48	; 0x30
 801193c:	4419      	add	r1, r3
 801193e:	7083      	strb	r3, [r0, #2]
 8011940:	1d02      	adds	r2, r0, #4
 8011942:	70c1      	strb	r1, [r0, #3]
 8011944:	e7ef      	b.n	8011926 <__exponent+0x46>
	...

08011948 <_printf_float>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	b08d      	sub	sp, #52	; 0x34
 801194e:	460c      	mov	r4, r1
 8011950:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011954:	4616      	mov	r6, r2
 8011956:	461f      	mov	r7, r3
 8011958:	4605      	mov	r5, r0
 801195a:	f001 fb03 	bl	8012f64 <_localeconv_r>
 801195e:	6803      	ldr	r3, [r0, #0]
 8011960:	9304      	str	r3, [sp, #16]
 8011962:	4618      	mov	r0, r3
 8011964:	f7f6 fb6c 	bl	8008040 <strlen>
 8011968:	2300      	movs	r3, #0
 801196a:	930a      	str	r3, [sp, #40]	; 0x28
 801196c:	f8d8 3000 	ldr.w	r3, [r8]
 8011970:	9005      	str	r0, [sp, #20]
 8011972:	3307      	adds	r3, #7
 8011974:	f023 0307 	bic.w	r3, r3, #7
 8011978:	f103 0208 	add.w	r2, r3, #8
 801197c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011980:	f8d4 b000 	ldr.w	fp, [r4]
 8011984:	f8c8 2000 	str.w	r2, [r8]
 8011988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011990:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011994:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011998:	9307      	str	r3, [sp, #28]
 801199a:	f8cd 8018 	str.w	r8, [sp, #24]
 801199e:	f04f 32ff 	mov.w	r2, #4294967295
 80119a2:	4ba7      	ldr	r3, [pc, #668]	; (8011c40 <_printf_float+0x2f8>)
 80119a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119a8:	f7f6 fff8 	bl	800899c <__aeabi_dcmpun>
 80119ac:	bb70      	cbnz	r0, 8011a0c <_printf_float+0xc4>
 80119ae:	f04f 32ff 	mov.w	r2, #4294967295
 80119b2:	4ba3      	ldr	r3, [pc, #652]	; (8011c40 <_printf_float+0x2f8>)
 80119b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119b8:	f7f6 ffd2 	bl	8008960 <__aeabi_dcmple>
 80119bc:	bb30      	cbnz	r0, 8011a0c <_printf_float+0xc4>
 80119be:	2200      	movs	r2, #0
 80119c0:	2300      	movs	r3, #0
 80119c2:	4640      	mov	r0, r8
 80119c4:	4649      	mov	r1, r9
 80119c6:	f7f6 ffc1 	bl	800894c <__aeabi_dcmplt>
 80119ca:	b110      	cbz	r0, 80119d2 <_printf_float+0x8a>
 80119cc:	232d      	movs	r3, #45	; 0x2d
 80119ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d2:	4a9c      	ldr	r2, [pc, #624]	; (8011c44 <_printf_float+0x2fc>)
 80119d4:	4b9c      	ldr	r3, [pc, #624]	; (8011c48 <_printf_float+0x300>)
 80119d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80119da:	bf8c      	ite	hi
 80119dc:	4690      	movhi	r8, r2
 80119de:	4698      	movls	r8, r3
 80119e0:	2303      	movs	r3, #3
 80119e2:	f02b 0204 	bic.w	r2, fp, #4
 80119e6:	6123      	str	r3, [r4, #16]
 80119e8:	6022      	str	r2, [r4, #0]
 80119ea:	f04f 0900 	mov.w	r9, #0
 80119ee:	9700      	str	r7, [sp, #0]
 80119f0:	4633      	mov	r3, r6
 80119f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80119f4:	4621      	mov	r1, r4
 80119f6:	4628      	mov	r0, r5
 80119f8:	f000 f9e6 	bl	8011dc8 <_printf_common>
 80119fc:	3001      	adds	r0, #1
 80119fe:	f040 808d 	bne.w	8011b1c <_printf_float+0x1d4>
 8011a02:	f04f 30ff 	mov.w	r0, #4294967295
 8011a06:	b00d      	add	sp, #52	; 0x34
 8011a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0c:	4642      	mov	r2, r8
 8011a0e:	464b      	mov	r3, r9
 8011a10:	4640      	mov	r0, r8
 8011a12:	4649      	mov	r1, r9
 8011a14:	f7f6 ffc2 	bl	800899c <__aeabi_dcmpun>
 8011a18:	b110      	cbz	r0, 8011a20 <_printf_float+0xd8>
 8011a1a:	4a8c      	ldr	r2, [pc, #560]	; (8011c4c <_printf_float+0x304>)
 8011a1c:	4b8c      	ldr	r3, [pc, #560]	; (8011c50 <_printf_float+0x308>)
 8011a1e:	e7da      	b.n	80119d6 <_printf_float+0x8e>
 8011a20:	6861      	ldr	r1, [r4, #4]
 8011a22:	1c4b      	adds	r3, r1, #1
 8011a24:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011a28:	a80a      	add	r0, sp, #40	; 0x28
 8011a2a:	d13e      	bne.n	8011aaa <_printf_float+0x162>
 8011a2c:	2306      	movs	r3, #6
 8011a2e:	6063      	str	r3, [r4, #4]
 8011a30:	2300      	movs	r3, #0
 8011a32:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011a36:	ab09      	add	r3, sp, #36	; 0x24
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	ec49 8b10 	vmov	d0, r8, r9
 8011a3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a42:	6022      	str	r2, [r4, #0]
 8011a44:	f8cd a004 	str.w	sl, [sp, #4]
 8011a48:	6861      	ldr	r1, [r4, #4]
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f7ff fee7 	bl	801181e <__cvt>
 8011a50:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011a54:	2b47      	cmp	r3, #71	; 0x47
 8011a56:	4680      	mov	r8, r0
 8011a58:	d109      	bne.n	8011a6e <_printf_float+0x126>
 8011a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a5c:	1cd8      	adds	r0, r3, #3
 8011a5e:	db02      	blt.n	8011a66 <_printf_float+0x11e>
 8011a60:	6862      	ldr	r2, [r4, #4]
 8011a62:	4293      	cmp	r3, r2
 8011a64:	dd47      	ble.n	8011af6 <_printf_float+0x1ae>
 8011a66:	f1aa 0a02 	sub.w	sl, sl, #2
 8011a6a:	fa5f fa8a 	uxtb.w	sl, sl
 8011a6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a74:	d824      	bhi.n	8011ac0 <_printf_float+0x178>
 8011a76:	3901      	subs	r1, #1
 8011a78:	4652      	mov	r2, sl
 8011a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011a7e:	9109      	str	r1, [sp, #36]	; 0x24
 8011a80:	f7ff ff2e 	bl	80118e0 <__exponent>
 8011a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a86:	1813      	adds	r3, r2, r0
 8011a88:	2a01      	cmp	r2, #1
 8011a8a:	4681      	mov	r9, r0
 8011a8c:	6123      	str	r3, [r4, #16]
 8011a8e:	dc02      	bgt.n	8011a96 <_printf_float+0x14e>
 8011a90:	6822      	ldr	r2, [r4, #0]
 8011a92:	07d1      	lsls	r1, r2, #31
 8011a94:	d501      	bpl.n	8011a9a <_printf_float+0x152>
 8011a96:	3301      	adds	r3, #1
 8011a98:	6123      	str	r3, [r4, #16]
 8011a9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d0a5      	beq.n	80119ee <_printf_float+0xa6>
 8011aa2:	232d      	movs	r3, #45	; 0x2d
 8011aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aa8:	e7a1      	b.n	80119ee <_printf_float+0xa6>
 8011aaa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011aae:	f000 8177 	beq.w	8011da0 <_printf_float+0x458>
 8011ab2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011ab6:	d1bb      	bne.n	8011a30 <_printf_float+0xe8>
 8011ab8:	2900      	cmp	r1, #0
 8011aba:	d1b9      	bne.n	8011a30 <_printf_float+0xe8>
 8011abc:	2301      	movs	r3, #1
 8011abe:	e7b6      	b.n	8011a2e <_printf_float+0xe6>
 8011ac0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011ac4:	d119      	bne.n	8011afa <_printf_float+0x1b2>
 8011ac6:	2900      	cmp	r1, #0
 8011ac8:	6863      	ldr	r3, [r4, #4]
 8011aca:	dd0c      	ble.n	8011ae6 <_printf_float+0x19e>
 8011acc:	6121      	str	r1, [r4, #16]
 8011ace:	b913      	cbnz	r3, 8011ad6 <_printf_float+0x18e>
 8011ad0:	6822      	ldr	r2, [r4, #0]
 8011ad2:	07d2      	lsls	r2, r2, #31
 8011ad4:	d502      	bpl.n	8011adc <_printf_float+0x194>
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	440b      	add	r3, r1
 8011ada:	6123      	str	r3, [r4, #16]
 8011adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ade:	65a3      	str	r3, [r4, #88]	; 0x58
 8011ae0:	f04f 0900 	mov.w	r9, #0
 8011ae4:	e7d9      	b.n	8011a9a <_printf_float+0x152>
 8011ae6:	b913      	cbnz	r3, 8011aee <_printf_float+0x1a6>
 8011ae8:	6822      	ldr	r2, [r4, #0]
 8011aea:	07d0      	lsls	r0, r2, #31
 8011aec:	d501      	bpl.n	8011af2 <_printf_float+0x1aa>
 8011aee:	3302      	adds	r3, #2
 8011af0:	e7f3      	b.n	8011ada <_printf_float+0x192>
 8011af2:	2301      	movs	r3, #1
 8011af4:	e7f1      	b.n	8011ada <_printf_float+0x192>
 8011af6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011afa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011afe:	4293      	cmp	r3, r2
 8011b00:	db05      	blt.n	8011b0e <_printf_float+0x1c6>
 8011b02:	6822      	ldr	r2, [r4, #0]
 8011b04:	6123      	str	r3, [r4, #16]
 8011b06:	07d1      	lsls	r1, r2, #31
 8011b08:	d5e8      	bpl.n	8011adc <_printf_float+0x194>
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	e7e5      	b.n	8011ada <_printf_float+0x192>
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	bfd4      	ite	le
 8011b12:	f1c3 0302 	rsble	r3, r3, #2
 8011b16:	2301      	movgt	r3, #1
 8011b18:	4413      	add	r3, r2
 8011b1a:	e7de      	b.n	8011ada <_printf_float+0x192>
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	055a      	lsls	r2, r3, #21
 8011b20:	d407      	bmi.n	8011b32 <_printf_float+0x1ea>
 8011b22:	6923      	ldr	r3, [r4, #16]
 8011b24:	4642      	mov	r2, r8
 8011b26:	4631      	mov	r1, r6
 8011b28:	4628      	mov	r0, r5
 8011b2a:	47b8      	blx	r7
 8011b2c:	3001      	adds	r0, #1
 8011b2e:	d12b      	bne.n	8011b88 <_printf_float+0x240>
 8011b30:	e767      	b.n	8011a02 <_printf_float+0xba>
 8011b32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011b36:	f240 80dc 	bls.w	8011cf2 <_printf_float+0x3aa>
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b42:	f7f6 fef9 	bl	8008938 <__aeabi_dcmpeq>
 8011b46:	2800      	cmp	r0, #0
 8011b48:	d033      	beq.n	8011bb2 <_printf_float+0x26a>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	4a41      	ldr	r2, [pc, #260]	; (8011c54 <_printf_float+0x30c>)
 8011b4e:	4631      	mov	r1, r6
 8011b50:	4628      	mov	r0, r5
 8011b52:	47b8      	blx	r7
 8011b54:	3001      	adds	r0, #1
 8011b56:	f43f af54 	beq.w	8011a02 <_printf_float+0xba>
 8011b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	db02      	blt.n	8011b68 <_printf_float+0x220>
 8011b62:	6823      	ldr	r3, [r4, #0]
 8011b64:	07d8      	lsls	r0, r3, #31
 8011b66:	d50f      	bpl.n	8011b88 <_printf_float+0x240>
 8011b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b6c:	4631      	mov	r1, r6
 8011b6e:	4628      	mov	r0, r5
 8011b70:	47b8      	blx	r7
 8011b72:	3001      	adds	r0, #1
 8011b74:	f43f af45 	beq.w	8011a02 <_printf_float+0xba>
 8011b78:	f04f 0800 	mov.w	r8, #0
 8011b7c:	f104 091a 	add.w	r9, r4, #26
 8011b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b82:	3b01      	subs	r3, #1
 8011b84:	4543      	cmp	r3, r8
 8011b86:	dc09      	bgt.n	8011b9c <_printf_float+0x254>
 8011b88:	6823      	ldr	r3, [r4, #0]
 8011b8a:	079b      	lsls	r3, r3, #30
 8011b8c:	f100 8103 	bmi.w	8011d96 <_printf_float+0x44e>
 8011b90:	68e0      	ldr	r0, [r4, #12]
 8011b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b94:	4298      	cmp	r0, r3
 8011b96:	bfb8      	it	lt
 8011b98:	4618      	movlt	r0, r3
 8011b9a:	e734      	b.n	8011a06 <_printf_float+0xbe>
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	464a      	mov	r2, r9
 8011ba0:	4631      	mov	r1, r6
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	47b8      	blx	r7
 8011ba6:	3001      	adds	r0, #1
 8011ba8:	f43f af2b 	beq.w	8011a02 <_printf_float+0xba>
 8011bac:	f108 0801 	add.w	r8, r8, #1
 8011bb0:	e7e6      	b.n	8011b80 <_printf_float+0x238>
 8011bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	dc2b      	bgt.n	8011c10 <_printf_float+0x2c8>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	4a26      	ldr	r2, [pc, #152]	; (8011c54 <_printf_float+0x30c>)
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	47b8      	blx	r7
 8011bc2:	3001      	adds	r0, #1
 8011bc4:	f43f af1d 	beq.w	8011a02 <_printf_float+0xba>
 8011bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bca:	b923      	cbnz	r3, 8011bd6 <_printf_float+0x28e>
 8011bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bce:	b913      	cbnz	r3, 8011bd6 <_printf_float+0x28e>
 8011bd0:	6823      	ldr	r3, [r4, #0]
 8011bd2:	07d9      	lsls	r1, r3, #31
 8011bd4:	d5d8      	bpl.n	8011b88 <_printf_float+0x240>
 8011bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bda:	4631      	mov	r1, r6
 8011bdc:	4628      	mov	r0, r5
 8011bde:	47b8      	blx	r7
 8011be0:	3001      	adds	r0, #1
 8011be2:	f43f af0e 	beq.w	8011a02 <_printf_float+0xba>
 8011be6:	f04f 0900 	mov.w	r9, #0
 8011bea:	f104 0a1a 	add.w	sl, r4, #26
 8011bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bf0:	425b      	negs	r3, r3
 8011bf2:	454b      	cmp	r3, r9
 8011bf4:	dc01      	bgt.n	8011bfa <_printf_float+0x2b2>
 8011bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bf8:	e794      	b.n	8011b24 <_printf_float+0x1dc>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	4652      	mov	r2, sl
 8011bfe:	4631      	mov	r1, r6
 8011c00:	4628      	mov	r0, r5
 8011c02:	47b8      	blx	r7
 8011c04:	3001      	adds	r0, #1
 8011c06:	f43f aefc 	beq.w	8011a02 <_printf_float+0xba>
 8011c0a:	f109 0901 	add.w	r9, r9, #1
 8011c0e:	e7ee      	b.n	8011bee <_printf_float+0x2a6>
 8011c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c14:	429a      	cmp	r2, r3
 8011c16:	bfa8      	it	ge
 8011c18:	461a      	movge	r2, r3
 8011c1a:	2a00      	cmp	r2, #0
 8011c1c:	4691      	mov	r9, r2
 8011c1e:	dd07      	ble.n	8011c30 <_printf_float+0x2e8>
 8011c20:	4613      	mov	r3, r2
 8011c22:	4631      	mov	r1, r6
 8011c24:	4642      	mov	r2, r8
 8011c26:	4628      	mov	r0, r5
 8011c28:	47b8      	blx	r7
 8011c2a:	3001      	adds	r0, #1
 8011c2c:	f43f aee9 	beq.w	8011a02 <_printf_float+0xba>
 8011c30:	f104 031a 	add.w	r3, r4, #26
 8011c34:	f04f 0b00 	mov.w	fp, #0
 8011c38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c3c:	9306      	str	r3, [sp, #24]
 8011c3e:	e015      	b.n	8011c6c <_printf_float+0x324>
 8011c40:	7fefffff 	.word	0x7fefffff
 8011c44:	08014290 	.word	0x08014290
 8011c48:	0801428c 	.word	0x0801428c
 8011c4c:	08014298 	.word	0x08014298
 8011c50:	08014294 	.word	0x08014294
 8011c54:	0801429c 	.word	0x0801429c
 8011c58:	2301      	movs	r3, #1
 8011c5a:	9a06      	ldr	r2, [sp, #24]
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4628      	mov	r0, r5
 8011c60:	47b8      	blx	r7
 8011c62:	3001      	adds	r0, #1
 8011c64:	f43f aecd 	beq.w	8011a02 <_printf_float+0xba>
 8011c68:	f10b 0b01 	add.w	fp, fp, #1
 8011c6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011c70:	ebaa 0309 	sub.w	r3, sl, r9
 8011c74:	455b      	cmp	r3, fp
 8011c76:	dcef      	bgt.n	8011c58 <_printf_float+0x310>
 8011c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	44d0      	add	r8, sl
 8011c80:	db15      	blt.n	8011cae <_printf_float+0x366>
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	07da      	lsls	r2, r3, #31
 8011c86:	d412      	bmi.n	8011cae <_printf_float+0x366>
 8011c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c8c:	eba3 020a 	sub.w	r2, r3, sl
 8011c90:	eba3 0a01 	sub.w	sl, r3, r1
 8011c94:	4592      	cmp	sl, r2
 8011c96:	bfa8      	it	ge
 8011c98:	4692      	movge	sl, r2
 8011c9a:	f1ba 0f00 	cmp.w	sl, #0
 8011c9e:	dc0e      	bgt.n	8011cbe <_printf_float+0x376>
 8011ca0:	f04f 0800 	mov.w	r8, #0
 8011ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ca8:	f104 091a 	add.w	r9, r4, #26
 8011cac:	e019      	b.n	8011ce2 <_printf_float+0x39a>
 8011cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	47b8      	blx	r7
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d1e5      	bne.n	8011c88 <_printf_float+0x340>
 8011cbc:	e6a1      	b.n	8011a02 <_printf_float+0xba>
 8011cbe:	4653      	mov	r3, sl
 8011cc0:	4642      	mov	r2, r8
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	47b8      	blx	r7
 8011cc8:	3001      	adds	r0, #1
 8011cca:	d1e9      	bne.n	8011ca0 <_printf_float+0x358>
 8011ccc:	e699      	b.n	8011a02 <_printf_float+0xba>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	464a      	mov	r2, r9
 8011cd2:	4631      	mov	r1, r6
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	47b8      	blx	r7
 8011cd8:	3001      	adds	r0, #1
 8011cda:	f43f ae92 	beq.w	8011a02 <_printf_float+0xba>
 8011cde:	f108 0801 	add.w	r8, r8, #1
 8011ce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ce6:	1a9b      	subs	r3, r3, r2
 8011ce8:	eba3 030a 	sub.w	r3, r3, sl
 8011cec:	4543      	cmp	r3, r8
 8011cee:	dcee      	bgt.n	8011cce <_printf_float+0x386>
 8011cf0:	e74a      	b.n	8011b88 <_printf_float+0x240>
 8011cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cf4:	2a01      	cmp	r2, #1
 8011cf6:	dc01      	bgt.n	8011cfc <_printf_float+0x3b4>
 8011cf8:	07db      	lsls	r3, r3, #31
 8011cfa:	d53a      	bpl.n	8011d72 <_printf_float+0x42a>
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	4642      	mov	r2, r8
 8011d00:	4631      	mov	r1, r6
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b8      	blx	r7
 8011d06:	3001      	adds	r0, #1
 8011d08:	f43f ae7b 	beq.w	8011a02 <_printf_float+0xba>
 8011d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d10:	4631      	mov	r1, r6
 8011d12:	4628      	mov	r0, r5
 8011d14:	47b8      	blx	r7
 8011d16:	3001      	adds	r0, #1
 8011d18:	f108 0801 	add.w	r8, r8, #1
 8011d1c:	f43f ae71 	beq.w	8011a02 <_printf_float+0xba>
 8011d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d22:	2200      	movs	r2, #0
 8011d24:	f103 3aff 	add.w	sl, r3, #4294967295
 8011d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	f7f6 fe03 	bl	8008938 <__aeabi_dcmpeq>
 8011d32:	b9c8      	cbnz	r0, 8011d68 <_printf_float+0x420>
 8011d34:	4653      	mov	r3, sl
 8011d36:	4642      	mov	r2, r8
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	47b8      	blx	r7
 8011d3e:	3001      	adds	r0, #1
 8011d40:	d10e      	bne.n	8011d60 <_printf_float+0x418>
 8011d42:	e65e      	b.n	8011a02 <_printf_float+0xba>
 8011d44:	2301      	movs	r3, #1
 8011d46:	4652      	mov	r2, sl
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	47b8      	blx	r7
 8011d4e:	3001      	adds	r0, #1
 8011d50:	f43f ae57 	beq.w	8011a02 <_printf_float+0xba>
 8011d54:	f108 0801 	add.w	r8, r8, #1
 8011d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	4543      	cmp	r3, r8
 8011d5e:	dcf1      	bgt.n	8011d44 <_printf_float+0x3fc>
 8011d60:	464b      	mov	r3, r9
 8011d62:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d66:	e6de      	b.n	8011b26 <_printf_float+0x1de>
 8011d68:	f04f 0800 	mov.w	r8, #0
 8011d6c:	f104 0a1a 	add.w	sl, r4, #26
 8011d70:	e7f2      	b.n	8011d58 <_printf_float+0x410>
 8011d72:	2301      	movs	r3, #1
 8011d74:	e7df      	b.n	8011d36 <_printf_float+0x3ee>
 8011d76:	2301      	movs	r3, #1
 8011d78:	464a      	mov	r2, r9
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	47b8      	blx	r7
 8011d80:	3001      	adds	r0, #1
 8011d82:	f43f ae3e 	beq.w	8011a02 <_printf_float+0xba>
 8011d86:	f108 0801 	add.w	r8, r8, #1
 8011d8a:	68e3      	ldr	r3, [r4, #12]
 8011d8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011d8e:	1a9b      	subs	r3, r3, r2
 8011d90:	4543      	cmp	r3, r8
 8011d92:	dcf0      	bgt.n	8011d76 <_printf_float+0x42e>
 8011d94:	e6fc      	b.n	8011b90 <_printf_float+0x248>
 8011d96:	f04f 0800 	mov.w	r8, #0
 8011d9a:	f104 0919 	add.w	r9, r4, #25
 8011d9e:	e7f4      	b.n	8011d8a <_printf_float+0x442>
 8011da0:	2900      	cmp	r1, #0
 8011da2:	f43f ae8b 	beq.w	8011abc <_printf_float+0x174>
 8011da6:	2300      	movs	r3, #0
 8011da8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011dac:	ab09      	add	r3, sp, #36	; 0x24
 8011dae:	9300      	str	r3, [sp, #0]
 8011db0:	ec49 8b10 	vmov	d0, r8, r9
 8011db4:	6022      	str	r2, [r4, #0]
 8011db6:	f8cd a004 	str.w	sl, [sp, #4]
 8011dba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	f7ff fd2d 	bl	801181e <__cvt>
 8011dc4:	4680      	mov	r8, r0
 8011dc6:	e648      	b.n	8011a5a <_printf_float+0x112>

08011dc8 <_printf_common>:
 8011dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dcc:	4691      	mov	r9, r2
 8011dce:	461f      	mov	r7, r3
 8011dd0:	688a      	ldr	r2, [r1, #8]
 8011dd2:	690b      	ldr	r3, [r1, #16]
 8011dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	bfb8      	it	lt
 8011ddc:	4613      	movlt	r3, r2
 8011dde:	f8c9 3000 	str.w	r3, [r9]
 8011de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011de6:	4606      	mov	r6, r0
 8011de8:	460c      	mov	r4, r1
 8011dea:	b112      	cbz	r2, 8011df2 <_printf_common+0x2a>
 8011dec:	3301      	adds	r3, #1
 8011dee:	f8c9 3000 	str.w	r3, [r9]
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	0699      	lsls	r1, r3, #26
 8011df6:	bf42      	ittt	mi
 8011df8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011dfc:	3302      	addmi	r3, #2
 8011dfe:	f8c9 3000 	strmi.w	r3, [r9]
 8011e02:	6825      	ldr	r5, [r4, #0]
 8011e04:	f015 0506 	ands.w	r5, r5, #6
 8011e08:	d107      	bne.n	8011e1a <_printf_common+0x52>
 8011e0a:	f104 0a19 	add.w	sl, r4, #25
 8011e0e:	68e3      	ldr	r3, [r4, #12]
 8011e10:	f8d9 2000 	ldr.w	r2, [r9]
 8011e14:	1a9b      	subs	r3, r3, r2
 8011e16:	42ab      	cmp	r3, r5
 8011e18:	dc28      	bgt.n	8011e6c <_printf_common+0xa4>
 8011e1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011e1e:	6822      	ldr	r2, [r4, #0]
 8011e20:	3300      	adds	r3, #0
 8011e22:	bf18      	it	ne
 8011e24:	2301      	movne	r3, #1
 8011e26:	0692      	lsls	r2, r2, #26
 8011e28:	d42d      	bmi.n	8011e86 <_printf_common+0xbe>
 8011e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e2e:	4639      	mov	r1, r7
 8011e30:	4630      	mov	r0, r6
 8011e32:	47c0      	blx	r8
 8011e34:	3001      	adds	r0, #1
 8011e36:	d020      	beq.n	8011e7a <_printf_common+0xb2>
 8011e38:	6823      	ldr	r3, [r4, #0]
 8011e3a:	68e5      	ldr	r5, [r4, #12]
 8011e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8011e40:	f003 0306 	and.w	r3, r3, #6
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	bf08      	it	eq
 8011e48:	1aad      	subeq	r5, r5, r2
 8011e4a:	68a3      	ldr	r3, [r4, #8]
 8011e4c:	6922      	ldr	r2, [r4, #16]
 8011e4e:	bf0c      	ite	eq
 8011e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e54:	2500      	movne	r5, #0
 8011e56:	4293      	cmp	r3, r2
 8011e58:	bfc4      	itt	gt
 8011e5a:	1a9b      	subgt	r3, r3, r2
 8011e5c:	18ed      	addgt	r5, r5, r3
 8011e5e:	f04f 0900 	mov.w	r9, #0
 8011e62:	341a      	adds	r4, #26
 8011e64:	454d      	cmp	r5, r9
 8011e66:	d11a      	bne.n	8011e9e <_printf_common+0xd6>
 8011e68:	2000      	movs	r0, #0
 8011e6a:	e008      	b.n	8011e7e <_printf_common+0xb6>
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	4652      	mov	r2, sl
 8011e70:	4639      	mov	r1, r7
 8011e72:	4630      	mov	r0, r6
 8011e74:	47c0      	blx	r8
 8011e76:	3001      	adds	r0, #1
 8011e78:	d103      	bne.n	8011e82 <_printf_common+0xba>
 8011e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e82:	3501      	adds	r5, #1
 8011e84:	e7c3      	b.n	8011e0e <_printf_common+0x46>
 8011e86:	18e1      	adds	r1, r4, r3
 8011e88:	1c5a      	adds	r2, r3, #1
 8011e8a:	2030      	movs	r0, #48	; 0x30
 8011e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e90:	4422      	add	r2, r4
 8011e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e9a:	3302      	adds	r3, #2
 8011e9c:	e7c5      	b.n	8011e2a <_printf_common+0x62>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	4622      	mov	r2, r4
 8011ea2:	4639      	mov	r1, r7
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	47c0      	blx	r8
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	d0e6      	beq.n	8011e7a <_printf_common+0xb2>
 8011eac:	f109 0901 	add.w	r9, r9, #1
 8011eb0:	e7d8      	b.n	8011e64 <_printf_common+0x9c>
	...

08011eb4 <_printf_i>:
 8011eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011eb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011ebc:	460c      	mov	r4, r1
 8011ebe:	7e09      	ldrb	r1, [r1, #24]
 8011ec0:	b085      	sub	sp, #20
 8011ec2:	296e      	cmp	r1, #110	; 0x6e
 8011ec4:	4617      	mov	r7, r2
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	4698      	mov	r8, r3
 8011eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ecc:	f000 80b3 	beq.w	8012036 <_printf_i+0x182>
 8011ed0:	d822      	bhi.n	8011f18 <_printf_i+0x64>
 8011ed2:	2963      	cmp	r1, #99	; 0x63
 8011ed4:	d036      	beq.n	8011f44 <_printf_i+0x90>
 8011ed6:	d80a      	bhi.n	8011eee <_printf_i+0x3a>
 8011ed8:	2900      	cmp	r1, #0
 8011eda:	f000 80b9 	beq.w	8012050 <_printf_i+0x19c>
 8011ede:	2958      	cmp	r1, #88	; 0x58
 8011ee0:	f000 8083 	beq.w	8011fea <_printf_i+0x136>
 8011ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ee8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011eec:	e032      	b.n	8011f54 <_printf_i+0xa0>
 8011eee:	2964      	cmp	r1, #100	; 0x64
 8011ef0:	d001      	beq.n	8011ef6 <_printf_i+0x42>
 8011ef2:	2969      	cmp	r1, #105	; 0x69
 8011ef4:	d1f6      	bne.n	8011ee4 <_printf_i+0x30>
 8011ef6:	6820      	ldr	r0, [r4, #0]
 8011ef8:	6813      	ldr	r3, [r2, #0]
 8011efa:	0605      	lsls	r5, r0, #24
 8011efc:	f103 0104 	add.w	r1, r3, #4
 8011f00:	d52a      	bpl.n	8011f58 <_printf_i+0xa4>
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	6011      	str	r1, [r2, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	da03      	bge.n	8011f12 <_printf_i+0x5e>
 8011f0a:	222d      	movs	r2, #45	; 0x2d
 8011f0c:	425b      	negs	r3, r3
 8011f0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011f12:	486f      	ldr	r0, [pc, #444]	; (80120d0 <_printf_i+0x21c>)
 8011f14:	220a      	movs	r2, #10
 8011f16:	e039      	b.n	8011f8c <_printf_i+0xd8>
 8011f18:	2973      	cmp	r1, #115	; 0x73
 8011f1a:	f000 809d 	beq.w	8012058 <_printf_i+0x1a4>
 8011f1e:	d808      	bhi.n	8011f32 <_printf_i+0x7e>
 8011f20:	296f      	cmp	r1, #111	; 0x6f
 8011f22:	d020      	beq.n	8011f66 <_printf_i+0xb2>
 8011f24:	2970      	cmp	r1, #112	; 0x70
 8011f26:	d1dd      	bne.n	8011ee4 <_printf_i+0x30>
 8011f28:	6823      	ldr	r3, [r4, #0]
 8011f2a:	f043 0320 	orr.w	r3, r3, #32
 8011f2e:	6023      	str	r3, [r4, #0]
 8011f30:	e003      	b.n	8011f3a <_printf_i+0x86>
 8011f32:	2975      	cmp	r1, #117	; 0x75
 8011f34:	d017      	beq.n	8011f66 <_printf_i+0xb2>
 8011f36:	2978      	cmp	r1, #120	; 0x78
 8011f38:	d1d4      	bne.n	8011ee4 <_printf_i+0x30>
 8011f3a:	2378      	movs	r3, #120	; 0x78
 8011f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f40:	4864      	ldr	r0, [pc, #400]	; (80120d4 <_printf_i+0x220>)
 8011f42:	e055      	b.n	8011ff0 <_printf_i+0x13c>
 8011f44:	6813      	ldr	r3, [r2, #0]
 8011f46:	1d19      	adds	r1, r3, #4
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	6011      	str	r1, [r2, #0]
 8011f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f54:	2301      	movs	r3, #1
 8011f56:	e08c      	b.n	8012072 <_printf_i+0x1be>
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	6011      	str	r1, [r2, #0]
 8011f5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f60:	bf18      	it	ne
 8011f62:	b21b      	sxthne	r3, r3
 8011f64:	e7cf      	b.n	8011f06 <_printf_i+0x52>
 8011f66:	6813      	ldr	r3, [r2, #0]
 8011f68:	6825      	ldr	r5, [r4, #0]
 8011f6a:	1d18      	adds	r0, r3, #4
 8011f6c:	6010      	str	r0, [r2, #0]
 8011f6e:	0628      	lsls	r0, r5, #24
 8011f70:	d501      	bpl.n	8011f76 <_printf_i+0xc2>
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	e002      	b.n	8011f7c <_printf_i+0xc8>
 8011f76:	0668      	lsls	r0, r5, #25
 8011f78:	d5fb      	bpl.n	8011f72 <_printf_i+0xbe>
 8011f7a:	881b      	ldrh	r3, [r3, #0]
 8011f7c:	4854      	ldr	r0, [pc, #336]	; (80120d0 <_printf_i+0x21c>)
 8011f7e:	296f      	cmp	r1, #111	; 0x6f
 8011f80:	bf14      	ite	ne
 8011f82:	220a      	movne	r2, #10
 8011f84:	2208      	moveq	r2, #8
 8011f86:	2100      	movs	r1, #0
 8011f88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f8c:	6865      	ldr	r5, [r4, #4]
 8011f8e:	60a5      	str	r5, [r4, #8]
 8011f90:	2d00      	cmp	r5, #0
 8011f92:	f2c0 8095 	blt.w	80120c0 <_printf_i+0x20c>
 8011f96:	6821      	ldr	r1, [r4, #0]
 8011f98:	f021 0104 	bic.w	r1, r1, #4
 8011f9c:	6021      	str	r1, [r4, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d13d      	bne.n	801201e <_printf_i+0x16a>
 8011fa2:	2d00      	cmp	r5, #0
 8011fa4:	f040 808e 	bne.w	80120c4 <_printf_i+0x210>
 8011fa8:	4665      	mov	r5, ip
 8011faa:	2a08      	cmp	r2, #8
 8011fac:	d10b      	bne.n	8011fc6 <_printf_i+0x112>
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	07db      	lsls	r3, r3, #31
 8011fb2:	d508      	bpl.n	8011fc6 <_printf_i+0x112>
 8011fb4:	6923      	ldr	r3, [r4, #16]
 8011fb6:	6862      	ldr	r2, [r4, #4]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	bfde      	ittt	le
 8011fbc:	2330      	movle	r3, #48	; 0x30
 8011fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011fc6:	ebac 0305 	sub.w	r3, ip, r5
 8011fca:	6123      	str	r3, [r4, #16]
 8011fcc:	f8cd 8000 	str.w	r8, [sp]
 8011fd0:	463b      	mov	r3, r7
 8011fd2:	aa03      	add	r2, sp, #12
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	f7ff fef6 	bl	8011dc8 <_printf_common>
 8011fdc:	3001      	adds	r0, #1
 8011fde:	d14d      	bne.n	801207c <_printf_i+0x1c8>
 8011fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe4:	b005      	add	sp, #20
 8011fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fea:	4839      	ldr	r0, [pc, #228]	; (80120d0 <_printf_i+0x21c>)
 8011fec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ff0:	6813      	ldr	r3, [r2, #0]
 8011ff2:	6821      	ldr	r1, [r4, #0]
 8011ff4:	1d1d      	adds	r5, r3, #4
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	6015      	str	r5, [r2, #0]
 8011ffa:	060a      	lsls	r2, r1, #24
 8011ffc:	d50b      	bpl.n	8012016 <_printf_i+0x162>
 8011ffe:	07ca      	lsls	r2, r1, #31
 8012000:	bf44      	itt	mi
 8012002:	f041 0120 	orrmi.w	r1, r1, #32
 8012006:	6021      	strmi	r1, [r4, #0]
 8012008:	b91b      	cbnz	r3, 8012012 <_printf_i+0x15e>
 801200a:	6822      	ldr	r2, [r4, #0]
 801200c:	f022 0220 	bic.w	r2, r2, #32
 8012010:	6022      	str	r2, [r4, #0]
 8012012:	2210      	movs	r2, #16
 8012014:	e7b7      	b.n	8011f86 <_printf_i+0xd2>
 8012016:	064d      	lsls	r5, r1, #25
 8012018:	bf48      	it	mi
 801201a:	b29b      	uxthmi	r3, r3
 801201c:	e7ef      	b.n	8011ffe <_printf_i+0x14a>
 801201e:	4665      	mov	r5, ip
 8012020:	fbb3 f1f2 	udiv	r1, r3, r2
 8012024:	fb02 3311 	mls	r3, r2, r1, r3
 8012028:	5cc3      	ldrb	r3, [r0, r3]
 801202a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801202e:	460b      	mov	r3, r1
 8012030:	2900      	cmp	r1, #0
 8012032:	d1f5      	bne.n	8012020 <_printf_i+0x16c>
 8012034:	e7b9      	b.n	8011faa <_printf_i+0xf6>
 8012036:	6813      	ldr	r3, [r2, #0]
 8012038:	6825      	ldr	r5, [r4, #0]
 801203a:	6961      	ldr	r1, [r4, #20]
 801203c:	1d18      	adds	r0, r3, #4
 801203e:	6010      	str	r0, [r2, #0]
 8012040:	0628      	lsls	r0, r5, #24
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	d501      	bpl.n	801204a <_printf_i+0x196>
 8012046:	6019      	str	r1, [r3, #0]
 8012048:	e002      	b.n	8012050 <_printf_i+0x19c>
 801204a:	066a      	lsls	r2, r5, #25
 801204c:	d5fb      	bpl.n	8012046 <_printf_i+0x192>
 801204e:	8019      	strh	r1, [r3, #0]
 8012050:	2300      	movs	r3, #0
 8012052:	6123      	str	r3, [r4, #16]
 8012054:	4665      	mov	r5, ip
 8012056:	e7b9      	b.n	8011fcc <_printf_i+0x118>
 8012058:	6813      	ldr	r3, [r2, #0]
 801205a:	1d19      	adds	r1, r3, #4
 801205c:	6011      	str	r1, [r2, #0]
 801205e:	681d      	ldr	r5, [r3, #0]
 8012060:	6862      	ldr	r2, [r4, #4]
 8012062:	2100      	movs	r1, #0
 8012064:	4628      	mov	r0, r5
 8012066:	f7f5 fff3 	bl	8008050 <memchr>
 801206a:	b108      	cbz	r0, 8012070 <_printf_i+0x1bc>
 801206c:	1b40      	subs	r0, r0, r5
 801206e:	6060      	str	r0, [r4, #4]
 8012070:	6863      	ldr	r3, [r4, #4]
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	2300      	movs	r3, #0
 8012076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801207a:	e7a7      	b.n	8011fcc <_printf_i+0x118>
 801207c:	6923      	ldr	r3, [r4, #16]
 801207e:	462a      	mov	r2, r5
 8012080:	4639      	mov	r1, r7
 8012082:	4630      	mov	r0, r6
 8012084:	47c0      	blx	r8
 8012086:	3001      	adds	r0, #1
 8012088:	d0aa      	beq.n	8011fe0 <_printf_i+0x12c>
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	079b      	lsls	r3, r3, #30
 801208e:	d413      	bmi.n	80120b8 <_printf_i+0x204>
 8012090:	68e0      	ldr	r0, [r4, #12]
 8012092:	9b03      	ldr	r3, [sp, #12]
 8012094:	4298      	cmp	r0, r3
 8012096:	bfb8      	it	lt
 8012098:	4618      	movlt	r0, r3
 801209a:	e7a3      	b.n	8011fe4 <_printf_i+0x130>
 801209c:	2301      	movs	r3, #1
 801209e:	464a      	mov	r2, r9
 80120a0:	4639      	mov	r1, r7
 80120a2:	4630      	mov	r0, r6
 80120a4:	47c0      	blx	r8
 80120a6:	3001      	adds	r0, #1
 80120a8:	d09a      	beq.n	8011fe0 <_printf_i+0x12c>
 80120aa:	3501      	adds	r5, #1
 80120ac:	68e3      	ldr	r3, [r4, #12]
 80120ae:	9a03      	ldr	r2, [sp, #12]
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	42ab      	cmp	r3, r5
 80120b4:	dcf2      	bgt.n	801209c <_printf_i+0x1e8>
 80120b6:	e7eb      	b.n	8012090 <_printf_i+0x1dc>
 80120b8:	2500      	movs	r5, #0
 80120ba:	f104 0919 	add.w	r9, r4, #25
 80120be:	e7f5      	b.n	80120ac <_printf_i+0x1f8>
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1ac      	bne.n	801201e <_printf_i+0x16a>
 80120c4:	7803      	ldrb	r3, [r0, #0]
 80120c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120ce:	e76c      	b.n	8011faa <_printf_i+0xf6>
 80120d0:	0801429e 	.word	0x0801429e
 80120d4:	080142af 	.word	0x080142af

080120d8 <iprintf>:
 80120d8:	b40f      	push	{r0, r1, r2, r3}
 80120da:	4b0a      	ldr	r3, [pc, #40]	; (8012104 <iprintf+0x2c>)
 80120dc:	b513      	push	{r0, r1, r4, lr}
 80120de:	681c      	ldr	r4, [r3, #0]
 80120e0:	b124      	cbz	r4, 80120ec <iprintf+0x14>
 80120e2:	69a3      	ldr	r3, [r4, #24]
 80120e4:	b913      	cbnz	r3, 80120ec <iprintf+0x14>
 80120e6:	4620      	mov	r0, r4
 80120e8:	f000 feb2 	bl	8012e50 <__sinit>
 80120ec:	ab05      	add	r3, sp, #20
 80120ee:	9a04      	ldr	r2, [sp, #16]
 80120f0:	68a1      	ldr	r1, [r4, #8]
 80120f2:	9301      	str	r3, [sp, #4]
 80120f4:	4620      	mov	r0, r4
 80120f6:	f001 fc59 	bl	80139ac <_vfiprintf_r>
 80120fa:	b002      	add	sp, #8
 80120fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012100:	b004      	add	sp, #16
 8012102:	4770      	bx	lr
 8012104:	20000018 	.word	0x20000018

08012108 <_vsiprintf_r>:
 8012108:	b500      	push	{lr}
 801210a:	b09b      	sub	sp, #108	; 0x6c
 801210c:	9100      	str	r1, [sp, #0]
 801210e:	9104      	str	r1, [sp, #16]
 8012110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012114:	9105      	str	r1, [sp, #20]
 8012116:	9102      	str	r1, [sp, #8]
 8012118:	4905      	ldr	r1, [pc, #20]	; (8012130 <_vsiprintf_r+0x28>)
 801211a:	9103      	str	r1, [sp, #12]
 801211c:	4669      	mov	r1, sp
 801211e:	f001 fb23 	bl	8013768 <_svfiprintf_r>
 8012122:	9b00      	ldr	r3, [sp, #0]
 8012124:	2200      	movs	r2, #0
 8012126:	701a      	strb	r2, [r3, #0]
 8012128:	b01b      	add	sp, #108	; 0x6c
 801212a:	f85d fb04 	ldr.w	pc, [sp], #4
 801212e:	bf00      	nop
 8012130:	ffff0208 	.word	0xffff0208

08012134 <vsiprintf>:
 8012134:	4613      	mov	r3, r2
 8012136:	460a      	mov	r2, r1
 8012138:	4601      	mov	r1, r0
 801213a:	4802      	ldr	r0, [pc, #8]	; (8012144 <vsiprintf+0x10>)
 801213c:	6800      	ldr	r0, [r0, #0]
 801213e:	f7ff bfe3 	b.w	8012108 <_vsiprintf_r>
 8012142:	bf00      	nop
 8012144:	20000018 	.word	0x20000018

08012148 <quorem>:
 8012148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801214c:	6903      	ldr	r3, [r0, #16]
 801214e:	690c      	ldr	r4, [r1, #16]
 8012150:	42a3      	cmp	r3, r4
 8012152:	4680      	mov	r8, r0
 8012154:	f2c0 8082 	blt.w	801225c <quorem+0x114>
 8012158:	3c01      	subs	r4, #1
 801215a:	f101 0714 	add.w	r7, r1, #20
 801215e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012162:	f100 0614 	add.w	r6, r0, #20
 8012166:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801216a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801216e:	eb06 030c 	add.w	r3, r6, ip
 8012172:	3501      	adds	r5, #1
 8012174:	eb07 090c 	add.w	r9, r7, ip
 8012178:	9301      	str	r3, [sp, #4]
 801217a:	fbb0 f5f5 	udiv	r5, r0, r5
 801217e:	b395      	cbz	r5, 80121e6 <quorem+0x9e>
 8012180:	f04f 0a00 	mov.w	sl, #0
 8012184:	4638      	mov	r0, r7
 8012186:	46b6      	mov	lr, r6
 8012188:	46d3      	mov	fp, sl
 801218a:	f850 2b04 	ldr.w	r2, [r0], #4
 801218e:	b293      	uxth	r3, r2
 8012190:	fb05 a303 	mla	r3, r5, r3, sl
 8012194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012198:	b29b      	uxth	r3, r3
 801219a:	ebab 0303 	sub.w	r3, fp, r3
 801219e:	0c12      	lsrs	r2, r2, #16
 80121a0:	f8de b000 	ldr.w	fp, [lr]
 80121a4:	fb05 a202 	mla	r2, r5, r2, sl
 80121a8:	fa13 f38b 	uxtah	r3, r3, fp
 80121ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80121b0:	fa1f fb82 	uxth.w	fp, r2
 80121b4:	f8de 2000 	ldr.w	r2, [lr]
 80121b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80121bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121c6:	4581      	cmp	r9, r0
 80121c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80121cc:	f84e 3b04 	str.w	r3, [lr], #4
 80121d0:	d2db      	bcs.n	801218a <quorem+0x42>
 80121d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80121d6:	b933      	cbnz	r3, 80121e6 <quorem+0x9e>
 80121d8:	9b01      	ldr	r3, [sp, #4]
 80121da:	3b04      	subs	r3, #4
 80121dc:	429e      	cmp	r6, r3
 80121de:	461a      	mov	r2, r3
 80121e0:	d330      	bcc.n	8012244 <quorem+0xfc>
 80121e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80121e6:	4640      	mov	r0, r8
 80121e8:	f001 f8e8 	bl	80133bc <__mcmp>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	db25      	blt.n	801223c <quorem+0xf4>
 80121f0:	3501      	adds	r5, #1
 80121f2:	4630      	mov	r0, r6
 80121f4:	f04f 0c00 	mov.w	ip, #0
 80121f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80121fc:	f8d0 e000 	ldr.w	lr, [r0]
 8012200:	b293      	uxth	r3, r2
 8012202:	ebac 0303 	sub.w	r3, ip, r3
 8012206:	0c12      	lsrs	r2, r2, #16
 8012208:	fa13 f38e 	uxtah	r3, r3, lr
 801220c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012214:	b29b      	uxth	r3, r3
 8012216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801221a:	45b9      	cmp	r9, r7
 801221c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012220:	f840 3b04 	str.w	r3, [r0], #4
 8012224:	d2e8      	bcs.n	80121f8 <quorem+0xb0>
 8012226:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801222a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801222e:	b92a      	cbnz	r2, 801223c <quorem+0xf4>
 8012230:	3b04      	subs	r3, #4
 8012232:	429e      	cmp	r6, r3
 8012234:	461a      	mov	r2, r3
 8012236:	d30b      	bcc.n	8012250 <quorem+0x108>
 8012238:	f8c8 4010 	str.w	r4, [r8, #16]
 801223c:	4628      	mov	r0, r5
 801223e:	b003      	add	sp, #12
 8012240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012244:	6812      	ldr	r2, [r2, #0]
 8012246:	3b04      	subs	r3, #4
 8012248:	2a00      	cmp	r2, #0
 801224a:	d1ca      	bne.n	80121e2 <quorem+0x9a>
 801224c:	3c01      	subs	r4, #1
 801224e:	e7c5      	b.n	80121dc <quorem+0x94>
 8012250:	6812      	ldr	r2, [r2, #0]
 8012252:	3b04      	subs	r3, #4
 8012254:	2a00      	cmp	r2, #0
 8012256:	d1ef      	bne.n	8012238 <quorem+0xf0>
 8012258:	3c01      	subs	r4, #1
 801225a:	e7ea      	b.n	8012232 <quorem+0xea>
 801225c:	2000      	movs	r0, #0
 801225e:	e7ee      	b.n	801223e <quorem+0xf6>

08012260 <_dtoa_r>:
 8012260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	ec57 6b10 	vmov	r6, r7, d0
 8012268:	b097      	sub	sp, #92	; 0x5c
 801226a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801226c:	9106      	str	r1, [sp, #24]
 801226e:	4604      	mov	r4, r0
 8012270:	920b      	str	r2, [sp, #44]	; 0x2c
 8012272:	9312      	str	r3, [sp, #72]	; 0x48
 8012274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012278:	e9cd 6700 	strd	r6, r7, [sp]
 801227c:	b93d      	cbnz	r5, 801228e <_dtoa_r+0x2e>
 801227e:	2010      	movs	r0, #16
 8012280:	f000 fe7e 	bl	8012f80 <malloc>
 8012284:	6260      	str	r0, [r4, #36]	; 0x24
 8012286:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801228a:	6005      	str	r5, [r0, #0]
 801228c:	60c5      	str	r5, [r0, #12]
 801228e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012290:	6819      	ldr	r1, [r3, #0]
 8012292:	b151      	cbz	r1, 80122aa <_dtoa_r+0x4a>
 8012294:	685a      	ldr	r2, [r3, #4]
 8012296:	604a      	str	r2, [r1, #4]
 8012298:	2301      	movs	r3, #1
 801229a:	4093      	lsls	r3, r2
 801229c:	608b      	str	r3, [r1, #8]
 801229e:	4620      	mov	r0, r4
 80122a0:	f000 feaa 	bl	8012ff8 <_Bfree>
 80122a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122a6:	2200      	movs	r2, #0
 80122a8:	601a      	str	r2, [r3, #0]
 80122aa:	1e3b      	subs	r3, r7, #0
 80122ac:	bfbb      	ittet	lt
 80122ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80122b2:	9301      	strlt	r3, [sp, #4]
 80122b4:	2300      	movge	r3, #0
 80122b6:	2201      	movlt	r2, #1
 80122b8:	bfac      	ite	ge
 80122ba:	f8c8 3000 	strge.w	r3, [r8]
 80122be:	f8c8 2000 	strlt.w	r2, [r8]
 80122c2:	4baf      	ldr	r3, [pc, #700]	; (8012580 <_dtoa_r+0x320>)
 80122c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80122c8:	ea33 0308 	bics.w	r3, r3, r8
 80122cc:	d114      	bne.n	80122f8 <_dtoa_r+0x98>
 80122ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80122d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80122d4:	6013      	str	r3, [r2, #0]
 80122d6:	9b00      	ldr	r3, [sp, #0]
 80122d8:	b923      	cbnz	r3, 80122e4 <_dtoa_r+0x84>
 80122da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80122de:	2800      	cmp	r0, #0
 80122e0:	f000 8542 	beq.w	8012d68 <_dtoa_r+0xb08>
 80122e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012594 <_dtoa_r+0x334>
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f000 8544 	beq.w	8012d78 <_dtoa_r+0xb18>
 80122f0:	f10b 0303 	add.w	r3, fp, #3
 80122f4:	f000 bd3e 	b.w	8012d74 <_dtoa_r+0xb14>
 80122f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80122fc:	2200      	movs	r2, #0
 80122fe:	2300      	movs	r3, #0
 8012300:	4630      	mov	r0, r6
 8012302:	4639      	mov	r1, r7
 8012304:	f7f6 fb18 	bl	8008938 <__aeabi_dcmpeq>
 8012308:	4681      	mov	r9, r0
 801230a:	b168      	cbz	r0, 8012328 <_dtoa_r+0xc8>
 801230c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801230e:	2301      	movs	r3, #1
 8012310:	6013      	str	r3, [r2, #0]
 8012312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012314:	2b00      	cmp	r3, #0
 8012316:	f000 8524 	beq.w	8012d62 <_dtoa_r+0xb02>
 801231a:	4b9a      	ldr	r3, [pc, #616]	; (8012584 <_dtoa_r+0x324>)
 801231c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801231e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012322:	6013      	str	r3, [r2, #0]
 8012324:	f000 bd28 	b.w	8012d78 <_dtoa_r+0xb18>
 8012328:	aa14      	add	r2, sp, #80	; 0x50
 801232a:	a915      	add	r1, sp, #84	; 0x54
 801232c:	ec47 6b10 	vmov	d0, r6, r7
 8012330:	4620      	mov	r0, r4
 8012332:	f001 f8ba 	bl	80134aa <__d2b>
 8012336:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801233a:	9004      	str	r0, [sp, #16]
 801233c:	2d00      	cmp	r5, #0
 801233e:	d07c      	beq.n	801243a <_dtoa_r+0x1da>
 8012340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012344:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012348:	46b2      	mov	sl, r6
 801234a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801234e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012352:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012356:	2200      	movs	r2, #0
 8012358:	4b8b      	ldr	r3, [pc, #556]	; (8012588 <_dtoa_r+0x328>)
 801235a:	4650      	mov	r0, sl
 801235c:	4659      	mov	r1, fp
 801235e:	f7f5 fecb 	bl	80080f8 <__aeabi_dsub>
 8012362:	a381      	add	r3, pc, #516	; (adr r3, 8012568 <_dtoa_r+0x308>)
 8012364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012368:	f7f6 f87e 	bl	8008468 <__aeabi_dmul>
 801236c:	a380      	add	r3, pc, #512	; (adr r3, 8012570 <_dtoa_r+0x310>)
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	f7f5 fec3 	bl	80080fc <__adddf3>
 8012376:	4606      	mov	r6, r0
 8012378:	4628      	mov	r0, r5
 801237a:	460f      	mov	r7, r1
 801237c:	f7f6 f80a 	bl	8008394 <__aeabi_i2d>
 8012380:	a37d      	add	r3, pc, #500	; (adr r3, 8012578 <_dtoa_r+0x318>)
 8012382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012386:	f7f6 f86f 	bl	8008468 <__aeabi_dmul>
 801238a:	4602      	mov	r2, r0
 801238c:	460b      	mov	r3, r1
 801238e:	4630      	mov	r0, r6
 8012390:	4639      	mov	r1, r7
 8012392:	f7f5 feb3 	bl	80080fc <__adddf3>
 8012396:	4606      	mov	r6, r0
 8012398:	460f      	mov	r7, r1
 801239a:	f7f6 fb15 	bl	80089c8 <__aeabi_d2iz>
 801239e:	2200      	movs	r2, #0
 80123a0:	4682      	mov	sl, r0
 80123a2:	2300      	movs	r3, #0
 80123a4:	4630      	mov	r0, r6
 80123a6:	4639      	mov	r1, r7
 80123a8:	f7f6 fad0 	bl	800894c <__aeabi_dcmplt>
 80123ac:	b148      	cbz	r0, 80123c2 <_dtoa_r+0x162>
 80123ae:	4650      	mov	r0, sl
 80123b0:	f7f5 fff0 	bl	8008394 <__aeabi_i2d>
 80123b4:	4632      	mov	r2, r6
 80123b6:	463b      	mov	r3, r7
 80123b8:	f7f6 fabe 	bl	8008938 <__aeabi_dcmpeq>
 80123bc:	b908      	cbnz	r0, 80123c2 <_dtoa_r+0x162>
 80123be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80123c2:	f1ba 0f16 	cmp.w	sl, #22
 80123c6:	d859      	bhi.n	801247c <_dtoa_r+0x21c>
 80123c8:	4970      	ldr	r1, [pc, #448]	; (801258c <_dtoa_r+0x32c>)
 80123ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80123ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123d6:	f7f6 fad7 	bl	8008988 <__aeabi_dcmpgt>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d050      	beq.n	8012480 <_dtoa_r+0x220>
 80123de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80123e2:	2300      	movs	r3, #0
 80123e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80123e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123e8:	1b5d      	subs	r5, r3, r5
 80123ea:	f1b5 0801 	subs.w	r8, r5, #1
 80123ee:	bf49      	itett	mi
 80123f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80123f4:	2300      	movpl	r3, #0
 80123f6:	9305      	strmi	r3, [sp, #20]
 80123f8:	f04f 0800 	movmi.w	r8, #0
 80123fc:	bf58      	it	pl
 80123fe:	9305      	strpl	r3, [sp, #20]
 8012400:	f1ba 0f00 	cmp.w	sl, #0
 8012404:	db3e      	blt.n	8012484 <_dtoa_r+0x224>
 8012406:	2300      	movs	r3, #0
 8012408:	44d0      	add	r8, sl
 801240a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801240e:	9307      	str	r3, [sp, #28]
 8012410:	9b06      	ldr	r3, [sp, #24]
 8012412:	2b09      	cmp	r3, #9
 8012414:	f200 8090 	bhi.w	8012538 <_dtoa_r+0x2d8>
 8012418:	2b05      	cmp	r3, #5
 801241a:	bfc4      	itt	gt
 801241c:	3b04      	subgt	r3, #4
 801241e:	9306      	strgt	r3, [sp, #24]
 8012420:	9b06      	ldr	r3, [sp, #24]
 8012422:	f1a3 0302 	sub.w	r3, r3, #2
 8012426:	bfcc      	ite	gt
 8012428:	2500      	movgt	r5, #0
 801242a:	2501      	movle	r5, #1
 801242c:	2b03      	cmp	r3, #3
 801242e:	f200 808f 	bhi.w	8012550 <_dtoa_r+0x2f0>
 8012432:	e8df f003 	tbb	[pc, r3]
 8012436:	7f7d      	.short	0x7f7d
 8012438:	7131      	.short	0x7131
 801243a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801243e:	441d      	add	r5, r3
 8012440:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012444:	2820      	cmp	r0, #32
 8012446:	dd13      	ble.n	8012470 <_dtoa_r+0x210>
 8012448:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801244c:	9b00      	ldr	r3, [sp, #0]
 801244e:	fa08 f800 	lsl.w	r8, r8, r0
 8012452:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012456:	fa23 f000 	lsr.w	r0, r3, r0
 801245a:	ea48 0000 	orr.w	r0, r8, r0
 801245e:	f7f5 ff89 	bl	8008374 <__aeabi_ui2d>
 8012462:	2301      	movs	r3, #1
 8012464:	4682      	mov	sl, r0
 8012466:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801246a:	3d01      	subs	r5, #1
 801246c:	9313      	str	r3, [sp, #76]	; 0x4c
 801246e:	e772      	b.n	8012356 <_dtoa_r+0xf6>
 8012470:	9b00      	ldr	r3, [sp, #0]
 8012472:	f1c0 0020 	rsb	r0, r0, #32
 8012476:	fa03 f000 	lsl.w	r0, r3, r0
 801247a:	e7f0      	b.n	801245e <_dtoa_r+0x1fe>
 801247c:	2301      	movs	r3, #1
 801247e:	e7b1      	b.n	80123e4 <_dtoa_r+0x184>
 8012480:	900f      	str	r0, [sp, #60]	; 0x3c
 8012482:	e7b0      	b.n	80123e6 <_dtoa_r+0x186>
 8012484:	9b05      	ldr	r3, [sp, #20]
 8012486:	eba3 030a 	sub.w	r3, r3, sl
 801248a:	9305      	str	r3, [sp, #20]
 801248c:	f1ca 0300 	rsb	r3, sl, #0
 8012490:	9307      	str	r3, [sp, #28]
 8012492:	2300      	movs	r3, #0
 8012494:	930e      	str	r3, [sp, #56]	; 0x38
 8012496:	e7bb      	b.n	8012410 <_dtoa_r+0x1b0>
 8012498:	2301      	movs	r3, #1
 801249a:	930a      	str	r3, [sp, #40]	; 0x28
 801249c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801249e:	2b00      	cmp	r3, #0
 80124a0:	dd59      	ble.n	8012556 <_dtoa_r+0x2f6>
 80124a2:	9302      	str	r3, [sp, #8]
 80124a4:	4699      	mov	r9, r3
 80124a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80124a8:	2200      	movs	r2, #0
 80124aa:	6072      	str	r2, [r6, #4]
 80124ac:	2204      	movs	r2, #4
 80124ae:	f102 0014 	add.w	r0, r2, #20
 80124b2:	4298      	cmp	r0, r3
 80124b4:	6871      	ldr	r1, [r6, #4]
 80124b6:	d953      	bls.n	8012560 <_dtoa_r+0x300>
 80124b8:	4620      	mov	r0, r4
 80124ba:	f000 fd69 	bl	8012f90 <_Balloc>
 80124be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124c0:	6030      	str	r0, [r6, #0]
 80124c2:	f1b9 0f0e 	cmp.w	r9, #14
 80124c6:	f8d3 b000 	ldr.w	fp, [r3]
 80124ca:	f200 80e6 	bhi.w	801269a <_dtoa_r+0x43a>
 80124ce:	2d00      	cmp	r5, #0
 80124d0:	f000 80e3 	beq.w	801269a <_dtoa_r+0x43a>
 80124d4:	ed9d 7b00 	vldr	d7, [sp]
 80124d8:	f1ba 0f00 	cmp.w	sl, #0
 80124dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80124e0:	dd74      	ble.n	80125cc <_dtoa_r+0x36c>
 80124e2:	4a2a      	ldr	r2, [pc, #168]	; (801258c <_dtoa_r+0x32c>)
 80124e4:	f00a 030f 	and.w	r3, sl, #15
 80124e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80124ec:	ed93 7b00 	vldr	d7, [r3]
 80124f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80124f4:	06f0      	lsls	r0, r6, #27
 80124f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80124fa:	d565      	bpl.n	80125c8 <_dtoa_r+0x368>
 80124fc:	4b24      	ldr	r3, [pc, #144]	; (8012590 <_dtoa_r+0x330>)
 80124fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012502:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012506:	f7f6 f8d9 	bl	80086bc <__aeabi_ddiv>
 801250a:	e9cd 0100 	strd	r0, r1, [sp]
 801250e:	f006 060f 	and.w	r6, r6, #15
 8012512:	2503      	movs	r5, #3
 8012514:	4f1e      	ldr	r7, [pc, #120]	; (8012590 <_dtoa_r+0x330>)
 8012516:	e04c      	b.n	80125b2 <_dtoa_r+0x352>
 8012518:	2301      	movs	r3, #1
 801251a:	930a      	str	r3, [sp, #40]	; 0x28
 801251c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801251e:	4453      	add	r3, sl
 8012520:	f103 0901 	add.w	r9, r3, #1
 8012524:	9302      	str	r3, [sp, #8]
 8012526:	464b      	mov	r3, r9
 8012528:	2b01      	cmp	r3, #1
 801252a:	bfb8      	it	lt
 801252c:	2301      	movlt	r3, #1
 801252e:	e7ba      	b.n	80124a6 <_dtoa_r+0x246>
 8012530:	2300      	movs	r3, #0
 8012532:	e7b2      	b.n	801249a <_dtoa_r+0x23a>
 8012534:	2300      	movs	r3, #0
 8012536:	e7f0      	b.n	801251a <_dtoa_r+0x2ba>
 8012538:	2501      	movs	r5, #1
 801253a:	2300      	movs	r3, #0
 801253c:	9306      	str	r3, [sp, #24]
 801253e:	950a      	str	r5, [sp, #40]	; 0x28
 8012540:	f04f 33ff 	mov.w	r3, #4294967295
 8012544:	9302      	str	r3, [sp, #8]
 8012546:	4699      	mov	r9, r3
 8012548:	2200      	movs	r2, #0
 801254a:	2312      	movs	r3, #18
 801254c:	920b      	str	r2, [sp, #44]	; 0x2c
 801254e:	e7aa      	b.n	80124a6 <_dtoa_r+0x246>
 8012550:	2301      	movs	r3, #1
 8012552:	930a      	str	r3, [sp, #40]	; 0x28
 8012554:	e7f4      	b.n	8012540 <_dtoa_r+0x2e0>
 8012556:	2301      	movs	r3, #1
 8012558:	9302      	str	r3, [sp, #8]
 801255a:	4699      	mov	r9, r3
 801255c:	461a      	mov	r2, r3
 801255e:	e7f5      	b.n	801254c <_dtoa_r+0x2ec>
 8012560:	3101      	adds	r1, #1
 8012562:	6071      	str	r1, [r6, #4]
 8012564:	0052      	lsls	r2, r2, #1
 8012566:	e7a2      	b.n	80124ae <_dtoa_r+0x24e>
 8012568:	636f4361 	.word	0x636f4361
 801256c:	3fd287a7 	.word	0x3fd287a7
 8012570:	8b60c8b3 	.word	0x8b60c8b3
 8012574:	3fc68a28 	.word	0x3fc68a28
 8012578:	509f79fb 	.word	0x509f79fb
 801257c:	3fd34413 	.word	0x3fd34413
 8012580:	7ff00000 	.word	0x7ff00000
 8012584:	0801429d 	.word	0x0801429d
 8012588:	3ff80000 	.word	0x3ff80000
 801258c:	08014358 	.word	0x08014358
 8012590:	08014330 	.word	0x08014330
 8012594:	080142c9 	.word	0x080142c9
 8012598:	07f1      	lsls	r1, r6, #31
 801259a:	d508      	bpl.n	80125ae <_dtoa_r+0x34e>
 801259c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80125a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125a4:	f7f5 ff60 	bl	8008468 <__aeabi_dmul>
 80125a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80125ac:	3501      	adds	r5, #1
 80125ae:	1076      	asrs	r6, r6, #1
 80125b0:	3708      	adds	r7, #8
 80125b2:	2e00      	cmp	r6, #0
 80125b4:	d1f0      	bne.n	8012598 <_dtoa_r+0x338>
 80125b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80125ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125be:	f7f6 f87d 	bl	80086bc <__aeabi_ddiv>
 80125c2:	e9cd 0100 	strd	r0, r1, [sp]
 80125c6:	e01a      	b.n	80125fe <_dtoa_r+0x39e>
 80125c8:	2502      	movs	r5, #2
 80125ca:	e7a3      	b.n	8012514 <_dtoa_r+0x2b4>
 80125cc:	f000 80a0 	beq.w	8012710 <_dtoa_r+0x4b0>
 80125d0:	f1ca 0600 	rsb	r6, sl, #0
 80125d4:	4b9f      	ldr	r3, [pc, #636]	; (8012854 <_dtoa_r+0x5f4>)
 80125d6:	4fa0      	ldr	r7, [pc, #640]	; (8012858 <_dtoa_r+0x5f8>)
 80125d8:	f006 020f 	and.w	r2, r6, #15
 80125dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80125e8:	f7f5 ff3e 	bl	8008468 <__aeabi_dmul>
 80125ec:	e9cd 0100 	strd	r0, r1, [sp]
 80125f0:	1136      	asrs	r6, r6, #4
 80125f2:	2300      	movs	r3, #0
 80125f4:	2502      	movs	r5, #2
 80125f6:	2e00      	cmp	r6, #0
 80125f8:	d17f      	bne.n	80126fa <_dtoa_r+0x49a>
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d1e1      	bne.n	80125c2 <_dtoa_r+0x362>
 80125fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012600:	2b00      	cmp	r3, #0
 8012602:	f000 8087 	beq.w	8012714 <_dtoa_r+0x4b4>
 8012606:	e9dd 6700 	ldrd	r6, r7, [sp]
 801260a:	2200      	movs	r2, #0
 801260c:	4b93      	ldr	r3, [pc, #588]	; (801285c <_dtoa_r+0x5fc>)
 801260e:	4630      	mov	r0, r6
 8012610:	4639      	mov	r1, r7
 8012612:	f7f6 f99b 	bl	800894c <__aeabi_dcmplt>
 8012616:	2800      	cmp	r0, #0
 8012618:	d07c      	beq.n	8012714 <_dtoa_r+0x4b4>
 801261a:	f1b9 0f00 	cmp.w	r9, #0
 801261e:	d079      	beq.n	8012714 <_dtoa_r+0x4b4>
 8012620:	9b02      	ldr	r3, [sp, #8]
 8012622:	2b00      	cmp	r3, #0
 8012624:	dd35      	ble.n	8012692 <_dtoa_r+0x432>
 8012626:	f10a 33ff 	add.w	r3, sl, #4294967295
 801262a:	9308      	str	r3, [sp, #32]
 801262c:	4639      	mov	r1, r7
 801262e:	2200      	movs	r2, #0
 8012630:	4b8b      	ldr	r3, [pc, #556]	; (8012860 <_dtoa_r+0x600>)
 8012632:	4630      	mov	r0, r6
 8012634:	f7f5 ff18 	bl	8008468 <__aeabi_dmul>
 8012638:	e9cd 0100 	strd	r0, r1, [sp]
 801263c:	9f02      	ldr	r7, [sp, #8]
 801263e:	3501      	adds	r5, #1
 8012640:	4628      	mov	r0, r5
 8012642:	f7f5 fea7 	bl	8008394 <__aeabi_i2d>
 8012646:	e9dd 2300 	ldrd	r2, r3, [sp]
 801264a:	f7f5 ff0d 	bl	8008468 <__aeabi_dmul>
 801264e:	2200      	movs	r2, #0
 8012650:	4b84      	ldr	r3, [pc, #528]	; (8012864 <_dtoa_r+0x604>)
 8012652:	f7f5 fd53 	bl	80080fc <__adddf3>
 8012656:	4605      	mov	r5, r0
 8012658:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801265c:	2f00      	cmp	r7, #0
 801265e:	d15d      	bne.n	801271c <_dtoa_r+0x4bc>
 8012660:	2200      	movs	r2, #0
 8012662:	4b81      	ldr	r3, [pc, #516]	; (8012868 <_dtoa_r+0x608>)
 8012664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012668:	f7f5 fd46 	bl	80080f8 <__aeabi_dsub>
 801266c:	462a      	mov	r2, r5
 801266e:	4633      	mov	r3, r6
 8012670:	e9cd 0100 	strd	r0, r1, [sp]
 8012674:	f7f6 f988 	bl	8008988 <__aeabi_dcmpgt>
 8012678:	2800      	cmp	r0, #0
 801267a:	f040 8288 	bne.w	8012b8e <_dtoa_r+0x92e>
 801267e:	462a      	mov	r2, r5
 8012680:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012688:	f7f6 f960 	bl	800894c <__aeabi_dcmplt>
 801268c:	2800      	cmp	r0, #0
 801268e:	f040 827c 	bne.w	8012b8a <_dtoa_r+0x92a>
 8012692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012696:	e9cd 2300 	strd	r2, r3, [sp]
 801269a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801269c:	2b00      	cmp	r3, #0
 801269e:	f2c0 8150 	blt.w	8012942 <_dtoa_r+0x6e2>
 80126a2:	f1ba 0f0e 	cmp.w	sl, #14
 80126a6:	f300 814c 	bgt.w	8012942 <_dtoa_r+0x6e2>
 80126aa:	4b6a      	ldr	r3, [pc, #424]	; (8012854 <_dtoa_r+0x5f4>)
 80126ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80126b0:	ed93 7b00 	vldr	d7, [r3]
 80126b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126bc:	f280 80d8 	bge.w	8012870 <_dtoa_r+0x610>
 80126c0:	f1b9 0f00 	cmp.w	r9, #0
 80126c4:	f300 80d4 	bgt.w	8012870 <_dtoa_r+0x610>
 80126c8:	f040 825e 	bne.w	8012b88 <_dtoa_r+0x928>
 80126cc:	2200      	movs	r2, #0
 80126ce:	4b66      	ldr	r3, [pc, #408]	; (8012868 <_dtoa_r+0x608>)
 80126d0:	ec51 0b17 	vmov	r0, r1, d7
 80126d4:	f7f5 fec8 	bl	8008468 <__aeabi_dmul>
 80126d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126dc:	f7f6 f94a 	bl	8008974 <__aeabi_dcmpge>
 80126e0:	464f      	mov	r7, r9
 80126e2:	464e      	mov	r6, r9
 80126e4:	2800      	cmp	r0, #0
 80126e6:	f040 8234 	bne.w	8012b52 <_dtoa_r+0x8f2>
 80126ea:	2331      	movs	r3, #49	; 0x31
 80126ec:	f10b 0501 	add.w	r5, fp, #1
 80126f0:	f88b 3000 	strb.w	r3, [fp]
 80126f4:	f10a 0a01 	add.w	sl, sl, #1
 80126f8:	e22f      	b.n	8012b5a <_dtoa_r+0x8fa>
 80126fa:	07f2      	lsls	r2, r6, #31
 80126fc:	d505      	bpl.n	801270a <_dtoa_r+0x4aa>
 80126fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012702:	f7f5 feb1 	bl	8008468 <__aeabi_dmul>
 8012706:	3501      	adds	r5, #1
 8012708:	2301      	movs	r3, #1
 801270a:	1076      	asrs	r6, r6, #1
 801270c:	3708      	adds	r7, #8
 801270e:	e772      	b.n	80125f6 <_dtoa_r+0x396>
 8012710:	2502      	movs	r5, #2
 8012712:	e774      	b.n	80125fe <_dtoa_r+0x39e>
 8012714:	f8cd a020 	str.w	sl, [sp, #32]
 8012718:	464f      	mov	r7, r9
 801271a:	e791      	b.n	8012640 <_dtoa_r+0x3e0>
 801271c:	4b4d      	ldr	r3, [pc, #308]	; (8012854 <_dtoa_r+0x5f4>)
 801271e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012722:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012728:	2b00      	cmp	r3, #0
 801272a:	d047      	beq.n	80127bc <_dtoa_r+0x55c>
 801272c:	4602      	mov	r2, r0
 801272e:	460b      	mov	r3, r1
 8012730:	2000      	movs	r0, #0
 8012732:	494e      	ldr	r1, [pc, #312]	; (801286c <_dtoa_r+0x60c>)
 8012734:	f7f5 ffc2 	bl	80086bc <__aeabi_ddiv>
 8012738:	462a      	mov	r2, r5
 801273a:	4633      	mov	r3, r6
 801273c:	f7f5 fcdc 	bl	80080f8 <__aeabi_dsub>
 8012740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012744:	465d      	mov	r5, fp
 8012746:	e9dd 0100 	ldrd	r0, r1, [sp]
 801274a:	f7f6 f93d 	bl	80089c8 <__aeabi_d2iz>
 801274e:	4606      	mov	r6, r0
 8012750:	f7f5 fe20 	bl	8008394 <__aeabi_i2d>
 8012754:	4602      	mov	r2, r0
 8012756:	460b      	mov	r3, r1
 8012758:	e9dd 0100 	ldrd	r0, r1, [sp]
 801275c:	f7f5 fccc 	bl	80080f8 <__aeabi_dsub>
 8012760:	3630      	adds	r6, #48	; 0x30
 8012762:	f805 6b01 	strb.w	r6, [r5], #1
 8012766:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801276a:	e9cd 0100 	strd	r0, r1, [sp]
 801276e:	f7f6 f8ed 	bl	800894c <__aeabi_dcmplt>
 8012772:	2800      	cmp	r0, #0
 8012774:	d163      	bne.n	801283e <_dtoa_r+0x5de>
 8012776:	e9dd 2300 	ldrd	r2, r3, [sp]
 801277a:	2000      	movs	r0, #0
 801277c:	4937      	ldr	r1, [pc, #220]	; (801285c <_dtoa_r+0x5fc>)
 801277e:	f7f5 fcbb 	bl	80080f8 <__aeabi_dsub>
 8012782:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012786:	f7f6 f8e1 	bl	800894c <__aeabi_dcmplt>
 801278a:	2800      	cmp	r0, #0
 801278c:	f040 80b7 	bne.w	80128fe <_dtoa_r+0x69e>
 8012790:	eba5 030b 	sub.w	r3, r5, fp
 8012794:	429f      	cmp	r7, r3
 8012796:	f77f af7c 	ble.w	8012692 <_dtoa_r+0x432>
 801279a:	2200      	movs	r2, #0
 801279c:	4b30      	ldr	r3, [pc, #192]	; (8012860 <_dtoa_r+0x600>)
 801279e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80127a2:	f7f5 fe61 	bl	8008468 <__aeabi_dmul>
 80127a6:	2200      	movs	r2, #0
 80127a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80127ac:	4b2c      	ldr	r3, [pc, #176]	; (8012860 <_dtoa_r+0x600>)
 80127ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127b2:	f7f5 fe59 	bl	8008468 <__aeabi_dmul>
 80127b6:	e9cd 0100 	strd	r0, r1, [sp]
 80127ba:	e7c4      	b.n	8012746 <_dtoa_r+0x4e6>
 80127bc:	462a      	mov	r2, r5
 80127be:	4633      	mov	r3, r6
 80127c0:	f7f5 fe52 	bl	8008468 <__aeabi_dmul>
 80127c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80127c8:	eb0b 0507 	add.w	r5, fp, r7
 80127cc:	465e      	mov	r6, fp
 80127ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127d2:	f7f6 f8f9 	bl	80089c8 <__aeabi_d2iz>
 80127d6:	4607      	mov	r7, r0
 80127d8:	f7f5 fddc 	bl	8008394 <__aeabi_i2d>
 80127dc:	3730      	adds	r7, #48	; 0x30
 80127de:	4602      	mov	r2, r0
 80127e0:	460b      	mov	r3, r1
 80127e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127e6:	f7f5 fc87 	bl	80080f8 <__aeabi_dsub>
 80127ea:	f806 7b01 	strb.w	r7, [r6], #1
 80127ee:	42ae      	cmp	r6, r5
 80127f0:	e9cd 0100 	strd	r0, r1, [sp]
 80127f4:	f04f 0200 	mov.w	r2, #0
 80127f8:	d126      	bne.n	8012848 <_dtoa_r+0x5e8>
 80127fa:	4b1c      	ldr	r3, [pc, #112]	; (801286c <_dtoa_r+0x60c>)
 80127fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012800:	f7f5 fc7c 	bl	80080fc <__adddf3>
 8012804:	4602      	mov	r2, r0
 8012806:	460b      	mov	r3, r1
 8012808:	e9dd 0100 	ldrd	r0, r1, [sp]
 801280c:	f7f6 f8bc 	bl	8008988 <__aeabi_dcmpgt>
 8012810:	2800      	cmp	r0, #0
 8012812:	d174      	bne.n	80128fe <_dtoa_r+0x69e>
 8012814:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012818:	2000      	movs	r0, #0
 801281a:	4914      	ldr	r1, [pc, #80]	; (801286c <_dtoa_r+0x60c>)
 801281c:	f7f5 fc6c 	bl	80080f8 <__aeabi_dsub>
 8012820:	4602      	mov	r2, r0
 8012822:	460b      	mov	r3, r1
 8012824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012828:	f7f6 f890 	bl	800894c <__aeabi_dcmplt>
 801282c:	2800      	cmp	r0, #0
 801282e:	f43f af30 	beq.w	8012692 <_dtoa_r+0x432>
 8012832:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012836:	2b30      	cmp	r3, #48	; 0x30
 8012838:	f105 32ff 	add.w	r2, r5, #4294967295
 801283c:	d002      	beq.n	8012844 <_dtoa_r+0x5e4>
 801283e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012842:	e04a      	b.n	80128da <_dtoa_r+0x67a>
 8012844:	4615      	mov	r5, r2
 8012846:	e7f4      	b.n	8012832 <_dtoa_r+0x5d2>
 8012848:	4b05      	ldr	r3, [pc, #20]	; (8012860 <_dtoa_r+0x600>)
 801284a:	f7f5 fe0d 	bl	8008468 <__aeabi_dmul>
 801284e:	e9cd 0100 	strd	r0, r1, [sp]
 8012852:	e7bc      	b.n	80127ce <_dtoa_r+0x56e>
 8012854:	08014358 	.word	0x08014358
 8012858:	08014330 	.word	0x08014330
 801285c:	3ff00000 	.word	0x3ff00000
 8012860:	40240000 	.word	0x40240000
 8012864:	401c0000 	.word	0x401c0000
 8012868:	40140000 	.word	0x40140000
 801286c:	3fe00000 	.word	0x3fe00000
 8012870:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012874:	465d      	mov	r5, fp
 8012876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801287a:	4630      	mov	r0, r6
 801287c:	4639      	mov	r1, r7
 801287e:	f7f5 ff1d 	bl	80086bc <__aeabi_ddiv>
 8012882:	f7f6 f8a1 	bl	80089c8 <__aeabi_d2iz>
 8012886:	4680      	mov	r8, r0
 8012888:	f7f5 fd84 	bl	8008394 <__aeabi_i2d>
 801288c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012890:	f7f5 fdea 	bl	8008468 <__aeabi_dmul>
 8012894:	4602      	mov	r2, r0
 8012896:	460b      	mov	r3, r1
 8012898:	4630      	mov	r0, r6
 801289a:	4639      	mov	r1, r7
 801289c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80128a0:	f7f5 fc2a 	bl	80080f8 <__aeabi_dsub>
 80128a4:	f805 6b01 	strb.w	r6, [r5], #1
 80128a8:	eba5 060b 	sub.w	r6, r5, fp
 80128ac:	45b1      	cmp	r9, r6
 80128ae:	4602      	mov	r2, r0
 80128b0:	460b      	mov	r3, r1
 80128b2:	d139      	bne.n	8012928 <_dtoa_r+0x6c8>
 80128b4:	f7f5 fc22 	bl	80080fc <__adddf3>
 80128b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128bc:	4606      	mov	r6, r0
 80128be:	460f      	mov	r7, r1
 80128c0:	f7f6 f862 	bl	8008988 <__aeabi_dcmpgt>
 80128c4:	b9c8      	cbnz	r0, 80128fa <_dtoa_r+0x69a>
 80128c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128ca:	4630      	mov	r0, r6
 80128cc:	4639      	mov	r1, r7
 80128ce:	f7f6 f833 	bl	8008938 <__aeabi_dcmpeq>
 80128d2:	b110      	cbz	r0, 80128da <_dtoa_r+0x67a>
 80128d4:	f018 0f01 	tst.w	r8, #1
 80128d8:	d10f      	bne.n	80128fa <_dtoa_r+0x69a>
 80128da:	9904      	ldr	r1, [sp, #16]
 80128dc:	4620      	mov	r0, r4
 80128de:	f000 fb8b 	bl	8012ff8 <_Bfree>
 80128e2:	2300      	movs	r3, #0
 80128e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80128e6:	702b      	strb	r3, [r5, #0]
 80128e8:	f10a 0301 	add.w	r3, sl, #1
 80128ec:	6013      	str	r3, [r2, #0]
 80128ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f000 8241 	beq.w	8012d78 <_dtoa_r+0xb18>
 80128f6:	601d      	str	r5, [r3, #0]
 80128f8:	e23e      	b.n	8012d78 <_dtoa_r+0xb18>
 80128fa:	f8cd a020 	str.w	sl, [sp, #32]
 80128fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012902:	2a39      	cmp	r2, #57	; 0x39
 8012904:	f105 33ff 	add.w	r3, r5, #4294967295
 8012908:	d108      	bne.n	801291c <_dtoa_r+0x6bc>
 801290a:	459b      	cmp	fp, r3
 801290c:	d10a      	bne.n	8012924 <_dtoa_r+0x6c4>
 801290e:	9b08      	ldr	r3, [sp, #32]
 8012910:	3301      	adds	r3, #1
 8012912:	9308      	str	r3, [sp, #32]
 8012914:	2330      	movs	r3, #48	; 0x30
 8012916:	f88b 3000 	strb.w	r3, [fp]
 801291a:	465b      	mov	r3, fp
 801291c:	781a      	ldrb	r2, [r3, #0]
 801291e:	3201      	adds	r2, #1
 8012920:	701a      	strb	r2, [r3, #0]
 8012922:	e78c      	b.n	801283e <_dtoa_r+0x5de>
 8012924:	461d      	mov	r5, r3
 8012926:	e7ea      	b.n	80128fe <_dtoa_r+0x69e>
 8012928:	2200      	movs	r2, #0
 801292a:	4b9b      	ldr	r3, [pc, #620]	; (8012b98 <_dtoa_r+0x938>)
 801292c:	f7f5 fd9c 	bl	8008468 <__aeabi_dmul>
 8012930:	2200      	movs	r2, #0
 8012932:	2300      	movs	r3, #0
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	f7f5 fffe 	bl	8008938 <__aeabi_dcmpeq>
 801293c:	2800      	cmp	r0, #0
 801293e:	d09a      	beq.n	8012876 <_dtoa_r+0x616>
 8012940:	e7cb      	b.n	80128da <_dtoa_r+0x67a>
 8012942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012944:	2a00      	cmp	r2, #0
 8012946:	f000 808b 	beq.w	8012a60 <_dtoa_r+0x800>
 801294a:	9a06      	ldr	r2, [sp, #24]
 801294c:	2a01      	cmp	r2, #1
 801294e:	dc6e      	bgt.n	8012a2e <_dtoa_r+0x7ce>
 8012950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012952:	2a00      	cmp	r2, #0
 8012954:	d067      	beq.n	8012a26 <_dtoa_r+0x7c6>
 8012956:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801295a:	9f07      	ldr	r7, [sp, #28]
 801295c:	9d05      	ldr	r5, [sp, #20]
 801295e:	9a05      	ldr	r2, [sp, #20]
 8012960:	2101      	movs	r1, #1
 8012962:	441a      	add	r2, r3
 8012964:	4620      	mov	r0, r4
 8012966:	9205      	str	r2, [sp, #20]
 8012968:	4498      	add	r8, r3
 801296a:	f000 fbe5 	bl	8013138 <__i2b>
 801296e:	4606      	mov	r6, r0
 8012970:	2d00      	cmp	r5, #0
 8012972:	dd0c      	ble.n	801298e <_dtoa_r+0x72e>
 8012974:	f1b8 0f00 	cmp.w	r8, #0
 8012978:	dd09      	ble.n	801298e <_dtoa_r+0x72e>
 801297a:	4545      	cmp	r5, r8
 801297c:	9a05      	ldr	r2, [sp, #20]
 801297e:	462b      	mov	r3, r5
 8012980:	bfa8      	it	ge
 8012982:	4643      	movge	r3, r8
 8012984:	1ad2      	subs	r2, r2, r3
 8012986:	9205      	str	r2, [sp, #20]
 8012988:	1aed      	subs	r5, r5, r3
 801298a:	eba8 0803 	sub.w	r8, r8, r3
 801298e:	9b07      	ldr	r3, [sp, #28]
 8012990:	b1eb      	cbz	r3, 80129ce <_dtoa_r+0x76e>
 8012992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012994:	2b00      	cmp	r3, #0
 8012996:	d067      	beq.n	8012a68 <_dtoa_r+0x808>
 8012998:	b18f      	cbz	r7, 80129be <_dtoa_r+0x75e>
 801299a:	4631      	mov	r1, r6
 801299c:	463a      	mov	r2, r7
 801299e:	4620      	mov	r0, r4
 80129a0:	f000 fc6a 	bl	8013278 <__pow5mult>
 80129a4:	9a04      	ldr	r2, [sp, #16]
 80129a6:	4601      	mov	r1, r0
 80129a8:	4606      	mov	r6, r0
 80129aa:	4620      	mov	r0, r4
 80129ac:	f000 fbcd 	bl	801314a <__multiply>
 80129b0:	9904      	ldr	r1, [sp, #16]
 80129b2:	9008      	str	r0, [sp, #32]
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 fb1f 	bl	8012ff8 <_Bfree>
 80129ba:	9b08      	ldr	r3, [sp, #32]
 80129bc:	9304      	str	r3, [sp, #16]
 80129be:	9b07      	ldr	r3, [sp, #28]
 80129c0:	1bda      	subs	r2, r3, r7
 80129c2:	d004      	beq.n	80129ce <_dtoa_r+0x76e>
 80129c4:	9904      	ldr	r1, [sp, #16]
 80129c6:	4620      	mov	r0, r4
 80129c8:	f000 fc56 	bl	8013278 <__pow5mult>
 80129cc:	9004      	str	r0, [sp, #16]
 80129ce:	2101      	movs	r1, #1
 80129d0:	4620      	mov	r0, r4
 80129d2:	f000 fbb1 	bl	8013138 <__i2b>
 80129d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129d8:	4607      	mov	r7, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 81d0 	beq.w	8012d80 <_dtoa_r+0xb20>
 80129e0:	461a      	mov	r2, r3
 80129e2:	4601      	mov	r1, r0
 80129e4:	4620      	mov	r0, r4
 80129e6:	f000 fc47 	bl	8013278 <__pow5mult>
 80129ea:	9b06      	ldr	r3, [sp, #24]
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	4607      	mov	r7, r0
 80129f0:	dc40      	bgt.n	8012a74 <_dtoa_r+0x814>
 80129f2:	9b00      	ldr	r3, [sp, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d139      	bne.n	8012a6c <_dtoa_r+0x80c>
 80129f8:	9b01      	ldr	r3, [sp, #4]
 80129fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d136      	bne.n	8012a70 <_dtoa_r+0x810>
 8012a02:	9b01      	ldr	r3, [sp, #4]
 8012a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a08:	0d1b      	lsrs	r3, r3, #20
 8012a0a:	051b      	lsls	r3, r3, #20
 8012a0c:	b12b      	cbz	r3, 8012a1a <_dtoa_r+0x7ba>
 8012a0e:	9b05      	ldr	r3, [sp, #20]
 8012a10:	3301      	adds	r3, #1
 8012a12:	9305      	str	r3, [sp, #20]
 8012a14:	f108 0801 	add.w	r8, r8, #1
 8012a18:	2301      	movs	r3, #1
 8012a1a:	9307      	str	r3, [sp, #28]
 8012a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d12a      	bne.n	8012a78 <_dtoa_r+0x818>
 8012a22:	2001      	movs	r0, #1
 8012a24:	e030      	b.n	8012a88 <_dtoa_r+0x828>
 8012a26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012a2c:	e795      	b.n	801295a <_dtoa_r+0x6fa>
 8012a2e:	9b07      	ldr	r3, [sp, #28]
 8012a30:	f109 37ff 	add.w	r7, r9, #4294967295
 8012a34:	42bb      	cmp	r3, r7
 8012a36:	bfbf      	itttt	lt
 8012a38:	9b07      	ldrlt	r3, [sp, #28]
 8012a3a:	9707      	strlt	r7, [sp, #28]
 8012a3c:	1afa      	sublt	r2, r7, r3
 8012a3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012a40:	bfbb      	ittet	lt
 8012a42:	189b      	addlt	r3, r3, r2
 8012a44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012a46:	1bdf      	subge	r7, r3, r7
 8012a48:	2700      	movlt	r7, #0
 8012a4a:	f1b9 0f00 	cmp.w	r9, #0
 8012a4e:	bfb5      	itete	lt
 8012a50:	9b05      	ldrlt	r3, [sp, #20]
 8012a52:	9d05      	ldrge	r5, [sp, #20]
 8012a54:	eba3 0509 	sublt.w	r5, r3, r9
 8012a58:	464b      	movge	r3, r9
 8012a5a:	bfb8      	it	lt
 8012a5c:	2300      	movlt	r3, #0
 8012a5e:	e77e      	b.n	801295e <_dtoa_r+0x6fe>
 8012a60:	9f07      	ldr	r7, [sp, #28]
 8012a62:	9d05      	ldr	r5, [sp, #20]
 8012a64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012a66:	e783      	b.n	8012970 <_dtoa_r+0x710>
 8012a68:	9a07      	ldr	r2, [sp, #28]
 8012a6a:	e7ab      	b.n	80129c4 <_dtoa_r+0x764>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	e7d4      	b.n	8012a1a <_dtoa_r+0x7ba>
 8012a70:	9b00      	ldr	r3, [sp, #0]
 8012a72:	e7d2      	b.n	8012a1a <_dtoa_r+0x7ba>
 8012a74:	2300      	movs	r3, #0
 8012a76:	9307      	str	r3, [sp, #28]
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012a7e:	6918      	ldr	r0, [r3, #16]
 8012a80:	f000 fb0c 	bl	801309c <__hi0bits>
 8012a84:	f1c0 0020 	rsb	r0, r0, #32
 8012a88:	4440      	add	r0, r8
 8012a8a:	f010 001f 	ands.w	r0, r0, #31
 8012a8e:	d047      	beq.n	8012b20 <_dtoa_r+0x8c0>
 8012a90:	f1c0 0320 	rsb	r3, r0, #32
 8012a94:	2b04      	cmp	r3, #4
 8012a96:	dd3b      	ble.n	8012b10 <_dtoa_r+0x8b0>
 8012a98:	9b05      	ldr	r3, [sp, #20]
 8012a9a:	f1c0 001c 	rsb	r0, r0, #28
 8012a9e:	4403      	add	r3, r0
 8012aa0:	9305      	str	r3, [sp, #20]
 8012aa2:	4405      	add	r5, r0
 8012aa4:	4480      	add	r8, r0
 8012aa6:	9b05      	ldr	r3, [sp, #20]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	dd05      	ble.n	8012ab8 <_dtoa_r+0x858>
 8012aac:	461a      	mov	r2, r3
 8012aae:	9904      	ldr	r1, [sp, #16]
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	f000 fc2f 	bl	8013314 <__lshift>
 8012ab6:	9004      	str	r0, [sp, #16]
 8012ab8:	f1b8 0f00 	cmp.w	r8, #0
 8012abc:	dd05      	ble.n	8012aca <_dtoa_r+0x86a>
 8012abe:	4639      	mov	r1, r7
 8012ac0:	4642      	mov	r2, r8
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f000 fc26 	bl	8013314 <__lshift>
 8012ac8:	4607      	mov	r7, r0
 8012aca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012acc:	b353      	cbz	r3, 8012b24 <_dtoa_r+0x8c4>
 8012ace:	4639      	mov	r1, r7
 8012ad0:	9804      	ldr	r0, [sp, #16]
 8012ad2:	f000 fc73 	bl	80133bc <__mcmp>
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	da24      	bge.n	8012b24 <_dtoa_r+0x8c4>
 8012ada:	2300      	movs	r3, #0
 8012adc:	220a      	movs	r2, #10
 8012ade:	9904      	ldr	r1, [sp, #16]
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	f000 faa0 	bl	8013026 <__multadd>
 8012ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ae8:	9004      	str	r0, [sp, #16]
 8012aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f000 814d 	beq.w	8012d8e <_dtoa_r+0xb2e>
 8012af4:	2300      	movs	r3, #0
 8012af6:	4631      	mov	r1, r6
 8012af8:	220a      	movs	r2, #10
 8012afa:	4620      	mov	r0, r4
 8012afc:	f000 fa93 	bl	8013026 <__multadd>
 8012b00:	9b02      	ldr	r3, [sp, #8]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	4606      	mov	r6, r0
 8012b06:	dc4f      	bgt.n	8012ba8 <_dtoa_r+0x948>
 8012b08:	9b06      	ldr	r3, [sp, #24]
 8012b0a:	2b02      	cmp	r3, #2
 8012b0c:	dd4c      	ble.n	8012ba8 <_dtoa_r+0x948>
 8012b0e:	e011      	b.n	8012b34 <_dtoa_r+0x8d4>
 8012b10:	d0c9      	beq.n	8012aa6 <_dtoa_r+0x846>
 8012b12:	9a05      	ldr	r2, [sp, #20]
 8012b14:	331c      	adds	r3, #28
 8012b16:	441a      	add	r2, r3
 8012b18:	9205      	str	r2, [sp, #20]
 8012b1a:	441d      	add	r5, r3
 8012b1c:	4498      	add	r8, r3
 8012b1e:	e7c2      	b.n	8012aa6 <_dtoa_r+0x846>
 8012b20:	4603      	mov	r3, r0
 8012b22:	e7f6      	b.n	8012b12 <_dtoa_r+0x8b2>
 8012b24:	f1b9 0f00 	cmp.w	r9, #0
 8012b28:	dc38      	bgt.n	8012b9c <_dtoa_r+0x93c>
 8012b2a:	9b06      	ldr	r3, [sp, #24]
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	dd35      	ble.n	8012b9c <_dtoa_r+0x93c>
 8012b30:	f8cd 9008 	str.w	r9, [sp, #8]
 8012b34:	9b02      	ldr	r3, [sp, #8]
 8012b36:	b963      	cbnz	r3, 8012b52 <_dtoa_r+0x8f2>
 8012b38:	4639      	mov	r1, r7
 8012b3a:	2205      	movs	r2, #5
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 fa72 	bl	8013026 <__multadd>
 8012b42:	4601      	mov	r1, r0
 8012b44:	4607      	mov	r7, r0
 8012b46:	9804      	ldr	r0, [sp, #16]
 8012b48:	f000 fc38 	bl	80133bc <__mcmp>
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	f73f adcc 	bgt.w	80126ea <_dtoa_r+0x48a>
 8012b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b54:	465d      	mov	r5, fp
 8012b56:	ea6f 0a03 	mvn.w	sl, r3
 8012b5a:	f04f 0900 	mov.w	r9, #0
 8012b5e:	4639      	mov	r1, r7
 8012b60:	4620      	mov	r0, r4
 8012b62:	f000 fa49 	bl	8012ff8 <_Bfree>
 8012b66:	2e00      	cmp	r6, #0
 8012b68:	f43f aeb7 	beq.w	80128da <_dtoa_r+0x67a>
 8012b6c:	f1b9 0f00 	cmp.w	r9, #0
 8012b70:	d005      	beq.n	8012b7e <_dtoa_r+0x91e>
 8012b72:	45b1      	cmp	r9, r6
 8012b74:	d003      	beq.n	8012b7e <_dtoa_r+0x91e>
 8012b76:	4649      	mov	r1, r9
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f000 fa3d 	bl	8012ff8 <_Bfree>
 8012b7e:	4631      	mov	r1, r6
 8012b80:	4620      	mov	r0, r4
 8012b82:	f000 fa39 	bl	8012ff8 <_Bfree>
 8012b86:	e6a8      	b.n	80128da <_dtoa_r+0x67a>
 8012b88:	2700      	movs	r7, #0
 8012b8a:	463e      	mov	r6, r7
 8012b8c:	e7e1      	b.n	8012b52 <_dtoa_r+0x8f2>
 8012b8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b92:	463e      	mov	r6, r7
 8012b94:	e5a9      	b.n	80126ea <_dtoa_r+0x48a>
 8012b96:	bf00      	nop
 8012b98:	40240000 	.word	0x40240000
 8012b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f000 80fa 	beq.w	8012d9c <_dtoa_r+0xb3c>
 8012ba8:	2d00      	cmp	r5, #0
 8012baa:	dd05      	ble.n	8012bb8 <_dtoa_r+0x958>
 8012bac:	4631      	mov	r1, r6
 8012bae:	462a      	mov	r2, r5
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f000 fbaf 	bl	8013314 <__lshift>
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	9b07      	ldr	r3, [sp, #28]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d04c      	beq.n	8012c58 <_dtoa_r+0x9f8>
 8012bbe:	6871      	ldr	r1, [r6, #4]
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f000 f9e5 	bl	8012f90 <_Balloc>
 8012bc6:	6932      	ldr	r2, [r6, #16]
 8012bc8:	3202      	adds	r2, #2
 8012bca:	4605      	mov	r5, r0
 8012bcc:	0092      	lsls	r2, r2, #2
 8012bce:	f106 010c 	add.w	r1, r6, #12
 8012bd2:	300c      	adds	r0, #12
 8012bd4:	f7fe fe10 	bl	80117f8 <memcpy>
 8012bd8:	2201      	movs	r2, #1
 8012bda:	4629      	mov	r1, r5
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f000 fb99 	bl	8013314 <__lshift>
 8012be2:	9b00      	ldr	r3, [sp, #0]
 8012be4:	f8cd b014 	str.w	fp, [sp, #20]
 8012be8:	f003 0301 	and.w	r3, r3, #1
 8012bec:	46b1      	mov	r9, r6
 8012bee:	9307      	str	r3, [sp, #28]
 8012bf0:	4606      	mov	r6, r0
 8012bf2:	4639      	mov	r1, r7
 8012bf4:	9804      	ldr	r0, [sp, #16]
 8012bf6:	f7ff faa7 	bl	8012148 <quorem>
 8012bfa:	4649      	mov	r1, r9
 8012bfc:	4605      	mov	r5, r0
 8012bfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012c02:	9804      	ldr	r0, [sp, #16]
 8012c04:	f000 fbda 	bl	80133bc <__mcmp>
 8012c08:	4632      	mov	r2, r6
 8012c0a:	9000      	str	r0, [sp, #0]
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	4620      	mov	r0, r4
 8012c10:	f000 fbee 	bl	80133f0 <__mdiff>
 8012c14:	68c3      	ldr	r3, [r0, #12]
 8012c16:	4602      	mov	r2, r0
 8012c18:	bb03      	cbnz	r3, 8012c5c <_dtoa_r+0x9fc>
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	9008      	str	r0, [sp, #32]
 8012c1e:	9804      	ldr	r0, [sp, #16]
 8012c20:	f000 fbcc 	bl	80133bc <__mcmp>
 8012c24:	9a08      	ldr	r2, [sp, #32]
 8012c26:	4603      	mov	r3, r0
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	9308      	str	r3, [sp, #32]
 8012c2e:	f000 f9e3 	bl	8012ff8 <_Bfree>
 8012c32:	9b08      	ldr	r3, [sp, #32]
 8012c34:	b9a3      	cbnz	r3, 8012c60 <_dtoa_r+0xa00>
 8012c36:	9a06      	ldr	r2, [sp, #24]
 8012c38:	b992      	cbnz	r2, 8012c60 <_dtoa_r+0xa00>
 8012c3a:	9a07      	ldr	r2, [sp, #28]
 8012c3c:	b982      	cbnz	r2, 8012c60 <_dtoa_r+0xa00>
 8012c3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c42:	d029      	beq.n	8012c98 <_dtoa_r+0xa38>
 8012c44:	9b00      	ldr	r3, [sp, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	dd01      	ble.n	8012c4e <_dtoa_r+0x9ee>
 8012c4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012c4e:	9b05      	ldr	r3, [sp, #20]
 8012c50:	1c5d      	adds	r5, r3, #1
 8012c52:	f883 8000 	strb.w	r8, [r3]
 8012c56:	e782      	b.n	8012b5e <_dtoa_r+0x8fe>
 8012c58:	4630      	mov	r0, r6
 8012c5a:	e7c2      	b.n	8012be2 <_dtoa_r+0x982>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e7e3      	b.n	8012c28 <_dtoa_r+0x9c8>
 8012c60:	9a00      	ldr	r2, [sp, #0]
 8012c62:	2a00      	cmp	r2, #0
 8012c64:	db04      	blt.n	8012c70 <_dtoa_r+0xa10>
 8012c66:	d125      	bne.n	8012cb4 <_dtoa_r+0xa54>
 8012c68:	9a06      	ldr	r2, [sp, #24]
 8012c6a:	bb1a      	cbnz	r2, 8012cb4 <_dtoa_r+0xa54>
 8012c6c:	9a07      	ldr	r2, [sp, #28]
 8012c6e:	bb0a      	cbnz	r2, 8012cb4 <_dtoa_r+0xa54>
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	ddec      	ble.n	8012c4e <_dtoa_r+0x9ee>
 8012c74:	2201      	movs	r2, #1
 8012c76:	9904      	ldr	r1, [sp, #16]
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f000 fb4b 	bl	8013314 <__lshift>
 8012c7e:	4639      	mov	r1, r7
 8012c80:	9004      	str	r0, [sp, #16]
 8012c82:	f000 fb9b 	bl	80133bc <__mcmp>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	dc03      	bgt.n	8012c92 <_dtoa_r+0xa32>
 8012c8a:	d1e0      	bne.n	8012c4e <_dtoa_r+0x9ee>
 8012c8c:	f018 0f01 	tst.w	r8, #1
 8012c90:	d0dd      	beq.n	8012c4e <_dtoa_r+0x9ee>
 8012c92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c96:	d1d8      	bne.n	8012c4a <_dtoa_r+0x9ea>
 8012c98:	9b05      	ldr	r3, [sp, #20]
 8012c9a:	9a05      	ldr	r2, [sp, #20]
 8012c9c:	1c5d      	adds	r5, r3, #1
 8012c9e:	2339      	movs	r3, #57	; 0x39
 8012ca0:	7013      	strb	r3, [r2, #0]
 8012ca2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ca6:	2b39      	cmp	r3, #57	; 0x39
 8012ca8:	f105 32ff 	add.w	r2, r5, #4294967295
 8012cac:	d04f      	beq.n	8012d4e <_dtoa_r+0xaee>
 8012cae:	3301      	adds	r3, #1
 8012cb0:	7013      	strb	r3, [r2, #0]
 8012cb2:	e754      	b.n	8012b5e <_dtoa_r+0x8fe>
 8012cb4:	9a05      	ldr	r2, [sp, #20]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f102 0501 	add.w	r5, r2, #1
 8012cbc:	dd06      	ble.n	8012ccc <_dtoa_r+0xa6c>
 8012cbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012cc2:	d0e9      	beq.n	8012c98 <_dtoa_r+0xa38>
 8012cc4:	f108 0801 	add.w	r8, r8, #1
 8012cc8:	9b05      	ldr	r3, [sp, #20]
 8012cca:	e7c2      	b.n	8012c52 <_dtoa_r+0x9f2>
 8012ccc:	9a02      	ldr	r2, [sp, #8]
 8012cce:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012cd2:	eba5 030b 	sub.w	r3, r5, fp
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d021      	beq.n	8012d1e <_dtoa_r+0xabe>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	220a      	movs	r2, #10
 8012cde:	9904      	ldr	r1, [sp, #16]
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f000 f9a0 	bl	8013026 <__multadd>
 8012ce6:	45b1      	cmp	r9, r6
 8012ce8:	9004      	str	r0, [sp, #16]
 8012cea:	f04f 0300 	mov.w	r3, #0
 8012cee:	f04f 020a 	mov.w	r2, #10
 8012cf2:	4649      	mov	r1, r9
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	d105      	bne.n	8012d04 <_dtoa_r+0xaa4>
 8012cf8:	f000 f995 	bl	8013026 <__multadd>
 8012cfc:	4681      	mov	r9, r0
 8012cfe:	4606      	mov	r6, r0
 8012d00:	9505      	str	r5, [sp, #20]
 8012d02:	e776      	b.n	8012bf2 <_dtoa_r+0x992>
 8012d04:	f000 f98f 	bl	8013026 <__multadd>
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4681      	mov	r9, r0
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	220a      	movs	r2, #10
 8012d10:	4620      	mov	r0, r4
 8012d12:	f000 f988 	bl	8013026 <__multadd>
 8012d16:	4606      	mov	r6, r0
 8012d18:	e7f2      	b.n	8012d00 <_dtoa_r+0xaa0>
 8012d1a:	f04f 0900 	mov.w	r9, #0
 8012d1e:	2201      	movs	r2, #1
 8012d20:	9904      	ldr	r1, [sp, #16]
 8012d22:	4620      	mov	r0, r4
 8012d24:	f000 faf6 	bl	8013314 <__lshift>
 8012d28:	4639      	mov	r1, r7
 8012d2a:	9004      	str	r0, [sp, #16]
 8012d2c:	f000 fb46 	bl	80133bc <__mcmp>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	dcb6      	bgt.n	8012ca2 <_dtoa_r+0xa42>
 8012d34:	d102      	bne.n	8012d3c <_dtoa_r+0xadc>
 8012d36:	f018 0f01 	tst.w	r8, #1
 8012d3a:	d1b2      	bne.n	8012ca2 <_dtoa_r+0xa42>
 8012d3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d40:	2b30      	cmp	r3, #48	; 0x30
 8012d42:	f105 32ff 	add.w	r2, r5, #4294967295
 8012d46:	f47f af0a 	bne.w	8012b5e <_dtoa_r+0x8fe>
 8012d4a:	4615      	mov	r5, r2
 8012d4c:	e7f6      	b.n	8012d3c <_dtoa_r+0xadc>
 8012d4e:	4593      	cmp	fp, r2
 8012d50:	d105      	bne.n	8012d5e <_dtoa_r+0xafe>
 8012d52:	2331      	movs	r3, #49	; 0x31
 8012d54:	f10a 0a01 	add.w	sl, sl, #1
 8012d58:	f88b 3000 	strb.w	r3, [fp]
 8012d5c:	e6ff      	b.n	8012b5e <_dtoa_r+0x8fe>
 8012d5e:	4615      	mov	r5, r2
 8012d60:	e79f      	b.n	8012ca2 <_dtoa_r+0xa42>
 8012d62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012dc8 <_dtoa_r+0xb68>
 8012d66:	e007      	b.n	8012d78 <_dtoa_r+0xb18>
 8012d68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012dcc <_dtoa_r+0xb6c>
 8012d6e:	b11b      	cbz	r3, 8012d78 <_dtoa_r+0xb18>
 8012d70:	f10b 0308 	add.w	r3, fp, #8
 8012d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012d76:	6013      	str	r3, [r2, #0]
 8012d78:	4658      	mov	r0, fp
 8012d7a:	b017      	add	sp, #92	; 0x5c
 8012d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d80:	9b06      	ldr	r3, [sp, #24]
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	f77f ae35 	ble.w	80129f2 <_dtoa_r+0x792>
 8012d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d8a:	9307      	str	r3, [sp, #28]
 8012d8c:	e649      	b.n	8012a22 <_dtoa_r+0x7c2>
 8012d8e:	9b02      	ldr	r3, [sp, #8]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	dc03      	bgt.n	8012d9c <_dtoa_r+0xb3c>
 8012d94:	9b06      	ldr	r3, [sp, #24]
 8012d96:	2b02      	cmp	r3, #2
 8012d98:	f73f aecc 	bgt.w	8012b34 <_dtoa_r+0x8d4>
 8012d9c:	465d      	mov	r5, fp
 8012d9e:	4639      	mov	r1, r7
 8012da0:	9804      	ldr	r0, [sp, #16]
 8012da2:	f7ff f9d1 	bl	8012148 <quorem>
 8012da6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012daa:	f805 8b01 	strb.w	r8, [r5], #1
 8012dae:	9a02      	ldr	r2, [sp, #8]
 8012db0:	eba5 030b 	sub.w	r3, r5, fp
 8012db4:	429a      	cmp	r2, r3
 8012db6:	ddb0      	ble.n	8012d1a <_dtoa_r+0xaba>
 8012db8:	2300      	movs	r3, #0
 8012dba:	220a      	movs	r2, #10
 8012dbc:	9904      	ldr	r1, [sp, #16]
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f000 f931 	bl	8013026 <__multadd>
 8012dc4:	9004      	str	r0, [sp, #16]
 8012dc6:	e7ea      	b.n	8012d9e <_dtoa_r+0xb3e>
 8012dc8:	0801429c 	.word	0x0801429c
 8012dcc:	080142c0 	.word	0x080142c0

08012dd0 <std>:
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	b510      	push	{r4, lr}
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8012dda:	6083      	str	r3, [r0, #8]
 8012ddc:	8181      	strh	r1, [r0, #12]
 8012dde:	6643      	str	r3, [r0, #100]	; 0x64
 8012de0:	81c2      	strh	r2, [r0, #14]
 8012de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012de6:	6183      	str	r3, [r0, #24]
 8012de8:	4619      	mov	r1, r3
 8012dea:	2208      	movs	r2, #8
 8012dec:	305c      	adds	r0, #92	; 0x5c
 8012dee:	f7fe fd0e 	bl	801180e <memset>
 8012df2:	4b05      	ldr	r3, [pc, #20]	; (8012e08 <std+0x38>)
 8012df4:	6263      	str	r3, [r4, #36]	; 0x24
 8012df6:	4b05      	ldr	r3, [pc, #20]	; (8012e0c <std+0x3c>)
 8012df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012dfa:	4b05      	ldr	r3, [pc, #20]	; (8012e10 <std+0x40>)
 8012dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012dfe:	4b05      	ldr	r3, [pc, #20]	; (8012e14 <std+0x44>)
 8012e00:	6224      	str	r4, [r4, #32]
 8012e02:	6323      	str	r3, [r4, #48]	; 0x30
 8012e04:	bd10      	pop	{r4, pc}
 8012e06:	bf00      	nop
 8012e08:	08013bf9 	.word	0x08013bf9
 8012e0c:	08013c1b 	.word	0x08013c1b
 8012e10:	08013c53 	.word	0x08013c53
 8012e14:	08013c77 	.word	0x08013c77

08012e18 <_cleanup_r>:
 8012e18:	4901      	ldr	r1, [pc, #4]	; (8012e20 <_cleanup_r+0x8>)
 8012e1a:	f000 b885 	b.w	8012f28 <_fwalk_reent>
 8012e1e:	bf00      	nop
 8012e20:	08013f51 	.word	0x08013f51

08012e24 <__sfmoreglue>:
 8012e24:	b570      	push	{r4, r5, r6, lr}
 8012e26:	1e4a      	subs	r2, r1, #1
 8012e28:	2568      	movs	r5, #104	; 0x68
 8012e2a:	4355      	muls	r5, r2
 8012e2c:	460e      	mov	r6, r1
 8012e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e32:	f000 fbe5 	bl	8013600 <_malloc_r>
 8012e36:	4604      	mov	r4, r0
 8012e38:	b140      	cbz	r0, 8012e4c <__sfmoreglue+0x28>
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8012e40:	300c      	adds	r0, #12
 8012e42:	60a0      	str	r0, [r4, #8]
 8012e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e48:	f7fe fce1 	bl	801180e <memset>
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}

08012e50 <__sinit>:
 8012e50:	6983      	ldr	r3, [r0, #24]
 8012e52:	b510      	push	{r4, lr}
 8012e54:	4604      	mov	r4, r0
 8012e56:	bb33      	cbnz	r3, 8012ea6 <__sinit+0x56>
 8012e58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012e5c:	6503      	str	r3, [r0, #80]	; 0x50
 8012e5e:	4b12      	ldr	r3, [pc, #72]	; (8012ea8 <__sinit+0x58>)
 8012e60:	4a12      	ldr	r2, [pc, #72]	; (8012eac <__sinit+0x5c>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	6282      	str	r2, [r0, #40]	; 0x28
 8012e66:	4298      	cmp	r0, r3
 8012e68:	bf04      	itt	eq
 8012e6a:	2301      	moveq	r3, #1
 8012e6c:	6183      	streq	r3, [r0, #24]
 8012e6e:	f000 f81f 	bl	8012eb0 <__sfp>
 8012e72:	6060      	str	r0, [r4, #4]
 8012e74:	4620      	mov	r0, r4
 8012e76:	f000 f81b 	bl	8012eb0 <__sfp>
 8012e7a:	60a0      	str	r0, [r4, #8]
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	f000 f817 	bl	8012eb0 <__sfp>
 8012e82:	2200      	movs	r2, #0
 8012e84:	60e0      	str	r0, [r4, #12]
 8012e86:	2104      	movs	r1, #4
 8012e88:	6860      	ldr	r0, [r4, #4]
 8012e8a:	f7ff ffa1 	bl	8012dd0 <std>
 8012e8e:	2201      	movs	r2, #1
 8012e90:	2109      	movs	r1, #9
 8012e92:	68a0      	ldr	r0, [r4, #8]
 8012e94:	f7ff ff9c 	bl	8012dd0 <std>
 8012e98:	2202      	movs	r2, #2
 8012e9a:	2112      	movs	r1, #18
 8012e9c:	68e0      	ldr	r0, [r4, #12]
 8012e9e:	f7ff ff97 	bl	8012dd0 <std>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	61a3      	str	r3, [r4, #24]
 8012ea6:	bd10      	pop	{r4, pc}
 8012ea8:	08014288 	.word	0x08014288
 8012eac:	08012e19 	.word	0x08012e19

08012eb0 <__sfp>:
 8012eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eb2:	4b1b      	ldr	r3, [pc, #108]	; (8012f20 <__sfp+0x70>)
 8012eb4:	681e      	ldr	r6, [r3, #0]
 8012eb6:	69b3      	ldr	r3, [r6, #24]
 8012eb8:	4607      	mov	r7, r0
 8012eba:	b913      	cbnz	r3, 8012ec2 <__sfp+0x12>
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	f7ff ffc7 	bl	8012e50 <__sinit>
 8012ec2:	3648      	adds	r6, #72	; 0x48
 8012ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ec8:	3b01      	subs	r3, #1
 8012eca:	d503      	bpl.n	8012ed4 <__sfp+0x24>
 8012ecc:	6833      	ldr	r3, [r6, #0]
 8012ece:	b133      	cbz	r3, 8012ede <__sfp+0x2e>
 8012ed0:	6836      	ldr	r6, [r6, #0]
 8012ed2:	e7f7      	b.n	8012ec4 <__sfp+0x14>
 8012ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ed8:	b16d      	cbz	r5, 8012ef6 <__sfp+0x46>
 8012eda:	3468      	adds	r4, #104	; 0x68
 8012edc:	e7f4      	b.n	8012ec8 <__sfp+0x18>
 8012ede:	2104      	movs	r1, #4
 8012ee0:	4638      	mov	r0, r7
 8012ee2:	f7ff ff9f 	bl	8012e24 <__sfmoreglue>
 8012ee6:	6030      	str	r0, [r6, #0]
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	d1f1      	bne.n	8012ed0 <__sfp+0x20>
 8012eec:	230c      	movs	r3, #12
 8012eee:	603b      	str	r3, [r7, #0]
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ef6:	4b0b      	ldr	r3, [pc, #44]	; (8012f24 <__sfp+0x74>)
 8012ef8:	6665      	str	r5, [r4, #100]	; 0x64
 8012efa:	e9c4 5500 	strd	r5, r5, [r4]
 8012efe:	60a5      	str	r5, [r4, #8]
 8012f00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012f04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012f08:	2208      	movs	r2, #8
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f10:	f7fe fc7d 	bl	801180e <memset>
 8012f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f1c:	e7e9      	b.n	8012ef2 <__sfp+0x42>
 8012f1e:	bf00      	nop
 8012f20:	08014288 	.word	0x08014288
 8012f24:	ffff0001 	.word	0xffff0001

08012f28 <_fwalk_reent>:
 8012f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f2c:	4680      	mov	r8, r0
 8012f2e:	4689      	mov	r9, r1
 8012f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f34:	2600      	movs	r6, #0
 8012f36:	b914      	cbnz	r4, 8012f3e <_fwalk_reent+0x16>
 8012f38:	4630      	mov	r0, r6
 8012f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012f42:	3f01      	subs	r7, #1
 8012f44:	d501      	bpl.n	8012f4a <_fwalk_reent+0x22>
 8012f46:	6824      	ldr	r4, [r4, #0]
 8012f48:	e7f5      	b.n	8012f36 <_fwalk_reent+0xe>
 8012f4a:	89ab      	ldrh	r3, [r5, #12]
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	d907      	bls.n	8012f60 <_fwalk_reent+0x38>
 8012f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f54:	3301      	adds	r3, #1
 8012f56:	d003      	beq.n	8012f60 <_fwalk_reent+0x38>
 8012f58:	4629      	mov	r1, r5
 8012f5a:	4640      	mov	r0, r8
 8012f5c:	47c8      	blx	r9
 8012f5e:	4306      	orrs	r6, r0
 8012f60:	3568      	adds	r5, #104	; 0x68
 8012f62:	e7ee      	b.n	8012f42 <_fwalk_reent+0x1a>

08012f64 <_localeconv_r>:
 8012f64:	4b04      	ldr	r3, [pc, #16]	; (8012f78 <_localeconv_r+0x14>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	6a18      	ldr	r0, [r3, #32]
 8012f6a:	4b04      	ldr	r3, [pc, #16]	; (8012f7c <_localeconv_r+0x18>)
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	bf08      	it	eq
 8012f70:	4618      	moveq	r0, r3
 8012f72:	30f0      	adds	r0, #240	; 0xf0
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	20000018 	.word	0x20000018
 8012f7c:	2000007c 	.word	0x2000007c

08012f80 <malloc>:
 8012f80:	4b02      	ldr	r3, [pc, #8]	; (8012f8c <malloc+0xc>)
 8012f82:	4601      	mov	r1, r0
 8012f84:	6818      	ldr	r0, [r3, #0]
 8012f86:	f000 bb3b 	b.w	8013600 <_malloc_r>
 8012f8a:	bf00      	nop
 8012f8c:	20000018 	.word	0x20000018

08012f90 <_Balloc>:
 8012f90:	b570      	push	{r4, r5, r6, lr}
 8012f92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f94:	4604      	mov	r4, r0
 8012f96:	460e      	mov	r6, r1
 8012f98:	b93d      	cbnz	r5, 8012faa <_Balloc+0x1a>
 8012f9a:	2010      	movs	r0, #16
 8012f9c:	f7ff fff0 	bl	8012f80 <malloc>
 8012fa0:	6260      	str	r0, [r4, #36]	; 0x24
 8012fa2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012fa6:	6005      	str	r5, [r0, #0]
 8012fa8:	60c5      	str	r5, [r0, #12]
 8012faa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012fac:	68eb      	ldr	r3, [r5, #12]
 8012fae:	b183      	cbz	r3, 8012fd2 <_Balloc+0x42>
 8012fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012fb8:	b9b8      	cbnz	r0, 8012fea <_Balloc+0x5a>
 8012fba:	2101      	movs	r1, #1
 8012fbc:	fa01 f506 	lsl.w	r5, r1, r6
 8012fc0:	1d6a      	adds	r2, r5, #5
 8012fc2:	0092      	lsls	r2, r2, #2
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f000 fabf 	bl	8013548 <_calloc_r>
 8012fca:	b160      	cbz	r0, 8012fe6 <_Balloc+0x56>
 8012fcc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012fd0:	e00e      	b.n	8012ff0 <_Balloc+0x60>
 8012fd2:	2221      	movs	r2, #33	; 0x21
 8012fd4:	2104      	movs	r1, #4
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f000 fab6 	bl	8013548 <_calloc_r>
 8012fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fde:	60e8      	str	r0, [r5, #12]
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d1e4      	bne.n	8012fb0 <_Balloc+0x20>
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	bd70      	pop	{r4, r5, r6, pc}
 8012fea:	6802      	ldr	r2, [r0, #0]
 8012fec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ff6:	e7f7      	b.n	8012fe8 <_Balloc+0x58>

08012ff8 <_Bfree>:
 8012ff8:	b570      	push	{r4, r5, r6, lr}
 8012ffa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012ffc:	4606      	mov	r6, r0
 8012ffe:	460d      	mov	r5, r1
 8013000:	b93c      	cbnz	r4, 8013012 <_Bfree+0x1a>
 8013002:	2010      	movs	r0, #16
 8013004:	f7ff ffbc 	bl	8012f80 <malloc>
 8013008:	6270      	str	r0, [r6, #36]	; 0x24
 801300a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801300e:	6004      	str	r4, [r0, #0]
 8013010:	60c4      	str	r4, [r0, #12]
 8013012:	b13d      	cbz	r5, 8013024 <_Bfree+0x2c>
 8013014:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013016:	686a      	ldr	r2, [r5, #4]
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801301e:	6029      	str	r1, [r5, #0]
 8013020:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013024:	bd70      	pop	{r4, r5, r6, pc}

08013026 <__multadd>:
 8013026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302a:	690d      	ldr	r5, [r1, #16]
 801302c:	461f      	mov	r7, r3
 801302e:	4606      	mov	r6, r0
 8013030:	460c      	mov	r4, r1
 8013032:	f101 0c14 	add.w	ip, r1, #20
 8013036:	2300      	movs	r3, #0
 8013038:	f8dc 0000 	ldr.w	r0, [ip]
 801303c:	b281      	uxth	r1, r0
 801303e:	fb02 7101 	mla	r1, r2, r1, r7
 8013042:	0c0f      	lsrs	r7, r1, #16
 8013044:	0c00      	lsrs	r0, r0, #16
 8013046:	fb02 7000 	mla	r0, r2, r0, r7
 801304a:	b289      	uxth	r1, r1
 801304c:	3301      	adds	r3, #1
 801304e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013052:	429d      	cmp	r5, r3
 8013054:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013058:	f84c 1b04 	str.w	r1, [ip], #4
 801305c:	dcec      	bgt.n	8013038 <__multadd+0x12>
 801305e:	b1d7      	cbz	r7, 8013096 <__multadd+0x70>
 8013060:	68a3      	ldr	r3, [r4, #8]
 8013062:	42ab      	cmp	r3, r5
 8013064:	dc12      	bgt.n	801308c <__multadd+0x66>
 8013066:	6861      	ldr	r1, [r4, #4]
 8013068:	4630      	mov	r0, r6
 801306a:	3101      	adds	r1, #1
 801306c:	f7ff ff90 	bl	8012f90 <_Balloc>
 8013070:	6922      	ldr	r2, [r4, #16]
 8013072:	3202      	adds	r2, #2
 8013074:	f104 010c 	add.w	r1, r4, #12
 8013078:	4680      	mov	r8, r0
 801307a:	0092      	lsls	r2, r2, #2
 801307c:	300c      	adds	r0, #12
 801307e:	f7fe fbbb 	bl	80117f8 <memcpy>
 8013082:	4621      	mov	r1, r4
 8013084:	4630      	mov	r0, r6
 8013086:	f7ff ffb7 	bl	8012ff8 <_Bfree>
 801308a:	4644      	mov	r4, r8
 801308c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013090:	3501      	adds	r5, #1
 8013092:	615f      	str	r7, [r3, #20]
 8013094:	6125      	str	r5, [r4, #16]
 8013096:	4620      	mov	r0, r4
 8013098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801309c <__hi0bits>:
 801309c:	0c02      	lsrs	r2, r0, #16
 801309e:	0412      	lsls	r2, r2, #16
 80130a0:	4603      	mov	r3, r0
 80130a2:	b9b2      	cbnz	r2, 80130d2 <__hi0bits+0x36>
 80130a4:	0403      	lsls	r3, r0, #16
 80130a6:	2010      	movs	r0, #16
 80130a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80130ac:	bf04      	itt	eq
 80130ae:	021b      	lsleq	r3, r3, #8
 80130b0:	3008      	addeq	r0, #8
 80130b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80130b6:	bf04      	itt	eq
 80130b8:	011b      	lsleq	r3, r3, #4
 80130ba:	3004      	addeq	r0, #4
 80130bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80130c0:	bf04      	itt	eq
 80130c2:	009b      	lsleq	r3, r3, #2
 80130c4:	3002      	addeq	r0, #2
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	db06      	blt.n	80130d8 <__hi0bits+0x3c>
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	d503      	bpl.n	80130d6 <__hi0bits+0x3a>
 80130ce:	3001      	adds	r0, #1
 80130d0:	4770      	bx	lr
 80130d2:	2000      	movs	r0, #0
 80130d4:	e7e8      	b.n	80130a8 <__hi0bits+0xc>
 80130d6:	2020      	movs	r0, #32
 80130d8:	4770      	bx	lr

080130da <__lo0bits>:
 80130da:	6803      	ldr	r3, [r0, #0]
 80130dc:	f013 0207 	ands.w	r2, r3, #7
 80130e0:	4601      	mov	r1, r0
 80130e2:	d00b      	beq.n	80130fc <__lo0bits+0x22>
 80130e4:	07da      	lsls	r2, r3, #31
 80130e6:	d423      	bmi.n	8013130 <__lo0bits+0x56>
 80130e8:	0798      	lsls	r0, r3, #30
 80130ea:	bf49      	itett	mi
 80130ec:	085b      	lsrmi	r3, r3, #1
 80130ee:	089b      	lsrpl	r3, r3, #2
 80130f0:	2001      	movmi	r0, #1
 80130f2:	600b      	strmi	r3, [r1, #0]
 80130f4:	bf5c      	itt	pl
 80130f6:	600b      	strpl	r3, [r1, #0]
 80130f8:	2002      	movpl	r0, #2
 80130fa:	4770      	bx	lr
 80130fc:	b298      	uxth	r0, r3
 80130fe:	b9a8      	cbnz	r0, 801312c <__lo0bits+0x52>
 8013100:	0c1b      	lsrs	r3, r3, #16
 8013102:	2010      	movs	r0, #16
 8013104:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013108:	bf04      	itt	eq
 801310a:	0a1b      	lsreq	r3, r3, #8
 801310c:	3008      	addeq	r0, #8
 801310e:	071a      	lsls	r2, r3, #28
 8013110:	bf04      	itt	eq
 8013112:	091b      	lsreq	r3, r3, #4
 8013114:	3004      	addeq	r0, #4
 8013116:	079a      	lsls	r2, r3, #30
 8013118:	bf04      	itt	eq
 801311a:	089b      	lsreq	r3, r3, #2
 801311c:	3002      	addeq	r0, #2
 801311e:	07da      	lsls	r2, r3, #31
 8013120:	d402      	bmi.n	8013128 <__lo0bits+0x4e>
 8013122:	085b      	lsrs	r3, r3, #1
 8013124:	d006      	beq.n	8013134 <__lo0bits+0x5a>
 8013126:	3001      	adds	r0, #1
 8013128:	600b      	str	r3, [r1, #0]
 801312a:	4770      	bx	lr
 801312c:	4610      	mov	r0, r2
 801312e:	e7e9      	b.n	8013104 <__lo0bits+0x2a>
 8013130:	2000      	movs	r0, #0
 8013132:	4770      	bx	lr
 8013134:	2020      	movs	r0, #32
 8013136:	4770      	bx	lr

08013138 <__i2b>:
 8013138:	b510      	push	{r4, lr}
 801313a:	460c      	mov	r4, r1
 801313c:	2101      	movs	r1, #1
 801313e:	f7ff ff27 	bl	8012f90 <_Balloc>
 8013142:	2201      	movs	r2, #1
 8013144:	6144      	str	r4, [r0, #20]
 8013146:	6102      	str	r2, [r0, #16]
 8013148:	bd10      	pop	{r4, pc}

0801314a <__multiply>:
 801314a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801314e:	4614      	mov	r4, r2
 8013150:	690a      	ldr	r2, [r1, #16]
 8013152:	6923      	ldr	r3, [r4, #16]
 8013154:	429a      	cmp	r2, r3
 8013156:	bfb8      	it	lt
 8013158:	460b      	movlt	r3, r1
 801315a:	4688      	mov	r8, r1
 801315c:	bfbc      	itt	lt
 801315e:	46a0      	movlt	r8, r4
 8013160:	461c      	movlt	r4, r3
 8013162:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013166:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801316a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801316e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013172:	eb07 0609 	add.w	r6, r7, r9
 8013176:	42b3      	cmp	r3, r6
 8013178:	bfb8      	it	lt
 801317a:	3101      	addlt	r1, #1
 801317c:	f7ff ff08 	bl	8012f90 <_Balloc>
 8013180:	f100 0514 	add.w	r5, r0, #20
 8013184:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013188:	462b      	mov	r3, r5
 801318a:	2200      	movs	r2, #0
 801318c:	4573      	cmp	r3, lr
 801318e:	d316      	bcc.n	80131be <__multiply+0x74>
 8013190:	f104 0214 	add.w	r2, r4, #20
 8013194:	f108 0114 	add.w	r1, r8, #20
 8013198:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801319c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80131a0:	9300      	str	r3, [sp, #0]
 80131a2:	9b00      	ldr	r3, [sp, #0]
 80131a4:	9201      	str	r2, [sp, #4]
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d80c      	bhi.n	80131c4 <__multiply+0x7a>
 80131aa:	2e00      	cmp	r6, #0
 80131ac:	dd03      	ble.n	80131b6 <__multiply+0x6c>
 80131ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d05d      	beq.n	8013272 <__multiply+0x128>
 80131b6:	6106      	str	r6, [r0, #16]
 80131b8:	b003      	add	sp, #12
 80131ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131be:	f843 2b04 	str.w	r2, [r3], #4
 80131c2:	e7e3      	b.n	801318c <__multiply+0x42>
 80131c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80131c8:	f1bb 0f00 	cmp.w	fp, #0
 80131cc:	d023      	beq.n	8013216 <__multiply+0xcc>
 80131ce:	4689      	mov	r9, r1
 80131d0:	46ac      	mov	ip, r5
 80131d2:	f04f 0800 	mov.w	r8, #0
 80131d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80131da:	f8dc a000 	ldr.w	sl, [ip]
 80131de:	b2a3      	uxth	r3, r4
 80131e0:	fa1f fa8a 	uxth.w	sl, sl
 80131e4:	fb0b a303 	mla	r3, fp, r3, sl
 80131e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80131ec:	f8dc 4000 	ldr.w	r4, [ip]
 80131f0:	4443      	add	r3, r8
 80131f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80131f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80131fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80131fe:	46e2      	mov	sl, ip
 8013200:	b29b      	uxth	r3, r3
 8013202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013206:	454f      	cmp	r7, r9
 8013208:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801320c:	f84a 3b04 	str.w	r3, [sl], #4
 8013210:	d82b      	bhi.n	801326a <__multiply+0x120>
 8013212:	f8cc 8004 	str.w	r8, [ip, #4]
 8013216:	9b01      	ldr	r3, [sp, #4]
 8013218:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801321c:	3204      	adds	r2, #4
 801321e:	f1ba 0f00 	cmp.w	sl, #0
 8013222:	d020      	beq.n	8013266 <__multiply+0x11c>
 8013224:	682b      	ldr	r3, [r5, #0]
 8013226:	4689      	mov	r9, r1
 8013228:	46a8      	mov	r8, r5
 801322a:	f04f 0b00 	mov.w	fp, #0
 801322e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013232:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013236:	fb0a 440c 	mla	r4, sl, ip, r4
 801323a:	445c      	add	r4, fp
 801323c:	46c4      	mov	ip, r8
 801323e:	b29b      	uxth	r3, r3
 8013240:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013244:	f84c 3b04 	str.w	r3, [ip], #4
 8013248:	f859 3b04 	ldr.w	r3, [r9], #4
 801324c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013250:	0c1b      	lsrs	r3, r3, #16
 8013252:	fb0a b303 	mla	r3, sl, r3, fp
 8013256:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801325a:	454f      	cmp	r7, r9
 801325c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013260:	d805      	bhi.n	801326e <__multiply+0x124>
 8013262:	f8c8 3004 	str.w	r3, [r8, #4]
 8013266:	3504      	adds	r5, #4
 8013268:	e79b      	b.n	80131a2 <__multiply+0x58>
 801326a:	46d4      	mov	ip, sl
 801326c:	e7b3      	b.n	80131d6 <__multiply+0x8c>
 801326e:	46e0      	mov	r8, ip
 8013270:	e7dd      	b.n	801322e <__multiply+0xe4>
 8013272:	3e01      	subs	r6, #1
 8013274:	e799      	b.n	80131aa <__multiply+0x60>
	...

08013278 <__pow5mult>:
 8013278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801327c:	4615      	mov	r5, r2
 801327e:	f012 0203 	ands.w	r2, r2, #3
 8013282:	4606      	mov	r6, r0
 8013284:	460f      	mov	r7, r1
 8013286:	d007      	beq.n	8013298 <__pow5mult+0x20>
 8013288:	3a01      	subs	r2, #1
 801328a:	4c21      	ldr	r4, [pc, #132]	; (8013310 <__pow5mult+0x98>)
 801328c:	2300      	movs	r3, #0
 801328e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013292:	f7ff fec8 	bl	8013026 <__multadd>
 8013296:	4607      	mov	r7, r0
 8013298:	10ad      	asrs	r5, r5, #2
 801329a:	d035      	beq.n	8013308 <__pow5mult+0x90>
 801329c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801329e:	b93c      	cbnz	r4, 80132b0 <__pow5mult+0x38>
 80132a0:	2010      	movs	r0, #16
 80132a2:	f7ff fe6d 	bl	8012f80 <malloc>
 80132a6:	6270      	str	r0, [r6, #36]	; 0x24
 80132a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132ac:	6004      	str	r4, [r0, #0]
 80132ae:	60c4      	str	r4, [r0, #12]
 80132b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80132b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132b8:	b94c      	cbnz	r4, 80132ce <__pow5mult+0x56>
 80132ba:	f240 2171 	movw	r1, #625	; 0x271
 80132be:	4630      	mov	r0, r6
 80132c0:	f7ff ff3a 	bl	8013138 <__i2b>
 80132c4:	2300      	movs	r3, #0
 80132c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80132ca:	4604      	mov	r4, r0
 80132cc:	6003      	str	r3, [r0, #0]
 80132ce:	f04f 0800 	mov.w	r8, #0
 80132d2:	07eb      	lsls	r3, r5, #31
 80132d4:	d50a      	bpl.n	80132ec <__pow5mult+0x74>
 80132d6:	4639      	mov	r1, r7
 80132d8:	4622      	mov	r2, r4
 80132da:	4630      	mov	r0, r6
 80132dc:	f7ff ff35 	bl	801314a <__multiply>
 80132e0:	4639      	mov	r1, r7
 80132e2:	4681      	mov	r9, r0
 80132e4:	4630      	mov	r0, r6
 80132e6:	f7ff fe87 	bl	8012ff8 <_Bfree>
 80132ea:	464f      	mov	r7, r9
 80132ec:	106d      	asrs	r5, r5, #1
 80132ee:	d00b      	beq.n	8013308 <__pow5mult+0x90>
 80132f0:	6820      	ldr	r0, [r4, #0]
 80132f2:	b938      	cbnz	r0, 8013304 <__pow5mult+0x8c>
 80132f4:	4622      	mov	r2, r4
 80132f6:	4621      	mov	r1, r4
 80132f8:	4630      	mov	r0, r6
 80132fa:	f7ff ff26 	bl	801314a <__multiply>
 80132fe:	6020      	str	r0, [r4, #0]
 8013300:	f8c0 8000 	str.w	r8, [r0]
 8013304:	4604      	mov	r4, r0
 8013306:	e7e4      	b.n	80132d2 <__pow5mult+0x5a>
 8013308:	4638      	mov	r0, r7
 801330a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801330e:	bf00      	nop
 8013310:	08014420 	.word	0x08014420

08013314 <__lshift>:
 8013314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013318:	460c      	mov	r4, r1
 801331a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801331e:	6923      	ldr	r3, [r4, #16]
 8013320:	6849      	ldr	r1, [r1, #4]
 8013322:	eb0a 0903 	add.w	r9, sl, r3
 8013326:	68a3      	ldr	r3, [r4, #8]
 8013328:	4607      	mov	r7, r0
 801332a:	4616      	mov	r6, r2
 801332c:	f109 0501 	add.w	r5, r9, #1
 8013330:	42ab      	cmp	r3, r5
 8013332:	db32      	blt.n	801339a <__lshift+0x86>
 8013334:	4638      	mov	r0, r7
 8013336:	f7ff fe2b 	bl	8012f90 <_Balloc>
 801333a:	2300      	movs	r3, #0
 801333c:	4680      	mov	r8, r0
 801333e:	f100 0114 	add.w	r1, r0, #20
 8013342:	461a      	mov	r2, r3
 8013344:	4553      	cmp	r3, sl
 8013346:	db2b      	blt.n	80133a0 <__lshift+0x8c>
 8013348:	6920      	ldr	r0, [r4, #16]
 801334a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801334e:	f104 0314 	add.w	r3, r4, #20
 8013352:	f016 021f 	ands.w	r2, r6, #31
 8013356:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801335a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801335e:	d025      	beq.n	80133ac <__lshift+0x98>
 8013360:	f1c2 0e20 	rsb	lr, r2, #32
 8013364:	2000      	movs	r0, #0
 8013366:	681e      	ldr	r6, [r3, #0]
 8013368:	468a      	mov	sl, r1
 801336a:	4096      	lsls	r6, r2
 801336c:	4330      	orrs	r0, r6
 801336e:	f84a 0b04 	str.w	r0, [sl], #4
 8013372:	f853 0b04 	ldr.w	r0, [r3], #4
 8013376:	459c      	cmp	ip, r3
 8013378:	fa20 f00e 	lsr.w	r0, r0, lr
 801337c:	d814      	bhi.n	80133a8 <__lshift+0x94>
 801337e:	6048      	str	r0, [r1, #4]
 8013380:	b108      	cbz	r0, 8013386 <__lshift+0x72>
 8013382:	f109 0502 	add.w	r5, r9, #2
 8013386:	3d01      	subs	r5, #1
 8013388:	4638      	mov	r0, r7
 801338a:	f8c8 5010 	str.w	r5, [r8, #16]
 801338e:	4621      	mov	r1, r4
 8013390:	f7ff fe32 	bl	8012ff8 <_Bfree>
 8013394:	4640      	mov	r0, r8
 8013396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801339a:	3101      	adds	r1, #1
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	e7c7      	b.n	8013330 <__lshift+0x1c>
 80133a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80133a4:	3301      	adds	r3, #1
 80133a6:	e7cd      	b.n	8013344 <__lshift+0x30>
 80133a8:	4651      	mov	r1, sl
 80133aa:	e7dc      	b.n	8013366 <__lshift+0x52>
 80133ac:	3904      	subs	r1, #4
 80133ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80133b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80133b6:	459c      	cmp	ip, r3
 80133b8:	d8f9      	bhi.n	80133ae <__lshift+0x9a>
 80133ba:	e7e4      	b.n	8013386 <__lshift+0x72>

080133bc <__mcmp>:
 80133bc:	6903      	ldr	r3, [r0, #16]
 80133be:	690a      	ldr	r2, [r1, #16]
 80133c0:	1a9b      	subs	r3, r3, r2
 80133c2:	b530      	push	{r4, r5, lr}
 80133c4:	d10c      	bne.n	80133e0 <__mcmp+0x24>
 80133c6:	0092      	lsls	r2, r2, #2
 80133c8:	3014      	adds	r0, #20
 80133ca:	3114      	adds	r1, #20
 80133cc:	1884      	adds	r4, r0, r2
 80133ce:	4411      	add	r1, r2
 80133d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80133d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80133d8:	4295      	cmp	r5, r2
 80133da:	d003      	beq.n	80133e4 <__mcmp+0x28>
 80133dc:	d305      	bcc.n	80133ea <__mcmp+0x2e>
 80133de:	2301      	movs	r3, #1
 80133e0:	4618      	mov	r0, r3
 80133e2:	bd30      	pop	{r4, r5, pc}
 80133e4:	42a0      	cmp	r0, r4
 80133e6:	d3f3      	bcc.n	80133d0 <__mcmp+0x14>
 80133e8:	e7fa      	b.n	80133e0 <__mcmp+0x24>
 80133ea:	f04f 33ff 	mov.w	r3, #4294967295
 80133ee:	e7f7      	b.n	80133e0 <__mcmp+0x24>

080133f0 <__mdiff>:
 80133f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f4:	460d      	mov	r5, r1
 80133f6:	4607      	mov	r7, r0
 80133f8:	4611      	mov	r1, r2
 80133fa:	4628      	mov	r0, r5
 80133fc:	4614      	mov	r4, r2
 80133fe:	f7ff ffdd 	bl	80133bc <__mcmp>
 8013402:	1e06      	subs	r6, r0, #0
 8013404:	d108      	bne.n	8013418 <__mdiff+0x28>
 8013406:	4631      	mov	r1, r6
 8013408:	4638      	mov	r0, r7
 801340a:	f7ff fdc1 	bl	8012f90 <_Balloc>
 801340e:	2301      	movs	r3, #1
 8013410:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013418:	bfa4      	itt	ge
 801341a:	4623      	movge	r3, r4
 801341c:	462c      	movge	r4, r5
 801341e:	4638      	mov	r0, r7
 8013420:	6861      	ldr	r1, [r4, #4]
 8013422:	bfa6      	itte	ge
 8013424:	461d      	movge	r5, r3
 8013426:	2600      	movge	r6, #0
 8013428:	2601      	movlt	r6, #1
 801342a:	f7ff fdb1 	bl	8012f90 <_Balloc>
 801342e:	692b      	ldr	r3, [r5, #16]
 8013430:	60c6      	str	r6, [r0, #12]
 8013432:	6926      	ldr	r6, [r4, #16]
 8013434:	f105 0914 	add.w	r9, r5, #20
 8013438:	f104 0214 	add.w	r2, r4, #20
 801343c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013440:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013444:	f100 0514 	add.w	r5, r0, #20
 8013448:	f04f 0e00 	mov.w	lr, #0
 801344c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013450:	f859 4b04 	ldr.w	r4, [r9], #4
 8013454:	fa1e f18a 	uxtah	r1, lr, sl
 8013458:	b2a3      	uxth	r3, r4
 801345a:	1ac9      	subs	r1, r1, r3
 801345c:	0c23      	lsrs	r3, r4, #16
 801345e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013462:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013466:	b289      	uxth	r1, r1
 8013468:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801346c:	45c8      	cmp	r8, r9
 801346e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013472:	4694      	mov	ip, r2
 8013474:	f845 3b04 	str.w	r3, [r5], #4
 8013478:	d8e8      	bhi.n	801344c <__mdiff+0x5c>
 801347a:	45bc      	cmp	ip, r7
 801347c:	d304      	bcc.n	8013488 <__mdiff+0x98>
 801347e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013482:	b183      	cbz	r3, 80134a6 <__mdiff+0xb6>
 8013484:	6106      	str	r6, [r0, #16]
 8013486:	e7c5      	b.n	8013414 <__mdiff+0x24>
 8013488:	f85c 1b04 	ldr.w	r1, [ip], #4
 801348c:	fa1e f381 	uxtah	r3, lr, r1
 8013490:	141a      	asrs	r2, r3, #16
 8013492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013496:	b29b      	uxth	r3, r3
 8013498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801349c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80134a0:	f845 3b04 	str.w	r3, [r5], #4
 80134a4:	e7e9      	b.n	801347a <__mdiff+0x8a>
 80134a6:	3e01      	subs	r6, #1
 80134a8:	e7e9      	b.n	801347e <__mdiff+0x8e>

080134aa <__d2b>:
 80134aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134ae:	460e      	mov	r6, r1
 80134b0:	2101      	movs	r1, #1
 80134b2:	ec59 8b10 	vmov	r8, r9, d0
 80134b6:	4615      	mov	r5, r2
 80134b8:	f7ff fd6a 	bl	8012f90 <_Balloc>
 80134bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80134c0:	4607      	mov	r7, r0
 80134c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80134c6:	bb34      	cbnz	r4, 8013516 <__d2b+0x6c>
 80134c8:	9301      	str	r3, [sp, #4]
 80134ca:	f1b8 0300 	subs.w	r3, r8, #0
 80134ce:	d027      	beq.n	8013520 <__d2b+0x76>
 80134d0:	a802      	add	r0, sp, #8
 80134d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80134d6:	f7ff fe00 	bl	80130da <__lo0bits>
 80134da:	9900      	ldr	r1, [sp, #0]
 80134dc:	b1f0      	cbz	r0, 801351c <__d2b+0x72>
 80134de:	9a01      	ldr	r2, [sp, #4]
 80134e0:	f1c0 0320 	rsb	r3, r0, #32
 80134e4:	fa02 f303 	lsl.w	r3, r2, r3
 80134e8:	430b      	orrs	r3, r1
 80134ea:	40c2      	lsrs	r2, r0
 80134ec:	617b      	str	r3, [r7, #20]
 80134ee:	9201      	str	r2, [sp, #4]
 80134f0:	9b01      	ldr	r3, [sp, #4]
 80134f2:	61bb      	str	r3, [r7, #24]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	bf14      	ite	ne
 80134f8:	2102      	movne	r1, #2
 80134fa:	2101      	moveq	r1, #1
 80134fc:	6139      	str	r1, [r7, #16]
 80134fe:	b1c4      	cbz	r4, 8013532 <__d2b+0x88>
 8013500:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013504:	4404      	add	r4, r0
 8013506:	6034      	str	r4, [r6, #0]
 8013508:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801350c:	6028      	str	r0, [r5, #0]
 801350e:	4638      	mov	r0, r7
 8013510:	b003      	add	sp, #12
 8013512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801351a:	e7d5      	b.n	80134c8 <__d2b+0x1e>
 801351c:	6179      	str	r1, [r7, #20]
 801351e:	e7e7      	b.n	80134f0 <__d2b+0x46>
 8013520:	a801      	add	r0, sp, #4
 8013522:	f7ff fdda 	bl	80130da <__lo0bits>
 8013526:	9b01      	ldr	r3, [sp, #4]
 8013528:	617b      	str	r3, [r7, #20]
 801352a:	2101      	movs	r1, #1
 801352c:	6139      	str	r1, [r7, #16]
 801352e:	3020      	adds	r0, #32
 8013530:	e7e5      	b.n	80134fe <__d2b+0x54>
 8013532:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013536:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801353a:	6030      	str	r0, [r6, #0]
 801353c:	6918      	ldr	r0, [r3, #16]
 801353e:	f7ff fdad 	bl	801309c <__hi0bits>
 8013542:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013546:	e7e1      	b.n	801350c <__d2b+0x62>

08013548 <_calloc_r>:
 8013548:	b538      	push	{r3, r4, r5, lr}
 801354a:	fb02 f401 	mul.w	r4, r2, r1
 801354e:	4621      	mov	r1, r4
 8013550:	f000 f856 	bl	8013600 <_malloc_r>
 8013554:	4605      	mov	r5, r0
 8013556:	b118      	cbz	r0, 8013560 <_calloc_r+0x18>
 8013558:	4622      	mov	r2, r4
 801355a:	2100      	movs	r1, #0
 801355c:	f7fe f957 	bl	801180e <memset>
 8013560:	4628      	mov	r0, r5
 8013562:	bd38      	pop	{r3, r4, r5, pc}

08013564 <_free_r>:
 8013564:	b538      	push	{r3, r4, r5, lr}
 8013566:	4605      	mov	r5, r0
 8013568:	2900      	cmp	r1, #0
 801356a:	d045      	beq.n	80135f8 <_free_r+0x94>
 801356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013570:	1f0c      	subs	r4, r1, #4
 8013572:	2b00      	cmp	r3, #0
 8013574:	bfb8      	it	lt
 8013576:	18e4      	addlt	r4, r4, r3
 8013578:	f000 fdb5 	bl	80140e6 <__malloc_lock>
 801357c:	4a1f      	ldr	r2, [pc, #124]	; (80135fc <_free_r+0x98>)
 801357e:	6813      	ldr	r3, [r2, #0]
 8013580:	4610      	mov	r0, r2
 8013582:	b933      	cbnz	r3, 8013592 <_free_r+0x2e>
 8013584:	6063      	str	r3, [r4, #4]
 8013586:	6014      	str	r4, [r2, #0]
 8013588:	4628      	mov	r0, r5
 801358a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801358e:	f000 bdab 	b.w	80140e8 <__malloc_unlock>
 8013592:	42a3      	cmp	r3, r4
 8013594:	d90c      	bls.n	80135b0 <_free_r+0x4c>
 8013596:	6821      	ldr	r1, [r4, #0]
 8013598:	1862      	adds	r2, r4, r1
 801359a:	4293      	cmp	r3, r2
 801359c:	bf04      	itt	eq
 801359e:	681a      	ldreq	r2, [r3, #0]
 80135a0:	685b      	ldreq	r3, [r3, #4]
 80135a2:	6063      	str	r3, [r4, #4]
 80135a4:	bf04      	itt	eq
 80135a6:	1852      	addeq	r2, r2, r1
 80135a8:	6022      	streq	r2, [r4, #0]
 80135aa:	6004      	str	r4, [r0, #0]
 80135ac:	e7ec      	b.n	8013588 <_free_r+0x24>
 80135ae:	4613      	mov	r3, r2
 80135b0:	685a      	ldr	r2, [r3, #4]
 80135b2:	b10a      	cbz	r2, 80135b8 <_free_r+0x54>
 80135b4:	42a2      	cmp	r2, r4
 80135b6:	d9fa      	bls.n	80135ae <_free_r+0x4a>
 80135b8:	6819      	ldr	r1, [r3, #0]
 80135ba:	1858      	adds	r0, r3, r1
 80135bc:	42a0      	cmp	r0, r4
 80135be:	d10b      	bne.n	80135d8 <_free_r+0x74>
 80135c0:	6820      	ldr	r0, [r4, #0]
 80135c2:	4401      	add	r1, r0
 80135c4:	1858      	adds	r0, r3, r1
 80135c6:	4282      	cmp	r2, r0
 80135c8:	6019      	str	r1, [r3, #0]
 80135ca:	d1dd      	bne.n	8013588 <_free_r+0x24>
 80135cc:	6810      	ldr	r0, [r2, #0]
 80135ce:	6852      	ldr	r2, [r2, #4]
 80135d0:	605a      	str	r2, [r3, #4]
 80135d2:	4401      	add	r1, r0
 80135d4:	6019      	str	r1, [r3, #0]
 80135d6:	e7d7      	b.n	8013588 <_free_r+0x24>
 80135d8:	d902      	bls.n	80135e0 <_free_r+0x7c>
 80135da:	230c      	movs	r3, #12
 80135dc:	602b      	str	r3, [r5, #0]
 80135de:	e7d3      	b.n	8013588 <_free_r+0x24>
 80135e0:	6820      	ldr	r0, [r4, #0]
 80135e2:	1821      	adds	r1, r4, r0
 80135e4:	428a      	cmp	r2, r1
 80135e6:	bf04      	itt	eq
 80135e8:	6811      	ldreq	r1, [r2, #0]
 80135ea:	6852      	ldreq	r2, [r2, #4]
 80135ec:	6062      	str	r2, [r4, #4]
 80135ee:	bf04      	itt	eq
 80135f0:	1809      	addeq	r1, r1, r0
 80135f2:	6021      	streq	r1, [r4, #0]
 80135f4:	605c      	str	r4, [r3, #4]
 80135f6:	e7c7      	b.n	8013588 <_free_r+0x24>
 80135f8:	bd38      	pop	{r3, r4, r5, pc}
 80135fa:	bf00      	nop
 80135fc:	2000c2d4 	.word	0x2000c2d4

08013600 <_malloc_r>:
 8013600:	b570      	push	{r4, r5, r6, lr}
 8013602:	1ccd      	adds	r5, r1, #3
 8013604:	f025 0503 	bic.w	r5, r5, #3
 8013608:	3508      	adds	r5, #8
 801360a:	2d0c      	cmp	r5, #12
 801360c:	bf38      	it	cc
 801360e:	250c      	movcc	r5, #12
 8013610:	2d00      	cmp	r5, #0
 8013612:	4606      	mov	r6, r0
 8013614:	db01      	blt.n	801361a <_malloc_r+0x1a>
 8013616:	42a9      	cmp	r1, r5
 8013618:	d903      	bls.n	8013622 <_malloc_r+0x22>
 801361a:	230c      	movs	r3, #12
 801361c:	6033      	str	r3, [r6, #0]
 801361e:	2000      	movs	r0, #0
 8013620:	bd70      	pop	{r4, r5, r6, pc}
 8013622:	f000 fd60 	bl	80140e6 <__malloc_lock>
 8013626:	4a21      	ldr	r2, [pc, #132]	; (80136ac <_malloc_r+0xac>)
 8013628:	6814      	ldr	r4, [r2, #0]
 801362a:	4621      	mov	r1, r4
 801362c:	b991      	cbnz	r1, 8013654 <_malloc_r+0x54>
 801362e:	4c20      	ldr	r4, [pc, #128]	; (80136b0 <_malloc_r+0xb0>)
 8013630:	6823      	ldr	r3, [r4, #0]
 8013632:	b91b      	cbnz	r3, 801363c <_malloc_r+0x3c>
 8013634:	4630      	mov	r0, r6
 8013636:	f000 facf 	bl	8013bd8 <_sbrk_r>
 801363a:	6020      	str	r0, [r4, #0]
 801363c:	4629      	mov	r1, r5
 801363e:	4630      	mov	r0, r6
 8013640:	f000 faca 	bl	8013bd8 <_sbrk_r>
 8013644:	1c43      	adds	r3, r0, #1
 8013646:	d124      	bne.n	8013692 <_malloc_r+0x92>
 8013648:	230c      	movs	r3, #12
 801364a:	6033      	str	r3, [r6, #0]
 801364c:	4630      	mov	r0, r6
 801364e:	f000 fd4b 	bl	80140e8 <__malloc_unlock>
 8013652:	e7e4      	b.n	801361e <_malloc_r+0x1e>
 8013654:	680b      	ldr	r3, [r1, #0]
 8013656:	1b5b      	subs	r3, r3, r5
 8013658:	d418      	bmi.n	801368c <_malloc_r+0x8c>
 801365a:	2b0b      	cmp	r3, #11
 801365c:	d90f      	bls.n	801367e <_malloc_r+0x7e>
 801365e:	600b      	str	r3, [r1, #0]
 8013660:	50cd      	str	r5, [r1, r3]
 8013662:	18cc      	adds	r4, r1, r3
 8013664:	4630      	mov	r0, r6
 8013666:	f000 fd3f 	bl	80140e8 <__malloc_unlock>
 801366a:	f104 000b 	add.w	r0, r4, #11
 801366e:	1d23      	adds	r3, r4, #4
 8013670:	f020 0007 	bic.w	r0, r0, #7
 8013674:	1ac3      	subs	r3, r0, r3
 8013676:	d0d3      	beq.n	8013620 <_malloc_r+0x20>
 8013678:	425a      	negs	r2, r3
 801367a:	50e2      	str	r2, [r4, r3]
 801367c:	e7d0      	b.n	8013620 <_malloc_r+0x20>
 801367e:	428c      	cmp	r4, r1
 8013680:	684b      	ldr	r3, [r1, #4]
 8013682:	bf16      	itet	ne
 8013684:	6063      	strne	r3, [r4, #4]
 8013686:	6013      	streq	r3, [r2, #0]
 8013688:	460c      	movne	r4, r1
 801368a:	e7eb      	b.n	8013664 <_malloc_r+0x64>
 801368c:	460c      	mov	r4, r1
 801368e:	6849      	ldr	r1, [r1, #4]
 8013690:	e7cc      	b.n	801362c <_malloc_r+0x2c>
 8013692:	1cc4      	adds	r4, r0, #3
 8013694:	f024 0403 	bic.w	r4, r4, #3
 8013698:	42a0      	cmp	r0, r4
 801369a:	d005      	beq.n	80136a8 <_malloc_r+0xa8>
 801369c:	1a21      	subs	r1, r4, r0
 801369e:	4630      	mov	r0, r6
 80136a0:	f000 fa9a 	bl	8013bd8 <_sbrk_r>
 80136a4:	3001      	adds	r0, #1
 80136a6:	d0cf      	beq.n	8013648 <_malloc_r+0x48>
 80136a8:	6025      	str	r5, [r4, #0]
 80136aa:	e7db      	b.n	8013664 <_malloc_r+0x64>
 80136ac:	2000c2d4 	.word	0x2000c2d4
 80136b0:	2000c2d8 	.word	0x2000c2d8

080136b4 <__ssputs_r>:
 80136b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b8:	688e      	ldr	r6, [r1, #8]
 80136ba:	429e      	cmp	r6, r3
 80136bc:	4682      	mov	sl, r0
 80136be:	460c      	mov	r4, r1
 80136c0:	4690      	mov	r8, r2
 80136c2:	4699      	mov	r9, r3
 80136c4:	d837      	bhi.n	8013736 <__ssputs_r+0x82>
 80136c6:	898a      	ldrh	r2, [r1, #12]
 80136c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80136cc:	d031      	beq.n	8013732 <__ssputs_r+0x7e>
 80136ce:	6825      	ldr	r5, [r4, #0]
 80136d0:	6909      	ldr	r1, [r1, #16]
 80136d2:	1a6f      	subs	r7, r5, r1
 80136d4:	6965      	ldr	r5, [r4, #20]
 80136d6:	2302      	movs	r3, #2
 80136d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80136e0:	f109 0301 	add.w	r3, r9, #1
 80136e4:	443b      	add	r3, r7
 80136e6:	429d      	cmp	r5, r3
 80136e8:	bf38      	it	cc
 80136ea:	461d      	movcc	r5, r3
 80136ec:	0553      	lsls	r3, r2, #21
 80136ee:	d530      	bpl.n	8013752 <__ssputs_r+0x9e>
 80136f0:	4629      	mov	r1, r5
 80136f2:	f7ff ff85 	bl	8013600 <_malloc_r>
 80136f6:	4606      	mov	r6, r0
 80136f8:	b950      	cbnz	r0, 8013710 <__ssputs_r+0x5c>
 80136fa:	230c      	movs	r3, #12
 80136fc:	f8ca 3000 	str.w	r3, [sl]
 8013700:	89a3      	ldrh	r3, [r4, #12]
 8013702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013706:	81a3      	strh	r3, [r4, #12]
 8013708:	f04f 30ff 	mov.w	r0, #4294967295
 801370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013710:	463a      	mov	r2, r7
 8013712:	6921      	ldr	r1, [r4, #16]
 8013714:	f7fe f870 	bl	80117f8 <memcpy>
 8013718:	89a3      	ldrh	r3, [r4, #12]
 801371a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013722:	81a3      	strh	r3, [r4, #12]
 8013724:	6126      	str	r6, [r4, #16]
 8013726:	6165      	str	r5, [r4, #20]
 8013728:	443e      	add	r6, r7
 801372a:	1bed      	subs	r5, r5, r7
 801372c:	6026      	str	r6, [r4, #0]
 801372e:	60a5      	str	r5, [r4, #8]
 8013730:	464e      	mov	r6, r9
 8013732:	454e      	cmp	r6, r9
 8013734:	d900      	bls.n	8013738 <__ssputs_r+0x84>
 8013736:	464e      	mov	r6, r9
 8013738:	4632      	mov	r2, r6
 801373a:	4641      	mov	r1, r8
 801373c:	6820      	ldr	r0, [r4, #0]
 801373e:	f000 fcb9 	bl	80140b4 <memmove>
 8013742:	68a3      	ldr	r3, [r4, #8]
 8013744:	1b9b      	subs	r3, r3, r6
 8013746:	60a3      	str	r3, [r4, #8]
 8013748:	6823      	ldr	r3, [r4, #0]
 801374a:	441e      	add	r6, r3
 801374c:	6026      	str	r6, [r4, #0]
 801374e:	2000      	movs	r0, #0
 8013750:	e7dc      	b.n	801370c <__ssputs_r+0x58>
 8013752:	462a      	mov	r2, r5
 8013754:	f000 fcc9 	bl	80140ea <_realloc_r>
 8013758:	4606      	mov	r6, r0
 801375a:	2800      	cmp	r0, #0
 801375c:	d1e2      	bne.n	8013724 <__ssputs_r+0x70>
 801375e:	6921      	ldr	r1, [r4, #16]
 8013760:	4650      	mov	r0, sl
 8013762:	f7ff feff 	bl	8013564 <_free_r>
 8013766:	e7c8      	b.n	80136fa <__ssputs_r+0x46>

08013768 <_svfiprintf_r>:
 8013768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801376c:	461d      	mov	r5, r3
 801376e:	898b      	ldrh	r3, [r1, #12]
 8013770:	061f      	lsls	r7, r3, #24
 8013772:	b09d      	sub	sp, #116	; 0x74
 8013774:	4680      	mov	r8, r0
 8013776:	460c      	mov	r4, r1
 8013778:	4616      	mov	r6, r2
 801377a:	d50f      	bpl.n	801379c <_svfiprintf_r+0x34>
 801377c:	690b      	ldr	r3, [r1, #16]
 801377e:	b96b      	cbnz	r3, 801379c <_svfiprintf_r+0x34>
 8013780:	2140      	movs	r1, #64	; 0x40
 8013782:	f7ff ff3d 	bl	8013600 <_malloc_r>
 8013786:	6020      	str	r0, [r4, #0]
 8013788:	6120      	str	r0, [r4, #16]
 801378a:	b928      	cbnz	r0, 8013798 <_svfiprintf_r+0x30>
 801378c:	230c      	movs	r3, #12
 801378e:	f8c8 3000 	str.w	r3, [r8]
 8013792:	f04f 30ff 	mov.w	r0, #4294967295
 8013796:	e0c8      	b.n	801392a <_svfiprintf_r+0x1c2>
 8013798:	2340      	movs	r3, #64	; 0x40
 801379a:	6163      	str	r3, [r4, #20]
 801379c:	2300      	movs	r3, #0
 801379e:	9309      	str	r3, [sp, #36]	; 0x24
 80137a0:	2320      	movs	r3, #32
 80137a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137a6:	2330      	movs	r3, #48	; 0x30
 80137a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137ac:	9503      	str	r5, [sp, #12]
 80137ae:	f04f 0b01 	mov.w	fp, #1
 80137b2:	4637      	mov	r7, r6
 80137b4:	463d      	mov	r5, r7
 80137b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80137ba:	b10b      	cbz	r3, 80137c0 <_svfiprintf_r+0x58>
 80137bc:	2b25      	cmp	r3, #37	; 0x25
 80137be:	d13e      	bne.n	801383e <_svfiprintf_r+0xd6>
 80137c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80137c4:	d00b      	beq.n	80137de <_svfiprintf_r+0x76>
 80137c6:	4653      	mov	r3, sl
 80137c8:	4632      	mov	r2, r6
 80137ca:	4621      	mov	r1, r4
 80137cc:	4640      	mov	r0, r8
 80137ce:	f7ff ff71 	bl	80136b4 <__ssputs_r>
 80137d2:	3001      	adds	r0, #1
 80137d4:	f000 80a4 	beq.w	8013920 <_svfiprintf_r+0x1b8>
 80137d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137da:	4453      	add	r3, sl
 80137dc:	9309      	str	r3, [sp, #36]	; 0x24
 80137de:	783b      	ldrb	r3, [r7, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	f000 809d 	beq.w	8013920 <_svfiprintf_r+0x1b8>
 80137e6:	2300      	movs	r3, #0
 80137e8:	f04f 32ff 	mov.w	r2, #4294967295
 80137ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137f0:	9304      	str	r3, [sp, #16]
 80137f2:	9307      	str	r3, [sp, #28]
 80137f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137f8:	931a      	str	r3, [sp, #104]	; 0x68
 80137fa:	462f      	mov	r7, r5
 80137fc:	2205      	movs	r2, #5
 80137fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013802:	4850      	ldr	r0, [pc, #320]	; (8013944 <_svfiprintf_r+0x1dc>)
 8013804:	f7f4 fc24 	bl	8008050 <memchr>
 8013808:	9b04      	ldr	r3, [sp, #16]
 801380a:	b9d0      	cbnz	r0, 8013842 <_svfiprintf_r+0xda>
 801380c:	06d9      	lsls	r1, r3, #27
 801380e:	bf44      	itt	mi
 8013810:	2220      	movmi	r2, #32
 8013812:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013816:	071a      	lsls	r2, r3, #28
 8013818:	bf44      	itt	mi
 801381a:	222b      	movmi	r2, #43	; 0x2b
 801381c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013820:	782a      	ldrb	r2, [r5, #0]
 8013822:	2a2a      	cmp	r2, #42	; 0x2a
 8013824:	d015      	beq.n	8013852 <_svfiprintf_r+0xea>
 8013826:	9a07      	ldr	r2, [sp, #28]
 8013828:	462f      	mov	r7, r5
 801382a:	2000      	movs	r0, #0
 801382c:	250a      	movs	r5, #10
 801382e:	4639      	mov	r1, r7
 8013830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013834:	3b30      	subs	r3, #48	; 0x30
 8013836:	2b09      	cmp	r3, #9
 8013838:	d94d      	bls.n	80138d6 <_svfiprintf_r+0x16e>
 801383a:	b1b8      	cbz	r0, 801386c <_svfiprintf_r+0x104>
 801383c:	e00f      	b.n	801385e <_svfiprintf_r+0xf6>
 801383e:	462f      	mov	r7, r5
 8013840:	e7b8      	b.n	80137b4 <_svfiprintf_r+0x4c>
 8013842:	4a40      	ldr	r2, [pc, #256]	; (8013944 <_svfiprintf_r+0x1dc>)
 8013844:	1a80      	subs	r0, r0, r2
 8013846:	fa0b f000 	lsl.w	r0, fp, r0
 801384a:	4318      	orrs	r0, r3
 801384c:	9004      	str	r0, [sp, #16]
 801384e:	463d      	mov	r5, r7
 8013850:	e7d3      	b.n	80137fa <_svfiprintf_r+0x92>
 8013852:	9a03      	ldr	r2, [sp, #12]
 8013854:	1d11      	adds	r1, r2, #4
 8013856:	6812      	ldr	r2, [r2, #0]
 8013858:	9103      	str	r1, [sp, #12]
 801385a:	2a00      	cmp	r2, #0
 801385c:	db01      	blt.n	8013862 <_svfiprintf_r+0xfa>
 801385e:	9207      	str	r2, [sp, #28]
 8013860:	e004      	b.n	801386c <_svfiprintf_r+0x104>
 8013862:	4252      	negs	r2, r2
 8013864:	f043 0302 	orr.w	r3, r3, #2
 8013868:	9207      	str	r2, [sp, #28]
 801386a:	9304      	str	r3, [sp, #16]
 801386c:	783b      	ldrb	r3, [r7, #0]
 801386e:	2b2e      	cmp	r3, #46	; 0x2e
 8013870:	d10c      	bne.n	801388c <_svfiprintf_r+0x124>
 8013872:	787b      	ldrb	r3, [r7, #1]
 8013874:	2b2a      	cmp	r3, #42	; 0x2a
 8013876:	d133      	bne.n	80138e0 <_svfiprintf_r+0x178>
 8013878:	9b03      	ldr	r3, [sp, #12]
 801387a:	1d1a      	adds	r2, r3, #4
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	9203      	str	r2, [sp, #12]
 8013880:	2b00      	cmp	r3, #0
 8013882:	bfb8      	it	lt
 8013884:	f04f 33ff 	movlt.w	r3, #4294967295
 8013888:	3702      	adds	r7, #2
 801388a:	9305      	str	r3, [sp, #20]
 801388c:	4d2e      	ldr	r5, [pc, #184]	; (8013948 <_svfiprintf_r+0x1e0>)
 801388e:	7839      	ldrb	r1, [r7, #0]
 8013890:	2203      	movs	r2, #3
 8013892:	4628      	mov	r0, r5
 8013894:	f7f4 fbdc 	bl	8008050 <memchr>
 8013898:	b138      	cbz	r0, 80138aa <_svfiprintf_r+0x142>
 801389a:	2340      	movs	r3, #64	; 0x40
 801389c:	1b40      	subs	r0, r0, r5
 801389e:	fa03 f000 	lsl.w	r0, r3, r0
 80138a2:	9b04      	ldr	r3, [sp, #16]
 80138a4:	4303      	orrs	r3, r0
 80138a6:	3701      	adds	r7, #1
 80138a8:	9304      	str	r3, [sp, #16]
 80138aa:	7839      	ldrb	r1, [r7, #0]
 80138ac:	4827      	ldr	r0, [pc, #156]	; (801394c <_svfiprintf_r+0x1e4>)
 80138ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138b2:	2206      	movs	r2, #6
 80138b4:	1c7e      	adds	r6, r7, #1
 80138b6:	f7f4 fbcb 	bl	8008050 <memchr>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	d038      	beq.n	8013930 <_svfiprintf_r+0x1c8>
 80138be:	4b24      	ldr	r3, [pc, #144]	; (8013950 <_svfiprintf_r+0x1e8>)
 80138c0:	bb13      	cbnz	r3, 8013908 <_svfiprintf_r+0x1a0>
 80138c2:	9b03      	ldr	r3, [sp, #12]
 80138c4:	3307      	adds	r3, #7
 80138c6:	f023 0307 	bic.w	r3, r3, #7
 80138ca:	3308      	adds	r3, #8
 80138cc:	9303      	str	r3, [sp, #12]
 80138ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138d0:	444b      	add	r3, r9
 80138d2:	9309      	str	r3, [sp, #36]	; 0x24
 80138d4:	e76d      	b.n	80137b2 <_svfiprintf_r+0x4a>
 80138d6:	fb05 3202 	mla	r2, r5, r2, r3
 80138da:	2001      	movs	r0, #1
 80138dc:	460f      	mov	r7, r1
 80138de:	e7a6      	b.n	801382e <_svfiprintf_r+0xc6>
 80138e0:	2300      	movs	r3, #0
 80138e2:	3701      	adds	r7, #1
 80138e4:	9305      	str	r3, [sp, #20]
 80138e6:	4619      	mov	r1, r3
 80138e8:	250a      	movs	r5, #10
 80138ea:	4638      	mov	r0, r7
 80138ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138f0:	3a30      	subs	r2, #48	; 0x30
 80138f2:	2a09      	cmp	r2, #9
 80138f4:	d903      	bls.n	80138fe <_svfiprintf_r+0x196>
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d0c8      	beq.n	801388c <_svfiprintf_r+0x124>
 80138fa:	9105      	str	r1, [sp, #20]
 80138fc:	e7c6      	b.n	801388c <_svfiprintf_r+0x124>
 80138fe:	fb05 2101 	mla	r1, r5, r1, r2
 8013902:	2301      	movs	r3, #1
 8013904:	4607      	mov	r7, r0
 8013906:	e7f0      	b.n	80138ea <_svfiprintf_r+0x182>
 8013908:	ab03      	add	r3, sp, #12
 801390a:	9300      	str	r3, [sp, #0]
 801390c:	4622      	mov	r2, r4
 801390e:	4b11      	ldr	r3, [pc, #68]	; (8013954 <_svfiprintf_r+0x1ec>)
 8013910:	a904      	add	r1, sp, #16
 8013912:	4640      	mov	r0, r8
 8013914:	f7fe f818 	bl	8011948 <_printf_float>
 8013918:	f1b0 3fff 	cmp.w	r0, #4294967295
 801391c:	4681      	mov	r9, r0
 801391e:	d1d6      	bne.n	80138ce <_svfiprintf_r+0x166>
 8013920:	89a3      	ldrh	r3, [r4, #12]
 8013922:	065b      	lsls	r3, r3, #25
 8013924:	f53f af35 	bmi.w	8013792 <_svfiprintf_r+0x2a>
 8013928:	9809      	ldr	r0, [sp, #36]	; 0x24
 801392a:	b01d      	add	sp, #116	; 0x74
 801392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013930:	ab03      	add	r3, sp, #12
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	4622      	mov	r2, r4
 8013936:	4b07      	ldr	r3, [pc, #28]	; (8013954 <_svfiprintf_r+0x1ec>)
 8013938:	a904      	add	r1, sp, #16
 801393a:	4640      	mov	r0, r8
 801393c:	f7fe faba 	bl	8011eb4 <_printf_i>
 8013940:	e7ea      	b.n	8013918 <_svfiprintf_r+0x1b0>
 8013942:	bf00      	nop
 8013944:	0801442c 	.word	0x0801442c
 8013948:	08014432 	.word	0x08014432
 801394c:	08014436 	.word	0x08014436
 8013950:	08011949 	.word	0x08011949
 8013954:	080136b5 	.word	0x080136b5

08013958 <__sfputc_r>:
 8013958:	6893      	ldr	r3, [r2, #8]
 801395a:	3b01      	subs	r3, #1
 801395c:	2b00      	cmp	r3, #0
 801395e:	b410      	push	{r4}
 8013960:	6093      	str	r3, [r2, #8]
 8013962:	da08      	bge.n	8013976 <__sfputc_r+0x1e>
 8013964:	6994      	ldr	r4, [r2, #24]
 8013966:	42a3      	cmp	r3, r4
 8013968:	db01      	blt.n	801396e <__sfputc_r+0x16>
 801396a:	290a      	cmp	r1, #10
 801396c:	d103      	bne.n	8013976 <__sfputc_r+0x1e>
 801396e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013972:	f000 b985 	b.w	8013c80 <__swbuf_r>
 8013976:	6813      	ldr	r3, [r2, #0]
 8013978:	1c58      	adds	r0, r3, #1
 801397a:	6010      	str	r0, [r2, #0]
 801397c:	7019      	strb	r1, [r3, #0]
 801397e:	4608      	mov	r0, r1
 8013980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013984:	4770      	bx	lr

08013986 <__sfputs_r>:
 8013986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013988:	4606      	mov	r6, r0
 801398a:	460f      	mov	r7, r1
 801398c:	4614      	mov	r4, r2
 801398e:	18d5      	adds	r5, r2, r3
 8013990:	42ac      	cmp	r4, r5
 8013992:	d101      	bne.n	8013998 <__sfputs_r+0x12>
 8013994:	2000      	movs	r0, #0
 8013996:	e007      	b.n	80139a8 <__sfputs_r+0x22>
 8013998:	463a      	mov	r2, r7
 801399a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801399e:	4630      	mov	r0, r6
 80139a0:	f7ff ffda 	bl	8013958 <__sfputc_r>
 80139a4:	1c43      	adds	r3, r0, #1
 80139a6:	d1f3      	bne.n	8013990 <__sfputs_r+0xa>
 80139a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080139ac <_vfiprintf_r>:
 80139ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b0:	460c      	mov	r4, r1
 80139b2:	b09d      	sub	sp, #116	; 0x74
 80139b4:	4617      	mov	r7, r2
 80139b6:	461d      	mov	r5, r3
 80139b8:	4606      	mov	r6, r0
 80139ba:	b118      	cbz	r0, 80139c4 <_vfiprintf_r+0x18>
 80139bc:	6983      	ldr	r3, [r0, #24]
 80139be:	b90b      	cbnz	r3, 80139c4 <_vfiprintf_r+0x18>
 80139c0:	f7ff fa46 	bl	8012e50 <__sinit>
 80139c4:	4b7c      	ldr	r3, [pc, #496]	; (8013bb8 <_vfiprintf_r+0x20c>)
 80139c6:	429c      	cmp	r4, r3
 80139c8:	d158      	bne.n	8013a7c <_vfiprintf_r+0xd0>
 80139ca:	6874      	ldr	r4, [r6, #4]
 80139cc:	89a3      	ldrh	r3, [r4, #12]
 80139ce:	0718      	lsls	r0, r3, #28
 80139d0:	d55e      	bpl.n	8013a90 <_vfiprintf_r+0xe4>
 80139d2:	6923      	ldr	r3, [r4, #16]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d05b      	beq.n	8013a90 <_vfiprintf_r+0xe4>
 80139d8:	2300      	movs	r3, #0
 80139da:	9309      	str	r3, [sp, #36]	; 0x24
 80139dc:	2320      	movs	r3, #32
 80139de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139e2:	2330      	movs	r3, #48	; 0x30
 80139e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139e8:	9503      	str	r5, [sp, #12]
 80139ea:	f04f 0b01 	mov.w	fp, #1
 80139ee:	46b8      	mov	r8, r7
 80139f0:	4645      	mov	r5, r8
 80139f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80139f6:	b10b      	cbz	r3, 80139fc <_vfiprintf_r+0x50>
 80139f8:	2b25      	cmp	r3, #37	; 0x25
 80139fa:	d154      	bne.n	8013aa6 <_vfiprintf_r+0xfa>
 80139fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8013a00:	d00b      	beq.n	8013a1a <_vfiprintf_r+0x6e>
 8013a02:	4653      	mov	r3, sl
 8013a04:	463a      	mov	r2, r7
 8013a06:	4621      	mov	r1, r4
 8013a08:	4630      	mov	r0, r6
 8013a0a:	f7ff ffbc 	bl	8013986 <__sfputs_r>
 8013a0e:	3001      	adds	r0, #1
 8013a10:	f000 80c2 	beq.w	8013b98 <_vfiprintf_r+0x1ec>
 8013a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a16:	4453      	add	r3, sl
 8013a18:	9309      	str	r3, [sp, #36]	; 0x24
 8013a1a:	f898 3000 	ldrb.w	r3, [r8]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f000 80ba 	beq.w	8013b98 <_vfiprintf_r+0x1ec>
 8013a24:	2300      	movs	r3, #0
 8013a26:	f04f 32ff 	mov.w	r2, #4294967295
 8013a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a2e:	9304      	str	r3, [sp, #16]
 8013a30:	9307      	str	r3, [sp, #28]
 8013a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a36:	931a      	str	r3, [sp, #104]	; 0x68
 8013a38:	46a8      	mov	r8, r5
 8013a3a:	2205      	movs	r2, #5
 8013a3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013a40:	485e      	ldr	r0, [pc, #376]	; (8013bbc <_vfiprintf_r+0x210>)
 8013a42:	f7f4 fb05 	bl	8008050 <memchr>
 8013a46:	9b04      	ldr	r3, [sp, #16]
 8013a48:	bb78      	cbnz	r0, 8013aaa <_vfiprintf_r+0xfe>
 8013a4a:	06d9      	lsls	r1, r3, #27
 8013a4c:	bf44      	itt	mi
 8013a4e:	2220      	movmi	r2, #32
 8013a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a54:	071a      	lsls	r2, r3, #28
 8013a56:	bf44      	itt	mi
 8013a58:	222b      	movmi	r2, #43	; 0x2b
 8013a5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a5e:	782a      	ldrb	r2, [r5, #0]
 8013a60:	2a2a      	cmp	r2, #42	; 0x2a
 8013a62:	d02a      	beq.n	8013aba <_vfiprintf_r+0x10e>
 8013a64:	9a07      	ldr	r2, [sp, #28]
 8013a66:	46a8      	mov	r8, r5
 8013a68:	2000      	movs	r0, #0
 8013a6a:	250a      	movs	r5, #10
 8013a6c:	4641      	mov	r1, r8
 8013a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a72:	3b30      	subs	r3, #48	; 0x30
 8013a74:	2b09      	cmp	r3, #9
 8013a76:	d969      	bls.n	8013b4c <_vfiprintf_r+0x1a0>
 8013a78:	b360      	cbz	r0, 8013ad4 <_vfiprintf_r+0x128>
 8013a7a:	e024      	b.n	8013ac6 <_vfiprintf_r+0x11a>
 8013a7c:	4b50      	ldr	r3, [pc, #320]	; (8013bc0 <_vfiprintf_r+0x214>)
 8013a7e:	429c      	cmp	r4, r3
 8013a80:	d101      	bne.n	8013a86 <_vfiprintf_r+0xda>
 8013a82:	68b4      	ldr	r4, [r6, #8]
 8013a84:	e7a2      	b.n	80139cc <_vfiprintf_r+0x20>
 8013a86:	4b4f      	ldr	r3, [pc, #316]	; (8013bc4 <_vfiprintf_r+0x218>)
 8013a88:	429c      	cmp	r4, r3
 8013a8a:	bf08      	it	eq
 8013a8c:	68f4      	ldreq	r4, [r6, #12]
 8013a8e:	e79d      	b.n	80139cc <_vfiprintf_r+0x20>
 8013a90:	4621      	mov	r1, r4
 8013a92:	4630      	mov	r0, r6
 8013a94:	f000 f958 	bl	8013d48 <__swsetup_r>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d09d      	beq.n	80139d8 <_vfiprintf_r+0x2c>
 8013a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa0:	b01d      	add	sp, #116	; 0x74
 8013aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa6:	46a8      	mov	r8, r5
 8013aa8:	e7a2      	b.n	80139f0 <_vfiprintf_r+0x44>
 8013aaa:	4a44      	ldr	r2, [pc, #272]	; (8013bbc <_vfiprintf_r+0x210>)
 8013aac:	1a80      	subs	r0, r0, r2
 8013aae:	fa0b f000 	lsl.w	r0, fp, r0
 8013ab2:	4318      	orrs	r0, r3
 8013ab4:	9004      	str	r0, [sp, #16]
 8013ab6:	4645      	mov	r5, r8
 8013ab8:	e7be      	b.n	8013a38 <_vfiprintf_r+0x8c>
 8013aba:	9a03      	ldr	r2, [sp, #12]
 8013abc:	1d11      	adds	r1, r2, #4
 8013abe:	6812      	ldr	r2, [r2, #0]
 8013ac0:	9103      	str	r1, [sp, #12]
 8013ac2:	2a00      	cmp	r2, #0
 8013ac4:	db01      	blt.n	8013aca <_vfiprintf_r+0x11e>
 8013ac6:	9207      	str	r2, [sp, #28]
 8013ac8:	e004      	b.n	8013ad4 <_vfiprintf_r+0x128>
 8013aca:	4252      	negs	r2, r2
 8013acc:	f043 0302 	orr.w	r3, r3, #2
 8013ad0:	9207      	str	r2, [sp, #28]
 8013ad2:	9304      	str	r3, [sp, #16]
 8013ad4:	f898 3000 	ldrb.w	r3, [r8]
 8013ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8013ada:	d10e      	bne.n	8013afa <_vfiprintf_r+0x14e>
 8013adc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ae2:	d138      	bne.n	8013b56 <_vfiprintf_r+0x1aa>
 8013ae4:	9b03      	ldr	r3, [sp, #12]
 8013ae6:	1d1a      	adds	r2, r3, #4
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	9203      	str	r2, [sp, #12]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	bfb8      	it	lt
 8013af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8013af4:	f108 0802 	add.w	r8, r8, #2
 8013af8:	9305      	str	r3, [sp, #20]
 8013afa:	4d33      	ldr	r5, [pc, #204]	; (8013bc8 <_vfiprintf_r+0x21c>)
 8013afc:	f898 1000 	ldrb.w	r1, [r8]
 8013b00:	2203      	movs	r2, #3
 8013b02:	4628      	mov	r0, r5
 8013b04:	f7f4 faa4 	bl	8008050 <memchr>
 8013b08:	b140      	cbz	r0, 8013b1c <_vfiprintf_r+0x170>
 8013b0a:	2340      	movs	r3, #64	; 0x40
 8013b0c:	1b40      	subs	r0, r0, r5
 8013b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8013b12:	9b04      	ldr	r3, [sp, #16]
 8013b14:	4303      	orrs	r3, r0
 8013b16:	f108 0801 	add.w	r8, r8, #1
 8013b1a:	9304      	str	r3, [sp, #16]
 8013b1c:	f898 1000 	ldrb.w	r1, [r8]
 8013b20:	482a      	ldr	r0, [pc, #168]	; (8013bcc <_vfiprintf_r+0x220>)
 8013b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b26:	2206      	movs	r2, #6
 8013b28:	f108 0701 	add.w	r7, r8, #1
 8013b2c:	f7f4 fa90 	bl	8008050 <memchr>
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d037      	beq.n	8013ba4 <_vfiprintf_r+0x1f8>
 8013b34:	4b26      	ldr	r3, [pc, #152]	; (8013bd0 <_vfiprintf_r+0x224>)
 8013b36:	bb1b      	cbnz	r3, 8013b80 <_vfiprintf_r+0x1d4>
 8013b38:	9b03      	ldr	r3, [sp, #12]
 8013b3a:	3307      	adds	r3, #7
 8013b3c:	f023 0307 	bic.w	r3, r3, #7
 8013b40:	3308      	adds	r3, #8
 8013b42:	9303      	str	r3, [sp, #12]
 8013b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b46:	444b      	add	r3, r9
 8013b48:	9309      	str	r3, [sp, #36]	; 0x24
 8013b4a:	e750      	b.n	80139ee <_vfiprintf_r+0x42>
 8013b4c:	fb05 3202 	mla	r2, r5, r2, r3
 8013b50:	2001      	movs	r0, #1
 8013b52:	4688      	mov	r8, r1
 8013b54:	e78a      	b.n	8013a6c <_vfiprintf_r+0xc0>
 8013b56:	2300      	movs	r3, #0
 8013b58:	f108 0801 	add.w	r8, r8, #1
 8013b5c:	9305      	str	r3, [sp, #20]
 8013b5e:	4619      	mov	r1, r3
 8013b60:	250a      	movs	r5, #10
 8013b62:	4640      	mov	r0, r8
 8013b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b68:	3a30      	subs	r2, #48	; 0x30
 8013b6a:	2a09      	cmp	r2, #9
 8013b6c:	d903      	bls.n	8013b76 <_vfiprintf_r+0x1ca>
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d0c3      	beq.n	8013afa <_vfiprintf_r+0x14e>
 8013b72:	9105      	str	r1, [sp, #20]
 8013b74:	e7c1      	b.n	8013afa <_vfiprintf_r+0x14e>
 8013b76:	fb05 2101 	mla	r1, r5, r1, r2
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	4680      	mov	r8, r0
 8013b7e:	e7f0      	b.n	8013b62 <_vfiprintf_r+0x1b6>
 8013b80:	ab03      	add	r3, sp, #12
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	4622      	mov	r2, r4
 8013b86:	4b13      	ldr	r3, [pc, #76]	; (8013bd4 <_vfiprintf_r+0x228>)
 8013b88:	a904      	add	r1, sp, #16
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f7fd fedc 	bl	8011948 <_printf_float>
 8013b90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013b94:	4681      	mov	r9, r0
 8013b96:	d1d5      	bne.n	8013b44 <_vfiprintf_r+0x198>
 8013b98:	89a3      	ldrh	r3, [r4, #12]
 8013b9a:	065b      	lsls	r3, r3, #25
 8013b9c:	f53f af7e 	bmi.w	8013a9c <_vfiprintf_r+0xf0>
 8013ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ba2:	e77d      	b.n	8013aa0 <_vfiprintf_r+0xf4>
 8013ba4:	ab03      	add	r3, sp, #12
 8013ba6:	9300      	str	r3, [sp, #0]
 8013ba8:	4622      	mov	r2, r4
 8013baa:	4b0a      	ldr	r3, [pc, #40]	; (8013bd4 <_vfiprintf_r+0x228>)
 8013bac:	a904      	add	r1, sp, #16
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f7fe f980 	bl	8011eb4 <_printf_i>
 8013bb4:	e7ec      	b.n	8013b90 <_vfiprintf_r+0x1e4>
 8013bb6:	bf00      	nop
 8013bb8:	080142f0 	.word	0x080142f0
 8013bbc:	0801442c 	.word	0x0801442c
 8013bc0:	08014310 	.word	0x08014310
 8013bc4:	080142d0 	.word	0x080142d0
 8013bc8:	08014432 	.word	0x08014432
 8013bcc:	08014436 	.word	0x08014436
 8013bd0:	08011949 	.word	0x08011949
 8013bd4:	08013987 	.word	0x08013987

08013bd8 <_sbrk_r>:
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	4c06      	ldr	r4, [pc, #24]	; (8013bf4 <_sbrk_r+0x1c>)
 8013bdc:	2300      	movs	r3, #0
 8013bde:	4605      	mov	r5, r0
 8013be0:	4608      	mov	r0, r1
 8013be2:	6023      	str	r3, [r4, #0]
 8013be4:	f7f8 fc12 	bl	800c40c <_sbrk>
 8013be8:	1c43      	adds	r3, r0, #1
 8013bea:	d102      	bne.n	8013bf2 <_sbrk_r+0x1a>
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	b103      	cbz	r3, 8013bf2 <_sbrk_r+0x1a>
 8013bf0:	602b      	str	r3, [r5, #0]
 8013bf2:	bd38      	pop	{r3, r4, r5, pc}
 8013bf4:	200146ac 	.word	0x200146ac

08013bf8 <__sread>:
 8013bf8:	b510      	push	{r4, lr}
 8013bfa:	460c      	mov	r4, r1
 8013bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c00:	f000 fa9a 	bl	8014138 <_read_r>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	bfab      	itete	ge
 8013c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8013c0c:	181b      	addge	r3, r3, r0
 8013c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013c12:	bfac      	ite	ge
 8013c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8013c16:	81a3      	strhlt	r3, [r4, #12]
 8013c18:	bd10      	pop	{r4, pc}

08013c1a <__swrite>:
 8013c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1e:	461f      	mov	r7, r3
 8013c20:	898b      	ldrh	r3, [r1, #12]
 8013c22:	05db      	lsls	r3, r3, #23
 8013c24:	4605      	mov	r5, r0
 8013c26:	460c      	mov	r4, r1
 8013c28:	4616      	mov	r6, r2
 8013c2a:	d505      	bpl.n	8013c38 <__swrite+0x1e>
 8013c2c:	2302      	movs	r3, #2
 8013c2e:	2200      	movs	r2, #0
 8013c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c34:	f000 f9b6 	bl	8013fa4 <_lseek_r>
 8013c38:	89a3      	ldrh	r3, [r4, #12]
 8013c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c42:	81a3      	strh	r3, [r4, #12]
 8013c44:	4632      	mov	r2, r6
 8013c46:	463b      	mov	r3, r7
 8013c48:	4628      	mov	r0, r5
 8013c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c4e:	f000 b869 	b.w	8013d24 <_write_r>

08013c52 <__sseek>:
 8013c52:	b510      	push	{r4, lr}
 8013c54:	460c      	mov	r4, r1
 8013c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c5a:	f000 f9a3 	bl	8013fa4 <_lseek_r>
 8013c5e:	1c43      	adds	r3, r0, #1
 8013c60:	89a3      	ldrh	r3, [r4, #12]
 8013c62:	bf15      	itete	ne
 8013c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c6e:	81a3      	strheq	r3, [r4, #12]
 8013c70:	bf18      	it	ne
 8013c72:	81a3      	strhne	r3, [r4, #12]
 8013c74:	bd10      	pop	{r4, pc}

08013c76 <__sclose>:
 8013c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c7a:	f000 b8d3 	b.w	8013e24 <_close_r>
	...

08013c80 <__swbuf_r>:
 8013c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c82:	460e      	mov	r6, r1
 8013c84:	4614      	mov	r4, r2
 8013c86:	4605      	mov	r5, r0
 8013c88:	b118      	cbz	r0, 8013c92 <__swbuf_r+0x12>
 8013c8a:	6983      	ldr	r3, [r0, #24]
 8013c8c:	b90b      	cbnz	r3, 8013c92 <__swbuf_r+0x12>
 8013c8e:	f7ff f8df 	bl	8012e50 <__sinit>
 8013c92:	4b21      	ldr	r3, [pc, #132]	; (8013d18 <__swbuf_r+0x98>)
 8013c94:	429c      	cmp	r4, r3
 8013c96:	d12a      	bne.n	8013cee <__swbuf_r+0x6e>
 8013c98:	686c      	ldr	r4, [r5, #4]
 8013c9a:	69a3      	ldr	r3, [r4, #24]
 8013c9c:	60a3      	str	r3, [r4, #8]
 8013c9e:	89a3      	ldrh	r3, [r4, #12]
 8013ca0:	071a      	lsls	r2, r3, #28
 8013ca2:	d52e      	bpl.n	8013d02 <__swbuf_r+0x82>
 8013ca4:	6923      	ldr	r3, [r4, #16]
 8013ca6:	b363      	cbz	r3, 8013d02 <__swbuf_r+0x82>
 8013ca8:	6923      	ldr	r3, [r4, #16]
 8013caa:	6820      	ldr	r0, [r4, #0]
 8013cac:	1ac0      	subs	r0, r0, r3
 8013cae:	6963      	ldr	r3, [r4, #20]
 8013cb0:	b2f6      	uxtb	r6, r6
 8013cb2:	4283      	cmp	r3, r0
 8013cb4:	4637      	mov	r7, r6
 8013cb6:	dc04      	bgt.n	8013cc2 <__swbuf_r+0x42>
 8013cb8:	4621      	mov	r1, r4
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f000 f948 	bl	8013f50 <_fflush_r>
 8013cc0:	bb28      	cbnz	r0, 8013d0e <__swbuf_r+0x8e>
 8013cc2:	68a3      	ldr	r3, [r4, #8]
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	60a3      	str	r3, [r4, #8]
 8013cc8:	6823      	ldr	r3, [r4, #0]
 8013cca:	1c5a      	adds	r2, r3, #1
 8013ccc:	6022      	str	r2, [r4, #0]
 8013cce:	701e      	strb	r6, [r3, #0]
 8013cd0:	6963      	ldr	r3, [r4, #20]
 8013cd2:	3001      	adds	r0, #1
 8013cd4:	4283      	cmp	r3, r0
 8013cd6:	d004      	beq.n	8013ce2 <__swbuf_r+0x62>
 8013cd8:	89a3      	ldrh	r3, [r4, #12]
 8013cda:	07db      	lsls	r3, r3, #31
 8013cdc:	d519      	bpl.n	8013d12 <__swbuf_r+0x92>
 8013cde:	2e0a      	cmp	r6, #10
 8013ce0:	d117      	bne.n	8013d12 <__swbuf_r+0x92>
 8013ce2:	4621      	mov	r1, r4
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	f000 f933 	bl	8013f50 <_fflush_r>
 8013cea:	b190      	cbz	r0, 8013d12 <__swbuf_r+0x92>
 8013cec:	e00f      	b.n	8013d0e <__swbuf_r+0x8e>
 8013cee:	4b0b      	ldr	r3, [pc, #44]	; (8013d1c <__swbuf_r+0x9c>)
 8013cf0:	429c      	cmp	r4, r3
 8013cf2:	d101      	bne.n	8013cf8 <__swbuf_r+0x78>
 8013cf4:	68ac      	ldr	r4, [r5, #8]
 8013cf6:	e7d0      	b.n	8013c9a <__swbuf_r+0x1a>
 8013cf8:	4b09      	ldr	r3, [pc, #36]	; (8013d20 <__swbuf_r+0xa0>)
 8013cfa:	429c      	cmp	r4, r3
 8013cfc:	bf08      	it	eq
 8013cfe:	68ec      	ldreq	r4, [r5, #12]
 8013d00:	e7cb      	b.n	8013c9a <__swbuf_r+0x1a>
 8013d02:	4621      	mov	r1, r4
 8013d04:	4628      	mov	r0, r5
 8013d06:	f000 f81f 	bl	8013d48 <__swsetup_r>
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	d0cc      	beq.n	8013ca8 <__swbuf_r+0x28>
 8013d0e:	f04f 37ff 	mov.w	r7, #4294967295
 8013d12:	4638      	mov	r0, r7
 8013d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d16:	bf00      	nop
 8013d18:	080142f0 	.word	0x080142f0
 8013d1c:	08014310 	.word	0x08014310
 8013d20:	080142d0 	.word	0x080142d0

08013d24 <_write_r>:
 8013d24:	b538      	push	{r3, r4, r5, lr}
 8013d26:	4c07      	ldr	r4, [pc, #28]	; (8013d44 <_write_r+0x20>)
 8013d28:	4605      	mov	r5, r0
 8013d2a:	4608      	mov	r0, r1
 8013d2c:	4611      	mov	r1, r2
 8013d2e:	2200      	movs	r2, #0
 8013d30:	6022      	str	r2, [r4, #0]
 8013d32:	461a      	mov	r2, r3
 8013d34:	f7f8 fb19 	bl	800c36a <_write>
 8013d38:	1c43      	adds	r3, r0, #1
 8013d3a:	d102      	bne.n	8013d42 <_write_r+0x1e>
 8013d3c:	6823      	ldr	r3, [r4, #0]
 8013d3e:	b103      	cbz	r3, 8013d42 <_write_r+0x1e>
 8013d40:	602b      	str	r3, [r5, #0]
 8013d42:	bd38      	pop	{r3, r4, r5, pc}
 8013d44:	200146ac 	.word	0x200146ac

08013d48 <__swsetup_r>:
 8013d48:	4b32      	ldr	r3, [pc, #200]	; (8013e14 <__swsetup_r+0xcc>)
 8013d4a:	b570      	push	{r4, r5, r6, lr}
 8013d4c:	681d      	ldr	r5, [r3, #0]
 8013d4e:	4606      	mov	r6, r0
 8013d50:	460c      	mov	r4, r1
 8013d52:	b125      	cbz	r5, 8013d5e <__swsetup_r+0x16>
 8013d54:	69ab      	ldr	r3, [r5, #24]
 8013d56:	b913      	cbnz	r3, 8013d5e <__swsetup_r+0x16>
 8013d58:	4628      	mov	r0, r5
 8013d5a:	f7ff f879 	bl	8012e50 <__sinit>
 8013d5e:	4b2e      	ldr	r3, [pc, #184]	; (8013e18 <__swsetup_r+0xd0>)
 8013d60:	429c      	cmp	r4, r3
 8013d62:	d10f      	bne.n	8013d84 <__swsetup_r+0x3c>
 8013d64:	686c      	ldr	r4, [r5, #4]
 8013d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	0715      	lsls	r5, r2, #28
 8013d6e:	d42c      	bmi.n	8013dca <__swsetup_r+0x82>
 8013d70:	06d0      	lsls	r0, r2, #27
 8013d72:	d411      	bmi.n	8013d98 <__swsetup_r+0x50>
 8013d74:	2209      	movs	r2, #9
 8013d76:	6032      	str	r2, [r6, #0]
 8013d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d7c:	81a3      	strh	r3, [r4, #12]
 8013d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d82:	e03e      	b.n	8013e02 <__swsetup_r+0xba>
 8013d84:	4b25      	ldr	r3, [pc, #148]	; (8013e1c <__swsetup_r+0xd4>)
 8013d86:	429c      	cmp	r4, r3
 8013d88:	d101      	bne.n	8013d8e <__swsetup_r+0x46>
 8013d8a:	68ac      	ldr	r4, [r5, #8]
 8013d8c:	e7eb      	b.n	8013d66 <__swsetup_r+0x1e>
 8013d8e:	4b24      	ldr	r3, [pc, #144]	; (8013e20 <__swsetup_r+0xd8>)
 8013d90:	429c      	cmp	r4, r3
 8013d92:	bf08      	it	eq
 8013d94:	68ec      	ldreq	r4, [r5, #12]
 8013d96:	e7e6      	b.n	8013d66 <__swsetup_r+0x1e>
 8013d98:	0751      	lsls	r1, r2, #29
 8013d9a:	d512      	bpl.n	8013dc2 <__swsetup_r+0x7a>
 8013d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d9e:	b141      	cbz	r1, 8013db2 <__swsetup_r+0x6a>
 8013da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013da4:	4299      	cmp	r1, r3
 8013da6:	d002      	beq.n	8013dae <__swsetup_r+0x66>
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7ff fbdb 	bl	8013564 <_free_r>
 8013dae:	2300      	movs	r3, #0
 8013db0:	6363      	str	r3, [r4, #52]	; 0x34
 8013db2:	89a3      	ldrh	r3, [r4, #12]
 8013db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013db8:	81a3      	strh	r3, [r4, #12]
 8013dba:	2300      	movs	r3, #0
 8013dbc:	6063      	str	r3, [r4, #4]
 8013dbe:	6923      	ldr	r3, [r4, #16]
 8013dc0:	6023      	str	r3, [r4, #0]
 8013dc2:	89a3      	ldrh	r3, [r4, #12]
 8013dc4:	f043 0308 	orr.w	r3, r3, #8
 8013dc8:	81a3      	strh	r3, [r4, #12]
 8013dca:	6923      	ldr	r3, [r4, #16]
 8013dcc:	b94b      	cbnz	r3, 8013de2 <__swsetup_r+0x9a>
 8013dce:	89a3      	ldrh	r3, [r4, #12]
 8013dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013dd8:	d003      	beq.n	8013de2 <__swsetup_r+0x9a>
 8013dda:	4621      	mov	r1, r4
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f000 f917 	bl	8014010 <__smakebuf_r>
 8013de2:	89a2      	ldrh	r2, [r4, #12]
 8013de4:	f012 0301 	ands.w	r3, r2, #1
 8013de8:	d00c      	beq.n	8013e04 <__swsetup_r+0xbc>
 8013dea:	2300      	movs	r3, #0
 8013dec:	60a3      	str	r3, [r4, #8]
 8013dee:	6963      	ldr	r3, [r4, #20]
 8013df0:	425b      	negs	r3, r3
 8013df2:	61a3      	str	r3, [r4, #24]
 8013df4:	6923      	ldr	r3, [r4, #16]
 8013df6:	b953      	cbnz	r3, 8013e0e <__swsetup_r+0xc6>
 8013df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013e00:	d1ba      	bne.n	8013d78 <__swsetup_r+0x30>
 8013e02:	bd70      	pop	{r4, r5, r6, pc}
 8013e04:	0792      	lsls	r2, r2, #30
 8013e06:	bf58      	it	pl
 8013e08:	6963      	ldrpl	r3, [r4, #20]
 8013e0a:	60a3      	str	r3, [r4, #8]
 8013e0c:	e7f2      	b.n	8013df4 <__swsetup_r+0xac>
 8013e0e:	2000      	movs	r0, #0
 8013e10:	e7f7      	b.n	8013e02 <__swsetup_r+0xba>
 8013e12:	bf00      	nop
 8013e14:	20000018 	.word	0x20000018
 8013e18:	080142f0 	.word	0x080142f0
 8013e1c:	08014310 	.word	0x08014310
 8013e20:	080142d0 	.word	0x080142d0

08013e24 <_close_r>:
 8013e24:	b538      	push	{r3, r4, r5, lr}
 8013e26:	4c06      	ldr	r4, [pc, #24]	; (8013e40 <_close_r+0x1c>)
 8013e28:	2300      	movs	r3, #0
 8013e2a:	4605      	mov	r5, r0
 8013e2c:	4608      	mov	r0, r1
 8013e2e:	6023      	str	r3, [r4, #0]
 8013e30:	f7f8 fab7 	bl	800c3a2 <_close>
 8013e34:	1c43      	adds	r3, r0, #1
 8013e36:	d102      	bne.n	8013e3e <_close_r+0x1a>
 8013e38:	6823      	ldr	r3, [r4, #0]
 8013e3a:	b103      	cbz	r3, 8013e3e <_close_r+0x1a>
 8013e3c:	602b      	str	r3, [r5, #0]
 8013e3e:	bd38      	pop	{r3, r4, r5, pc}
 8013e40:	200146ac 	.word	0x200146ac

08013e44 <__sflush_r>:
 8013e44:	898a      	ldrh	r2, [r1, #12]
 8013e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e4a:	4605      	mov	r5, r0
 8013e4c:	0710      	lsls	r0, r2, #28
 8013e4e:	460c      	mov	r4, r1
 8013e50:	d458      	bmi.n	8013f04 <__sflush_r+0xc0>
 8013e52:	684b      	ldr	r3, [r1, #4]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	dc05      	bgt.n	8013e64 <__sflush_r+0x20>
 8013e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	dc02      	bgt.n	8013e64 <__sflush_r+0x20>
 8013e5e:	2000      	movs	r0, #0
 8013e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e66:	2e00      	cmp	r6, #0
 8013e68:	d0f9      	beq.n	8013e5e <__sflush_r+0x1a>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e70:	682f      	ldr	r7, [r5, #0]
 8013e72:	6a21      	ldr	r1, [r4, #32]
 8013e74:	602b      	str	r3, [r5, #0]
 8013e76:	d032      	beq.n	8013ede <__sflush_r+0x9a>
 8013e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e7a:	89a3      	ldrh	r3, [r4, #12]
 8013e7c:	075a      	lsls	r2, r3, #29
 8013e7e:	d505      	bpl.n	8013e8c <__sflush_r+0x48>
 8013e80:	6863      	ldr	r3, [r4, #4]
 8013e82:	1ac0      	subs	r0, r0, r3
 8013e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e86:	b10b      	cbz	r3, 8013e8c <__sflush_r+0x48>
 8013e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e8a:	1ac0      	subs	r0, r0, r3
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	4602      	mov	r2, r0
 8013e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e92:	6a21      	ldr	r1, [r4, #32]
 8013e94:	4628      	mov	r0, r5
 8013e96:	47b0      	blx	r6
 8013e98:	1c43      	adds	r3, r0, #1
 8013e9a:	89a3      	ldrh	r3, [r4, #12]
 8013e9c:	d106      	bne.n	8013eac <__sflush_r+0x68>
 8013e9e:	6829      	ldr	r1, [r5, #0]
 8013ea0:	291d      	cmp	r1, #29
 8013ea2:	d848      	bhi.n	8013f36 <__sflush_r+0xf2>
 8013ea4:	4a29      	ldr	r2, [pc, #164]	; (8013f4c <__sflush_r+0x108>)
 8013ea6:	40ca      	lsrs	r2, r1
 8013ea8:	07d6      	lsls	r6, r2, #31
 8013eaa:	d544      	bpl.n	8013f36 <__sflush_r+0xf2>
 8013eac:	2200      	movs	r2, #0
 8013eae:	6062      	str	r2, [r4, #4]
 8013eb0:	04d9      	lsls	r1, r3, #19
 8013eb2:	6922      	ldr	r2, [r4, #16]
 8013eb4:	6022      	str	r2, [r4, #0]
 8013eb6:	d504      	bpl.n	8013ec2 <__sflush_r+0x7e>
 8013eb8:	1c42      	adds	r2, r0, #1
 8013eba:	d101      	bne.n	8013ec0 <__sflush_r+0x7c>
 8013ebc:	682b      	ldr	r3, [r5, #0]
 8013ebe:	b903      	cbnz	r3, 8013ec2 <__sflush_r+0x7e>
 8013ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8013ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ec4:	602f      	str	r7, [r5, #0]
 8013ec6:	2900      	cmp	r1, #0
 8013ec8:	d0c9      	beq.n	8013e5e <__sflush_r+0x1a>
 8013eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ece:	4299      	cmp	r1, r3
 8013ed0:	d002      	beq.n	8013ed8 <__sflush_r+0x94>
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f7ff fb46 	bl	8013564 <_free_r>
 8013ed8:	2000      	movs	r0, #0
 8013eda:	6360      	str	r0, [r4, #52]	; 0x34
 8013edc:	e7c0      	b.n	8013e60 <__sflush_r+0x1c>
 8013ede:	2301      	movs	r3, #1
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	47b0      	blx	r6
 8013ee4:	1c41      	adds	r1, r0, #1
 8013ee6:	d1c8      	bne.n	8013e7a <__sflush_r+0x36>
 8013ee8:	682b      	ldr	r3, [r5, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d0c5      	beq.n	8013e7a <__sflush_r+0x36>
 8013eee:	2b1d      	cmp	r3, #29
 8013ef0:	d001      	beq.n	8013ef6 <__sflush_r+0xb2>
 8013ef2:	2b16      	cmp	r3, #22
 8013ef4:	d101      	bne.n	8013efa <__sflush_r+0xb6>
 8013ef6:	602f      	str	r7, [r5, #0]
 8013ef8:	e7b1      	b.n	8013e5e <__sflush_r+0x1a>
 8013efa:	89a3      	ldrh	r3, [r4, #12]
 8013efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f00:	81a3      	strh	r3, [r4, #12]
 8013f02:	e7ad      	b.n	8013e60 <__sflush_r+0x1c>
 8013f04:	690f      	ldr	r7, [r1, #16]
 8013f06:	2f00      	cmp	r7, #0
 8013f08:	d0a9      	beq.n	8013e5e <__sflush_r+0x1a>
 8013f0a:	0793      	lsls	r3, r2, #30
 8013f0c:	680e      	ldr	r6, [r1, #0]
 8013f0e:	bf08      	it	eq
 8013f10:	694b      	ldreq	r3, [r1, #20]
 8013f12:	600f      	str	r7, [r1, #0]
 8013f14:	bf18      	it	ne
 8013f16:	2300      	movne	r3, #0
 8013f18:	eba6 0807 	sub.w	r8, r6, r7
 8013f1c:	608b      	str	r3, [r1, #8]
 8013f1e:	f1b8 0f00 	cmp.w	r8, #0
 8013f22:	dd9c      	ble.n	8013e5e <__sflush_r+0x1a>
 8013f24:	4643      	mov	r3, r8
 8013f26:	463a      	mov	r2, r7
 8013f28:	6a21      	ldr	r1, [r4, #32]
 8013f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f2c:	4628      	mov	r0, r5
 8013f2e:	47b0      	blx	r6
 8013f30:	2800      	cmp	r0, #0
 8013f32:	dc06      	bgt.n	8013f42 <__sflush_r+0xfe>
 8013f34:	89a3      	ldrh	r3, [r4, #12]
 8013f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f3a:	81a3      	strh	r3, [r4, #12]
 8013f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f40:	e78e      	b.n	8013e60 <__sflush_r+0x1c>
 8013f42:	4407      	add	r7, r0
 8013f44:	eba8 0800 	sub.w	r8, r8, r0
 8013f48:	e7e9      	b.n	8013f1e <__sflush_r+0xda>
 8013f4a:	bf00      	nop
 8013f4c:	20400001 	.word	0x20400001

08013f50 <_fflush_r>:
 8013f50:	b538      	push	{r3, r4, r5, lr}
 8013f52:	690b      	ldr	r3, [r1, #16]
 8013f54:	4605      	mov	r5, r0
 8013f56:	460c      	mov	r4, r1
 8013f58:	b1db      	cbz	r3, 8013f92 <_fflush_r+0x42>
 8013f5a:	b118      	cbz	r0, 8013f64 <_fflush_r+0x14>
 8013f5c:	6983      	ldr	r3, [r0, #24]
 8013f5e:	b90b      	cbnz	r3, 8013f64 <_fflush_r+0x14>
 8013f60:	f7fe ff76 	bl	8012e50 <__sinit>
 8013f64:	4b0c      	ldr	r3, [pc, #48]	; (8013f98 <_fflush_r+0x48>)
 8013f66:	429c      	cmp	r4, r3
 8013f68:	d109      	bne.n	8013f7e <_fflush_r+0x2e>
 8013f6a:	686c      	ldr	r4, [r5, #4]
 8013f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f70:	b17b      	cbz	r3, 8013f92 <_fflush_r+0x42>
 8013f72:	4621      	mov	r1, r4
 8013f74:	4628      	mov	r0, r5
 8013f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f7a:	f7ff bf63 	b.w	8013e44 <__sflush_r>
 8013f7e:	4b07      	ldr	r3, [pc, #28]	; (8013f9c <_fflush_r+0x4c>)
 8013f80:	429c      	cmp	r4, r3
 8013f82:	d101      	bne.n	8013f88 <_fflush_r+0x38>
 8013f84:	68ac      	ldr	r4, [r5, #8]
 8013f86:	e7f1      	b.n	8013f6c <_fflush_r+0x1c>
 8013f88:	4b05      	ldr	r3, [pc, #20]	; (8013fa0 <_fflush_r+0x50>)
 8013f8a:	429c      	cmp	r4, r3
 8013f8c:	bf08      	it	eq
 8013f8e:	68ec      	ldreq	r4, [r5, #12]
 8013f90:	e7ec      	b.n	8013f6c <_fflush_r+0x1c>
 8013f92:	2000      	movs	r0, #0
 8013f94:	bd38      	pop	{r3, r4, r5, pc}
 8013f96:	bf00      	nop
 8013f98:	080142f0 	.word	0x080142f0
 8013f9c:	08014310 	.word	0x08014310
 8013fa0:	080142d0 	.word	0x080142d0

08013fa4 <_lseek_r>:
 8013fa4:	b538      	push	{r3, r4, r5, lr}
 8013fa6:	4c07      	ldr	r4, [pc, #28]	; (8013fc4 <_lseek_r+0x20>)
 8013fa8:	4605      	mov	r5, r0
 8013faa:	4608      	mov	r0, r1
 8013fac:	4611      	mov	r1, r2
 8013fae:	2200      	movs	r2, #0
 8013fb0:	6022      	str	r2, [r4, #0]
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	f7f8 fa1c 	bl	800c3f0 <_lseek>
 8013fb8:	1c43      	adds	r3, r0, #1
 8013fba:	d102      	bne.n	8013fc2 <_lseek_r+0x1e>
 8013fbc:	6823      	ldr	r3, [r4, #0]
 8013fbe:	b103      	cbz	r3, 8013fc2 <_lseek_r+0x1e>
 8013fc0:	602b      	str	r3, [r5, #0]
 8013fc2:	bd38      	pop	{r3, r4, r5, pc}
 8013fc4:	200146ac 	.word	0x200146ac

08013fc8 <__swhatbuf_r>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	460e      	mov	r6, r1
 8013fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fd0:	2900      	cmp	r1, #0
 8013fd2:	b096      	sub	sp, #88	; 0x58
 8013fd4:	4614      	mov	r4, r2
 8013fd6:	461d      	mov	r5, r3
 8013fd8:	da07      	bge.n	8013fea <__swhatbuf_r+0x22>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	602b      	str	r3, [r5, #0]
 8013fde:	89b3      	ldrh	r3, [r6, #12]
 8013fe0:	061a      	lsls	r2, r3, #24
 8013fe2:	d410      	bmi.n	8014006 <__swhatbuf_r+0x3e>
 8013fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fe8:	e00e      	b.n	8014008 <__swhatbuf_r+0x40>
 8013fea:	466a      	mov	r2, sp
 8013fec:	f000 f8c4 	bl	8014178 <_fstat_r>
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	dbf2      	blt.n	8013fda <__swhatbuf_r+0x12>
 8013ff4:	9a01      	ldr	r2, [sp, #4]
 8013ff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ffa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ffe:	425a      	negs	r2, r3
 8014000:	415a      	adcs	r2, r3
 8014002:	602a      	str	r2, [r5, #0]
 8014004:	e7ee      	b.n	8013fe4 <__swhatbuf_r+0x1c>
 8014006:	2340      	movs	r3, #64	; 0x40
 8014008:	2000      	movs	r0, #0
 801400a:	6023      	str	r3, [r4, #0]
 801400c:	b016      	add	sp, #88	; 0x58
 801400e:	bd70      	pop	{r4, r5, r6, pc}

08014010 <__smakebuf_r>:
 8014010:	898b      	ldrh	r3, [r1, #12]
 8014012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014014:	079d      	lsls	r5, r3, #30
 8014016:	4606      	mov	r6, r0
 8014018:	460c      	mov	r4, r1
 801401a:	d507      	bpl.n	801402c <__smakebuf_r+0x1c>
 801401c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014020:	6023      	str	r3, [r4, #0]
 8014022:	6123      	str	r3, [r4, #16]
 8014024:	2301      	movs	r3, #1
 8014026:	6163      	str	r3, [r4, #20]
 8014028:	b002      	add	sp, #8
 801402a:	bd70      	pop	{r4, r5, r6, pc}
 801402c:	ab01      	add	r3, sp, #4
 801402e:	466a      	mov	r2, sp
 8014030:	f7ff ffca 	bl	8013fc8 <__swhatbuf_r>
 8014034:	9900      	ldr	r1, [sp, #0]
 8014036:	4605      	mov	r5, r0
 8014038:	4630      	mov	r0, r6
 801403a:	f7ff fae1 	bl	8013600 <_malloc_r>
 801403e:	b948      	cbnz	r0, 8014054 <__smakebuf_r+0x44>
 8014040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014044:	059a      	lsls	r2, r3, #22
 8014046:	d4ef      	bmi.n	8014028 <__smakebuf_r+0x18>
 8014048:	f023 0303 	bic.w	r3, r3, #3
 801404c:	f043 0302 	orr.w	r3, r3, #2
 8014050:	81a3      	strh	r3, [r4, #12]
 8014052:	e7e3      	b.n	801401c <__smakebuf_r+0xc>
 8014054:	4b0d      	ldr	r3, [pc, #52]	; (801408c <__smakebuf_r+0x7c>)
 8014056:	62b3      	str	r3, [r6, #40]	; 0x28
 8014058:	89a3      	ldrh	r3, [r4, #12]
 801405a:	6020      	str	r0, [r4, #0]
 801405c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014060:	81a3      	strh	r3, [r4, #12]
 8014062:	9b00      	ldr	r3, [sp, #0]
 8014064:	6163      	str	r3, [r4, #20]
 8014066:	9b01      	ldr	r3, [sp, #4]
 8014068:	6120      	str	r0, [r4, #16]
 801406a:	b15b      	cbz	r3, 8014084 <__smakebuf_r+0x74>
 801406c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014070:	4630      	mov	r0, r6
 8014072:	f000 f893 	bl	801419c <_isatty_r>
 8014076:	b128      	cbz	r0, 8014084 <__smakebuf_r+0x74>
 8014078:	89a3      	ldrh	r3, [r4, #12]
 801407a:	f023 0303 	bic.w	r3, r3, #3
 801407e:	f043 0301 	orr.w	r3, r3, #1
 8014082:	81a3      	strh	r3, [r4, #12]
 8014084:	89a3      	ldrh	r3, [r4, #12]
 8014086:	431d      	orrs	r5, r3
 8014088:	81a5      	strh	r5, [r4, #12]
 801408a:	e7cd      	b.n	8014028 <__smakebuf_r+0x18>
 801408c:	08012e19 	.word	0x08012e19

08014090 <__ascii_mbtowc>:
 8014090:	b082      	sub	sp, #8
 8014092:	b901      	cbnz	r1, 8014096 <__ascii_mbtowc+0x6>
 8014094:	a901      	add	r1, sp, #4
 8014096:	b142      	cbz	r2, 80140aa <__ascii_mbtowc+0x1a>
 8014098:	b14b      	cbz	r3, 80140ae <__ascii_mbtowc+0x1e>
 801409a:	7813      	ldrb	r3, [r2, #0]
 801409c:	600b      	str	r3, [r1, #0]
 801409e:	7812      	ldrb	r2, [r2, #0]
 80140a0:	1c10      	adds	r0, r2, #0
 80140a2:	bf18      	it	ne
 80140a4:	2001      	movne	r0, #1
 80140a6:	b002      	add	sp, #8
 80140a8:	4770      	bx	lr
 80140aa:	4610      	mov	r0, r2
 80140ac:	e7fb      	b.n	80140a6 <__ascii_mbtowc+0x16>
 80140ae:	f06f 0001 	mvn.w	r0, #1
 80140b2:	e7f8      	b.n	80140a6 <__ascii_mbtowc+0x16>

080140b4 <memmove>:
 80140b4:	4288      	cmp	r0, r1
 80140b6:	b510      	push	{r4, lr}
 80140b8:	eb01 0302 	add.w	r3, r1, r2
 80140bc:	d807      	bhi.n	80140ce <memmove+0x1a>
 80140be:	1e42      	subs	r2, r0, #1
 80140c0:	4299      	cmp	r1, r3
 80140c2:	d00a      	beq.n	80140da <memmove+0x26>
 80140c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80140cc:	e7f8      	b.n	80140c0 <memmove+0xc>
 80140ce:	4283      	cmp	r3, r0
 80140d0:	d9f5      	bls.n	80140be <memmove+0xa>
 80140d2:	1881      	adds	r1, r0, r2
 80140d4:	1ad2      	subs	r2, r2, r3
 80140d6:	42d3      	cmn	r3, r2
 80140d8:	d100      	bne.n	80140dc <memmove+0x28>
 80140da:	bd10      	pop	{r4, pc}
 80140dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80140e4:	e7f7      	b.n	80140d6 <memmove+0x22>

080140e6 <__malloc_lock>:
 80140e6:	4770      	bx	lr

080140e8 <__malloc_unlock>:
 80140e8:	4770      	bx	lr

080140ea <_realloc_r>:
 80140ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ec:	4607      	mov	r7, r0
 80140ee:	4614      	mov	r4, r2
 80140f0:	460e      	mov	r6, r1
 80140f2:	b921      	cbnz	r1, 80140fe <_realloc_r+0x14>
 80140f4:	4611      	mov	r1, r2
 80140f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80140fa:	f7ff ba81 	b.w	8013600 <_malloc_r>
 80140fe:	b922      	cbnz	r2, 801410a <_realloc_r+0x20>
 8014100:	f7ff fa30 	bl	8013564 <_free_r>
 8014104:	4625      	mov	r5, r4
 8014106:	4628      	mov	r0, r5
 8014108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801410a:	f000 f857 	bl	80141bc <_malloc_usable_size_r>
 801410e:	42a0      	cmp	r0, r4
 8014110:	d20f      	bcs.n	8014132 <_realloc_r+0x48>
 8014112:	4621      	mov	r1, r4
 8014114:	4638      	mov	r0, r7
 8014116:	f7ff fa73 	bl	8013600 <_malloc_r>
 801411a:	4605      	mov	r5, r0
 801411c:	2800      	cmp	r0, #0
 801411e:	d0f2      	beq.n	8014106 <_realloc_r+0x1c>
 8014120:	4631      	mov	r1, r6
 8014122:	4622      	mov	r2, r4
 8014124:	f7fd fb68 	bl	80117f8 <memcpy>
 8014128:	4631      	mov	r1, r6
 801412a:	4638      	mov	r0, r7
 801412c:	f7ff fa1a 	bl	8013564 <_free_r>
 8014130:	e7e9      	b.n	8014106 <_realloc_r+0x1c>
 8014132:	4635      	mov	r5, r6
 8014134:	e7e7      	b.n	8014106 <_realloc_r+0x1c>
	...

08014138 <_read_r>:
 8014138:	b538      	push	{r3, r4, r5, lr}
 801413a:	4c07      	ldr	r4, [pc, #28]	; (8014158 <_read_r+0x20>)
 801413c:	4605      	mov	r5, r0
 801413e:	4608      	mov	r0, r1
 8014140:	4611      	mov	r1, r2
 8014142:	2200      	movs	r2, #0
 8014144:	6022      	str	r2, [r4, #0]
 8014146:	461a      	mov	r2, r3
 8014148:	f7f8 f8f2 	bl	800c330 <_read>
 801414c:	1c43      	adds	r3, r0, #1
 801414e:	d102      	bne.n	8014156 <_read_r+0x1e>
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	b103      	cbz	r3, 8014156 <_read_r+0x1e>
 8014154:	602b      	str	r3, [r5, #0]
 8014156:	bd38      	pop	{r3, r4, r5, pc}
 8014158:	200146ac 	.word	0x200146ac

0801415c <__ascii_wctomb>:
 801415c:	b149      	cbz	r1, 8014172 <__ascii_wctomb+0x16>
 801415e:	2aff      	cmp	r2, #255	; 0xff
 8014160:	bf85      	ittet	hi
 8014162:	238a      	movhi	r3, #138	; 0x8a
 8014164:	6003      	strhi	r3, [r0, #0]
 8014166:	700a      	strbls	r2, [r1, #0]
 8014168:	f04f 30ff 	movhi.w	r0, #4294967295
 801416c:	bf98      	it	ls
 801416e:	2001      	movls	r0, #1
 8014170:	4770      	bx	lr
 8014172:	4608      	mov	r0, r1
 8014174:	4770      	bx	lr
	...

08014178 <_fstat_r>:
 8014178:	b538      	push	{r3, r4, r5, lr}
 801417a:	4c07      	ldr	r4, [pc, #28]	; (8014198 <_fstat_r+0x20>)
 801417c:	2300      	movs	r3, #0
 801417e:	4605      	mov	r5, r0
 8014180:	4608      	mov	r0, r1
 8014182:	4611      	mov	r1, r2
 8014184:	6023      	str	r3, [r4, #0]
 8014186:	f7f8 f918 	bl	800c3ba <_fstat>
 801418a:	1c43      	adds	r3, r0, #1
 801418c:	d102      	bne.n	8014194 <_fstat_r+0x1c>
 801418e:	6823      	ldr	r3, [r4, #0]
 8014190:	b103      	cbz	r3, 8014194 <_fstat_r+0x1c>
 8014192:	602b      	str	r3, [r5, #0]
 8014194:	bd38      	pop	{r3, r4, r5, pc}
 8014196:	bf00      	nop
 8014198:	200146ac 	.word	0x200146ac

0801419c <_isatty_r>:
 801419c:	b538      	push	{r3, r4, r5, lr}
 801419e:	4c06      	ldr	r4, [pc, #24]	; (80141b8 <_isatty_r+0x1c>)
 80141a0:	2300      	movs	r3, #0
 80141a2:	4605      	mov	r5, r0
 80141a4:	4608      	mov	r0, r1
 80141a6:	6023      	str	r3, [r4, #0]
 80141a8:	f7f8 f917 	bl	800c3da <_isatty>
 80141ac:	1c43      	adds	r3, r0, #1
 80141ae:	d102      	bne.n	80141b6 <_isatty_r+0x1a>
 80141b0:	6823      	ldr	r3, [r4, #0]
 80141b2:	b103      	cbz	r3, 80141b6 <_isatty_r+0x1a>
 80141b4:	602b      	str	r3, [r5, #0]
 80141b6:	bd38      	pop	{r3, r4, r5, pc}
 80141b8:	200146ac 	.word	0x200146ac

080141bc <_malloc_usable_size_r>:
 80141bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141c0:	1f18      	subs	r0, r3, #4
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	bfbc      	itt	lt
 80141c6:	580b      	ldrlt	r3, [r1, r0]
 80141c8:	18c0      	addlt	r0, r0, r3
 80141ca:	4770      	bx	lr

080141cc <roundf>:
 80141cc:	ee10 0a10 	vmov	r0, s0
 80141d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80141d4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80141d8:	2a16      	cmp	r2, #22
 80141da:	dc15      	bgt.n	8014208 <roundf+0x3c>
 80141dc:	2a00      	cmp	r2, #0
 80141de:	da08      	bge.n	80141f2 <roundf+0x26>
 80141e0:	3201      	adds	r2, #1
 80141e2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80141e6:	d101      	bne.n	80141ec <roundf+0x20>
 80141e8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80141ec:	ee00 3a10 	vmov	s0, r3
 80141f0:	4770      	bx	lr
 80141f2:	4908      	ldr	r1, [pc, #32]	; (8014214 <roundf+0x48>)
 80141f4:	4111      	asrs	r1, r2
 80141f6:	4208      	tst	r0, r1
 80141f8:	d0fa      	beq.n	80141f0 <roundf+0x24>
 80141fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80141fe:	4113      	asrs	r3, r2
 8014200:	4403      	add	r3, r0
 8014202:	ea23 0301 	bic.w	r3, r3, r1
 8014206:	e7f1      	b.n	80141ec <roundf+0x20>
 8014208:	2a80      	cmp	r2, #128	; 0x80
 801420a:	d1f1      	bne.n	80141f0 <roundf+0x24>
 801420c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop
 8014214:	007fffff 	.word	0x007fffff

08014218 <_init>:
 8014218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801421a:	bf00      	nop
 801421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801421e:	bc08      	pop	{r3}
 8014220:	469e      	mov	lr, r3
 8014222:	4770      	bx	lr

08014224 <_fini>:
 8014224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014226:	bf00      	nop
 8014228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801422a:	bc08      	pop	{r3}
 801422c:	469e      	mov	lr, r3
 801422e:	4770      	bx	lr
